{"root":"0:0:1827","crate_version":"1.1.0","includes_private":false,"index":{"b:2:2540-0:123:1670":{"id":"b:2:2540-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12024:314":{"id":"2:12024:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12025:27850","`u8`":"1:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:668":{"id":"0:30:668","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41512:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42450:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12063:1819":{"id":"2:12063:1819","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11715:2560","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11878:419","str::split_whitespace":"2:12041:30947","str::rsplit":"2:12069:27883"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43331:2147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2699:228-0:86:128":{"id":"a:2:2699:228-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5383:34806":{"id":"5:5383:34806","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2292","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7003:2806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2292","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7003:2806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-0:86:128":{"id":"0:35-0:86:128","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:86:128","glob":false}}},"0:66:1774":{"id":"0:66:1774","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:34142":{"id":"2:12087:34142","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:86:128":{"id":"b:2:2546-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12119:27889":{"id":"2:12119:27889","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3318:1485":{"id":"2:3318:1485","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39315:5948","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12072:34139":{"id":"2:12072:34139","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11715:2560","str::split":"2:12063:1819","prim@char":"1:11878:419","`DoubleEndedIterator`":"2:7243:121","str::rsplit_terminator":"2:12075:34140"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43381:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12013":{"id":"2:12013","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12014:811","2:12015:1818","2:12016:34132","2:12017:34133","2:12019:34134","2:12022:27685","2:12023:34135","2:12024:314","2:12025:27850","2:12026:27846","2:12028:27847","2:12030:27848","2:12032:27849","2:12034:34136","2:12035:34137","2:12036:27872","2:12037:27873","2:12038:1805","2:12039:6197","2:12040:5802","2:12041:30947","2:12042:30934","2:12043:1953","2:12044:34138","2:12045:30929","2:12046:1816","2:12049:1955","2:12052:27888","2:12055:1954","2:12059:2475","2:12063:1819","2:12066:27881","2:12069:27883","2:12072:34139","2:12075:34140","2:12078:1958","2:12081:27886","2:12084:34141","2:12087:34142","2:12090:2077","2:12093:34143","2:12096:34144","2:12099:34145","2:12102:1825","2:12104:34146","2:12106:34147","2:12108:34148","2:12109:34149","2:12110:34150","2:12113:34151","2:12116:24848","2:12119:27889","2:12122:34152","2:12125:34153","2:12128:34154","2:12131:1964","2:12133:27775","2:12134:27776","2:12135:27778","2:12136:27779","2:12137:27780","2:12138:34155","2:12140:7698","2:12141:34156"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63:1762":{"id":"0:63:1762","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1801":{"id":"0:75:1801","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2249-0:123:1670":{"id":"b:2:2249-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:24083"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:684-0:123:1670":{"id":"b:5:684-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2532","5:687:2533","5:688:2534"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:1777":{"id":"0:67:1777","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1795":{"id":"0:73:1795","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12032:27849":{"id":"2:12032:27849","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:601":{"id":"0:48:601","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:30929":{"id":"2:12045:30929","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43623:2561","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:7820-0:86:128":{"id":"a:2:8253:7820-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:7820","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12090:2077":{"id":"2:12090:2077","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11715:2560","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11878:419","str::matches":"2:12090:2077"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43535:2577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12028:27847":{"id":"2:12028:27847","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41370:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1804":{"id":"0:76:1804","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:1725":{"id":"0:57:1725","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:34141":{"id":"2:12084:34141","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:1767":{"id":"0:64:1767","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1790":{"id":"0:71:1790","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:27779":{"id":"2:12136:27779","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1783":{"id":"0:69:1783","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:395":{"id":"0:28:395","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2601:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12019:34134":{"id":"2:12019:34134","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12017:34133"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12140:7698":{"id":"2:12140:7698","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:7698"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43639:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:29065":{"id":"5:5402:29065","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12137:27780"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2610:2540":{"id":"2:2610:2540","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3379:6741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:34146":{"id":"2:12104:34146","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:688:2534":{"id":"5:688:2534","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:1786":{"id":"0:70:1786","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:24848":{"id":"2:12116:24848","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:27776":{"id":"2:12134:27776","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39526:27771","Self::is_ascii":"2:12133:27775"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39526:27771","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:34807":{"id":"5:5387:34807","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:1816":{"id":"2:12046:1816","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:27778":{"id":"2:12135:27778","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2246-0:86:128":{"id":"b:2:2246-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2062"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:668":{"id":"0:133:668","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12030:27848":{"id":"2:12030:27848","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1759":{"id":"0:62:1759","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:34145":{"id":"2:12099:34145","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11715:2560","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11878:419","str::match_indices":"2:12096:34144"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43499:2576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12075:34140":{"id":"2:12075:34140","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11715:2560","str::split":"2:12063:1819","prim@char":"1:11878:419","str::split_terminator":"2:12072:34139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43399:2582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:423":{"id":"0:131:423","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2249-0:86:128":{"id":"b:2:2249-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:24083"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:686:2532":{"id":"5:686:2532","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12044:34138":{"id":"2:12044:34138","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43595:2574","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3316-0:86:128":{"id":"b:2:3316-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12049:1955":{"id":"2:12049:1955","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:34149":{"id":"2:12109:34149","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2539:1708":{"id":"2:2539:1708","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2513:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:27775":{"id":"2:12133:27775","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2549:128":{"id":"2:2549:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:8252:7821-0:123:1670":{"id":"a:2:8252:7821-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:7821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8253:7820-0:123:1670":{"id":"a:2:8253:7820-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8253:7820","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:123:1670":{"id":"0:123:1670","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:2699:228-0:123:1670","a:2:8252:7821-0:123:1670","a:2:2739:2285-0:123:1670","a:2:8253:7820-0:123:1670","a:2:2682:220-0:123:1670","b:2:2246-0:123:1670","b:2:2536-0:123:1670","b:2:2551-0:123:1670","b:2:2249-0:123:1670","b:2:3316-0:123:1670","b:2:2546-0:123:1670","b:2:2540-0:123:1670","b:5:684-0:123:1670","0:132","0:130"]}}},"2:12037:27873":{"id":"2:12037:27873","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12036:27872"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:128":{"id":"0:86:128","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2699:228-0:86:128","a:2:8252:7821-0:86:128","a:2:2739:2285-0:86:128","a:2:8253:7820-0:86:128","a:2:2682:220-0:86:128","b:2:2246-0:86:128","b:2:2608-0:86:128","b:2:2536-0:86:128","b:2:2551-0:86:128","b:2:2249-0:86:128","b:2:3316-0:86:128","b:2:2546-0:86:128","b:2:2540-0:86:128","b:5:5643-0:86:128","0:88","0:26","0:29"]}}},"2:12113:34151":{"id":"2:12113:34151","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2536-0:86:128":{"id":"b:2:2536-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:1708"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12096:34144":{"id":"2:12096:34144","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11715:2560","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11878:419","str::rmatch_indices":"2:12099:34145"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43481:2575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12128:34154":{"id":"2:12128:34154","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12034:34136":{"id":"2:12034:34136","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11884:1395","str::slice_mut_unchecked":"2:12035:34137","crate::ops::Index":"2:2978:7730"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:34809":{"id":"5:5398:34809","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014:811":{"id":"2:12014:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11878:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","type_id","provide","description","source"],"trait":{"name":"Error","id":"2:2601:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1934","0:28:395"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:1798":{"id":"0:74:1798","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1827":{"id":"0:0:1827","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:35-0:86:128","0:123:1670","0:48:601","0:49:1683","0:50:1689","0:51:939"],"is_stripped":false}}},"2:12106:34147":{"id":"2:12106:34147","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2682:220-0:123:1670":{"id":"a:2:2682:220-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12026:27846":{"id":"2:12026:27846","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41370:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5643-0:86:128":{"id":"b:5:5643-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5641:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5645:1449"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:54:1700":{"id":"0:54:1700","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41512:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5067:191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:1825":{"id":"2:12102:1825","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2251:24083":{"id":"2:2251:24083","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3316-0:123:1670":{"id":"b:2:3316-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12122:34152":{"id":"2:12122:34152","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:34155":{"id":"2:12138:34155","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:34155"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43630:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:34806","5:5384:13223","5:5387:34807","5:5390:34808","5:5398:34809","5:5399:34810","5:5400:2168","5:5401:29064","5:5402:29065"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:49:1683":{"id":"0:49:1683","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:34132":{"id":"2:12016:34132","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:5802":{"id":"2:12040:5802","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43317:2146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12131:1964":{"id":"2:12131:1964","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11676:127","`FromStr`":"2:11675:2198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41512:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11675:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11675:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12055:1954":{"id":"2:12055:1954","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41370:179","prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:1805":{"id":"2:12038:1805","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11878:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43301:2567","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:6197":{"id":"2:12039:6197","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11878:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43307:2566","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:34810":{"id":"5:5399:34810","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:2292","`String`":"5:7254:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2292","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7003:2806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12069:27883":{"id":"2:12069:27883","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11715:2560","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11878:419","str::split":"2:12063:1819"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43349:2579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2551-0:86:128":{"id":"b:2:2551-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2540-0:86:128":{"id":"b:2:2540-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12110:34150":{"id":"2:12110:34150","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11740:2553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1781":{"id":"0:68:1781","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1934":{"id":"0:27:1934","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8252:7821-0:86:128":{"id":"a:2:8252:7821-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8252:7821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:2248:2062":{"id":"2:2248:2062","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2608-0:86:128":{"id":"b:2:2608-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2601:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3367:13023","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:2540"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"2:2550:1472":{"id":"2:2550:1472","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41512:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:939":{"id":"0:53:939","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41512:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2551-0:123:1670":{"id":"b:2:2551-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50:1689":{"id":"0:50:1689","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:27872":{"id":"2:12036:27872","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12037:27873"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:30947":{"id":"2:12041:30947","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12042:30934"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43605:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1730":{"id":"0:58:1730","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:27850":{"id":"2:12025:27850","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12052:27888":{"id":"2:12052:27888","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:34143":{"id":"2:12093:34143","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11715:2560","`DoubleEndedIterator`":"2:7243:121","prim@char":"1:11878:419","str::matches":"2:12090:2077"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43553:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:27780":{"id":"2:12137:27780","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:2168":{"id":"5:5400:2168","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1792":{"id":"0:72:1792","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:34133":{"id":"2:12017:34133","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:30934":{"id":"2:12042:30934","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12041:30947"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43614:2562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:34153":{"id":"2:12125:34153","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2246-0:123:1670":{"id":"b:2:2246-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2062"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:939","0:54:1700","0:57:1725","0:58:1730","0:62:1759","0:63:1762","0:64:1767","0:65:1772","0:66:1774","0:67:1777","0:68:1781","0:69:1783","0:70:1786","0:71:1790","0:72:1792","0:73:1795","0:74:1798","0:75:1801","0:76:1804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2542:694":{"id":"2:2542:694","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:687:2533":{"id":"5:687:2533","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:939":{"id":"0:51:939","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12059:2475":{"id":"2:12059:2475","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41370:179","prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41368:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12022:27685":{"id":"2:12022:27685","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11282:1943"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12066:27881":{"id":"2:12066:27881","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11538:2563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12081:27886":{"id":"2:12081:27886","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11878:419","str::splitn":"2:12078:1958","self::pattern":"2:11715:2560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43453:2580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11735:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:13223":{"id":"5:5384:13223","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:34135":{"id":"2:12023:34135","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:34808":{"id":"5:5390:34808","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:29064":{"id":"5:5401:29064","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12136:27779"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1772":{"id":"0:65:1772","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2699:228-0:123:1670":{"id":"a:2:2699:228-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2554:128":{"id":"2:2554:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32019:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12035:34137":{"id":"2:12035:34137","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11884:1395","crate::ops::IndexMut":"2:2982:7731","str::slice_unchecked":"2:12034:34136"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:34148":{"id":"2:12108:34148","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:668":{"id":"0:89:668","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2682:220-0:86:128":{"id":"a:2:2682:220-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2739:2285-0:86:128":{"id":"a:2:2739:2285-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12141:34156":{"id":"2:12141:34156","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:34156"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43648:2573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2739:2285-0:123:1670":{"id":"a:2:2739:2285-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2555:1471":{"id":"2:2555:1471","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41512:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5645:1449":{"id":"5:5645:1449","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:1958":{"id":"2:12078:1958","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11715:2560","str::rsplitn":"2:12081:27886"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43435:2581","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11720:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2546-0:123:1670":{"id":"b:2:2546-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2536-0:123:1670":{"id":"b:2:2536-0:123:1670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:1708"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12015:1818":{"id":"2:12015:1818","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:1953":{"id":"2:12043:1953","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43585:2143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:10689:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:1539:4869":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:21977:2549":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13249:3927":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:2502:4145":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:585:7697":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:47028:6327":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:7662:6355":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:7626:6698":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:45117:6235":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10527:20106":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:4811:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:1846:2669":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:11941:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4327:6800":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:8283:19987":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6776:5708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:1783:2652":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:30287:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:10206:6754":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:4335:2456":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7016:4412":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:7275:5755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2744:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:3117:2193":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:3207:2165":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:41368:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11222:6808":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:10719:25346":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2594:4149":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:638:2193":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:21082:2709":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:43499:2576":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:8718:3258":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:4207:2193":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:39332:4475":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:119:13627":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2161:13252":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:40382:6112":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10840:3391":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:41444:2480":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2982:7731":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5643:4229":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:40090:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3910:7752":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:46074:6285":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:47370:6334":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:10625:6850":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:3300:4189":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:6943:19934":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:386:6545":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:6980:2231":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9822:6583":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:42687:6173":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:9413:5826":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:41419:2479":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:40016:2572":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13461:3983":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:8256:4560":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:3899:4196":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"7:79:18917":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:39956:30724":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:4399:2987":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:4047:2600":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:755:3162":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:3124:4695":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:599:35055":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:247:6544":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:2802:4436":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"18:671:6542":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4682:7769":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:2214:2135":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:947:6712":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43585:2143":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4619:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2573:2149":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:32121:2596":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:45095:6234":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:20578:31486":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10068:6605":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1588:4900":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13698:4063":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6361:4314":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:32059:5938":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:1895:2536":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:13419:3974":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:4872:4213":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:5439:1665":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:5797:4246":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:355:6780":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:8678:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:3276:2945":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:12085:3607":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4383:5067":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:22523:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13145:3902":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4952:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5032:5347":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:9595:3027":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:2906:33800":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11888:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:1821:2662":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:579:4845":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:40251:6095":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:42141:2447":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4688:5172":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:6757:7832":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11207:6452":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:2116:5783":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:3354:2126":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12915:3832":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11319:3456":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"14:40:3443":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:1080:6722":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6990:4411":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:8788:3260":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:1422:6723":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:7168:13210":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5402:3256":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13159:3903":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:3934:2126":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9028:6557":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41965:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6685:5650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40651:6123":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:9350:35040":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:4624:4206":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3167:2163":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:3129:33516":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:2182:1659":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:2243:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7437:4477":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:43623:2561":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:8359:2554":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:42134:2445":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22457:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:41200:6132":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11721:3529":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6819:4388":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"11:675:6707":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:5531:5816":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:7443:5756":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11903:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5816:5433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:1009:6716":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:7252:5743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:9365:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:9152:2445":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:45496:6255":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:5035:2236":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1594:4697":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4757:5208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:9529:3024":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"9:325:4743":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:5000:4217":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:20767:31903":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:8072:2170":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11422:3472":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:4045:12966":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40341:6108":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2520:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:562:3403":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6351:19931":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:11902:1124":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:2298:19044":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:43184:5833":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10270:6609":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:20576:31483":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13385:3961":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:9866:6587":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10440:6618":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8745:2211":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7557:4484":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"0:0:1827":{"crate_id":0,"path":["autocfg"],"kind":"module"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:10261:2580":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8044:2174":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:41885:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:5563:3050":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:8979:35041":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:7690:2673":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:62:13573":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1609:4914":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12799:3739":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:41645:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:10289:6756":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:727:3157":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6327:4308":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3059:2173":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:43909:13002":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10862:2213":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4991:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:10026:6598":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5959:5516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:4436:2458":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:43943:2584":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43289:2570":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:40321:6106":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:1413:4693":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2613:2159":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:3169:2164":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:1048:4421":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:652:3121":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:2159:13251":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:8823:3261":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:2831:3047":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9933:3293":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:43481:2575":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:22424:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11136:3409":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2468:13068":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:8632:19975":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"0:50:1689":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"17:975:6547":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9523:6570":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:40031:13063":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:7258:5745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:39986:6083":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11615:3517":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5811:4247":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:21826:2545":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7641:7702":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9617:6573":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8261:5625":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13024:3873":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13488:3990":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6821:5730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:11729:2556":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:4137:2126":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:6605:5625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8151:2143":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:2912:33494":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11471:3479":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:44321:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11885:1475":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:5829:5442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6136:5574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:47436:6340":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:9145:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8890:2241":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:2310:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11483:6462":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:7177:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6400:4318":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:660:6538":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11012:2212":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9488:6567":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:2967:19071":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4773:5217":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:9577:3278":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4255:6799":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47489:6343":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8493:2195":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:361:6781":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2507:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:11464:6183":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:39353:5950":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13516:3998":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:1866:4695":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1242:6722":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:4144:5815":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11878:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13499:3991":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:4186:2455":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:21336:7849":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:41342:6149":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:80:23838":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4509:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:926:6708":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5305:4221":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:1565:2480":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43535:2577":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11785:3558":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:42872:6174":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:574:3121":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6218:6655":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:45247:6240":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10555:3348":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:2345:2691":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:12515:3038":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11355:3461":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2642:4151":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9498:3276":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:587:4850":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:41765:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6671:4360":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5809:5429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:10419:2161":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5719:2240":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:4680:7768":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2926:2288":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:20803:7846":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12634:3710":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:9110:1662":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:3833:1931":{"crate_id":1,"path":["std","num"],"kind":"module"},"2:9612:3028":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:3932:7754":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2830:4159":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6243:35037":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5963:4267":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:5779:5419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:8109:4551":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:10774:6757":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4527:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:6771:13205":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:4844:7805":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:10615:3361":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:595:4855":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11390:6797":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:46120:6286":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:41805:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4743:5202":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:7835:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:39254:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:6598:5621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:644:3121":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11011:3400":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11165:2218":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5724:4236":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:43895:6202":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:5385:1664":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:5785:5420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2448:4143":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:5383:2126":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:21664:5840":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43147:6774":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"11:1050:19005":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4124:7778":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:20593:31481":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:97:4685":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:5976:4124":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:3142:6555":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6935:6667":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6545:5592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43858:6201":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10721:3373":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:8753:3259":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11328:6795":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11060:3366":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13777:4084":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:2862:4160":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:39929:2572":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:4037:4197":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13659:4054":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6587:5616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:20878:13251":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:10459:3068":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:2149:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:21717:5841":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:43109:5829":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4559:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:9298:6751":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9138:6559":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:8420:19991":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:7224:2100":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"14:160:6703":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:46918:6326":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43229:5835":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:6293:2956":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:1540:6724":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6002:5532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4851:5253":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:4702:4207":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:1589:4696":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11532:3492":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6854:4392":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4546:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:40280:6099":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:1715:4985":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9038:35046":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:8598:19997":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:2169:33902":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:21106:2709":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44265:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13791:4091":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10857:20000":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:8121:2144":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10080:6606":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8239:6403":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:41263:6141":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4590:5163":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12923:3833":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:917:6723":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:3775:2956":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:7783:2707":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3972:7756":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:20759:7840":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12550:3699":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:6739:2998":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:6538:2251":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4813:5237":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13292:3935":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:11490:6462":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4609:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:2694:4153":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4307:5013":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:8915:6831":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2516:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:863:2964":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2931:19070":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:39190:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4898:5278":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:42407:4519":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:2240:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:11901:1547":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:1614:4916":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9959:3296":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:6332:6805":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:11000:2211":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43930:6207":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3209:2166":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:1665:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12646:3717":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:43831:6200":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5862:5455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:963:2956":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4857:5256":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5773:5416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3641:2480":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13194:3913":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:506:4800":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:2504:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:20728:7843":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"11:305:4689":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11258:3442":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:45195:6238":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13564:4035":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10125:3301":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:39150:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4845:5251":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:8573:19996":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5677:19927":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:10844:24835":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:0:1966":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11883:1365":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:22391:2548":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:2814:13236":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:10133:6753":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12072:3605":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11556:3494":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:618:2538":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:4167:2126":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43614:2562":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9372:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9566:6561":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:7591:2197":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4449:5101":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:45916:6268":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:7243:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5995:5531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:12545:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4318:5021":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:7934:6816":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:2693:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:41453:6154":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:2760:4434":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:45642:6259":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:5104:4220":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:42005:2237":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:8195:19976":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7042:4418":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:4413:7780":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40422:6116":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:41685:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:9998:24884":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:40673:2171":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:3585:4191":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:41436:2600":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:40270:6098":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:8310:19988":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:9078:6430":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7635:4488":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:11813:3565":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8212:6402":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6022:19930":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:6409:2250":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:2219:2196":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7237:2101":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2262:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:7805:2705":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:11142:3072":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:11844:24413":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:3379:6741":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:7525:3064":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:5570:3051":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:40692:6126":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:42377:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:12360:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:2524:4146":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6868:4394":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:47390:6336":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2699:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:8205:6401":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:44082:6220":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2848:13241":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10104:3299":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11088:6429":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4294:5004":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:541:4826":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:1532:4867":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4073:27229":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5071:4219":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:1873:4696":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12449:3679":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:47352:6333":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:7818:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:1564:4883":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8131:2145":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:2210:2688":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8979:24779":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2840:13239":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:40373:6111":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:783:2949":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:42669:2189":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:211:2954":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:8733:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3139:13243":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5900:5483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13612:4036":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:21899:30735":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:42395:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:6793:4387":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4920:5294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:23036:2542":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:1561:6725":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:47425:6339":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3246:2161":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13219:3921":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:21430:5839":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:11740:2553":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11305:3074":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13411:3971":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1668:4958":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:20908:7848":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6390:4317":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12194:3623":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10670:3368":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:840:6712":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:7164:13211":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:42432:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:6247:2981":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6981:6668":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:2357:4139":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:11268:6759":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6116:5560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:2764:4156":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:9156:2447":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:30231:5872":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4435:7781":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:43605:2564":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:7569:6353":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:0:1975":{"crate_id":17,"path":["object"],"kind":"module"},"16:8170:4553":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13678:4060":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:6366:2480":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:7788:2704":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:6445:2956":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:3998:6742":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9875:6145":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:7568:2709":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:40107:31772":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:421:18926":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10402:6612":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:7161:7714":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12980:3868":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:480:3040":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4932:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:690:3148":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:6800:5718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4416:5086":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11821:3567":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11653:3525":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:2087:6718":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:11032:6221":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:3676:6795":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:6085:3038":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9557:3283":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:11881:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:2720:4154":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:41725:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:7003:2806":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:2212:4701":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4459:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:242:6543":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6755:5694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:45526:6256":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:9964:2193":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:2204:35023":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2908:2148":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5346:4222":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:1879:4697":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:8443:19992":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:359:2943":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:5021:6801":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11069:6447":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:11484:3480":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:10316:3336":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:42632:6165":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:7214:2291":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:1525:4864":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9025:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:4914:2126":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11969:3592":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10303:6611":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3938:7755":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:7201:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:45815:6265":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9895:6592":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:707:2556":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:4764:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:42640:6167":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:7468:6854":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:9182:2668":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10142:20081":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11900:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40200:5833":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:5367:19042":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6553:5597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11410:3469":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:5471:2126":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5843:5453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4960:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:815:2962":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43239:6777":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:45548:6257":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:3324:2171":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:9627:3033":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:21331:7839":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:8957:6837":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4577:5640":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3448:30037":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:7544:5769":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:9098:6558":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:2736:2591":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:7485:5757":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:7279:6740":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12419:3673":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:757:2981":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:40667:6124":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:7334:2945":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:11024:25344":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4865:5261":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13821:4099":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5755:5403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5741:19928":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:44062:6215":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13453:3982":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7669:4181":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:6621:6805":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:2777:4435":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1443:6708":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:22358:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4890:5273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8867:7826":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:40412:6115":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:2060:4421":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:44338:6230":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"13:226:4684":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:7635:31473":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13506:3993":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:3314:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:7598:13209":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11193:3419":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11600:3511":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:20741:7844":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"6:4538:5144":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:5711:2981":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:6865:7376":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:744:4693":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:11735:2555":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8157:6822":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:40330:6107":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13121:3897":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12158:3617":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:3547:2600":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:45694:6261":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:43752:6195":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:119:2939":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6057:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:867:2480":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:590:3132":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:47410:6338":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:1908:14974":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5920:4263":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3367:13023":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"11:703:6708":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:1091:6720":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12224:3642":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8965:6425":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:8088:2141":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:474:4784":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12059:3604":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:46386:6291":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:9806:2709":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:4573:5636":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11897:1491":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11339:3457":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5015:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:40220:6766":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:4366:2126":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:859:6714":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:30301:30717":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2755:7830":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8100:2142":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7015:27223":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:43399:2582":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:665:2480":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:41495:13306":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:5686:2238":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:6133:6804":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4423:5090":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:30863:2434":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:44074:6218":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13135:3901":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1844:2668":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12033:3601":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:7043:33517":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:2404:4141":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:21853:5852":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:4258:6745":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:633:6726":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:867:6715":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12138:3614":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:3874:7751":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11770:3554":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:9095:6839":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:30271:5873":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4653:5168":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12894:3822":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6700:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:5235:2558":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12770:3719":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9443:6564":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12835:3770":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:39339:6765":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:43766:6198":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1709:4982":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10936:3397":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12046:3602":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7467:4478":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:40682:3022":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:8072:4545":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:8789:6828":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:399:35018":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:10354:3067":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:4932:4215":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:6373:2243":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:10052:6603":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:10223:24883":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:1561:2193":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:8683:3257":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:3749:4192":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"14:202:13003":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:3134:25325":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7543:4180":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11827:6857":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:7929:6815":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10699:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11372:3463":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:39972:6082":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:8334:2188":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:11369:6796":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6336:4309":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10516:3341":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5571:4167":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11520:3489":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:3673:2160":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5857:5454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13033:3874":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:11884:1395":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"9:481:18923":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:1404:4692":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:1572:2945":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:8283:6404":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4629:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13257:3929":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7366:19936":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:8651:3255":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:10644:6434":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:39944:6079":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:8389:19990":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"9:388:18925":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6024:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:991:4421":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:2359:2695":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:11896:1490":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:9154:2446":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10798:19999":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:2087:5781":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2808:4158":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:1978:6553":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:41428:2193":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8257:6826":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12622:3366":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:1042:33905":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:8214:4475":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11628:3521":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"14:187:19018":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6307:4163":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:4175:6798":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12388:3668":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8851:7824":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12236:3644":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"9:0:1968":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:844:2193":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:30040:2544":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4431:5092":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:5817:2236":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:42657:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6254:4303":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:3047:19072":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9512:6569":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:5370:2207":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9275:35045":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10705:3372":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:41571:2480":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:20937:7834":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:47399:6337":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:2378:4140":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:8909:2146":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:20921:2709":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12006:3596":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1568:2981":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"14:0:1972":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:45051:6232":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"0:51:939":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"2:30359:30740":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:21560:7837":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:22259:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:7077:19935":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:2549:3028":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:4575:5638":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:7256:24416":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:6668:5645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8466:2192":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:43639:2572":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:22226:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:7568:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:8156:4184":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:39346:2456":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"11:393:35022":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:39315:5948":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:39049:2602":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5935:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10491:6622":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:21878:30739":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:41283:31773":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:2077:2974":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:40447:6119":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:2809:13235":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9772:3288":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:47527:6345":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1576:4892":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:4757:4209":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:4327:4198":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:43737:6189":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:47168:6329":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:547:4829":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4392:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11877:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"0:48:601":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"18:609:6537":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:40289:6101":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2476:2156":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:8846:32603":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:7149:2196":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12259:3653":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6890:4174":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:7592:6354":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:47276:6331":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7803:4500":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:5293:1395":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"5:3158:4694":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4667:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:4853:7806":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:7667:6356":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13015:3869":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:635:6783":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:20868:7841":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:265:2956":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:45141:6236":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:2905:2532":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:45296:6242":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:279:4686":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:582:2434":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:2819:13237":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4331:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9409:20009":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13625:4042":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:21861:5853":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:10168:2579":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"0:123:1670":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"16:2616:4150":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:7594:2601":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9826:6584":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1752:4997":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:6101:3056":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:21786:5843":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8168:7747":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13812:4097":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"9:445:18924":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:2192:4698":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3382:2134":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2315:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:8673:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9839:6585":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7411:4271":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:12600:7722":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"18:521:23851":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2467:2709":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:500:4797":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:9120:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8922:24824":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:5051:5361":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2923:2287":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:3622:2956":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:8521:19994":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13399:3968":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7498:4482":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11240:6455":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:43197:6775":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:43920:6203":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:4902:7812":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:42891:6176":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11282:3443":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13082:3888":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:10649:6436":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:1432:6707":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:9035:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11641:3522":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9596:3280":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4439:5095":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12563:3700":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:5058:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:11894:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7449:6690":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:482:4789":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:7244:35038":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:3640:3169":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6767:4386":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5022:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5947:5509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4911:5288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:2797:13234":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4751:5206":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:20983:7836":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11902:3579":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2361:2696":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5077:5372":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:7532:5767":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4784:5225":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11069:20002":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10626:3362":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:7018:5797":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:20595:31485":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:39526:27771":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:9265:6561":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:880:2193":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4499:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11879:3576":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:45348:6244":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:564:3131":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:4005:2956":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:652:2600":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:8090:4548":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:41845:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6651:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13689:4061":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"15:180:19024":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:8858:3262":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1519:4861":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"9:234:2189":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10465:6620":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:8129:6699":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2205:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:7578:5776":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:2546:4147":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:8025:4541":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:13356:3953":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12607:3707":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:5641:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6506:4331":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:7694:6763":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:40242:6094":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5717:5376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12345:3662":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:1078:33903":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7317:35036":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:13842:4102":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10649:3364":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:6544:4171":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:501:2974":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:40076:6091":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:7778:2706":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:10275:6755":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9545:3250":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:643:7700":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:1924:2537":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:1947:6550":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:6485:2247":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:45225:6239":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5747:5401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6110:5559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12461:3681":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22325:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:2198:4699":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:5797:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6814:5727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8144:2147":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:3131:25327":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6558:4335":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:4596:4205":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11299:3446":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9917:1667":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:21442:31357":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4999:5334":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7012:2480":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7743:4170":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:10311:2210":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11832:3570":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:2919:2286":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:2346:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:6691:5652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:21113:7842":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6474:4183":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46310:6289":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6431:4321":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:1197:4421":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:9164:2450":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:5798:5421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"7:0:1537":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5386:3255":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6236:6663":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:3986:7758":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13477:3986":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:42423:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:21838:31781":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"11:828:7715":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:20769:13251":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:7939:1933":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:2789:13233":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:7194:2102":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4947:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:6764:3011":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4472:5109":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10569:3353":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:2587:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:0:1387":{"crate_id":1,"path":["std"],"kind":"module"},"17:11220:3427":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:42450:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2690:2589":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:3184:4697":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2513:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:21951:2546":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:9162:2449":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11892:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:4010:6743":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:7506:3062":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:6588:2488":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:3975:2981":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:6597:3006":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:7503:5760":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:1716:2945":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:0:1974":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9178:6560":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7259:6154":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6848:5736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:30465:30721":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:46420:6292":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7230:5742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13101:3889":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6628:5643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8727:2210":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13857:4103":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1728:4989":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:21965:1940":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10428:6617":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:8548:19995":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:42472:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:11891:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:554:4832":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4797:5230":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:6179:2998":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:3781:6797":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10967:3398":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:44363:6231":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:6920:2170":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5870:5460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:530:3041":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:10823:4763":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4521:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:40658:2242":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:7497:5759":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:32055:6763":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10598:3398":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:3266:6556":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:9228:35042":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2682:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:7065:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7065:4420":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:7613:3068":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:30265:5805":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:40433:2145":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:22589:2547":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:2668:4152":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8482:2194":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11993:3593":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:39996:6084":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13240:3926":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"9:502:4766":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12178:3618":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5594:4169":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:11882:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:20981:2709":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"11:1634:2950":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43435:2581":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:9469:6565":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:44350:4704":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7029:4415":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11234:6454":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:4507:7798":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10928:3069":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:42648:6168":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:1228:6716":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11849:7704":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5032:4218":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:554:6782":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:47451:6341":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:5589:5818":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:930:6709":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11051:2711":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4553:5151":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3179:31256":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2739:2285":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:9734:6582":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:9384:3066":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:9148:35047":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:6724:30928":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6830:5733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:49372:7852":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"11:1843:2480":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:7208:31772":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13332:3946":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4478:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"11:1071:35017":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6662:4359":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:816:6723":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:2337:4133":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6132:4296":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:40008:2573":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:1700:4976":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5065:5367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:43118:5830":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:857:2600":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:4263:6746":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4732:5195":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4759:7765":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:7102:2480":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:3225:4188":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6442:4322":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:5239:2559":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6724:5668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7488:4481":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:8256:19974":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:488:4792":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9641:6575":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8909:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10819:2673":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:719:3154":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11234:3428":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:21915:30745":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:1839:2193":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:21770:5842":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12372:3666":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9108:35044":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:280:2292":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10691:20107":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11090:3405":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13865:4106":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7697:4172":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4571:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:8253:7820":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8223:6825":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40398:3142":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3194:12967":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7596:19937":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:8180:19940":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:5847:4254":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7293:4458":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:7254:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4836:5245":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4344:5041":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9218:3283":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11544:3493":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12282:3654":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:44138:13353":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8384:2189":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10000:3379":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:2386:1660":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:3439:1662":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13639:4048":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:3160:13041":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:9380:20008":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:2572:4148":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8781:2193":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:2908:5786":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:9030:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:6482:2246":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:7335:35039":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:2929:2289":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:7587:6809":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:10832:1665":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11434:3473":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:24:610":{"crate_id":2,"path":["core","env"],"kind":"macro"},"16:4904:4214":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:11282:1943":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13265:3931":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:43963:2585":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:624:35054":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12358:3663":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8217:7779":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:43058:6772":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:7268:5803":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:6009:3052":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:1062:6716":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10681:3369":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:44300:6778":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13211:3918":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:8316:7816":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6535:2938":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11109:3408":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10635:3363":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:2750:7828":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:1463:6729":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:1382:2480":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:6876:4173":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:47106:6328":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:7057:2480":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:11899:1489":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:55:4532":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:10807:6758":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:9158:2448":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3679:6796":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4980:5326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:12311:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:6096:7926":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:41555:2193":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:6607:3008":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:11800:3563":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:1692:4975":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:7538:5768":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:10709:2141":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:46776:6325":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:1754:5810":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:731:4692":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:676:7701":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13433:3976":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11891:3578":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:8424:2191":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8803:6421":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8904:6829":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:9748:3283":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:42367:6156":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:14:2080":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6179:6637":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11585:3505":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:2207:2687":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4941:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:4371:5064":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7035:2968":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2844:13240":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:6578:2994":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:5907:2126":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13803:4093":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41925:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10416:6616":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"0:49:1683":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"1:1583:4695":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:10048:6842":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:43648:2573":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:11538:2563":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:41319:6401":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:2352:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:8360:19989":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41217:6134":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:901:2981":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:1914:5814":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10015:6597":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:44105:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:22292:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:526:4817":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6919:35035":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:515:3124":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:1034:6548":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13376:3960":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:41967:1666":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"2:43349:2579":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:1919:20039":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:2076:6716":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4288:5003":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"9:174:18990":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:40298:6102":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13443:3979":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:653:13984":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:5693:2239":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:2746:2595":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:4638:7807":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:562:4837":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:11893:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"11:1524:19006":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5557:4164":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:41234:7748":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:45326:6243":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:3231:12968":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:42127:2446":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11163:3415":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:6677:13213":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:44050:6212":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"10:44:4706":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:7205:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:10056:2563":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12902:3825":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:531:3126":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:41306:6148":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6904:4396":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:1612:2956":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:1594:4902":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:42887:6175":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:20563:31353":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8407:2190":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"13:0:1965":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:959:6715":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6321:6666":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:43127:6773":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3128:30256":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7351:3001":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:40229:2144":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:7529:4179":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9986:3298":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:9150:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:12318:3659":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10761:19998":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"18:113:23840":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1577:4694":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:1745:5808":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:41354:6150":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:573:4842":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:3464:2139":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:6552:2252":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5655:4168":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:3872:4195":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:1628:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4492:5120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:766:23850":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8773:2213":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13651:4051":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:7526:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2830:4441":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2785:7831":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:60:35021":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11924:3586":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:11715:2560":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:40137:2104":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"6:1514:4859":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:47230:6330":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43381:2583":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44257:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13744:4077":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5071:5369":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:11786:12995":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4563:7755":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6575:19932":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10823:3227":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:7073:5798":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:736:23849":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:123:13628":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:2692:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10478:6621":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:922:6707":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:11720:2554":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:4111:7777":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4398:5074":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13053:3880":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4789:4210":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:0:1970":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:3815:4194":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:9117:25475":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:10247:2581":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:9876:3206":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:8142:6702":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:47474:6342":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"9:52:18942":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:1787:6549":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11502:3488":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:30835:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:532:4820":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:8667:3256":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6520:4333":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:1852:2945":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:487:6546":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"15:198:19025":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:45385:6246":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4827:5242":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:44247:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10923:3395":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13667:4055":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5974:5518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9796:3290":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:43210:5834":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7588:6697":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3614:7749":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7851:2158":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12098:3609":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"11:326:2941":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:7795:2708":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11459:3478":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:2781:7829":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13233:3924":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4821:5241":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22490:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:1213:6718":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4970:5325":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2793:13232":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:7843:6814":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:43453:2580":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:7757:4492":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:1544:2126":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9696:3276":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10334:3283":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6696:19933":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:11675:2198":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:3994:7760":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12019:3306":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4095:7775":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:1682:4969":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:2742:4155":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2824:4440":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4790:5228":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:39088:12970":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9340:6563":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:13763:4082":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2470:4144":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:875:4692":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:7859:2160":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:11890:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:5334:2205":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10660:3366":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10743:6625":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10897:3394":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:12333:33089":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4698:5179":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:3150:4696":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:481:3119":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:12385:6761":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:45265:6241":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:44066:6216":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5967:5517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1847:2981":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:46150:6287":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6016:5537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:4678:7766":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:5320:2204":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:3076:7732":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:3163:33506":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:40644:6122":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44308:6227":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:8252:7821":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:46356:6290":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:41486:6767":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12510:3694":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12536:3696":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13879:4109":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12959:3863":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13344:3952":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:936:7715":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6728:4373":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11946:3587":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8163:6824":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:2853:13242":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:40461:6120":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43630:2571":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:6369:2242":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:4818:4211":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4480:4201":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4728:4208":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10679:2708":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:4641:7780":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5910:3050":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:1635:5807":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:21115:5837":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:911:2945":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:4409:2281":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:20840:7847":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:45740:6263":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:1888:1658":{"crate_id":1,"path":["std","error"],"kind":"module"},"14:215:4635":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:41563:2600":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"13:110:35024":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6008:5535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10039:6601":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:8841:31472":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:20535:2434":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:11427:6180":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:11678:3078":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40043:6086":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45163:6237":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13066:3885":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7509:4178":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"10:0:1969":{"crate_id":10,"path":["adler"],"kind":"module"},"1:5764:2249":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:2916:33493":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2742:2593":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:6717:4372":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:40700:6128":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:2539:2157":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:40057:13064":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:8476:2193":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"18:699:3149":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:5485:2994":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:614:35056":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6706:5657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:768:2945":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:45403:6247":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:47314:6332":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:5616:4225":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"12:0:1971":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10545:3346":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40095:2103":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:44078:6219":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9853:6586":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:4380:3016":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:1731:13262":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11844:3572":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12331:3661":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:1721:4986":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:9946:3295":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10206:1664":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:6061:19043":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:3063:3165":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:40260:6096":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:12298:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:2978:7730":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:41605:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:1736:4993":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:8953:3265":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:20548:31353":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:11860:25343":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2689:2284":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12433:3675":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:41512:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:3251:1661":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"6:6047:5546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:5944:6630":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"14:7:6703":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11391:3468":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3248:2162":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:8931:3264":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2343:1711":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:1058:33799":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3880:7750":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:43275:1941":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9979:2662":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:40363:6110":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:154:2936":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:21003:5837":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5708:4234":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12592:3703":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:4845:4212":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11446:6457":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1071:6718":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:46232:6288":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:21087:7835":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11037:20001":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2510:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9816:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4726:5192":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:2771:13231":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:494:4795":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:4389:2457":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4803:5233":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:3534:2193":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10939:3070":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:11503:6185":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:7711:4490":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:40350:6109":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:11889:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11895:1493":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:7094:2480":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10735:3376":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9907:3291":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:4732:668":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:7103:6425":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12307:3658":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4707:5184":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:2786:4157":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10885:3393":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:47504:6344":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:1859:4694":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:39166:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:12293:3656":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:4540:4203":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:39210:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:2933:6554":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"15:219:19029":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:9188:35048":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:638:6785":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:953:6714":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:39276:7708":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2868:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8822:6422":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:39935:6078":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6785:5711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8138:2146":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:0:1976":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:39308:6764":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:32:18910":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:4103:7776":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9312:6562":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:47566:6346":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:568:4840":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:25846:2543":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:4336:2987":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:1819:5813":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"10:36:4705":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:1144:6722":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40180:2117":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:9408:13073":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:47379:6335":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7478:4177":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:491:3120":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10505:6623":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:420:3213":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:43595:2574":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:10095:6752":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:7266:2290":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:44058:6214":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:507:3121":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:5833:13547":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:2836:13238":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10452:6619":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:3291:2153":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13367:3957":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13426:3975":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10712:20108":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:3446:4190":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:44070:6217":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9453:20010":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:6569:5609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11876:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4568:4204":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:45596:6258":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:43307:2566":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1351:2193":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13169:3904":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:40123:6092":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10257:6608":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7767:19938":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4486:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:21944:5864":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:45718:6262":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3457:2137":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13181:3907":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:9373:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:42679:6172":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:7027:2981":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11192:6451":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:45672:6260":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:7509:5761":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:4785:33398":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:21558:2709":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:21802:5847":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6907:3060":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8079:2172":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:8047:4542":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10989:3346":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:5502:2209":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10667:6442":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:20989:7838":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:10413:2163":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:10945:3071":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:535:4121":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4377:5065":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:10013:2147":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43317:2146":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12403:3672":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:41177:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:4736:3048":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13309:3943":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:3782:4193":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:7674:2672":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:1785:2653":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43219:6776":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13721:4076":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:821:6709":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"14:221:4637":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:2704:2460":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:2636:5793":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:1657:4950":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:6188:3050":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5418:4223":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:5880:5467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7859:19939":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12522:3695":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:9424:3273":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41504:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:2407:5790":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9068:35049":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6488:4323":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:40312:6105":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2765:4431":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:5354:2206":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10377:3339":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44086:6221":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:45893:6267":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:7520:5765":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:2905:4162":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:40050:6087":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2866:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:9670:6579":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5998:19929":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1555:4877":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:43715:13001":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:43137:5832":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:9040:6429":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:7491:5758":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:45366:6245":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:9534:6571":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9973:3297":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11879:1509":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:9988:2600":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:9683:6580":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11159:6448":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:5886:4257":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:3030:4185":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:2426:4142":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6151:5585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11861:3575":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:5191:2956":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8835:7825":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8759:2212":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11458:6458":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:45862:6266":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:2694:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"18:538:3129":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7519:4483":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13041:3875":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6293:4306":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7837:4504":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11446:3476":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11898:1492":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:8254:6749":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13324:3945":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:43301:2567":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13316:3944":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:44126:6224":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:1126:6721":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1622:4921":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:1995:6730":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:46570:6293":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2371:2701":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:5499:2208":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:4325:3015":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:10654:2704":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2601:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:45996:6269":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7572:35034":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8952:6836":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:35:2952":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5693:4231":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1035:6718":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:7457:3403":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:9379:2707":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"2:43331:2147":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:7321:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6201:6652":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8797:2480":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:4510:4202":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3166:13040":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:42148:2448":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:12504:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"18:636:3144":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4404:5077":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:9628:6574":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:5990:5819":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:783:2959":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3982:7757":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4990:6801":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4113:6744":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12496:3693":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4875:5267":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9322:35043":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:888:4693":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6460:4166":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:43783:6199":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4719:5191":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:11252:13313":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10589:3358":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:10135:2216":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7683:4182":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12576:3701":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22556:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:6578:5615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10580:3357":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40024:2571":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:3507:2981":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:1546:4872":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2960:12969":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:1366:2600":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"8:0:1967":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"14:165:19011":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:9478:6566":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12126:3613":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4400:4199":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11573:3502":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"9:352:18939":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:11487:6184":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5630:6628":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:681:3145":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4767:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9000:6428":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8231:6822":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:43553:2578":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2879:4161":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4466:5107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"15:0:1973":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13469:3985":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:12113:3612":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:44054:6213":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"14:31:6703":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10092:6607":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:1981:2160":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:45071:6233":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:3688:6730":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:7656:7703":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:43158:6177":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:41580:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10283:3333":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:9059:2711":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:7555:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:4445:4200":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10354:3338":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:45450:6248":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:5779:4242":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10416:2165":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:96:23839":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9886:6589":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:4969:4216":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6164:4301":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:8945:6835":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:8490:19993":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:4605:13057":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:39135:5942":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3924:7753":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:32019:2214":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"11:2157:18999":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:39232:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:9721:6581":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4641:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:40170:2118":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:3400:2136":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:2319:4131":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12483:3692":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:3753:2945":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:45764:6264":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:9109:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:4681:5170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:9160:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5988:5529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1650:4946":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9653:6576":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:2189:5789":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6376:4165":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}