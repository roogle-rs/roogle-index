{"root":"0:0:1889","crate_version":"1.1.0","includes_private":false,"index":{"2:12355:1868":{"id":"2:12355:1868","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43330:2639","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2828:2347-0:86:128":{"id":"a:2:2828:2347-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2828:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12450:26361":{"id":"2:12450:26361","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:31523":{"id":"2:12361:31523","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43624:2646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:31530":{"id":"2:12416:31530","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12032:2632","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::match_indices":"2:12413:31529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43528:2648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12401:31526":{"id":"2:12401:31526","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:26564":{"id":"2:12353:26564","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12354:26565"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-0:86:128":{"id":"0:35-0:86:128","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:86:128","glob":false}}},"2:12445:31539":{"id":"2:12445:31539","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2562-0:123:1733":{"id":"b:2:2562-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12340:31520":{"id":"2:12340:31520","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:31532":{"id":"2:12423:31532","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1844":{"id":"0:68:1844","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12366:2026":{"id":"2:12366:2026","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:689":{"id":"0:133:689","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2572-0:123:1733":{"id":"b:2:2572-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2575:128","2:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5514:32198":{"id":"5:5514:32198","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:2606":{"id":"5:683:2606","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:31527":{"id":"2:12404:31527","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:836":{"id":"2:12331:836","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12038:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:403":{"id":"0:28:403","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2624:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12333:31517":{"id":"2:12333:31517","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:26542":{"id":"2:12349:26542","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:31531":{"id":"2:12421:31531","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1733":{"id":"0:123:1733","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:8557:7929-0:123:1733","a:2:2771:223-0:123:1733","a:2:2828:2347-0:123:1733","a:2:2788:231-0:123:1733","a:2:8556:7814-0:123:1733","b:2:2562-0:123:1733","b:2:2259-0:123:1733","b:2:2577-0:123:1733","b:2:3407-0:123:1733","b:2:2566-0:123:1733","b:2:2572-0:123:1733","b:2:2256-0:123:1733","b:5:680-0:123:1733","0:132","0:130"]}}},"a:2:8556:7814-0:86:128":{"id":"a:2:8556:7814-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8556:7814","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:5:5771-0:86:128":{"id":"b:5:5771-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9466:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5773:1506"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:1825":{"id":"0:63:1825","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12342:319":{"id":"2:12342:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:5917":{"id":"2:12357:5917","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43346:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:31537":{"id":"2:12439:31537","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:13323":{"id":"5:5511:13323","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:31535":{"id":"2:12427:31535","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12057:2625","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:2547":{"id":"2:12376:2547","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:32197","5:5511:13323","5:5514:32198","5:5517:32199","5:5525:32200","5:5526:32201","5:5527:2238","5:5528:26360","5:5529:26359"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5510:32197":{"id":"5:5510:32197","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2354","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2354","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:31522":{"id":"2:12352:31522","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12044:1448","crate::ops::IndexMut":"2:3072:7840","str::slice_unchecked":"2:12351:31521"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:30191":{"id":"2:12362:30191","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43652:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3407-0:123:1733":{"id":"b:2:3407-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12339:25841":{"id":"2:12339:25841","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11592:2014"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2565:1771":{"id":"2:2565:1771","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2539:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:964":{"id":"0:53:964","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:26541":{"id":"2:12347:26541","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:26575":{"id":"2:12386:26575","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12032:2632","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split":"2:12380:1881"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43378:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1858":{"id":"0:73:1858","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:26359":{"id":"5:5529:26359","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12454:26357"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:7806":{"id":"2:12457:7806","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4556:7806"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43668:2644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:86:128":{"id":"b:2:2566-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8557:7929-0:86:128":{"id":"a:2:8557:7929-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8557:7929","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:1849":{"id":"0:70:1849","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12398:26578":{"id":"2:12398:26578","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12038:428","str::splitn":"2:12395:2029","self::pattern":"2:12032:2632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43482:2652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1822":{"id":"0:62:1822","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2771:223-0:123:1733":{"id":"a:2:2771:223-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:89:689":{"id":"0:89:689","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9417:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:26581":{"id":"2:12436:26581","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:128":{"id":"0:86:128","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:8557:7929-0:86:128","a:2:2771:223-0:86:128","a:2:2828:2347-0:86:128","a:2:2788:231-0:86:128","a:2:8556:7814-0:86:128","b:2:2562-0:86:128","b:2:2259-0:86:128","b:2:2577-0:86:128","b:2:3407-0:86:128","b:2:2566-0:86:128","b:2:2572-0:86:128","b:2:2256-0:86:128","b:5:5771-0:86:128","0:26","0:29","0:88"]}}},"2:12392:31525":{"id":"2:12392:31525","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12032:2632","str::split":"2:12380:1881","prim@char":"1:12038:428","str::split_terminator":"2:12389:31524"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43428:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2572-0:86:128":{"id":"b:2:2572-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2542:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2575:128","2:2576:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2788:231-0:86:128":{"id":"a:2:2788:231-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9461:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5525:32200":{"id":"5:5525:32200","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:2607":{"id":"5:684:2607","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2580:128":{"id":"2:2580:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31903:2283","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:682:2605":{"id":"5:682:2605","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12452:26362":{"id":"2:12452:26362","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2568:715":{"id":"2:2568:715","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","description","source","type_id","cause"],"trait":{"name":"Error","id":"2:2624:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2005","0:28:403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:30:689":{"id":"0:30:689","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9436:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42473:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:86:128":{"id":"b:2:2577-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:128","2:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12341:320":{"id":"2:12341:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12342:319","`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:1878":{"id":"2:12363:1878","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2566-0:123:1733":{"id":"b:2:2566-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12425:31533":{"id":"2:12425:31533","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9466:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5526:32201":{"id":"5:5526:32201","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2354","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2354","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2562-0:86:128":{"id":"b:2:2562-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2539:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12407:2146":{"id":"2:12407:2146","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12032:2632","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatches":"2:12410:31528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43564:2649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:86:128":{"id":"b:2:2256-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2132"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:1840":{"id":"0:67:1840","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2005":{"id":"0:27:2005","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8557:7929-0:123:1733":{"id":"a:2:8557:7929-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8557:7929","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2581:1528":{"id":"2:2581:1528","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3409:1542":{"id":"2:3409:1542","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39245:6066","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5773:1506":{"id":"5:5773:1506","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1835":{"id":"0:65:1835","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:123:1733":{"id":"b:2:2256-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2250:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:2132"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2259-0:86:128":{"id":"b:2:2259-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2261:24141"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:131:432":{"id":"0:131:432","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1746":{"id":"0:49:1746","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1752":{"id":"0:50:1752","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:1880":{"id":"2:12332:1880","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:30185":{"id":"2:12359:30185","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12358:30172"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43643:2634","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2828:2347-0:123:1733":{"id":"a:2:2828:2347-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2828:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:74:1861":{"id":"0:74:1861","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:26539":{"id":"2:12343:26539","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1867":{"id":"0:76:1867","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12395:2029":{"id":"2:12395:2029","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632","str::rsplitn":"2:12398:26578"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43464:2653","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:31529":{"id":"2:12413:31529","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12032:2632","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatch_indices":"2:12416:31530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43510:2647","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:26357":{"id":"2:12454:26357","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1793":{"id":"0:58:1793","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12448:2035":{"id":"2:12448:2035","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11993:127","`FromStr`":"2:11992:2267"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11992:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11992:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330":{"id":"2:12330","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12331:836","2:12332:1880","2:12333:31517","2:12334:31518","2:12336:31519","2:12339:25841","2:12340:31520","2:12341:320","2:12342:319","2:12343:26539","2:12345:26540","2:12347:26541","2:12349:26542","2:12351:31521","2:12352:31522","2:12353:26564","2:12354:26565","2:12355:1868","2:12356:6315","2:12357:5917","2:12358:30172","2:12359:30185","2:12360:2024","2:12361:31523","2:12362:30191","2:12363:1878","2:12366:2026","2:12369:26580","2:12372:2025","2:12376:2547","2:12380:1881","2:12383:26573","2:12386:26575","2:12389:31524","2:12392:31525","2:12395:2029","2:12398:26578","2:12401:31526","2:12404:31527","2:12407:2146","2:12410:31528","2:12413:31529","2:12416:31530","2:12419:1887","2:12421:31531","2:12423:31532","2:12425:31533","2:12426:31534","2:12427:31535","2:12430:31536","2:12433:25554","2:12436:26581","2:12439:31537","2:12442:31538","2:12445:31539","2:12448:2035","2:12450:26361","2:12451:27676","2:12452:26362","2:12453:26358","2:12454:26357","2:12455:31540","2:12457:7806","2:12458:31541"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5517:32199":{"id":"5:5517:32199","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1853":{"id":"0:71:1853","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:30172":{"id":"2:12358:30172","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12359:30185"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43634:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:27676":{"id":"2:12451:27676","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39432:26521","Self::is_ascii":"2:12450:26361"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39432:26521","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1846":{"id":"0:69:1846","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1864":{"id":"0:75:1864","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2788:231-0:123:1733":{"id":"a:2:2788:231-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2788:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12433:25554":{"id":"2:12433:25554","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8556:7814-0:123:1733":{"id":"a:2:8556:7814-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8556:7814","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12334:31518":{"id":"2:12334:31518","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2261:24141":{"id":"2:2261:24141","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:964":{"id":"0:51:964","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2259-0:123:1733":{"id":"b:2:2259-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2253:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2261:24141"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2577-0:123:1733":{"id":"b:2:2577-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2536:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:128","2:2581:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12372:2025":{"id":"2:12372:2025","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:26573":{"id":"2:12383:26573","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11848:2635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1788":{"id":"0:57:1788","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12389:31524":{"id":"2:12389:31524","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12032:2632","str::split":"2:12380:1881","prim@char":"1:12038:428","`DoubleEndedIterator`":"2:7472:121","str::rsplit_terminator":"2:12392:31525"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43410:2655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2258:2132":{"id":"2:2258:2132","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12351:31521":{"id":"2:12351:31521","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12044:1448","str::slice_mut_unchecked":"2:12352:31522","crate::ops::Index":"2:3068:7839"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:1887":{"id":"2:12419:1887","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:26358":{"id":"2:12453:26358","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12458:31541":{"id":"2:12458:31541","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4553:31541"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43677:2645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:26360":{"id":"5:5528:26360","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12453:26358"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:964","0:54:1763","0:57:1788","0:58:1793","0:62:1822","0:63:1825","0:64:1830","0:65:1835","0:66:1837","0:67:1840","0:68:1844","0:69:1846","0:70:1849","0:71:1853","0:72:1855","0:73:1858","0:74:1861","0:75:1864","0:76:1867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1889":{"id":"0:0:1889","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:35-0:86:128","0:123:1733","0:48:619","0:49:1746","0:50:1752","0:51:964"],"is_stripped":false}}},"b:2:3407-0:86:128":{"id":"b:2:3407-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2778:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3405:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3409:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12345:26540":{"id":"2:12345:26540","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:1830":{"id":"0:64:1830","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2238":{"id":"5:5527:2238","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2575:128":{"id":"2:2575:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12380:1881":{"id":"2:12380:1881","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12032:2632","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split_whitespace":"2:12358:30172","str::rsplit":"2:12386:26575"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43360:2217","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2576:1529":{"id":"2:2576:1529","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2546:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:123:1733":{"id":"b:5:680-0:123:1733","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2272:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2605","5:683:2606","5:684:2607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12430:31536":{"id":"2:12430:31536","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:1763":{"id":"0:54:1763","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2536:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5131:193","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:619":{"id":"0:48:619","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1837":{"id":"0:66:1837","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1855":{"id":"0:72:1855","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:31538":{"id":"2:12442:31538","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12455:31540":{"id":"2:12455:31540","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4555:31540"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43659:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:31528":{"id":"2:12410:31528","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12032:2632","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::matches":"2:12407:2146"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43582:2650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:6315":{"id":"2:12356:6315","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43336:2638","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354:26565":{"id":"2:12354:26565","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12353:26564"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:31534":{"id":"2:12426:31534","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2771:223-0:86:128":{"id":"a:2:2771:223-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2771:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12360:2024":{"id":"2:12360:2024","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43614:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12336:31519":{"id":"2:12336:31519","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12334:31518"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:26580":{"id":"2:12369:26580","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:2632"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:2627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:10557:2653":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:41636:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:12051:764":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:3212:4804":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:44079:6331":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12970:3769":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"7:79:19048":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:504:6653":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:43258:5953":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:481:3203":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:5121:4326":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:40027:2172":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4306:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4889:5383":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:22056:5959":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:2782:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11815:3525":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:13838:4013":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6083:19180":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2855:4539":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:207:3021":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:43659:2643":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12043:1418":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:587:4962":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6844:4496":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:14013:4059":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:43744:13107":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:41594:2672":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:7287:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2499:2226":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7683:3136":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12959:3768":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:41247:6252":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"9:393:19056":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1702:5098":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:42895:6292":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:1709:5101":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12945:3766":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:43652:2633":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:11084:6866":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:43959:6326":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:2168:4808":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:4196:2527":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:7525:2352":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9019:6944":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:7261:5913":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13422:3829":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:1858:4807":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:44294:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:4613:4311":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:43781:6313":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:7913:6923":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:7430:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7436:4378":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3797:4299":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:40704:3091":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11490:3501":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:43528:2648":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10370:6691":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12184:3602":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7782:4600":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:9907:3096":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:4719:4313":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:12057:1549":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:7438:3058":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:10126:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:534:3110":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:40245:6226":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3072:7840":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:4176:7886":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7694:4288":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:8195:4661":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2943:13342":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:12059:1547":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4897:5388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5046:5471":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:3504:1725":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:10443:6862":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:11612:28411":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:1845:4805":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9660:32916":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6425:4426":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"9:330:4855":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12765:3722":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11473:3314":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:45595:6361":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12136:3590":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12983:3771":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:10995:2282":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:926:6820":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:782:3026":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:45350:6351":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:8713:20129":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"14:7:6814":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11296:3140":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"11:332:3012":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:9468:2517":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6644:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6818:4495":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:1824:5928":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:2243:5903":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:884:4803":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5988:5627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:21421:7943":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:2536:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4508:5240":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2171:13352":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:14163:4099":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:44337:6346":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4666:5279":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12598:3697":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:3065:3249":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:1058:6827":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:7182:2877":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:4835:4317":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"0:48:619":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"16:3461:4296":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:2920:4549":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8286:6522":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11327:3478":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7102:20076":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6268:32907":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:62:13678":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4750:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9912:6672":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12543:3688":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:8281:4668":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43464:2653":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:6010:5934":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:6045:5647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:3419:2196":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:276:2354":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:9148:30409":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:10571:2652":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8297:6934":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11742:3515":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9617:32914":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12846:3733":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:40041:2174":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:494:4907":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:968:4529":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3945:7859":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"0:123:1733":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"1:7744:2744":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:8978:20137":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:1921:5929":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8212:2216":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:9480:2522":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1672:3023":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:7131:25526":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:43795:6316":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:9031:6946":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:2180:4810":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7884:20080":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:8807:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:43166:5950":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11639:3457":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:10599:6865":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:24:628":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:14042:4067":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:1568:3062":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:12004:25628":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:2494:13168":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:5633:3123":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:44286:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9711:32909":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:6610:2321":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10478:1730":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:434:3300":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10420:3293":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:31964:6056":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12513:3685":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:42171:2520":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12043:3578":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8291:7888":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:2174:4809":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2325:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13685:3984":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8390:7925":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1603:5033":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:853:2672":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:39432:26521":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:2828:2347":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:46017:6381":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11586:3507":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12196:3603":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:21774:29688":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:12037:2626":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10788:20238":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9137:3350":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6545:4441":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4725:5302":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:2861:13331":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:31903:2283":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:8237:6933":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8556:2263":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:2366:1774":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:35:3019":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:9474:2520":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11761:3518":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:21886:7945":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:14:2149":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:6188:5939":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6901:4280":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:536:4227":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7284:6272":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:42710:6291":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10292:3384":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3669:3023":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"14:202:13109":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"9:237:2258":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:6798:3074":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:4138:25508":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:8848:20133":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:42150:2518":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11872:3537":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6742:4480":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2899:13335":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6944:32903":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4477:5222":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:43812:6317":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9650:3384":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:7594:3132":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10750:3410":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12225:3612":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11910:3552":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:2825:2663":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6814:5821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5976:5620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:45825:6375":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4826:5352":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2368:2763":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:2788:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:4830:818":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12111:3588":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13792:4007":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:6031:5642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7269:32905":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:11619:6582":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:3009:2348":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:41909:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:7337:2265":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5838:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:42390:6274":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:9086:3348":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:31943:4583":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:29923:2618":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:12045:1532":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:41230:6250":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:13693:3985":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1579:4805":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:12039:1567":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:42455:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:9486:3134":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4520:5246":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21315:2781":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:6558:2552":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11358:20264":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7736:4598":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:12098:3586":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"9:450:19055":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2539:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8004:6925":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:10949:6722":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:22796:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2169:13351":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:9472:2519":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4957:5425":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11098:6730":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:3529:2209":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:4949:4321":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:12650:30086":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5995:4230":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:2250:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:39961:13164":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:40184:6217":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:8181:4291":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14100:4085":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:285:4796":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12280:3631":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1884:1721":{"crate_id":1,"path":["std","error"],"kind":"module"},"17:14316:4160":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:11117:6867":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:7888:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:4985:2196":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"12:0:2042":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4766:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2644:4258":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:2881:4268":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3997:7863":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:3284:13073":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5886:5565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"9:0:2039":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:5572:2278":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:7503:4284":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:4585:4310":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4874:5377":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:47826:6464":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:624:32923":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:46114:6384":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8877:6541":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:40456:2215":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11351:3480":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10520:3397":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:5754:2308":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:749:3045":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:46685:6410":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:630:2262":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"9:486:19054":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"0:49:1746":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"18:727:3241":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3166:7841":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"15:0:2044":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2618:4257":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:8825:20132":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:4264:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6968:20075":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:1733:5109":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6513:4431":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:46609:6408":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:2186:32883":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:6616:5726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5905:4364":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10112:6682":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:6386:4422":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:14536:4215":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:3441:6662":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:14401:4183":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12373:3639":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:11158:13099":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:1011:3023":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4491:5230":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4545:5259":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:943:6823":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1506:4976":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:12044:1448":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:7584:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:47689:6455":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:4640:5748":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13989:4052":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"13:0:2036":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:4478:7889":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9867:3365":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:12870:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12086:3583":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"18:599:32924":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10771:3412":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:1931:674":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:1464:4802":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7638:6473":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:5085:6911":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:7221:3035":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7660:4596":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10698:6714":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9998:3337":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7023:3128":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:4344:4304":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:8871:2552":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43087:6882":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3068:7839":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:7382:2171":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:1776:3062":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:8765:20130":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:6427:2311":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:949:6825":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:6637:3023":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4986:4322":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:40133:2214":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:863:2552":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10165:20169":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:25777:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2867:4543":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:3049:19210":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:44115:6340":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:8925:7932":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:8142:2240":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:43482:2652":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10637:3409":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:10405:6861":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:574:3205":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7492:4586":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5929:5594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:895:2262":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:7657:6918":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:2904:13336":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9372:3357":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9099:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:2690:5907":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10646:3489":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:10516:6863":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:8557:7929":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11626:6582":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2781:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:40202:6220":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:3188:29291":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:41949:1729":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"5:7282:2552":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:4745:7877":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:9685:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7396:29942":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4850:5363":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43239:5952":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:3256:13137":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9823:20149":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12422:3664":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:3269:30427":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11459:3142":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10456:6703":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:4393:2196":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:46063:6383":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:2998:2218":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:11562:13418":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:11319:2287":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3305:2232":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2783:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1044:4529":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:7520:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:1590:5026":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12024:3573":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11507:20141":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:39928:2643":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:6543:2316":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6467:4430":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:822:3029":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:736:24104":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5909:5578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6600:20073":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12698:3712":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7535:6968":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:6791:2560":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:11992:2267":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2598:2219":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:45394:6353":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:45370:6352":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:7443:2353":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7768:4277":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13890:4030":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:311:4799":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:2170:5897":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13286:3820":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:6194:5938":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:5673:4275":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:44350:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:7595:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:9172:3351":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:44087:6333":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:43156:6883":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:9762:32915":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:1575:5014":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:7886:2266":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:0:2045":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11086:6729":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:42028:2306":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:9725:5943":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10980:3384":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4680:5280":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:20848:29684":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:1595:5028":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:2223:31406":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:3565:6663":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:22254:29945":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6204:6748":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:22165:2619":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"14:215:4745":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:20878:29961":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:5491:2196":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4589:5273":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:7149:2240":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:41349:6521":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:43176:6884":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12790:3724":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:43614:2213":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:22177:29938":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8801:2279":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:41336:6266":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:547:4941":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1288:6827":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4403:5188":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:4051:7867":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10036:3370":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10726:6717":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:22631:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13906:4033":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:149:3007":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10097:6681":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:9977:6263":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4965:5430":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4789:5338":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3244:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:1817:2734":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4471:5219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:3032:4292":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:760:3062":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:4448:2530":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4628:7864":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6139:5669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2722:4261":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:30747:2506":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2969:19209":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:6431:2312":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8481:2259":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9104:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1429:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:40673:6241":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:45625:6362":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:7848:2778":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:653:14089":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:7514:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:119:13732":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"13:110:32891":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:5816:4353":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:10323:2217":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:11203:2783":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10561:3400":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:526:4929":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:32051:2668":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:42910:6293":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:1184:6655":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1520:4981":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12061:1607":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:11737:6298":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:9607:6667":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"14:40:3553":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:1986:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:7930:30410":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:11788:3519":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2883:13332":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:5781:2309":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4628:5276":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:41483:6272":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:10977:25545":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4801:3116":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4641:4312":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:8953:20136":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6879:4500":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:7893:13309":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9191:25688":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"18:614:32921":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12810:3727":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10714:6716":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:9470:2518":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13162:3804":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:10475:3135":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:11042:3137":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6401:4272":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:45895:6377":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:21440:2781":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:5634:4331":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:7575:3130":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:723:4802":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:2670:4259":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:4032:3023":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4397:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:22109:5960":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:38979:2674":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:6792:4494":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:9945:3368":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1983:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4802:5343":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:41207:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:12057:2625":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:5712:4337":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:46719:6411":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:10274:2262":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:1569:5012":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5322:4327":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10575:3401":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:44329:6888":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:43924:6321":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:30149:5920":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:21323:7946":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11381:3484":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"14:0:2043":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10126:3374":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:5982:4374":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:1138:31291":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6696:4468":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:21052:7950":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"7:32:19041":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10789:6566":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:4031:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"9:357:19070":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:14126:4091":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:7865:2780":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4946:5422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:45416:6354":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:45494:6357":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:7342:32906":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4783:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:21064:30107":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:7462:4585":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:1633:604":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:4047:7866":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:8408:2257":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:629:6837":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:7349:7824":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:12056:1548":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:3648:2552":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:14522:4212":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"14:221:4747":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:531:3210":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:358:6890":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:6079:2196":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:4002:3045":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:80:24093":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1696:5097":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11074:6728":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:6086:5658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:7637:2781":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:5398:2274":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:41602:2552":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:6697:5755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8009:2004":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11053:3138":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13739:3994":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:22141:5965":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11367:3481":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:3735:6841":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:595:4967":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:12052:765":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:21884:2781":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:2840:7936":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:43248:6886":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:2159:605":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11150:2280":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:1924:2610":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6893:4502":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:11600:6581":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:9418:1725":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:21238:7947":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:12822:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:43766:6307":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4498:5233":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"1:3679:7858":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13868:4024":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:7732:6475":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"11:736:4803":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10661:6708":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4552:5261":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7651:6809":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7318:4566":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1076:6833":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8331:6935":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:6955:3078":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:21152:7956":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:41675:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:12046:2628":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5648:6739":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:4638:5746":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:5384:2273":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:12925:7826":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:3115:2243":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:4376:5176":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9169:6948":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4458:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:14076:4080":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:31950:6873":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:13973:4050":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:1547:2196":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:10447:6700":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:2035:2230":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6753:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:13632:3978":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13676:3983":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:699:3233":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:22200:5971":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:47865:6465":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:7526:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3391:2241":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:14335:4166":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:9003:20138":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9790:32917":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:3348:2223":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:4074:2672":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:4774:4315":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:43360:2217":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:3185:28185":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43564:2649":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7391:20077":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:40286:6230":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"11:365:3014":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:474:4896":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:7862:4612":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13148:3803":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:47467:6448":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:2409:1723":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2362:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11244:3508":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:4337:3082":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:21016:7948":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"9:52:19073":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10366:6690":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:7474:6851":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:20863:29960":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:4804:30147":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:45941:6378":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:44099:6336":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10139:20168":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"8:0:2038":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"14:165:19142":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:6811:7940":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:8050:4649":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8335:5735":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:364:6891":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:40267:6228":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:43677:2645":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13174:3805":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2542:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:8115:4656":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13135:3802":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:39184:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8458:2258":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:45702:6366":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13778:4003":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:40316:6233":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:7524:3344":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:39900:6202":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:6298:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:46869:6412":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:39065:6060":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:43268:6887":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47327:6446":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8279:6521":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12042:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:5318:3023":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2850:4542":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:22664:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6226:6763":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:45564:6360":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10340:3391":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13567:3942":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:5419:3348":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"11:1538:6836":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:9933:6674":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:21199:13351":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:47575:6450":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:5569:2277":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:41792:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:1557:2262":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4168:7885":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9701:6668":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:840:2262":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:7199:5912":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12750:3719":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42446:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:6735:5767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10916:6720":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4975:5436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:46039:6382":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6037:5645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11137:6733":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6714:5760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:47735:6459":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:12058:1550":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:4756:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5891:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:44392:6350":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:96:24094":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13723:3991":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10507:3396":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:7231:31378":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5798:4348":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4731:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:30349:29921":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"18:515:3208":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:9114:6549":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:1048:32884":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:0:2047":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:6930:3075":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6041:20071":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:0:2041":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11544:6907":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12063:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11281:3472":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5017:5452":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:21014:2781":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:6332:4270":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2638:2229":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13040:3778":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:4154:5930":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:45440:6355":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40714:6244":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10316:3389":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:1690:5094":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:1492:6818":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:579:4957":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11295:3473":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9886:6671":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8151:2242":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:7425:2170":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7921:2228":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:2033:4529":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:582:3344":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:1779:2724":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:1611:3016":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11226:3468":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6859:5843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4812:5347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12252:3621":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"14:31:6814":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:7760:2745":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:7711:7811":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:10949:2745":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:45847:6376":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2223:2205":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:6569:4278":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:1842:2741":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:416:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:9053:25543":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:4392:6910":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:4037:7865":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:986:6827":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:7561:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:12009:7813":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:44083:6332":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:8686:20128":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:4421:2343":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:5551:5931":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3465:2206":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:9481:2779":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:7792:20079":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:564:3215":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12172:3599":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42663:6285":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:4401:2529":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:4759:689":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:43624:2646":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:9780:6670":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:46192:6386":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4864:5371":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12293:3632":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:8239:4583":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:10081:2734":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:6147:3107":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:12060:812":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:43668:2644":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:21066:13351":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:14346:4167":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:1102:31286":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11337:20263":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10468:3392":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:7412:2169":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:31939:6872":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:11394:6579":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:805:7825":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7722:4279":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:9461:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:4806:4316":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:42692:2258":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:8794:20131":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:2049:6827":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:755:3246":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:7853:2779":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:21762:5957":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:5727:4340":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11845:3529":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:9074:6548":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:42702:6290":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2613:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2771:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:39120:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4889:4319":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:12062:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11617:3508":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:12054:762":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:6769:3060":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6485:4273":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:21271:7942":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"11:1818:2262":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6721:20074":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:44107:6338":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40722:6246":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:22730:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:43410:2655":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12074:3582":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2833:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13487:3880":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:46161:6385":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:7568:4287":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:3594:2672":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:22763:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8833:2281":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4697:5289":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14355:4169":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:3989:7862":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:47750:6460":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:641:6895":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10929:3444":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:3224:2233":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4189:7887":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:22565:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:955:6826":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:8134:4659":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:609:6644":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43887:6320":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5661:4335":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:30171:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:43336:2638":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5503:1728":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:7555:5876":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1273:6829":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4558:5263":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5363:4328":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39890:6201":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8896:6542":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:2888:3115":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13298:3827":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12645:3703":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14083:4081":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14478:4205":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:41264:7857":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:9921:6673":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:10534:2233":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:5640:6472":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:2356:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:43949:6322":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:3888:4301":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:521:24106":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:5434:2276":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:39848:6197":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11111:6731":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11346:6575":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11719:20143":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:1513:4979":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:39935:13163":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14499:4208":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2546:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:2284:19181":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10023:6668":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:21185:7951":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:6680:5754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:7905:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10430:6696":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:21108:7955":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:2131:3042":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:30185:29936":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12465:3675":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12621:3702":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:2810:4265":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21670:7957":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:44091:6334":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:538:3213":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:9039:6545":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4465:5217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:4234:2262":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6929:4504":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:4426:3052":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:45971:6379":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:6439:3045":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:119:3010":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:9436:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:8895:20134":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:3830:4300":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:1736:13362":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:2914:4548":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3226:2234":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:10585:6864":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:14033:4066":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11235:3469":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:9281:2740":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:10771:6560":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:5839:3045":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:2788:4264":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"0:0:1889":{"crate_id":0,"path":["autocfg"],"kind":"module"},"2:43213:5951":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:43378:2651":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:41543:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:4500:7890":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:2219:2760":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:12041:1078":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:3720:2230":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:11578:6868":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:2744:4262":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11316:3477":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11991:3567":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:1426:2672":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10214:6686":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8225:2213":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:3513:28911":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:488:4904":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4293:5115":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"14:187:19149":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:4642:5750":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:47803:6463":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:41611:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"10:0:2040":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13071:3783":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:47678:6454":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1895:2609":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:10840:28175":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6720:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6607:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11151:6734":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7015:4519":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:12628:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"16:5088:4325":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:10766:6558":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:3764:4298":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"11:1027:19136":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2779:2661":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:11059:3139":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:638:6893":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:14460:4199":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:1911:15080":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:2209:6660":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:491:3204":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:30719:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:4240:6908":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5010:5449":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:2933:19208":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13244:3813":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:7259:5852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3939:7860":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:3935:2196":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12237:3615":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5802:5527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:7529:3062":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:10603:3404":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:2526:4253":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:3217:32533":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:0:1440":{"crate_id":1,"path":["std"],"kind":"module"},"16:5588:4274":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:6896:3127":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:727:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:1501:19137":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:1068:6831":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8941:7934":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:403:32885":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:46531:6407":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:45665:6364":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1257:4529":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:7290:2552":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5830:4354":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:47709:6457":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:507:3205":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:1473:4803":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6634:5735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:11388:6578":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:11813:6303":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2339:4240":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8989:6940":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11240:6549":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2793:2532":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11191:3457":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:3229:13343":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40680:2311":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:9564:6666":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:3191:29299":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8855:2262":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:9350:3356":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14156:4097":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:40234:6225":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4747:7878":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5060:5477":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:7737:6476":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:47724:6458":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:42680:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:3264:2235":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4687:5282":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:14308:4157":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7006:6779":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6243:6766":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5827:5532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1573:4804":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:43318:2642":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:2845:7938":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2836:2667":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:12123:3589":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:1482:6834":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:1640:5922":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:8154:6810":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:14469:4203":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:1442:2552":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:41313:29924":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13851:4019":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8174:2212":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:7889:2673":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:400:6652":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10250:2285":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:13758:3995":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:30155:5991":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6915:4281":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:40466:6237":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:9466:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:46295:6388":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43938:13108":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8863:6937":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:7534:4285":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:568:4952":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:9924:3097":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:2959:2605":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4343:5152":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:4527:4308":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:42495:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"11:2130:19131":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:2930:13339":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10776:2776":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:11951:3556":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4951:5424":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:21255:2781":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3239:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11448:20140":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:14514:4209":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:43138:5947":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:719:3238":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:41714:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:8909:7933":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:2574:4255":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:1075:6654":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:6071:3118":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7360:32908":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:644:3205":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:8357:6524":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:6880:13313":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:2864:4267":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:1103:6832":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:42157:2517":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4772:5327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:9445:6664":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:6877:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:7128:6545":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4706:5294":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4268:6855":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:20820:2506":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:6928:30205":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:3655:3254":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13816:4009":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:39096:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:12055:1551":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:8556:7814":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11201:3459":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:45546:6359":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11886:3538":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3741:6905":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4967:7921":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5696:20068":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:44103:6337":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:8659:20115":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:8964:2310":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:11848:2635":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44155:6343":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:3800:3062":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13055:3782":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:5049:4324":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:7597:32902":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:4462:4306":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5872:5564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:6306:8033":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:2450:4250":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:878:3031":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:3019:2351":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:41516:6876":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7828:4608":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:47669:6453":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:1838:4804":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:1670:1116":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:14145:4096":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:532:4932":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:43582:2650":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5784:5514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:644:2672":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:5384:20067":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"0:50:1752":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"5:3183:32535":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:6195:6914":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:667:6818":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:22928:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:41372:6267":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12484:3680":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:6250:3123":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:4438:5205":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10012:3384":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:9841:3093":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:5808:5530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6560:3009":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:2907:4269":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9455:32913":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:6540:2315":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:2934:13340":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:4557:4309":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5082:5483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:12049:663":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:2970:32850":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:14056:4074":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5845:5544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9959:6676":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:39833:2644":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:1557:5004":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:5746:5487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:932:7825":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6352:4417":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7726:7812":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:8558:6859":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:5449:1727":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:11822:3146":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10540:2231":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:3330:3062":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:0:2037":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:7858:2776":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:590:3216":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1121:6833":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40074:2188":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9070:3347":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4608:5274":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:793:6834":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:41466:2672":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:44134:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11573:3505":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:2380:4247":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2831:2665":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:913:6834":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11023:3450":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:3308:1724":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"17:12531:3686":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:12038:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:6531:4439":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12437:3668":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:1750:5923":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:12032:2632":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:41989:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:8313:6523":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4526:5249":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:1302:6833":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:3915:4302":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9488:32912":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"13:226:4794":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9242:3353":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:43226:6885":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1411:2262":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2875:7939":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10197:6683":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11306:3475":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12658:3706":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10534:3398":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:7191:2552":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:3315:4295":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:43428:2654":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:21:702":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:97:4795":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:40480:6238":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:2178:6657":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10738:6718":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12888:3754":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:9476:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13085:3785":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:22829:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6261:6774":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5964:5615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13546:3932":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10059:3372":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8231:6931":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2384:2768":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:2272:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:4919:5404":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:43346:2216":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:39238:6874":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:45684:6365":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:7608:5888":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:3303:2231":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:8162:2211":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:7245:2552":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10547:3399":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:1673:5087":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:21317:7944":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:45795:6374":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:4164:2196":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:7375:25609":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:45749:6367":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6180:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:7538:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:3321:13074":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4003:7864":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:10160:6953":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:2926:13338":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7054:4523":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:11797:6302":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:7211:3045":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4703:7916":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:12048:661":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11162:3452":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4618:5275":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4382:5178":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:5403:2196":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:9133:2783":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:47217:6445":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:6596:2320":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:47651:6452":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:12833:3107":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13101:3789":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:40302:3226":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:8847:2282":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:42473:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4317:5132":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5574:4271":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:766:24105":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6053:5650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:506:4912":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:7549:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6627:5731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:3232:4237":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:9026:6945":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13710:3986":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14296:4154":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5435:4329":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12997:3772":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11215:3464":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:9478:2521":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:8665:2626":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:4054:13072":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:44379:4815":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:2562:2227":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12724:3715":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:2141:5895":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:8985:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:14134:4092":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4743:7875":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8195:2214":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:39259:6068":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:5362:2630":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6753:4481":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4835:5355":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:12702:6870":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10186:3381":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:2576:3097":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:6003:5629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14001:4058":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:39954:6205":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12778:3723":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"9:426:19057":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:9752:6669":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:2253:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13451:3849":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:47529:6449":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8498:2260":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:40104:5951":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:40174:6216":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:6358:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:652:3205":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:10323:1727":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:6979:13305":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:22217:29952":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:43643:2634":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:3204:4806":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:9521:6665":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:45462:6356":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:6981:7477":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12452:3673":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11221:6571":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13554:3935":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12007:3571":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:22697:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4742:5312":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7523:4590":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:9896:20151":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:11164:2281":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:21416:2781":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:39994:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:2049:6841":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:622:2611":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:589:7805":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5866:4361":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:12554:3689":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11173:20262":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:5609:5933":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:482:4901":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4844:5361":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:7397:13310":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:11774:6301":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2394:2773":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:9852:20150":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:5403:3347":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:6163:3122":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:3266:2236":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:681:3229":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:2190:1722":{"crate_id":1,"path":["std","fs"],"kind":"module"},"17:13981:4051":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8996:25532":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12711:3714":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:1536:4989":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:646:7808":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:2406:4248":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:1638:5062":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:9417:212":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:5996:5628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5972:3123":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:4320:6909":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43860:6319":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:49671:7959":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:7999:6924":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:2060:6829":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:43304:2012":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:30243:29946":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:39140:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:40011:29942":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9277:3354":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:2216:2759":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2887:13334":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:41398:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11361:6576":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7621:20078":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:39245:6066":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:1631:5058":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:505:3042":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4370:5175":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6784:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12830:3728":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:8983:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:907:3062":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:1590:4807":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:5612:3060":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6729:5766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:4909:7914":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4415:5197":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10953:4875":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:10102:6951":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:42400:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:256:6650":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1495:4971":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9207:3352":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:6467:2319":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7513:4589":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:22283:5982":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:261:6651":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:7532:5870":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:922:6819":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2530:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2871:7937":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2214:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"15:306:19162":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"15:394:19172":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:39018:13076":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:11592:2014":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:39080:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2778:2346":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4718:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:2320:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13024:3776":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:10366:2635":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4910:5398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:554:4944":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:41950:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:541:4938":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10265:6688":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12154:3598":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10397:6693":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:4706:7889":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:41526:13411":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:11184:6340":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:573:4954":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6583:4443":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:14118:4089":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9102:3349":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:7281:5853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6346:6777":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:10801:2780":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:21449:5955":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12496:3682":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:918:6818":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:1012:6829":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4918:7915":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2493:2781":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:41449:2551":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6829:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4652:5278":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:20880:29956":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:1503:6819":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:3522:2207":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4:1040":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:2382:2767":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11048:6723":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:261:3023":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40155:6213":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:42671:6286":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:45524:6358":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:3898:2002":{"crate_id":1,"path":["std","num"],"kind":"module"},"6:6024:5641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:44095:6335":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:41753:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:7393:13311":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:40254:6227":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6805:5818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2665:2614":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"10:44:4817":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:6361:4418":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:39980:6209":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:5939:4370":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8205:2215":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11710:3475":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10962:3447":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:4194:2196":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:2879:13333":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14068:4077":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:22192:5970":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9574:32910":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13826:4010":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:558:6892":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:4497:4307":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:10588:3402":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:21337:5955":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5858:5553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1500:4973":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11124:6732":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:7618:5890":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"15:327:19166":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:6788:3072":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:20861:29958":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:5054:6911":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41586:2262":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11661:3510":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:9677:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6165:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5017:4323":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:7209:2300":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:2832:4266":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:3514:3045":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13010:3773":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:6485:3023":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10100:6952":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12208:3604":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:7463:5918":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12671:3417":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7662:6474":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:1826:3045":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:45647:6363":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:871:4802":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:2548:4254":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:3050:13075":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:40225:6224":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2624:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:695:6819":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:22895:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:47613:6451":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43330:2639":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:45993:6380":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:5612:4276":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"0:51:964":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"6:1681:5088":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:30115:5990":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:2504:4252":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4986:5442":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:2696:4260":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10903:6719":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13922:4037":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:22003:5958":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:41870:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:39860:29953":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:42164:2519":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10084:6680":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4391:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:12053:766":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11687:20142":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:7613:6808":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6415:4425":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:3178:4805":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:1852:4806":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11389:6736":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13914:4035":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:40164:6214":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:47773:6461":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:20833:29684":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:12911:3763":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2596:4256":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:399:32890":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6499:4290":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:9720:13173":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2892:4544":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:4862:4318":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:5988:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:1840:2740":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:40193:6219":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:22238:29937":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:5743:4342":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40124:6875":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4059:7869":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:14282:4148":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:44276:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:177:19122":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10672:6709":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:10298:2672":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:40084:2187":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:7581:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13274:3475":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12934:3764":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12062:3579":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:44167:13458":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6279:4412":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:8072:4650":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7554:4286":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"10:36:4816":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2533:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:23375:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:11376:6917":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6582:5707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:12615:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:39999:2173":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4820:5351":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8567:2264":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"15:288:19161":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6076:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2321:4238":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10849:28173":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6456:4429":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:10478:2651":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:4745:4314":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:4921:4320":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:5760:20069":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:2201:2265":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:10831:2211":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:2012:6656":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1649:5070":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:9474:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:1118:32843":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:500:4909":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6145:5670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4570:5272":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:3016:2350":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:7929:2230":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:8926:20135":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:657:2552":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11535:3503":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:42914:6294":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:3013:2349":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:7545:3066":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:4053:4303":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:40146:6211":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:7567:5878":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14173:4104":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:14448:4197":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13667:3979":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12473:3677":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:7764:6872":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:2150:20196":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6189:4410":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10616:3405":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:1764:628":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:636:3228":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:2461:5904":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10383:6692":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4940:5419":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:4417:4305":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:1564:3045":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2305:19207":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:8819:2280":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:113:24095":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:22304:2011":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4640:5277":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:22125:5961":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:39947:6204":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7544:4591":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:3232:6661":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11062:6727":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:5128:2305":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:14324:4161":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11261:3470":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:46655:6409":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:5626:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13802:4008":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10240:3368":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10685:6712":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:4123:6854":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:4347:2528":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:1822:2552":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9109:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46449:6406":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:43510:2647":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11482:6905":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11547:3504":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:1527:4984":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11176:28171":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:5814:5531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:14221:4141":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4824:7874":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3975:7861":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:12036:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:41458:2262":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:1561:2552":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:8167:6813":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:1545:4995":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8218:2217":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:13876:4027":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5053:5474":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12267:3627":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4796:5340":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:12037:961":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:31957:2528":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"11:844:6826":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14378:4182":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:43147:5948":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7090:4528":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:8980:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:47698:6456":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:12050:767":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13949:4041":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6017:20070":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:2766:4263":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11987:6971":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4430:5203":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:9051:20116":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:42655:6283":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:1717:5105":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:12103:13101":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:9152:6550":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:2472:4251":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:5747:2307":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:10432:2279":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11971:3566":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7582:4592":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:6850:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2938:13341":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11313:6572":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:5420:1448":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"17:9985:6678":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:3846:6907":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:43634:2636":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:707:2628":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:44367:6349":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3405:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:562:4949":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:47788:6462":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"11:1831:3062":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:14269:4142":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:817:6823":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4160:7884":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5070:5478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:22290:2620":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:14024:4063":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:9531:32911":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:41474:2552":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:4622:13157":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:21665:7949":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:8540:2261":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:42430:4627":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6156:4405":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:483:3109":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:41384:6268":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:7434:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:5963:6741":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6318:4415":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12305:3635":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:12677:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:46373:6404":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:10962:1728":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:22862:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7041:4520":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12876:3752":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2909:13337":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:14420:4188":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5826:2318":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:8205:20081":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:6657:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:41293:6259":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:7472:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7708:4289":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:39839:6196":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:5418:2275":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:12052:2627":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13259:3817":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:3600:4297":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:660:6645":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:4363:3052":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7875:2777":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"11:2194:4812":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:47075:6444":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:40695:2241":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:4572:7907":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:44111:6339":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:43972:2656":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:21447:7952":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:4392:3083":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1663:5081":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43187:6295":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13897:4032":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13113:3791":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:40326:6234":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:39912:2645":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13575:3943":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:8978:6938":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:13228:3811":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:5366:2631":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:39876:6200":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:9153:31182":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"11:836:6825":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7474:6801":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11407:20139":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:11523:6906":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2359:4246":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10278:6689":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4537:5254":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14090:4082":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"9:507:4878":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10580:3136":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:1759:5925":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:40689:6242":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4994:5444":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:10537:2235":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:40216:6223":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:2962:5900":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5027:5457":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:1585:4806":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:0:2046":{"crate_id":17,"path":["object"],"kind":"module"},"17:10227:6687":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11272:3471":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:8594:20117":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13611:3973":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12576:3696":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:22598:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4485:5227":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:2985:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6574:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12685:3711":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:582:2506":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11934:3553":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:46215:6387":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4330:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:5975:13652":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:3447:2204":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8242:7856":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6960:6778":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10628:3408":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:3171:2262":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:43992:2657":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:3581:2262":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13188:3806":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:42418:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:12258:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:1781:2725":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40277:6229":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:798:6820":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:7472:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:2428:4249":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4931:5413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:8550:2262":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:9201:6554":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:9972:6677":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:2960:32849":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:40666:6240":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:1067:6829":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4422:5201":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6376:20072":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:7304:5865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:10747:6961":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:39162:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:897:3045":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6843:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:7573:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13215:3810":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:6598:5719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10440:6697":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:9939:3102":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10494:3394":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:13202:3809":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:3250:13138":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"14:160:6814":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:4019:6853":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:2966:32851":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:22316:2621":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:1523:6840":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:123:13733":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:46419:6405":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5076:5480":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:7067:4526":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:4007:6852":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10410:6694":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14434:4190":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4856:5366":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5899:5571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6017:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:47405:6447":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8305:6931":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:5954:2305":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12737:3717":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:690:3232":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:1517:6835":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:6199:3089":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:8114:2244":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:671:6649":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9328:2216":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:3238:4807":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:10340:28948":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:14110:4088":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:4783:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:3744:6906":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:39206:7818":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11000:3449":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:10116:2781":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4448:5211":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:41535:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:8097:4653":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13966:4049":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:12020:25533":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6687:4467":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:4273:6856":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5776:5512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:39920:2644":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}