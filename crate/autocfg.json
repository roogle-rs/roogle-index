{"root":"0:0:1803","crate_version":"1.1.0","includes_private":false,"index":{"2:11917:27380":{"id":"2:11917:27380","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11916:27379"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:33770":{"id":"2:11924:33770","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42898:2561","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:33768":{"id":"2:11914:33768","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1374","str::slice_mut_unchecked":"2:11915:33769","crate::ops::Index":"2:3016:7534"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:30:657":{"id":"0:30:657","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:41699:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:123:1645":{"id":"b:2:2550-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:1684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11967:33774":{"id":"2:11967:33774","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:1930":{"id":"2:11958:1930","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547","str::rsplitn":"2:11961:27393"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42738:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:24375":{"id":"2:11996:24375","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:86:127":{"id":"b:2:2258-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2034"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:683:2517":{"id":"5:683:2517","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2565-0:86:127":{"id":"b:2:2565-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2556:683":{"id":"2:2556:683","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:33775":{"id":"2:11973:33775","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11595:2547","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:2050"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42856:2565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12008:33786":{"id":"2:12008:33786","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11905:27357":{"id":"2:11905:27357","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:86:127":{"id":"b:2:2554-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11952:33771":{"id":"2:11952:33771","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11595:2547","str::split":"2:11943:1795","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7203:120","str::rsplit_terminator":"2:11955:33772"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42684:2570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2260:2034":{"id":"2:2260:2034","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:86:127":{"id":"b:2:2560-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11904:310":{"id":"2:11904:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11905:27357","`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:30667":{"id":"2:11925:30667","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42926:2548","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5353:34437":{"id":"5:5353:34437","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2270","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:2793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2270","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:2793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5370:2143":{"id":"5:5370:2143","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:2050":{"id":"2:11970:2050","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11595:2547","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:2050"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42838:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:123:1645":{"id":"b:2:2565-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2560-0:123:1645":{"id":"b:2:2560-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2709:225-0:123:1645":{"id":"a:2:2709:225-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:71:1766":{"id":"0:71:1766","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1706":{"id":"0:58:1706","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:926":{"id":"0:53:926","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:86:127":{"id":"b:2:2261-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:23787"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11908:27354":{"id":"2:11908:27354","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1768":{"id":"0:72:1768","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:2519":{"id":"5:685:2519","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2624:2525":{"id":"2:2624:2525","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3415:6539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:684:2518":{"id":"5:684:2518","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:33766":{"id":"2:11899:33766","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11897:33765"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5357:34438":{"id":"5:5357:34438","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:27396":{"id":"2:11999:27396","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:30674":{"id":"2:11921:30674","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11922:30703"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42908:2551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372:27068":{"id":"5:5372:27068","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12016:27071"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11982:1801":{"id":"2:11982:1801","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:1781":{"id":"2:11918:1781","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42604:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5368:34440":{"id":"5:5368:34440","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:86:127":{"id":"a:2:2709:225-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11949:27390":{"id":"2:11949:27390","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11595:2547","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split":"2:11943:1795"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42652:2566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":{"restricted":{"parent":"0:20:1633","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12020:33788":{"id":"2:12020:33788","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:33788"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42951:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:33765":{"id":"2:11897:33765","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:27395":{"id":"2:11932:27395","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:388":{"id":"0:28:388","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":{"restricted":{"parent":"0:20:1633","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","description","source","cause","type_id"],"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1906","0:28:388"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:86:127":{"id":"0:86:127","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2709:225-0:86:127","a:2:8216:7628-0:86:127","a:2:8217:7627-0:86:127","a:2:2759:2263-0:86:127","a:2:2695:217-0:86:127","b:2:3354-0:86:127","b:2:2565-0:86:127","b:2:2560-0:86:127","b:2:2622-0:86:127","b:2:2550-0:86:127","b:2:2554-0:86:127","b:2:2258-0:86:127","b:2:2261-0:86:127","b:5:5617-0:86:127","0:29","0:26","0:88"]}},"a:2:8216:7628-0:86:127":{"id":"a:2:8216:7628-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:7628","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:12005:33785":{"id":"2:12005:33785","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:86:127":{"id":"b:2:3354-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:50:1665":{"id":"0:50:1665","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:7503":{"id":"2:12019:7503","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:7503"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42942:2559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:123:1645":{"id":"b:2:3354-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5352":{"id":"5:5352","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5263:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5353:34437","5:5354:2122","5:5357:34438","5:5360:34439","5:5368:34440","5:5369:34441","5:5370:2143","5:5371:27067","5:5372:27068"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11988:33780":{"id":"2:11988:33780","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1738":{"id":"0:63:1738","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:33781":{"id":"2:11989:33781","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:1926":{"id":"2:11935:1926","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2263:23787":{"id":"2:2263:23787","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":{"restricted":{"parent":"0:20:1633","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5360:34439":{"id":"5:5360:34439","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:27379":{"id":"2:11916:27379","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11917:27380"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:33772":{"id":"2:11955:33772","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11595:2547","str::split":"2:11943:1795","prim@char":"1:11864:410","str::split_terminator":"2:11952:33771"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42702:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12011:1936":{"id":"2:12011:1936","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11557:126","`FromStr`":"2:11556:2175"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11556:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11556:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:123:1645":{"id":"b:5:681-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:2517","5:684:2518","5:685:2519"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5369:34441":{"id":"5:5369:34441","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2270","`String`":"5:7228:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2270","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6979:2793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:33779":{"id":"2:11986:33779","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57:1701":{"id":"0:57:1701","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64:1743":{"id":"0:64:1743","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:33773":{"id":"2:11964:33773","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:33776":{"id":"2:11976:33776","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11595:2547","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11979:33777"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42784:2562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12017:33787":{"id":"2:12017:33787","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:33787"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42933:2558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12015:27070":{"id":"2:12015:27070","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:123:1645":{"id":"b:2:2258-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2034"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2695:217-0:123:1645":{"id":"a:2:2695:217-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11903:33767":{"id":"2:11903:33767","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:27066":{"id":"2:12013:27066","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2695:217-0:86:127":{"id":"a:2:2695:217-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:66:1750":{"id":"0:66:1750","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1659":{"id":"0:49:1659","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:33783":{"id":"2:11993:33783","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1748":{"id":"0:65:1748","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:1645":{"id":"0:123:1645","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:2709:225-0:123:1645","a:2:8216:7628-0:123:1645","a:2:8217:7627-0:123:1645","a:2:2759:2263-0:123:1645","a:2:2695:217-0:123:1645","b:2:3354-0:123:1645","b:2:2565-0:123:1645","b:2:2560-0:123:1645","b:2:2550-0:123:1645","b:2:2554-0:123:1645","b:2:2258-0:123:1645","b:2:2261-0:123:1645","b:5:681-0:123:1645","0:132","0:130"]}},"2:11984:33778":{"id":"2:11984:33778","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:799":{"id":"2:11894:799","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:5722":{"id":"2:11920:5722","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42620:2118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:2263-0:123:1645":{"id":"a:2:2759:2263-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11979:33777":{"id":"2:11979:33777","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11595:2547","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::match_indices":"2:11976:33776"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42802:2563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8217:7627-0:86:127":{"id":"a:2:8217:7627-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:7627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:2553:1684":{"id":"2:2553:1684","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2527:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2568:127":{"id":"2:2568:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31737:2191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:48:1652":{"id":"0:48:1652","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:1676":{"id":"0:54:1676","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["dir",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5060:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:27393":{"id":"2:11961:27393","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11958:1930","self::pattern":"2:11595:2547"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42756:2567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:33764":{"id":"2:11896:33764","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:27353":{"id":"2:11906:27353","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2563:127":{"id":"2:2563:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:70:1762":{"id":"0:70:1762","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1777":{"id":"0:75:1777","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:2263-0:86:127":{"id":"a:2:2759:2263-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:5617-0:86:127":{"id":"b:5:5617-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5615:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5619:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11943:1795":{"id":"2:11943:1795","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11595:2547","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split_whitespace":"2:11921:30674","str::rsplit":"2:11949:27390"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42634:2120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:926":{"id":"0:51:926","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:33784":{"id":"2:12002:33784","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12014:27069":{"id":"2:12014:27069","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:1794":{"id":"2:11895:1794","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:2460":{"id":"2:11939:2460","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1753":{"id":"0:67:1753","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1771":{"id":"0:73:1771","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2569:1448":{"id":"2:2569:1448","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1780":{"id":"0:76:1780","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:657":{"id":"0:133:657","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:27355":{"id":"2:11910:27355","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:27071":{"id":"2:12016:27071","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68:1757":{"id":"0:68:1757","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5619:1428":{"id":"5:5619:1428","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:926","0:54:1676","0:57:1701","0:58:1706","0:62:1735","0:63:1738","0:64:1743","0:65:1748","0:66:1750","0:67:1753","0:68:1757","0:69:1759","0:70:1762","0:71:1766","0:72:1768","0:73:1771","0:74:1774","0:75:1777","0:76:1780"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11919:5996":{"id":"2:11919:5996","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42610:2553","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:123:1645":{"id":"b:2:2554-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11946:27388":{"id":"2:11946:27388","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11419:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:7628-0:123:1645":{"id":"a:2:8216:7628-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:7628","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:131:414":{"id":"0:131:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:1735":{"id":"0:62:1735","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:1774":{"id":"0:74:1774","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:1925":{"id":"2:11923:1925","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42888:2121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5371:27067":{"id":"5:5371:27067","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12015:27070"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:123:1645":{"id":"b:2:2261-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:23787"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11893":{"id":"2:11893","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11158:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11894:799","2:11895:1794","2:11896:33764","2:11897:33765","2:11899:33766","2:11902:24041","2:11903:33767","2:11904:310","2:11905:27357","2:11906:27353","2:11908:27354","2:11910:27355","2:11912:27356","2:11914:33768","2:11915:33769","2:11916:27379","2:11917:27380","2:11918:1781","2:11919:5996","2:11920:5722","2:11921:30674","2:11922:30703","2:11923:1925","2:11924:33770","2:11925:30667","2:11926:1792","2:11929:1927","2:11932:27395","2:11935:1926","2:11939:2460","2:11943:1795","2:11946:27388","2:11949:27390","2:11952:33771","2:11955:33772","2:11958:1930","2:11961:27393","2:11964:33773","2:11967:33774","2:11970:2050","2:11973:33775","2:11976:33776","2:11979:33777","2:11982:1801","2:11984:33778","2:11986:33779","2:11988:33780","2:11989:33781","2:11990:33782","2:11993:33783","2:11996:24375","2:11999:27396","2:12002:33784","2:12005:33785","2:12008:33786","2:12011:1936","2:12013:27066","2:12014:27069","2:12015:27070","2:12016:27071","2:12017:33787","2:12019:7503","2:12020:33788"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8217:7627-0:123:1645":{"id":"a:2:8217:7627-0:123:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:7627","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11902:24041":{"id":"2:11902:24041","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11163:1915"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2622-0:86:127":{"id":"b:2:2622-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3403:12778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:2:2550-0:86:127":{"id":"b:2:2550-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:1684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11926:1792":{"id":"2:11926:1792","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:33782":{"id":"2:11990:33782","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11620:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2564:1449":{"id":"2:2564:1449","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3356:1462":{"id":"2:3356:1462","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38976:5870","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:33769":{"id":"2:11915:33769","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1374","crate::ops::IndexMut":"2:3020:7535","str::slice_unchecked":"2:11914:33768"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:27:1906":{"id":"0:27:1906","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:1927":{"id":"2:11929:1927","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:2547"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:657":{"id":"0:89:657","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1759":{"id":"0:69:1759","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1803":{"id":"0:0:1803","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:35-0:86:127","0:123:1645","0:48:1652","0:49:1659","0:50:1665","0:51:926"],"is_stripped":false}},"0:35-0:86:127":{"id":"0:35-0:86:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"error::Error","name":"Error","id":"0:86:127","glob":false}},"2:11912:27356":{"id":"2:11912:27356","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:2122":{"id":"5:5354:2122","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7228:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7228:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:30703":{"id":"2:11922:30703","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11921:30674"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42917:2549","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:9897:6408":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"9:505:18799":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2210:2679":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10296:6423":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:46632:6139":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:7396:19745":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:7250:6538":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:43389:6020":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4597:5091":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12739:3784":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:1695:4898":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:5900:2984":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:3430:1637":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2482:12825":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4441:4116":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"12:1534:6522":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46495:6130":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:1571:4814":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:41074:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4981:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:40697:2166":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6593:4296":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12909:3824":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:41949:5967":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:9353:12833":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:588:7501":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:738:4602":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:4385:4114":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4115:7585":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:50283:6152":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"18:574:3057":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:39489:6564":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:39610:5908":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22141:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:9061:3207":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"7:32:18641":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:3939:2915":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:20858:7642":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:25647:2528":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:20774:5757":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12695:3779":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:669:6506":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:41933:5964":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:5807:13332":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:38985:4384":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:1645:4868":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:2894:18878":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:3352:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"18:644:3057":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:4983:6599":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:11609:2543":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9526:6382":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7044:34649":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:9446:6376":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:6635:12974":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:7203:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1617:4843":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:11037:6020":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:10466:3292":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"12:1044:18814":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:21793:5786":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:2093:2908":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9263:6365":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:3901:7558":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:10854:19811":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4274:4963":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:7865:2133":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:9700:6393":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:4385:2950":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5890:5428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:22075:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44631:6046":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10226:24800":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:8881:34659":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8096:2147":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:6747:7639":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5722:5338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:4835:7612":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:10774:3271":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13141:3886":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:2011:6528":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:40914:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:4750:7571":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13203:3901":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4224:4926":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:9475:2958":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13279:3946":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4248:4943":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:39567:5902":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:9094:2429":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:11846:24376":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2186:1634":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:44677:6053":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:505:4722":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:4696:657":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:4781:5175":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:10244:6554":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11106:3379":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"18:755:3098":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2255:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7497:4083":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6567:4295":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"12:0:1943":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:7890:4457":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:7049:5718":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:9553:3207":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:42461:5976":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10921:3332":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:7003:2915":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:12177:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:22108:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:3293:2879":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:4795:783":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:7650:7504":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11884:1469":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:2465:4056":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42487:5753":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:9930:3226":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"9:863:18654":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:8666:3190":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10394:3283":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:6619:4297":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:4144:4108":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:4217:4109":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:45255:6083":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6316:4241":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:4440:2443":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6743:19742":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:7481:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:5005:2213":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:123:13413":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:41699:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4687:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"12:985:4330":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:4149:5735":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"12:632:2166":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11300:3416":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:12398:2972":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"12:834:6511":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8493:2166":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:4119:6542":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:44547:6043":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:9030:1637":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:4327:4112":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:956:6513":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:36:2886":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3559:2587":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:41636:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7070:2465":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2386:1635":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:7557:4401":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:5433:4135":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:4166:6596":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11708:3504":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:690:3084":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"14:40:3353":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:6728:5631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:39206:30686":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:4748:2090":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4820:5195":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:42450:6572":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3670:6594":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:515:3060":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4086:7582":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2530:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:39549:5899":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:2535:4059":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:40994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:41980:5971":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:2930:18879":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8790:2188":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12630:3743":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9712:3216":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:8774:3193":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:42430:6571":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:39266:12819":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:4300:2921":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6719:34647":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:4721:4124":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4094:7583":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:10216:2567":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:300:4598":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7288:4390":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3373:2108":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"18:531:3062":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:8278:5544":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4549:5087":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9433:6375":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:39920:5923":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:8944:24372":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6034:6455":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:6583:2942":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:11821:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:1541:4794":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:39006:5872":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2819:7636":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2831:2981":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:2320:4050":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6829:4324":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:43361:6013":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:1065:6515":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:43568:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11343:3432":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:11885:1466":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:707:2543":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:553:4754":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1847:2657":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:9071:34658":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:42926:2548":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:5823:5386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11288:3413":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6634:5572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:3716:4106":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11391:6594":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4307:4987":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10490:3295":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:546:4751":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4520:5085":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"0:48:1652":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"17:12046:3572":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:3346:2100":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:9318:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:42738:2568":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:11029:24386":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4681:5128":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10001:24798":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:4011:2587":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:20479:30815":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:40486:5934":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:21687:30690":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:12387:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:2557:4060":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6827:3008":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"16:4606:4120":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:46591:6136":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:30011:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:7282:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11536:3478":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12485:3630":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:4900:5247":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:1138:6520":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:7473:3326":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:8110:19783":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:4893:7619":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:5492:2189":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:9691:6390":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:41396:2427":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8932:6630":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:7386:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10051:6639":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7093:4367":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:8643:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:21619:5764":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:42592:2557":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:39439:2092":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:11887:1523":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:38800:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4775:5173":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:5219:3185":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:5477:5736":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:2882:13000":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:1762:5730":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:40552:30661":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:9317:6370":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:2803:4340":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"12:1120:6519":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:3201:4606":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:2874:12998":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:10088:6551":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:10824:2652":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"9:956:18657":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:2878:12999":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:7011:2902":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1731:4915":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:41721:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:9589:2967":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:3180:34514":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:46606:6137":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11594:3487":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:3959:2100":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:6512:5528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:6926:2994":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:9092:2428":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:20477:30812":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:45413:6086":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:113:23547":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:3114:7536":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:3161:2139":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:3010:18880":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"12:119:2873":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8138:2116":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13536:4010":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:3923:7560":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:38860:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:0:1946":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:766:23557":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:10933:3003":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:4769:30628":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:4519:4117":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6517:4281":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:11620:2540":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:3201:2141":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7388:6496":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:9805:3302":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4322:4994":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:609:6337":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:20886:5757":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13168:3893":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:21305:30469":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:6740:2945":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2957:2264":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:7428:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:630:6524":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9764:3221":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:20608:7649":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"14:160:6502":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4743:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9671:6388":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:505:2908":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"12:2178:4607":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2746:2577":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11734:3231":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:9776:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:636:3080":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:8561:3187":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:11835:7509":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:933:6508":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9644:6386":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:7688:2645":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6816:4321":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:8368:19803":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:1824:2650":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"18:481:3055":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11518:6262":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"15:214:18837":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:4414:2260":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:43246:2571":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:4849:4128":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12964:3838":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7483:4093":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:10419:2140":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:153:2871":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:1903:19848":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6757:5647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13393:3971":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:1589:4824":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:6594:5563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2967:2267":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"0:0:1803":{"crate_id":0,"path":["autocfg"],"kind":"module"},"1:3391:2110":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:7211:2074":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6363:2220":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11547:3481":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:538:3065":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5510:4141":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:11149:6557":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:6496:19741":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:8475:19784":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9422:6374":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4422:5042":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1663:4880":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4566:5557":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:12225:3605":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:3243:1636":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"2:40637:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:1716:4908":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"5:7135:7519":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10350:3271":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13031:3855":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2709:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:7792:2677":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:43603:6576":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:20645:7650":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13557:4013":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:46747:6144":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"12:1852:4603":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:9293:6368":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"14:221:4546":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:6069:7680":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:4131:2100":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12884:3815":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"7:79:18648":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13231:3909":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:22240:2533":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10245:6419":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7041:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6667:5588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:46685:6142":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:2827:12993":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:40623:5950":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8161:2120":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:10050:6550":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8483:2165":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:8796:3194":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46655:6140":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4261:4953":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9223:19816":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2521:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:3763:2890":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12797:3799":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:7475:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4805:5189":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:3020:7535":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6488:5511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"12:2205:2173":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:10011:2550":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13413:3974":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4483:5073":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:6554:2928":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13024:3854":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4673:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8240:6624":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:46457:6129":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11054:3368":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7948:6615":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:21702:5774":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:1739:13023":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:43550:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:1571:2915":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"12:1832:2166":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10062:6409":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:1788:2640":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:11871:1452":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"0:49:1659":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"1:6322:6603":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:44276:6032":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:1891:1633":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:14:2053":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:39590:5906":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:962:2890":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21492:5760":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:8216:7628":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:531:4742":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:7857:6613":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"12:725:4601":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2793:7637":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:41660:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:39364:2076":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:20671:7651":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:660:6338":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:3854:4107":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:39326:12821":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10546:19807":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:11368:5983":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4476:5071":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1367:2166":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7511:4399":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:1438:6521":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:38999:2441":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7267:4387":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:8638:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:3744:2879":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:43161:6000":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:9119:24951":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:44232:6030":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:7446:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:41757:2425":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:1509:4781":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9283:6367":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6668:4303":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4408:5034":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:3188:4099":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:7522:2996":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:242:6343":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:6542:2229":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:860:2587":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:561:4759":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:45043:6064":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"12:320:2875":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6017:6452":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:9601:3215":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:1931:6350":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"12:98:4594":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:12429:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:12730:3780":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:5554:5738":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8180:6623":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8185:7551":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:10630:6647":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:4016:6541":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:0:1366":{"crate_id":1,"path":["std"],"kind":"module"},"17:11873:3528":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:42951:2560":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3915:7559":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11661:3498":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5949:4206":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:44584:6045":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:43385:6019":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:7809:2681":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"10:0:1941":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2341:4051":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13382:3966":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11893:3529":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10434:3287":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"12:777:2883":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"12:1840:2915":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:2652:5713":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"12:1003:6515":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3269:12720":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12251:3607":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:2928:33408":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:8701:3191":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11034:3367":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11327:3010":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:7819:2682":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6865:4329":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7278:4088":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:20439:30471":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:7596:31893":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:22273:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:621:2523":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:9090:2427":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:39319:5887":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3051:2148":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:2103:5701":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:1550:4799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:12934:3832":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:8056:4469":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5878:18851":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:1518:18815":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:3175:4603":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9627:6384":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:2784:2582":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:11706:3014":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"12:387:34633":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:10123:2566":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:38785:5864":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:11384:5984":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2964:2266":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:920:6521":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:2185:34600":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:43611:6026":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:11615:2542":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:10837:1640":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:8168:2121":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12609:3733":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:4285:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:1645:5727":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:39246:5879":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9371:6361":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7956:4095":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:9778:3222":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:46670:6141":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:20853:7573":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:5917:5437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:962:6514":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:6611:6603":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:8218:6547":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:3667:2465":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"8:0:1939":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7309:4089":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:42188:5974":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:8241:19799":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:21814:1912":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:41274:2214":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:2361:2691":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:3985:7566":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11251:6255":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:42610:2553":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:9738:3218":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12307:3614":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4457:5061":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:11870:1374":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:2862:4349":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:4498:7605":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9031:34657":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4994:5288":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:4263:6543":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:8510:3185":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7942:6501":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:925:6506":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3123:29987":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9362:3207":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:8351:2152":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:1554:2100":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:6979:2793":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:21710:5775":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:9100:2431":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:20424:30471":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:3667:6593":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10476:19916":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:7552:2174":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:20884:7647":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4451:5058":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10708:3318":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:6222:2915":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2213:2683":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10314:2185":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:29949:5794":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11909:3534":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4766:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:4394:2442":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11070:3372":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:39345:5891":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:1072:33397":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1710:4907":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:10462:3002":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:10762:6556":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:9539:6383":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:42522:6574":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4649:5113":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:41194:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1083:6520":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:2579:4061":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1051:4330":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"9:709:2162":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:40503:7553":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11997:3565":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:420:3145":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:46287:6126":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:1786:2639":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:20411:2406":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12748:3785":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11515:3474":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:5815:19737":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:5755:2226":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:1056:33448":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9339:6372":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"12:1628:2884":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:22837:2527":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:11830:27025":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8921:6628":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:39305:2558":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9658:6387":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10332:19915":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10221:6417":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:2749:4068":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:481:4711":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9111:6230":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10403:3321":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12337:3289":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13082:3868":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:40588:6201":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:736:23556":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:7452:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11315:3422":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10385:3282":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1213:4330":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:4259:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:847:2166":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:8212:19798":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:43266:2572":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6070:4213":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2411:4054":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"12:1085:6518":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:42838:2564":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:42361:6570":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12265:3610":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:39359:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8820:6221":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4628:5101":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:929:6507":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4313:4989":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:5327:2182":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:5761:6431":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6690:4085":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:44298:6033":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:42942:2559":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:44566:6044":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:5347:2183":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13366:3962":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13148:3887":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:7249:6489":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:1628:2890":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9857:6404":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:39449:2091":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:20725:7573":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:5615:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9873:6406":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"9:586:4617":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:12349:3621":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9577:3213":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10672:6242":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:6649:5577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2549:2962":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"14:0:1944":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11684:3503":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:9557:2961":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:7469:4092":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1527:4789":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2847:12995":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:24:599":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:39498:2116":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:487:6346":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10944:3004":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:870:2465":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:44344:6035":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4871:5231":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:567:4762":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:3232:12719":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"12:1859:4604":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6654:4301":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11511:6262":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11486:6258":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12874:3814":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:41236:1641":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"1:3159:2138":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:5457:2928":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:4673:7576":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:42756:2567":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:3263:4100":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5990:5465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:21141:7669":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:641:6583":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10075:6410":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4361:5014":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:9001:24369":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:9681:3138":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:1836:2465":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2345:2686":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11218:6252":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4733:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10845:3289":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:46560:6133":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2631:4063":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:521:23558":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"12:697:6507":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13158:3890":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13580:4017":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:6939:2208":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"18:719:3090":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:967:6347":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:9088:2426":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41654:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:10528:6426":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6903:6225":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6123:4074":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8248:6621":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8401:2162":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11259:3404":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7980:19748":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:4004:6540":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10796:3323":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"18:590:3068":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:8987:6225":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12164:3590":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:4413:4115":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9458:6377":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12148:3586":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"12:2080:6516":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:46617:6138":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7637:4413":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4703:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6530:5535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:29989:5795":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:8967:6634":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:1827:5733":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6790:4320":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6791:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:39222:5877":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:40849:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10138:2193":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:5596:4152":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:5793:4035":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4439:5052":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7970:4462":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13176:3894":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:6730:12966":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:7226:2268":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:8911:34656":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:45491:6087":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"12:1866:4605":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42898:2561":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:1597:4606":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4929:5256":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:1074:6516":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10625:3314":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:6472:2223":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11147:3006":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"1:5495:2190":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:9234:6549":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5679:2215":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5184:18850":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:2367:4052":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:1845:2879":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:39730:5920":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5813:5379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5931:5448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6571:5562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:507:3057":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:39511:5894":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:1652:4872":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:1244:6515":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"12:2198:4610":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:5203:3184":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7033:2465":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43560:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12850:3812":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4850:5216":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:39951:2956":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:38738:12722":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:38904:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5780:4177":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6200:4227":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:21545:5761":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:119:13412":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:42440:5752":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4618:5094":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:7953:1905":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8155:2118":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:39289:12820":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:5690:5320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12948:3835":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:11245:6254":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:7168:2075":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11880:729":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:7469:5686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:39961:5926":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5878:5423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:39942:2146":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:3415:6539":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:9382:2678":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2573:2124":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"15:0:1945":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46551:6132":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2481:7573":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13047:3857":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2300:4044":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:3026:3100":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4786:4126":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6698:5614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11485:3465":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:39632:5910":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9193:34655":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:1592:4605":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4539:5086":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4787:5178":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:9098:2430":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:2924:5706":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:21764:30673":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6059:34648":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"12:762:2879":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:43624:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:42908:2551":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:8418:19805":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:45567:6089":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5122:4131":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"15:193:18833":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:2366:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"9:0:1940":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:2932:33405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:9919:2166":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9722:1642":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:44529:6042":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4369:5017":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4468:5066":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2252:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:38992:6563":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:39520:5895":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"12:810:6521":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:9968:2120":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2798:4343":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6094:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11368:3436":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6359:4245":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11125:3380":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:21598:5762":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:8217:7627":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13059:3863":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:9791:3223":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12134:3584":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8499:2168":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:8272:19800":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:42888:2121":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:4921:4130":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:41403:2426":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:9021:6360":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:11419:2550":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:8393:19804":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:42917:2549":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11877:731":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:7484:6651":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:9086:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9155:6362":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:782:2893":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:4330:2100":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:5996:6438":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4559:5088":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:638:6581":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8424:2163":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:21675:2530":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:1586:4604":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3316:2146":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2759:2263":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:11149:3384":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:62:13358":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9831:6399":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:40575:5948":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:2205:5709":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:4564:5555":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:558:6580":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13506:4002":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:11412:6595":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:487:4714":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7059:5954":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7872:4454":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:38926:7513":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:44507:6041":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:7601:6154":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6735:6466":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:1479:6527":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:22339:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:39529:5896":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:10659:2680":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:38816:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:939:7520":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:21635:5765":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6298:4233":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:8137:19796":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:5839:19738":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6252:4232":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:40874:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:22306:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:9844:6402":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:39716:5919":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:6475:2224":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:12510:7537":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:2921:2517":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:534:2975":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:2683:4065":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:7622:3002":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11617:3490":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12322:3618":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5759:5352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:80:23545":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"9:896:18655":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4404:7589":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:5000:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8333:7620":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9328:6371":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:40688:2464":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"12:659:2465":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4757:5164":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:2916:6354":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:727:3093":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:286:2270":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:4:998":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:10867:2188":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:39581:5905":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12060:3573":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:2993:4096":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7434:5678":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:599:34667":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:3599:4103":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"12:1555:6523":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10828:4685":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:187:18827":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:586:4772":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4910:5248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3403:12778":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:20696:7641":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7426:6497":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:42634:2120":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:42532:5755":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:2282:4042":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11828:3523":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:7498:5693":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:1753:5728":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"11:0:1942":{"crate_id":11,"path":["adler"],"kind":"module"},"2:2329:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:5951:5454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:5681:2915":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:42802:2563":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:2823:7638":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:8762:2186":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:1677:4891":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2217:2109":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4637:5106":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:7322:2935":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10724:24380":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:6682:31135":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:3141:4604":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:45331:6085":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:361:6579":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2706:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:8951:34654":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:9574:2962":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:42412:5749":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12087:3577":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7847:4451":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5363:2184":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:41941:5966":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:38840:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4988:5286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2933:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2705:4066":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:40764:13072":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:7182:30683":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5843:5402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"0:123:1645":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"2:43018:12746":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:1398:2465":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:7555:2588":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:4671:7575":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:5235:4133":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12836:3808":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:4888:4129":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2695:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:39469:5753":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:6359:2219":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4697:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:39651:5912":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:12263:6559":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:4632:7589":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:8811:32367":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10207:6413":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:646:7507":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:2922:33407":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11951:3555":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"9:649:18676":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:7909:4460":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"9:111:18669":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:6178:2984":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7802:2680":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:4330:2949":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:1674:1071":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8089:2145":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:39619:5909":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10270:6421":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2868:4350":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4334:4999":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:699:3085":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:40954:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"12:646:2587":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:0:1938":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5664:4164":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5494:19735":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:42513:5754":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4841:5210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:572:4764":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:42702:2569":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8974:6635":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:41234:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:8822:34662":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:862:2898":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6528:4282":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:7218:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:8526:3186":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:31777:5860":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:10360:3273":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4890:5241":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4882:5236":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5981:4211":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6548:5544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:3546:2166":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:11163:1915":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:41154:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:6421:2890":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13374:3965":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11888:1108":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2961:2265":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8105:2111":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:39406:2077":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:30581:2406":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:11556:2175":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:4844:7613":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4328:4996":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:9631:6385":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:4028:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8222:6201":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:43353:6011":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:9943:2587":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13404:3972":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5752:5348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:7704:2652":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:39185:5873":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5472:4079":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:42684:2570":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6109:4216":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"9:622:18675":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:5686:2216":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12361:3628":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6052:6463":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:9501:3200":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10233:6418":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5163:4132":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13327:3947":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11186:3390":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10682:3317":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:43223:6002":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:1564:2166":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13354:3959":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11271:3405":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:4571:5089":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11886:777":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:8295:19801":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:11233:6607":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:6091:2990":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:217:2888":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:7797:2678":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:40469:5932":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:44322:6034":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:671:6342":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:1229:6516":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6611:5565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:10422:2136":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:40611:5949":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:39258:2560":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2524:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:5724:30893":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:45601:6090":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:1609:4838":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:3455:2115":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:9350:3179":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"0:50:1665":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"2:11595:2547":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:45177:6067":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:46209:6125":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11748:3512":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5716:5335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:8162:19797":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:39969:5928":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:1429:4602":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:4662:4122":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:43055:5994":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11468:6257":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9303:3200":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4554:7561":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40832:2587":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10209:1639":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"12:60:34632":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:6528:2228":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"9:920:18656":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:5948:5739":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:9982:2650":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:8806:31892":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:4357:4113":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:2527:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5698:5322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:4363:2921":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:44777:6056":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:39558:5901":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:39376:30683":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9766:7573":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:834:2896":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"1:11074:6247":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12955:3837":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11005:2186":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:4788:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:10321:3266":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13126:3882":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:3167:4605":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:3963:7562":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11774:3515":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9401:3204":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6676:4084":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:4635:4121":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:1849:2658":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5772:5361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:6884:7177":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:21748:30682":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:3204:12796":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8234:7586":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:4101:2100":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:6573:2940":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:914:2879":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:39599:5907":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"9:188:18704":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:12816:3800":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2605:4062":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13100:3872":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"9:33:18725":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:3439:29474":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44729:6055":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11879:733":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4714:5147":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10721:3320":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:7681:6156":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:9073:6229":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:10997:3353":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:7166:19744":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:20456:30814":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6541:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:7521:5696":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8274:6625":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7211:4181":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4501:5084":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:6154:2932":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:7665:7506":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11056:2700":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:30189:30684":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4952:5264":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"12:822:7520":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:2886:13001":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1583:4822":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:11600:2541":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:43198:6001":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:42933:2558":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12008:3567":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6186:4076":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:614:34669":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:43357:6012":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11345:5982":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"9:592:18674":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:10455:3291":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5805:5374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:5263:1374":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"6:6773:5653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8056:2149":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:6877:19743":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11528:3476":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11161:3387":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1330:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:3217:31061":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:4749:4125":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:853:6513":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13594:4020":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12781:3796":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:5712:2217":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:9022:6228":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:2509:4058":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3566:4102":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:21:670":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11881:1470":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:21800:2531":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12176:3592":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:6994:5717":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:12190:12831":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:7034:26592":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6345:4082":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:8991:34660":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:1575:2879":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:4817:4127":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:3865:7557":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13114:3879":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12860:3813":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:3192:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:44853:6058":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10159:3263":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:39194:5874":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8814:2465":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12278:3611":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:43429:6023":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12980:3842":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:40781:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:41114:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:4568:5559":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:7228:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:7275:27022":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:5447:6429":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:2476:2131":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:40773:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:4064:26595":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:7873:2135":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:39667:3078":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:10416:2138":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:44996:6063":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11267:3008":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:2360:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46571:6134":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4237:4935":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:7239:5723":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:40824:2166":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:3283:2128":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"12:2184:4608":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:21293:5759":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:30025:30685":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:48552:7678":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:7123:2173":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11882:1467":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:20877:7573":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13340:3953":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:2703:2575":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"9:800:4669":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5800:5373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10894:3331":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"9:676:18662":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:10714:2111":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:2324:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:44875:6059":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:11308:5979":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13527:4008":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:40532:5941":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:7173:5662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5558:19736":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4828:5200":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11356:3433":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:1962:6353":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"12:2053:4330":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:9304:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:39236:5878":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:21136:7646":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"12:751:2915":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11500:3469":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3198:12797":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:5791:2213":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:562:3326":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:10202:2568":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:9029:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:21651:5769":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:39691:5916":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2615:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:7127:12971":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:1687:4897":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:4340:2441":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:11017:2187":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10182:3264":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7343:4091":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:10161:6552":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:4268:6544":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:39702:2117":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:2702:2262":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:3249:6356":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:21826:2534":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:525:4739":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4379:5023":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9165:34653":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11217:3399":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:20727:7643":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:8323:2541":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:6053:5478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:6715:2932":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:564:3067":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:4884:2100":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:10849:24370":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:8339:19802":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7603:4409":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2601:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:4727:2982":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:2423:5710":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9274:6366":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:7123:12972":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12073:3574":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:1420:4601":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:1704:4904":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5628:4157":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4921:5254":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:44406:6037":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11330:3428":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8979:6636":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4301:4986":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6521:5534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4727:5152":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:6075:2972":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:3772:6595":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46708:6143":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:41410:2428":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10257:6420":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4751:5163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:493:4717":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5432:1640":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4389:5026":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:578:4767":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:7151:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10139:3207":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4583:5090":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"15:175:18832":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:4574:4119":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:39936:5924":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11800:3518":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"14:31:6502":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:6671:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11235:3400":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:7584:7573":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:5614:4156":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12291:3612":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10497:19917":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:44477:6040":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8798:2166":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2657:4064":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"12:393:34634":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:39179:2559":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:5161:2890":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:8014:4384":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:1898:2521":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:1459:6507":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:45957:6123":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:2852:12996":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:681:3081":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7825:4450":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:39681:5915":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:10752:3321":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3605:7554":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12896:3818":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:40446:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:2825:4071":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:5388:4078":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8229:6202":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11170:2195":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2433:4055":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10520:3299":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"18:624:34666":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9250:6364":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:2868:4073":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:3120:25254":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10283:6422":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:46533:6131":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:3177:13003":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10108:6412":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:5786:5372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:247:6344":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:7585:6153":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13184:3896":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6241:4231":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3535:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10973:3352":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10374:3278":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:1568:2465":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11606:3489":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:582:2406":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:7201:5665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:6123:6602":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6842:4327":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7543:4081":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4246:6597":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:42421:5750":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6743:5638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11974:3564":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:45097:6066":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:7173:2269":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:44428:6038":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:3016:7534":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:1092:33445":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6330:4243":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4262:4110":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:38976:5870":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:10729:6555":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9909:3224":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11639:3497":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:43408:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:10949:3338":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"12:2069:6515":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8174:6621":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:484:2974":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:2891:13002":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13518:4004":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6719:5628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5945:5451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:44899:6060":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8907:2218":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7943:6614":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2772:2579":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:0:1947":{"crate_id":17,"path":["object"],"kind":"module"},"17:1021:6348":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"18:491:3056":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"12:2190:34630":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:6268:2890":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:5880:2100":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10121:3261":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:38699:2589":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:45537:6088":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2518:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12756:3786":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8117:2113":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:42856:2565":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:3973:7563":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:1921:5734":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:44252:6031":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:9947:19890":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:3929:7561":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:9081:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:13492:3995":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4945:5261":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:861:6514":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8300:6204":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2343:1687":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:42578:1913":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:12550:3681":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2946:2123":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1747:4919":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:679:7508":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:5205:2545":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:1723:4911":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:8868:7630":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:8884:7631":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:534:4032":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5703:4167":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:1771:6349":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:96:23546":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1382:2587":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10088:3258":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:540:4748":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6270:4077":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:38958:6562":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:6628:5570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:0:1948":{"crate_id":18,"path":["memchr"],"kind":"module"},"14:165:18820":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4102:7584":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13091:3871":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7117:34651":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:4191:2440":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6210:4228":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"0:51:926":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"1:7541:2998":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:41958:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:5374:4075":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:7596:6608":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:3824:1903":{"crate_id":1,"path":["std","num"],"kind":"module"},"1:4318:6598":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:9096:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2534:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:44376:6036":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4669:7572":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7319:4392":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:31773:6561":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:9183:6363":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:44823:6057":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:2389:4053":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11867:1033":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:5313:2181":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:50262:6151":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:950:6511":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:21401:7644":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:40755:6565":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4795:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:594:4777":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:41669:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:355:6578":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2727:4067":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:8441:2164":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:2842:4072":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:12238:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6764:5650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:6399:2227":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1732:2879":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:499:4719":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2613:2134":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:3126:29989":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:10642:19809":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13192:3897":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9820:6398":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:11203:6251":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:43086:5998":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4656:5114":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:8752:2118":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:20733:7645":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3977:7564":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:41034:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"9:827:18750":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12926:3829":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:8256:6203":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:5378:1639":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:1604:4836":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:3687:6528":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:10230:6553":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:43040:5988":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5728:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8806:6627":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:43653:4613":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:7559:12970":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"12:815:6508":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10608:3159":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11876:734":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:9488:6381":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:46349:6127":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11853:3525":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:42604:2554":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:386:6345":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6137:4218":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12638:3744":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:8871:6357":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"9:977:4688":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:39927:2219":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:42620:2118":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8839:6222":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:5460:4139":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:4353:5012":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12674:3774":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6284:4094":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:11174:3389":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:7372:34646":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:3125:6355":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5959:5456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:891:4602":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12022:3569":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8852:7629":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:3632:4104":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12237:3606":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:48909:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4396:5029":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5967:5459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1580:4603":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8510:2169":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6161:19739":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7135:34650":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:3675:2135":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:11350:6593":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9475:6380":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:878:4601":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10670:3316":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13134:3885":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7487:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:30564:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:653:13769":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:8494:3184":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:46411:6128":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"9:19:18724":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:9040:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10420:3286":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:7076:2465":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:42542:6575":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:41773:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12211:3604":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:2705:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:29763:2529":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:11865:1486":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6472:4270":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4862:5225":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1514:4783":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13572:4014":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5014:6599":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:8441:19806":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:5563:2985":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6342:2465":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:22405:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:9108:6361":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2371:2696":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:904:2915":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"14:7:6502":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2831:12992":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1559:4805":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:29983:5725":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13007:3846":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:2809:12991":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9118:34661":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:271:2890":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6704:4305":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5902:5435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11939:3553":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"9:382:18759":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4877:5234":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:39312:5886":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"13:226:4593":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:473:4706":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:11133:13082":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:12211:31208":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5660:5295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:42500:6573":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2815:4344":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:21399:7573":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:40722:5954":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4629:7614":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:2714:2445":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:20684:7573":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:4171:2166":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:46099:6124":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4218:4925":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10357:3001":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:9877:5945":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12768:3791":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:20458:30810":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13436:3987":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:3457:3104":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:9387:3000":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7329:4090":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:4297:4111":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:4051:12718":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:12455:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:45751:6091":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2275:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3187:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11863:923":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11137:3383":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:44921:6061":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10310:6424":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:11164:6248":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"12:274:4595":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:7237:4386":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:43373:6016":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4416:5039":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22438:2532":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2857:12997":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:43069:5997":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12033:3570":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5525:4144":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:45301:6084":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11813:3520":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:30083:30687":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:13214:3902":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:3105:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:44446:6039":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"14:202:12758":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11787:3516":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:2359:2690":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"13:110:34637":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:21727:30696":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10875:3328":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7567:19746":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3238:2136":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12198:3603":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:10649:6234":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:5556:2984":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:46580:6135":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:4604:12813":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2707:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:8596:3188":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7019:34519":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"12:1872:4606":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13221:3904":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:43641:6029":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2998:12721":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:7708:6561":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"14:215:4544":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:6496:5516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:5411:4080":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:40705:2587":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11087:3374":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4429:5045":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:38882:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2793:4070":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:3969:2890":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:10654:6236":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:879:2166":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:8941:6358":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6463:4269":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7929:6498":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6079:5493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7511:5694":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:11093:6229":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:13039:3856":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:41988:5972":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3871:7556":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:3626:2890":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:31737:2191":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:43212:12751":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:8981:6359":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:43369:6015":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:6059:5479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6171:4224":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:45074:6065":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:1258:6520":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:42173:5973":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:41970:2162":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:39392:5892":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4489:5075":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:1534:4791":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"12:1029:6516":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10950:3005":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:2771:4069":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11869:1344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:43233:6006":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10445:3289":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:9092:2700":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11841:3524":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:22372:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:31786:2578":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4720:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"13:0:1937":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:44:4615":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:7164:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7659:19747":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:7305:2879":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:7357:4393":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6781:6467":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:5541:4146":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:1997:2135":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:3448:2112":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9382:3202":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:3689:4105":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:2487:4057":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:2132:5703":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:7440:5679":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:5771:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:5209:2546":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:7298:4391":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:11666:12748":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:41417:2429":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11014:3357":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9885:6407":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11883:1468":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:5737:4173":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:36:4614":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:42652:2566":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44945:6062":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:4545:4118":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:7463:5685":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7435:4397":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:6988:2465":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6146:4219":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:3134:2166":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"12:1065:34631":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8148:2117":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:2840:4345":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11761:3513":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:7160:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42192:5975":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:7671:6155":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:10506:3296":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13478:3993":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2261:18852":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4962:5269":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:6546:2473":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"12:353:2877":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:8631:3189":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6643:5576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:3532:2915":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:3146:34515":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:6879:2145":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"7:0:1513":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5999:2986":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:39539:5898":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:39642:5911":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11199:3391":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:41687:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:12972:3840":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:43441:13125":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8776:2187":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:5938:5450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:43134:5999":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44707:6054":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:40713:2465":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:8055:19785":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11436:3440":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12118:3583":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:7198:2073":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11721:3507":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11576:3486":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6376:19740":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:39283:2559":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:3402:4101":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9751:3220":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:9358:5746":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:1470:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40840:2465":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:2788:7635":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:9185:2657":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:4426:7590":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4662:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:652:3057":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10822:19810":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:2835:12994":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:4689:4123":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3240:2137":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11247:3403":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4346:5008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5741:5340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1927:2522":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:4402:5031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5910:5436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12617:3736":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12514:3650":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7195:5663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1899:14750":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:3199:2140":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10583:19808":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:2539:2132":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11559:3483":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13459:3988":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:1448:6506":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:39913:5922":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8744:2185":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:43365:6014":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1520:4786":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13071:3864":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10684:2681":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:11878:732":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:43381:6018":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12103:3579":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4611:5092":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:42784:2562":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:22174:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:43377:6017":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:6000:5467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}