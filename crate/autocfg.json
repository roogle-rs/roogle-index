{"root":"0:0:2586","crate_version":"1.3.0","includes_private":false,"index":{"0:68:1192":{"id":"0:68:1192","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[144,4],"end":[149,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3035:1828":{"id":"2:3035:1828","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13648:26263":{"id":"2:13648:26263","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13524:2577":{"id":"2:13524:2577","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13578:27043":{"id":"2:13578:27043","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13027:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2552":{"id":"0:91:2552","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[422,4],"end":[426,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13571:3341":{"id":"2:13571:3341","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42424:191","prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13555:2744":{"id":"2:13555:2744","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44545:2955","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3862:1841":{"id":"2:3862:1841","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40137:7222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2721:26127":{"id":"2:2721:26127","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2558":{"id":"0:93:2558","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[440,4],"end":[444,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3036-0:155:2382":{"id":"b:2:3036-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3039:138","2:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3024:2419":{"id":"2:3024:2419","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2998:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3025-0:155:2382":{"id":"b:2:3025-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:787:3399":{"id":"5:787:3399","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2537":{"id":"0:86:2537","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[379,4],"end":[381,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13550:2565":{"id":"2:13550:2565","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44261:3446","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13552:7051":{"id":"2:13552:7051","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44277:2958","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13634:33951":{"id":"2:13634:33951","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13637:33952":{"id":"2:13637:33952","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13640:33953":{"id":"2:13640:33953","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:34649":{"id":"5:5721:34649","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3098","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3098","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13548:27041":{"id":"2:13548:27041","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13547:27040"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13605:33942":{"id":"2:13605:33942","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13212:3437","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::matches":"2:13602:2868"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44513:3457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:811":{"id":"0:108:811","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2382":{"id":"0:155:2382","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[87,0],"end":[94,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:67","a:2:32713:3092-0:155:2382","a:2:3244:247-0:155:2382","a:2:3279:3509-0:155:2382","a:2:42515:8987-0:155:2382","a:2:42516:9106-0:155:2382","a:2:32654:237-0:155:2382","b:2:3021-0:155:2382","b:2:3860-0:155:2382","b:2:3036-0:155:2382","b:2:3025-0:155:2382","b:2:3031-0:155:2382","b:2:2748-0:155:2382","b:2:2719-0:155:2382","b:2:2716-0:155:2382","b:5:784-0:155:2382","0:162","0:164"]}}},"2:13628:26219":{"id":"2:13628:26219","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720":{"id":"5:5720","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5721:34649","5:5722:14518","5:5725:34650","5:5728:34651","5:5736:34652","5:5737:34653","5:5738:2981","5:5739:26260","5:5740:26261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13551:7474":{"id":"2:13551:7474","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44267:3445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2395":{"id":"0:64:2395","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[111,0],"end":[113,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2447":{"id":"0:72:2447","crate_id":0,"name":"set_no_std","span":{"filename":"src/lib.rs","begin":[217,4],"end":[219,5]},"visibility":"public","docs":"Sets whether `AutoCfg` should use `#![no_std]` in its probes.\n\nSee also [`no_std`](#method.no_std).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["no_std",{"primitive":"bool"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13554:32400":{"id":"2:13554:32400","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13553:32422"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44574:3439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13620:33947":{"id":"2:13620:33947","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3031-0:155:2382":{"id":"b:2:3031-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3034:138","2:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13622:33949":{"id":"2:13622:33949","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13238:3430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13646:26894":{"id":"2:13646:26894","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40323:14356","Self::is_ascii":"2:13645:26258"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40323:14356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:247-0:155:2382":{"id":"a:2:3244:247-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:71:1224":{"id":"0:71:1224","crate_id":0,"name":"no_std","span":{"filename":"src/lib.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Returns whether `AutoCfg` is using `#![no_std]` in its probes.\n\nThis is automatically detected during construction -- if an empty probe\nfails while one with `#![no_std]` succeeds, then the attribute will be\nused for all further probes. This is usually only necessary when the\n`TARGET` lacks `std` altogether. If neither succeeds, `no_std` is not\nset, but that `AutoCfg` will probably only work for version checks.\n\nThis attribute changes the implicit [prelude] from `std` to `core`,\nwhich may affect the paths you need to use in other probes. It also\nrestricts some types that otherwise get additional methods in `std`,\nlike floating-point trigonometry and slice sorting.\n\nSee also [`set_no_std`](#method.set_no_std).\n\n[prelude]: https://doc.rust-lang.org/reference/names/preludes.html#the-no_std-attribute","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32654:237-0:155:2382":{"id":"a:2:32654:237-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13526:33934":{"id":"2:13526:33934","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13599:27051":{"id":"2:13599:27051","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13593:27048":{"id":"2:13593:27048","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12434:476","str::splitn":"2:13590:2749","self::pattern":"2:13212:3437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44413:3459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:2522":{"id":"0:82:2522","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2534":{"id":"0:85:2534","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[366,4],"end":[370,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3039:138":{"id":"2:3039:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32578:3024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:788:3400":{"id":"5:788:3400","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13564:26401":{"id":"2:13564:26401","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13531:26934":{"id":"2:13531:26934","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12759:2718"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:155:2382":{"id":"b:5:784-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:3398","5:787:3399","5:788:3400"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:693":{"id":"0:63:693","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[101,0],"end":[103,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13602:2868":{"id":"2:13602:2868","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13212:3437","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::rmatches":"2:13605:33942"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44495:3456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2527":{"id":"0:83:2527","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13557:32439":{"id":"2:13557:32439","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44583:3438","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13643:2754":{"id":"2:13643:2754","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13173:137","`FromStr`":"2:13172:3009"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13172:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13172:3009","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:26262":{"id":"2:13647:26262","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13649:26264":{"id":"2:13649:26264","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5975:1801":{"id":"5:5975:1801","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13561:2746":{"id":"2:13561:2746","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42515:8987-0:155:2382":{"id":"a:2:42515:8987-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42515:8987","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13575:2578":{"id":"2:13575:2578","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13212:3437","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::split_whitespace":"2:13553:32422","str::rsplit":"2:13581:27045"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44291:2959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[14,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","provide","type_id","description","source"],"trait":{"name":"Error","id":"2:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2705","0:28:447"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13596:27050":{"id":"2:13596:27050","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32713:3092-0:105:138":{"id":"a:2:32713:3092-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32713:3092","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13556:33939":{"id":"2:13556:33939","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44555:3453","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:447":{"id":"0:28:447","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[19,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:3084:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13558:2575":{"id":"2:13558:2575","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13581:27045":{"id":"2:13581:27045","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13212:3437","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::split":"2:13575:2578"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44309:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13618:33946":{"id":"2:13618:33946","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,0],"end":[463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:1192","0:69:2412","0:71:1224","0:72:2447","0:73:2450","0:74:2455","0:80:2426","0:81:2519","0:82:2522","0:83:2527","0:84:2532","0:85:2534","0:86:2537","0:87:2541","0:88:2543","0:89:2546","0:90:2550","0:91:2552","0:92:2555","0:93:2558","0:94:2561","0:95:2564"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3031-0:105:138":{"id":"b:2:3031-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3034:138","2:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13523:1008":{"id":"2:13523:1008","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12434:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13656:33955":{"id":"2:13656:33955","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5053:33955"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44608:3452","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722:14518":{"id":"5:5722:14518","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13590:2749":{"id":"2:13590:2749","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437","str::rsplitn":"2:13593:27048"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44395:3460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1192":{"id":"0:66:1192","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"Creates a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2705":{"id":"0:27:2705","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[15,4],"end":[17,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2555":{"id":"0:92:2555","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[435,4],"end":[437,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13539:27011":{"id":"2:13539:27011","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:2426":{"id":"0:80:2426","crate_id":0,"name":"probe_raw","span":{"filename":"src/lib.rs","begin":[321,4],"end":[323,5]},"visibility":"public","docs":"Tests whether the given code can be compiled as a Rust library.\n\nThis will only return `Ok` if the compiler ran and exited successfully,\nper `ExitStatus::success()`.\nThe code is passed to the compiler exactly as-is, notably not even\nadding the [`#![no_std]`][Self::no_std] attribute like other probes.\n\nRaw probes are useful for testing functionality that's not yet covered\nby the rest of the `AutoCfg` API. For example, the following attribute\n**must** be used at the crate level, so it wouldn't work within the code\ntemplates used by other `probe_*` methods.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nassert!(ac.probe_raw(\"#![no_builtins]\").is_ok());\n```\n\nRust nightly features could be tested as well -- ideally including a\ncode sample to ensure the unstable feature still works as expected.\nFor example, `slice::group_by` was renamed to `chunk_by` when it was\nstabilized, even though the feature name was unchanged, so testing the\n`#![feature(..)]` alone wouldn't reveal that. For larger snippets,\n[`include_str!`] may be useful to load them from separate files.\n\n```\n# extern crate autocfg;\n# // Normally, cargo will set `OUT_DIR` for build scripts.\n# std::env::set_var(\"OUT_DIR\", \"target\");\nlet ac = autocfg::new();\nlet code = r#\"\n    #![feature(slice_group_by)]\n    pub fn probe(slice: &[i32]) -> impl Iterator<Item = &[i32]> {\n        slice.group_by(|a, b| a == b)\n    }\n\"#;\nif ac.probe_raw(code).is_ok() {\n    autocfg::emit(\"has_slice_group_by\");\n}\n```","links":{"Self::no_std":"0:71:1224","`include_str!`":"2:34:947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["code",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[29,0],"end":[42,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42515:8987-0:105:138":{"id":"a:2:42515:8987-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42515:8987","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:90:2550":{"id":"0:90:2550","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[415,4],"end":[419,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13525:33933":{"id":"2:13525:33933","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13614:2584":{"id":"2:13614:2584","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:163:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13544:33938":{"id":"2:13544:33938","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12440:1741","crate::ops::IndexMut":"2:3522:9019","str::slice_unchecked":"2:13543:33937"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13522":{"id":"2:13522","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13523:1008","2:13524:2577","2:13525:33933","2:13526:33934","2:13528:33935","2:13531:26934","2:13532:33936","2:13533:336","2:13534:27013","2:13535:27009","2:13537:27010","2:13539:27011","2:13541:27012","2:13543:33937","2:13544:33938","2:13545:27036","2:13546:27037","2:13547:27040","2:13548:27041","2:13550:2565","2:13551:7474","2:13552:7051","2:13553:32422","2:13554:32400","2:13555:2744","2:13556:33939","2:13557:32439","2:13558:2575","2:13561:2746","2:13564:26401","2:13567:2745","2:13571:3341","2:13575:2578","2:13578:27043","2:13581:27045","2:13584:33940","2:13587:33941","2:13590:2749","2:13593:27048","2:13596:27050","2:13599:27051","2:13602:2868","2:13605:33942","2:13608:33943","2:13611:33944","2:13614:2584","2:13616:33945","2:13618:33946","2:13620:33947","2:13621:33948","2:13622:33949","2:13625:33950","2:13628:26219","2:13631:27052","2:13634:33951","2:13637:33952","2:13640:33953","2:13643:2754","2:13645:26258","2:13646:26894","2:13647:26262","2:13648:26263","2:13649:26264","2:13650:26897","2:13651:26898","2:13652:26899","2:13653:33954","2:13655:8980","2:13656:33955"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3025-0:105:138":{"id":"b:2:3025-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13655:8980":{"id":"2:13655:8980","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5056:8980"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44599:3451","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13587:33941":{"id":"2:13587:33941","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13212:3437","str::split":"2:13575:2578","prim@char":"1:12434:476","str::split_terminator":"2:13584:33940"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44359:3461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:3398":{"id":"5:786:3398","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:36-0:105:138":{"id":"0:36-0:105:138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[74,0],"end":[74,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:105:138","glob":false}}},"2:13537:27010":{"id":"2:13537:27010","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13541:27012":{"id":"2:13541:27012","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:34650":{"id":"5:5725:34650","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:2981":{"id":"5:5738:2981","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13546:27037":{"id":"2:13546:27037","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13545:27036","str::split_at_mut_checked":"2:13548:27041"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:34651":{"id":"5:5728:34651","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:811":{"id":"0:30:811","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[30,4],"end":[41,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43446:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42516:9106-0:105:138":{"id":"a:2:42516:9106-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42516:9106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13533:336":{"id":"2:13533:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13534:27013","`u8`":"1:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2561":{"id":"0:94:2561","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[453,4],"end":[455,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42516:9106-0:155:2382":{"id":"a:2:42516:9106-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42516:9106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3021-0:105:138":{"id":"b:2:3021-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3024:2419"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2719-0:105:138":{"id":"b:2:2719-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2721:26127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13567:2745":{"id":"2:13567:2745","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42424:191","prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3860-0:155:2382":{"id":"b:2:3860-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81:2519":{"id":"0:81:2519","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[332,4],"end":[335,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:155:2382":{"id":"b:2:2716-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:2853"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13645:26258":{"id":"2:13645:26258","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:165:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13608:33943":{"id":"2:13608:33943","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13212:3437","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::rmatch_indices":"2:13611:33944"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44441:3454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2719-0:155:2382":{"id":"b:2:2719-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2721:26127"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13611:33944":{"id":"2:13611:33944","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13212:3437","`DoubleEndedIterator`":"2:8374:130","prim@char":"1:12434:476","str::match_indices":"2:13608:33943"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44459:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13616:33945":{"id":"2:13616:33945","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3027:841":{"id":"2:3027:841","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32713:3092-0:155:2382":{"id":"a:2:32713:3092-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32713:3092","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3279:3509-0:155:2382":{"id":"a:2:3279:3509-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3279:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:73:2450":{"id":"0:73:2450","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[223,4],"end":[225,5]},"visibility":"public","docs":"Tests whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13584:33940":{"id":"2:13584:33940","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13212:3437","str::split":"2:13575:2578","prim@char":"1:12434:476","`DoubleEndedIterator`":"2:8374:130","str::rsplit_terminator":"2:13587:33941"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44341:3462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13621:33948":{"id":"2:13621:33948","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13545:27036":{"id":"2:13545:27036","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13547:27040","str::split_at_mut":"2:13546:27037"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13553:32422":{"id":"2:13553:32422","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13554:32400"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44565:3441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3040:1826":{"id":"2:3040:1826","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:480":{"id":"0:163:480","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13535:27009":{"id":"2:13535:27009","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3021-0:155:2382":{"id":"b:2:3021-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3024:2419"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:2401":{"id":"0:65:2401","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[122,0],"end":[124,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2543":{"id":"0:88:2543","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[394,4],"end":[398,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:155:2382":{"id":"b:2:2748-0:155:2382","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2746:3305","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:155:2382","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:26129"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69:2412":{"id":"0:69:2412","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[159,4],"end":[192,5]},"visibility":"public","docs":"Creates a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5359:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13650:26897":{"id":"2:13650:26897","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38367"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:811":{"id":"0:165:811","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[86,16],"end":[86,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5737:34653":{"id":"5:5737:34653","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3098","`String`":"5:7798:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3098","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[9,9],"end":[9,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:2455":{"id":"0:74:2455","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[229,4],"end":[233,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13652:26899":{"id":"2:13652:26899","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38367"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2716-0:105:138":{"id":"b:2:2716-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2718:2853"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13547:27040":{"id":"2:13547:27040","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13548:27041"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13528:33935":{"id":"2:13528:33935","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13526:33934"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13631:27052":{"id":"2:13631:27052","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13233:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3034:138":{"id":"2:3034:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:2718:2853":{"id":"2:2718:2853","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2586":{"id":"0:0:2586","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[535,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:36-0:105:138","0:155:2382","0:63:693","0:64:2395","0:65:2401","0:66:1192"],"is_stripped":false}}},"2:13651:26898":{"id":"2:13651:26898","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:38367"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3860-0:105:138":{"id":"b:2:3860-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13543:33937":{"id":"2:13543:33937","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12440:1741","str::slice_mut_unchecked":"2:13544:33938","crate::ops::Index":"2:39968:9018"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13653:33954":{"id":"2:13653:33954","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5055:33954"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44590:3450","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3244:247-0:105:138":{"id":"a:2:3244:247-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13532:33936":{"id":"2:13532:33936","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:26261":{"id":"5:5740:26261","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13649:26264"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5973-0:105:138":{"id":"b:5:5973-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10448:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32655:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5971:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5975:1801"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3279:3509-0:105:138":{"id":"a:2:3279:3509-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3279:3509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2750:26129":{"id":"2:2750:26129","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2541":{"id":"0:87:2541","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[387,4],"end":[391,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5736:34652":{"id":"5:5736:34652","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2532":{"id":"0:84:2532","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[359,4],"end":[363,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:26260":{"id":"5:5739:26260","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13648:26263"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13534:27013":{"id":"2:13534:27013","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32654:237-0:105:138":{"id":"a:2:32654:237-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3036-0:105:138":{"id":"b:2:3036-0:105:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:105:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3039:138","2:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13625:33950":{"id":"2:13625:33950","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12434:476","self::pattern":"2:13212:3437"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13218:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:2546":{"id":"0:89:2546","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[407,4],"end":[409,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2564":{"id":"0:95:2564","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[458,4],"end":[462,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:138":{"id":"0:105:138","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[10,0],"end":[12,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32713:3092-0:105:138","a:2:3244:247-0:105:138","a:2:3279:3509-0:105:138","a:2:42515:8987-0:105:138","a:2:42516:9106-0:105:138","a:2:32654:237-0:105:138","b:2:3021-0:105:138","b:2:3860-0:105:138","b:2:3036-0:105:138","b:2:3025-0:105:138","b:2:3031-0:105:138","b:2:2719-0:105:138","b:2:2716-0:105:138","b:5:5973-0:105:138","0:29","0:107","0:26"]}}}},"paths":{"1:9201:8188":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11065:7866":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12605:4365":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4875:6238":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13838:4561":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:42828:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:41175:7377":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12962:22032":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:6205:21826":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:8008:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11358:21912":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2840:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12776:7930":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11878:4365":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:22184:9120":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:821:3412":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:5533:6505":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8638:8184":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8842:3003":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8646:8181":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:7392:30304":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:6879:3065":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:10973:7746":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:4929:6265":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1415:8039":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5217:6363":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:936:8041":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:47347:7621":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:1696:6160":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:14672:4723":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5570:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5196:6351":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:7746:26313":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:10994:7754":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:3304:30786":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:9428:3053":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:14738:4748":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:7753:14353":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7168:5562":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:11584:3440":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:47302:7620":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12749:7928":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7282:5589":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:47627:7643":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12524:7915":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:2612:14549":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:15106:4810":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6473:6632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5562:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:11088:28366":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:15919:5067":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13871:4567":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:44088:7091":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:8066:21836":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5319:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46875:7578":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:10991:32065":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:16084:5134":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12056:4373":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:8330:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:3716:33620":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:11135:32066":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:8739:9102":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:47103:7586":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:1905:3479":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:6757:34871":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12648:4436":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:41262:4187":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:11759:7771":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4937:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14460:4693":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:10954:8209":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:2610:14548":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:6381:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:22753:9206":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:8374:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:1867:3469":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12906:4458":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:15829:5042":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:854:8030":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:12302:8098":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:5127:6338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:11516:3518":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11678:7879":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:16714:5290":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:11475:21915":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:12220:28304":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13635:4513":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11073:2376":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:12454:1853":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:16145:5141":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:42643:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:12373:3442":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:7577:7046":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:11892:8146":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"15:327:20922":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11773:7772":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:4160:9043":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:15496:4972":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:14416:4685":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12008:4260":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5144:5405":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:472:7847":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:34467:14532":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5375:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7058:5537":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:10460:2923":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6159:5427":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:923:5864":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10516:21900":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11788:7882":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:44740:7476":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43408:32491":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:8226:3586":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:9326:26220":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:573:8971":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:1667:6149":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:45005:7490":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:13238:3430":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:22791:9207":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12723:7926":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:7577:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12216:4389":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:42216:9038":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:3866:8056":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:4527:2933":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:3465:2960":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:12451:914":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:517:5991":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:1586:5864":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11527:7874":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:14152:4629":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:4168:9044":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:1494:6035":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4120:5387":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5420:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:4946:3330":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:7752:14352":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:2920:5354":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:2790:2972":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6904:5521":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:564:6017":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40782:32419":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6611:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:4346:9068":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:2748:5346":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12673:7919":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:3854:7858":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11049:28507":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:23294:32401":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:41063:7094":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:22880:9211":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9142:3021":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:6927:34871":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12176:4383":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:3522:9019":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11057:8185":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:12052:30345":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"5:282:34871":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1690:6159":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8238:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:6084:5420":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7212:5574":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12433:1188":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:2900:5353":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:9499:7745":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"9:480:20809":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:4884:14333":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:40942:7364":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"14:160:8020":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12952:4463":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:47008:7583":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"18:726:4202":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2550:5337":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:378:8129":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13006:4469":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:2227:7851":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1711:6167":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10450:2918":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:1064:20891":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:8263:7674":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:9148:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:6814:7073":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:7368:3610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15586:4985":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:43467:2370":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:43127:2925":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8730:8186":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"5:3343:35346":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:2645:2969":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8804:3001":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:11013:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:10097:21886":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:5357:2986":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5349:6419":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:3490:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:7487:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4411:8149":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:6443:6622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:9172:3022":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10296:21893":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:22462:9125":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:12886:4456":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:16399:5208":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8632:9070":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:12028:7778":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:14346:4676":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:2155:7056":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10218:21890":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14872:4770":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6823:6788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:5300:3047":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5019:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10551:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:9319:8191":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:2378:21962":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:15896:5059":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"11:671:3005":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:46518:7545":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6419:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:14547:4707":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12347:7913":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8549:2957":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13451:4499":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:2299:2371":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:10703:30330":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:23476:7139":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"11:835:8027":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:44106:8121":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:8137:5376":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:44918:3464":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:15753:5024":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:10774:2976":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:14019:4593":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:46600:7549":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5462:6483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:7838:21835":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:23509:7142":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:4976:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46617:7550":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:1982:3401":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:7938:5682":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:8528:5749":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15475:4967":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:1852:703":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:5399:988":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:7563:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10597:4325":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:1627:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2081:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:42546:3521":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:11026:35419":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4208:9046":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:3349:2977":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:4573:34855":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10928:7864":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:3834:5386":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:7734:2897":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:9354:8196":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:465:5958":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:11492:3005":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7416:7985":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:635:4189":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8216:3589":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:46211:7511":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:8711:5765":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:3676:14539":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:5113:5404":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:14627:4718":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:5590:2375":{"crate_id":1,"path":["std","process"],"kind":"module"},"5:726:8048":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7030:5535":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:2018:794":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"18:608:7839":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:8308:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:43652:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:11775:3460":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:4146:9042":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:42441:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2082:1373":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2660:5342":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:44887:7485":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2998:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13082:7868":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:4915:3088":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:3239:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:8789:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7223:5575":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5381:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:2684:5343":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:32578:3024":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:11041:28512":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:6998:5526":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:0:2764":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:15876:5052":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:5131:7859":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:44513:3457":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40022:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6890:5360":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:44126:8122":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"11:430:35389":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:45347:7510":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:45021:7494":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13933:4577":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12762:7929":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:33881:9114":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2052:7055":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:985:9003":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:46372:7529":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"9:390:20811":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10442:21898":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"0:66:1192":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"5:7601:3345":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:3720:3518":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:15077:4807":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9259:9109":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12711:7925":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7542:5624":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4984:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"15:306:20918":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7821:8076":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11736:3001":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"16:2590:5339":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:12446:763":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"9:445:20810":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:1838:14466":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:6843:5513":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:23235:7115":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4816:6194":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:8336:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:41008:2900":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:13027:3440":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:3317:14254":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:12044:7900":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:12444:744":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:12445:747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12941:4462":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:9308:8189":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:2518:3584":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:3768:14260":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:10462:2924":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:44599:3451":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:3987:4226":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"16:6302:5451":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:45215:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:4404:5392":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13157:7937":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13471:4443":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:3309:35345":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:1625:6120":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15410:4926":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:5060:5402":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10487:21899":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:13322:21903":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:11803:8096":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:7498:30162":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:3001:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:14140:4626":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4896:6247":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5551:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1597:6095":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:32620:8110":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:10863:32064":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"5:1785:34871":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:7899:4312":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5405:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6713:7973":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:22615:3590":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:16761:5300":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:3141:4213":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:2366:8046":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:6578:9214":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:9313:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:46837:7576":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5676:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4152:5388":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10418:21897":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13733:4532":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13349:4492":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:16750:5299":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:6173:5430":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:6125:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:10669:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:13218:3431":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2477:2420":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:10803:2958":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:3325:14256":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:42244:7413":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:6950:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:13233:3432":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:41677:7400":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:15836:5043":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12293:7908":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:23531:7144":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"11:685:3518":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:6813:6786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11161:30349":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:3295:9115":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:46681:7554":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:11734:8095":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4812:9045":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:553:6012":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:685:8982":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:16283:5181":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:38565:14534":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5325:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45029:7496":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2148:14559":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:12163:4382":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"14:0:2762":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5417:5414":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12392:4398":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:6384:7098":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10938:35417":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11421:7871":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:8255:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4822:6875":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:44395:3460":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46241:7515":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:41214:7381":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5255:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6917:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:16132:5135":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:41650:2984":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5593:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12931:4461":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:16642:5271":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:47455:7625":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:8562:2959":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:5757:5418":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:1489:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"11:1564:20892":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:7463:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:22066:9122":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12095:4377":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5428:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:7604:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:12406:8986":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7386:5598":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:2437:7855":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7178:9117":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13818:4560":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:47257:7619":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:8792:3519":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:1524:3005":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"12:0:2761":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8013:3590":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:16595:4550":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:23050:7103":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:22815:3590":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:12452:895":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:32714:3513":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11926:4372":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:42402:7422":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:6731:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:8581:8183":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15981:5082":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:11661:8094":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"11:299:5855":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:1675:6150":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9209:3345":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:3286:3511":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:2798:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9749:3588":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:12736:7927":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41056:2987":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:40831:3452":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:1884:3345":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:2495:20887":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:13837:8102":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:39972:7216":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:44815:7479":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2242:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:8267:5704":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:44037:8120":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:41036:2913":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:13969:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:4368:3005":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3443:2974":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11291:35416":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:44852:7480":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:22937:9201":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:2820:5349":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:7869:14505":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:23328:3411":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:491:5971":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6588:5498":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:8501:2985":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:7609:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:8028:5688":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:12455:1859":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:47180:7618":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:44218:8125":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:2950:5355":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44261:3446":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9771:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:46858:7577":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:11777:4362":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:15739:5021":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:8014:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8909:3007":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:4766:5394":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:1889:8055":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:6672:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:5648:3017":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:8302:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:9244:9110":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:3237:3507":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:7014:7078":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:6748:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:5051:6323":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:22060:9119":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40771:7354":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:8598:8019":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:4936:9056":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:23210:3410":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2713:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:9380:26385":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:2162:8056":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:12743:8100":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15864:5051":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:0:2765":{"crate_id":17,"path":["object"],"kind":"module"},"17:13055:4349":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"11:698:3345":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:4485:8082":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:21975:33029":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:5628:1741":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"6:8249:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:31035:3307":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:14599:4713":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:45013:7492":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:8199:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46808:7575":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:6825:3059":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:2266:7023":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"13:0:2755":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:507:4166":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6696:7972":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:5680:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10729:4329":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:7637:3345":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"10:44:5880":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:873:8032":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:12385:8217":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:15090:4808":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8271:8173":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:16494:4532":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:46226:7514":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:10235:2916":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:12335:8099":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"8:0:2757":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5670:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:2493:3576":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:5318:5411":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7016:5533":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:521:26096":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:41435:7392":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44267:3445":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:123:5854":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:44163:7094":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14055:4598":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:6535:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:3310:31589":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:12448:920":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11075:35418":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"10:0:2759":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14640:4719":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14001:4592":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:531:4171":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15731:5018":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12816:4443":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5541:6510":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6716:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:43392:5723":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:9445:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:1049:8035":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:16209:5160":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:41161:7374":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:10411:8200":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14127:4625":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:5664:3018":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5282:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:3092:34964":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13306:4490":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14612:4715":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:6225:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:6209:7666":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13193:7940":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:2585:7033":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8052:4402":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:14997:4799":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5603:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:16187:5154":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:2301:5625":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:7259:34884":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:3697:14323":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:41083:8113":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11566:7876":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6770:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"5:3297:3005":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:16341:5198":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3470:14249":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:11851:7887":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:4308:30166":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:5991:3050":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:7454:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5311:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:0:2766":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:2228:5869":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"18:113:26086":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:1401:8034":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:10390:3479":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:5412:1258":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7980:5373":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:1643:6132":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:929:9002":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:3110:5380":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5622:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14963:4786":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:8585:8016":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11869:30173":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:4222:9048":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:6711:8041":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:23373:3590":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:15785:5030":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:16362:5201":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6256:5443":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:317:7845":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:7423:28305":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40927:7362":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10663:4327":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:47689:7660":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6708:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:8569:2955":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:4359:9069":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:42865:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:44309:3458":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:7986:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:15286:4823":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:4560:2933":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:13537:4461":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10568:31680":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:3402:2979":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4174:9045":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11553:7875":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:809:8055":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6437:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:15351:4874":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:5570:3435":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:2736:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:3848:9039":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12149:4381":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6368:5460":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:23983:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8756:3000":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8199:3587":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"18:659:7840":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:46920:7579":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12249:7905":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:7762:2898":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46763:7558":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:47476:7626":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:41184:7378":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11319:35422":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2084:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13662:4519":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:8361:8174":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46970:7581":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12983:22033":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:14807:4763":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6765:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:667:4312":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2479:3572":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4914:6259":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11539:4349":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:14586:4711":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:3691:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:16241:5175":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:2148:2973":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:12459:1933":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:22894:14548":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:3858:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5334:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:6700:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:5288:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6852:5514":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6462:21828":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:6178:14848":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:2816:7036":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:9185:3023":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11630:4351":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:42537:14608":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:7718:2894":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:40150:7224":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:14859:4769":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5441:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:22923:3590":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:4805:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7731:7426":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:22841:32459":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:45017:7493":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11831:4349":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:15540:4977":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:7211:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:2640:5341":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:31441:3318":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:12035:7778":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:7528:3687":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:11953:8148":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:40854:14349":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14043:4597":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:3617:2944":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11932:8147":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:14933:4780":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:9433:8090":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:14084:4609":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:5649:5416":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46632:7551":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4792:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1507:6041":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:12913:7457":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:994:8033":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:42940:2377":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"1:597:8133":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11222:7868":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:16377:5202":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:34:947":{"crate_id":2,"path":["core","include_str"],"kind":"macro"},"11:2121:5625":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"13:229:5852":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1514:6043":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:43643:7445":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:8798:14509":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7816:8461":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"5:7798:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7587:34816":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4957:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7789:35411":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10409:8201":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:5205:6356":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:15549:4978":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:23465:7138":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:4397:2933":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:22186:7101":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11952:7889":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6111:5425":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:4684:3327":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:8519:2954":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:47376:7622":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11757:21935":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"11:1601:8043":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7765:5662":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:5984:3049":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10368:21895":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:8483:5745":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:21929:33035":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:6984:5378":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:6305:7072":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:6041:8041":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:7003:7081":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:11789:3459":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:6114:2933":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:7469:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:42350:7420":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:22617:9121":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:16555:5256":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:7358:5368":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12122:4379":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:4067:2702":{"crate_id":1,"path":["std","num"],"kind":"module"},"17:14975:4788":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:16613:4560":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:5017:9055":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:4482:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:21941:33035":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:47574:7634":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2704:5344":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:1969:2933":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:42328:32425":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:5139:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:2400:3518":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:8014:7669":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10630:4326":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:11696:3458":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:45208:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"11:1893:8055":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11985:7892":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:505:30347":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:6893:3066":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:15679:5003":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8094:8985":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:3967:8041":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6337:5454":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:46550:7547":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4990:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11383:7761":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:7774:2899":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:40893:7361":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:473:5963":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10534:4322":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:8427:3096":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4869:6237":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:680:4190":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14375:4681":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12108:4378":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15064:4806":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15531:4973":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:4810:5395":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:15050:4803":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13222:21901":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:2256:8966":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:7431:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:8882:3004":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:3126:20967":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:23520:7143":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:8556:2958":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6573:5495":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:3096:34963":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:4983:5401":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5648:6562":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2729:14631":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:1097:8034":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:14125:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12625:4435":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13983:4584":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6953:5525":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10448:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:45094:14656":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:7414:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:11032:2953":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:11020:7757":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:8279:2971":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:1085:35384":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5085:5403":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14299:4667":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:14168:7100":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:38675:14536":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:14917:4779":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1577:5863":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6623:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:2566:3008":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:3074:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:14269:4658":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:9463:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:41411:2957":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:22007:9123":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6658:7963":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:2323:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:4896:9093":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:4328:2933":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"18:481:4164":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8652:7719":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:7401:35405":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:11492:3763":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:946:8055":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:42791:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:4:1271":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:1628:8055":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:8510:2953":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:40797:7357":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:4208:3518":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:6283:2933":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:15160:4821":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13854:4565":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8034:7670":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:780:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:7120:14310":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:44097:7092":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46358:7528":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10978:7748":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:44291:2959":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:5658:6563":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:30773:3409":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:16520:5226":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:22843:14548":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:34813:5644":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:842:9001":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:10443:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44673:14290":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6449:6623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44583:3438":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2146:14558":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:8029:8168":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:12438:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:3088:7029":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43380:7440":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12401:26326":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"14:187:20905":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:45033:7497":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:2368:7032":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:43880:7452":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2834:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13719:4531":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:7818:33124":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:3086:35349":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:5424:14272":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:16297:5183":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:5834:14308":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:903:7845":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:6599:6708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:2045:678":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:42594:3005":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:12432:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:7909:8166":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13181:7939":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:44709:7472":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:40998:2958":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:40:9020":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:1220:7849":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6408:5464":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:5870:7666":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11902:4370":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:491:4165":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:16786:5306":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:11541:2959":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12798:22031":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:41114:7368":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:1555:3345":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:4298:2933":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14573:4710":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12135:4380":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6680:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:8636:21839":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"0:155:2382":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"2:42554:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:3487:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:8273:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:2295:7026":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:3665:26167":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:12009:7777":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:13427:4497":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:22829:9210":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:661:3403":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:5319:32443":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:1674:35374":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:14652:4720":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2715:2970":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44574:3439":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:45324:7509":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5271:6389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12787:4438":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5282:5410":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:43446:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:15931:5070":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:42680:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:44877:7481":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6188:5432":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:5482:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:351:35381":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:41205:7380":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:3308:5325":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5172:5406":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46273:7519":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:12460:1435":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:16036:5097":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:8100:3489":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:6432:8157":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:42754:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:7548:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:10090:33292":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11805:7885":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:583:7848":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5635:6556":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:5265:6386":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"11:328:5858":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:5298:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:5192:9098":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:15:2712":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:16311:5190":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:45233:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:2466:8055":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:2840:5350":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11998:7893":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:2406:7852":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:14773:4760":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:13227:3433":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2966:5356":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10843:4332":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:5359:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:8290:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:16198:5159":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:11353:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:3684:2948":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:43627:7442":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13014:7932":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7959:5685":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4902:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:11345:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:910:5863":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:1972:2369":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:42506:8114":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:23321:7127":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"9:422:20812":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:2349:8035":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:4844:5396":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"15:394:20928":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:16171:5150":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6625:5501":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11606:4365":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:4970:6281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11804:7775":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:1636:8054":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:16832:4582":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:10564:4324":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40000:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6421:5318":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11016:7865":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11457:4344":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"16:6269:5444":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"0:0:2586":{"crate_id":0,"path":["autocfg"],"kind":"module"},"1:6308:30338":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:12727:14616":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7471:5613":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:677:8134":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:44555:3453":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:718:4199":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:13448:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:8105:5692":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12920:4459":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11281:7869":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7716:35410":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:3800:34871":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:45298:8128":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:6942:5524":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8575:8181":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:2551:35390":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:42902:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"11:2420:3345":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:1023:8034":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6876:5518":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:896:7943":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:628:8979":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11003:3589":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:10477:3026":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:988:8032":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:42515:8987":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:15963:5078":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:2880:5352":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:8612:5379":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:798:8041":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:3452:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6526:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12550:4431":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:5734:2376":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:4241:5390":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:9193:3005":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8287:2973":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7110:14309":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:4110:9041":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7508:5619":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11733:21934":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:2545:5872":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:15621:4989":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11515:7873":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11124:35423":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:34149:14530":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4997:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:1551:6066":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3910:8146":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:9450:3061":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:8080:8984":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14284:4662":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:4497:34855":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1002:3005":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:31067:32492":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:9423:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7969:5686":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:8345:3097":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:3330:5867":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:1106:8035":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7617:7047":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:1105:8037":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:15701:5007":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:3073:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:892:3518":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4940:9059":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:9347:8195":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:4520:14253":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"0:63:693":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"1:9359:8197":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:16332:5196":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:43363:2915":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:22457:3590":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:14560:4708":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:42717:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:0:2756":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:102:5853":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2325:3568":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:33397:5635":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:7586:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11465:4345":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:22709:9205":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14405:4684":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2968:3590":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2450:5326":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6876:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5507:6503":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:2222:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:14438:4692":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:11318:3592":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:15136:4461":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:41026:2914":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:34082:14528":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:957:8025":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:45335:5877":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:12449:902":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:46258:7518":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5450:6474":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6144:21825":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:0:1733":{"crate_id":1,"path":["std"],"kind":"module"},"1:4230:9050":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:6638:6722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46497:7544":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:10456:2926":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:46579:7548":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6758:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:7341:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:15641:4997":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:15844:5044":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:613:35429":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:42941:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:3320:14255":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:39888:3522":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:14947:4782":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8258:7673":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:4163:34871":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:46454:7534":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:497:5974":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"9:0:2758":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:623:35428":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2760:3306":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"17:13385:4494":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11432:21914":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:2724:5345":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:16507:4546":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:12840:4450":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40971:14595":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10820:4402":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:23279:32391":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11335:7760":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:15431:4936":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:9584:3485":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:14796:4761":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13028:7934":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:1633:5865":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11579:7877":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"7:0:1923":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11753:3028":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:6018:2933":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:5165:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:44545:2955":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:5313:8153":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13205:7941":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"9:328:5918":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:36689:5645":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:47405:7623":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:785:5864":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3913:8147":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:42978:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:4837:3328":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:4902:5398":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:2173:8057":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:14072:4606":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11653:4353":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11720:4355":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:43664:3001":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:6723:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:34015:14529":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:42458:3518":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12082:4375":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:2995:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:8836:33291":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:14312:4669":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:8366:8175":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:14148:7098":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10977:35421":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:8165:5367":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:7350:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:46468:7535":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4994:8152":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:322:7846":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2772:5347":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:44866:14291":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11065:3490":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:41635:3054":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:3686:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:46393:7530":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:39309:14538":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7350:5596":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:8343:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:32745:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:2751:2961":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:16323:5192":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:42450:3005":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:559:6015":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:22078:7101":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11386:21913":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44198:8124":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:23171:7106":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7462:7986":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:41237:7383":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:1888:8041":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:3307:31455":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:1907:5866":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11401:4340":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:47612:7642":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13798:4550":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10777:2978":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:9436:2933":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:12441:1831":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:5802:3019":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8892:3005":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:7645:3345":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7259:5588":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:40934:7363":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:6704:3054":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:6063:3063":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:32743:3512":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:14533:4404":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:3249:3332":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:42466:3345":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:5574:3436":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7557:8041":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12976:4465":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:41193:7379":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:26383:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:4116:9040":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:16385:5205":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:8000:5374":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2746:3305":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:47533:7631":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:3456:8055":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:2506:5335":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12851:4454":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:3445:2975":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2596:679":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11281:3022":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:965:8027":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:44208:7096":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1500:6038":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:10390:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"9:176:20877":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:1616:8026":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:16264:5176":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6970:5361":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:22174:3590":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:5102:9090":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:364:35378":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6239:5438":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:3481:3093":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"11:1900:5865":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:7747:14595":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10452:2917":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:3347:2976":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40810:7358":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12191:4386":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:3072:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6777:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:16179:5153":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:8546:5752":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6749:5503":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:5107:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5727:4322":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14031:4596":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:5198:5407":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:46326:7526":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11864:7888":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:12989:7462":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"9:53:20828":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:22496:33030":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:545:6007":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13958:4582":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:4338:9067":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:32656:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11167:30300":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12319:7910":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:44137:7454":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:23352:3425":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:41227:7382":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"10:36:5879":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:5628:3016":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4677:9071":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:1005:5625":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:45287:32412":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"16:3695:5385":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12699:7924":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:15315:4843":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:12447:742":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:9232:7738":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:2551:2372":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:5541:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:45266:8126":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3493:2964":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:1083:5625":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7907:5681":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13145:7936":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13610:4512":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"18:651:4166":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:1158:8039":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11114:7867":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:1624:8041":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:43421:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:5877:7667":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12458:977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"9:355:20825":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:889:8049":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:2011:3402":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:14220:4633":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:14692:4724":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6659:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:5141:2933":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:879:3005":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7332:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5471:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:5126:14343":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:23432:7135":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"18:598:35426":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:15024:4801":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5249:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14821:4765":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:2343:7060":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12204:4387":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12583:4434":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12687:7923":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13515:21904":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:740:8026":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:7811:7052":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:10704:9031":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12260:22006":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:4921:6263":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8115:3490":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12992:4466":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11173:35420":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:16684:5282":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:6837:7984":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:4694:5393":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:1617:3005":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4218:9047":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:41246:7384":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:47559:7633":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42184:7404":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:42475:7426":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:14483:4698":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:1657:6143":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12018:7894":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:23487:7140":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:6781:5506":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:40839:3451":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:23341:2714":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13692:4523":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5224:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:40960:2895":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:80:26084":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:7539:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:16701:5284":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:11232:21915":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:6544:6670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10823:4331":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:47493:7627":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1684:6156":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1489:6033":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15953:5075":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:40741:7353":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5682:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:4267:5391":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:1869:3470":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:14886:4773":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:45037:7498":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:4133:8041":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"7:32:20797":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:45211:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4938:9058":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:11582:30301":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:12359:7914":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:15573:4980":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12066:2379":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:12021:31700":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:6018:3051":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3441:5383":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:44250:3449":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:5614:3015":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:14205:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:6440:21827":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:212:8047":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:32645:7212":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:44788:7478":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:3599:2942":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:3851:2973":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2149:2420":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:2435:20964":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12225:4390":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:44359:3461":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13890:4572":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:2992:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:2148:8035":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:46425:7532":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11292:28510":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11309:7870":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3613:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6462:6624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:3566:2933":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6521:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13921:4576":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:546:5315":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:41669:7398":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:3434:14258":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:3014:20965":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:14393:4682":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:3707:3005":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:824:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:32655:3091":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:10391:2374":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:31414:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:8320:21838":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:7448:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44565:3441":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46710:7555":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:8096:8015":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:532:6000":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:6487:7666":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14507:4699":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11448:7872":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5179:6342":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:2969:14355":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7305:5590":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:9904:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:38620:14535":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9481:3592":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:7804:8460":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:6708:3055":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3731:14257":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:4184:5389":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12570:7918":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9367:7741":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:42516:9106":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:12453:1871":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:8209:5365":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:15989:5084":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8627:7718":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11691:7880":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2990:5357":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:8669:5679":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:5805:3020":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:22:826":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:8101:3042":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:5224:5408":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12335:7912":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:2348:34830":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:578:6025":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:46649:7552":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:42384:7421":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:7159:5561":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:44189:7095":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7521:5622":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:16798:5309":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:8261:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12897:4457":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"0:64:2395":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"2:3375:5640":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:47522:7630":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:12435:1893":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:44441:3454":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:4699:9072":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:16822:4577":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:43134:2926":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:22970:9200":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15121:4814":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:14358:4678":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:11268:2715":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5449:5415":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:16218:5162":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:7883:5468":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13781:4547":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13095:4471":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:12457:1847":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:11623:8093":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:7842:8463":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:9742:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:4473:8081":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7949:5372":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:1589:6090":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:16775:5304":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:15665:5002":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:698:4194":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:12439:1707":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:41286:7388":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5629:6553":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:10983:3585":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6808:5358":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:15148:4817":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7537:3345":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:44413:3459":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12371:4396":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:44277:2958":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:45308:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41123:7369":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:2486:5334":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:40847:3450":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:515:4169":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:16159:5147":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:44237:2716":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:22058:3590":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:479:5966":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:8296:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:44590:3450":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:670:7844":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:32631:8111":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12860:4455":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:735:26094":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:25:703":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:23421:7134":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:46949:7580":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13970:4583":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:643:4166":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6866:21830":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:10998:32061":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:41644:7396":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:789:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:4929:5399":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:881:8033":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:2415:20937":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:434:35385":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:2620:5340":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:23498:7141":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:44176:8123":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"0:65:2401":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"17:10696:4328":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:16728:5293":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:43353:7430":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:40955:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14750:4751":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11163:4365":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:2860:5351":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12450:908":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"14:220:5844":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1530:6051":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1563:6074":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:42422:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:14832:4766":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:8586:9037":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:5863:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:1650:5868":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6123:5363":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5230:6367":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:16632:5270":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:6598:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:47597:7641":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8539:2956":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4842:6214":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5379:5413":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5709:21824":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10115:21887":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:1230:35348":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:3364:5868":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:3931:8055":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12234:4476":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:7567:8074":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:6744:3064":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12280:7906":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:7828:8462":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"16:7578:7741":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:8223:5696":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:23156:7105":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:3290:9113":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:16739:5298":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:982:8030":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:680:8136":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:155:5313":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:41105:7366":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:16008:5089":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:581:3318":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:5057:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:2533:5870":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:8233:21837":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11503:4348":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"5:7086:14308":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:43113:2917":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6502:20936":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14114:4621":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4777:9089":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7554:21834":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:13172:3009":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:47082:7585":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:9455:3062":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:42362:7717":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:11335:3590":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9159:2715":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:7009:7080":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:485:5969":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:6191:7069":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:15714:5013":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:506:4266":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:42619:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11105:3023":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6902:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:22005:3590":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:44608:3452":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10778:7861":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:47502:7628":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11427:8214":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:13942:33004":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"14:214:5842":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:3084:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:4605:8083":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5742:4323":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:3338:5865":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41628:7395":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10793:4208":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:33609:14527":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5255:5409":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:4758:8084":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7424:21833":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:46535:7546":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6914:5522":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:42610:3345":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:15852:5045":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:5586:6529":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:6157:3047":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:41659:7397":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:31041:7147":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13491:4501":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:4893:3329":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:21973:33026":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:23454:7137":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:16019:5090":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:4566:8151":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9215:7737":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6666:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:42602:3518":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:6480:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4947:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:2380:3005":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:4881:6240":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:14099:4615":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:43120:2918":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:10454:2925":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5117:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:2440:8041":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:33185:5638":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5520:6504":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:6525:14856":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:5641:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:12950:7460":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:23259:32393":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:9754:30340":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:12437:1329":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:7316:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"13:110:35392":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10274:21892":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"9:236:3001":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:47548:7632":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:3244:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:6400:30341":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:39924:14259":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:11300:7499":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:41143:7371":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46343:7527":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:15439:4937":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:5525:34871":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8827:3002":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:961:8026":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5494:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:40137:7222":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11971:7891":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8697:7720":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3400:2978":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:7495:5615":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"11:396:35376":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:3703:14322":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:10661:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:4899:9071":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:44341:3462":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2530:5336":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:31056:2915":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:12456:1865":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:8252:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8671:8185":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:45083:7502":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1115:8039":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:41421:7391":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:43635:7444":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"14:40:4547":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:7284:34892":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:46439:7533":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:9909:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:5111:9091":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:15602:4988":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:31003:7146":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:589:4177":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:15812:5034":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:8482:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:3304:5866":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:4908:811":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:8298:5708":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13398:4496":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:40986:2896":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:6534:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:45009:7491":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:43867:7451":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:12035:5869":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6740:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:2332:2943":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:532:8966":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8898:3006":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:5971:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:7954:30332":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4826:6879":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:4890:6245":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:7308:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46748:7557":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:297:3098":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:7333:8459":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:1584:6088":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13041:7935":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:8058:8014":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:44459:3455":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10332:21894":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9274:9111":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8620:7717":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:8043:35407":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5295:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"11:0:2760":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:4636:7062":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:45225:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:908:7846":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:13070:4365":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:45274:7506":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:15905:5060":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:8179:5694":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:1123:34871":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6794:5507":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:3048:20966":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4015:8148":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:1214:34841":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:8031:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10394:21896":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:5689:5417":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"14:202:14292":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:11787:8165":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15760:5025":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:15887:5056":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:15946:5074":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:689:4193":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10141:21888":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:3503:7856":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5477:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:43015:3048":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:39968:9018":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:21987:33032":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:15655:5001":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:573:4166":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:15689:5004":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:16668:5277":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15973:5081":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:21956:33037":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7896:8078":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:8325:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:5125:9092":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:15997:5085":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:7075:21831":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:40080:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15769:5026":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13266:21902":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:46305:7521":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:4754:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6738:35409":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8209:3585":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:22484:7102":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:6838:3345":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12440:1741":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"18:754:4207":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:563:4176":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:13994:8106":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:23187:7110":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:15777:5028":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4964:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:952:8040":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:40820:7359":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:708:8025":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:3279:3509":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13547:7942":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"5:7880:8055":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:43674:7449":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14327:4671":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:706:3433":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:41276:7387":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:23443:7136":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:3656:2374":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:1339:7850":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"14:31:8020":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:44116:7093":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15939:5073":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:10458:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1370:5625":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6631:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:1539:3518":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:2328:3569":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7990:5687":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3305:5639":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11617:7868":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5488:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:10709:7085":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11706:7881":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:12417:28357":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:14520:4702":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11958:7890":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:902:3345":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43884:7453":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8675:3610":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"11:1914:5867":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:32654:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:3493:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:1621:3345":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13361:4493":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:13286:14284":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:9583:3431":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:13854:8105":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:23103:7104":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:42162:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:1140:8038":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"11:830:8040":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:8041:2983":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8371:2704":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13290:4280":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6411:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:2559:5874":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:9470:8091":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7337:5594":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:39985:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:4956:5400":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:2570:5338":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:1595:8040":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:11149:30343":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"7:79:20804":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:6640:7953":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:10283:7417":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"18:538:4174":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:1539:6057":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9400:7744":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:44723:7475":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1569:6076":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12826:4445":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:12973:7461":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:23243:7116":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5088:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:45041:7499":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:41092:2956":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44694:7466":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:32713:3092":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:15036:4802":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:6882:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5151:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:46410:7531":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:45059:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:1703:6163":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:2323:8034":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:8565:5755":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:40323:14356":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14335:4673":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:4763:8085":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:40130:8112":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:32624:5679":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:47053:7584":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:8492:2983":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13592:4509":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:4539:14325":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:4829:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:47650:7644":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:12869:4499":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:16812:5310":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:6507:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:3694:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13909:4573":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:4330:9066":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:7919:8007":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:7786:8075":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:23221:32398":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10784:7862":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:384:8131":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6790:6780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:41152:7373":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:8288:14511":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12306:4393":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:8204:3588":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:5305:7860":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:45025:7495":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10780:2974":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:13169:7938":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:1386:8035":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5036:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:15557:4979":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:4824:6877":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:8014:5375":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:13877:7377":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:42200:7406":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:11817:8097":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:44495:3456":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:4997:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:586:6029":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10167:21889":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:43682:7450":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"19:0:1306":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:15418:4929":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:8151:5377":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10031:21885":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1632:6124":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:40040:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:766:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6822:21829":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:6680:7969":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:44900:3463":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:1605:8025":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:15010:4800":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:23410:7133":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:3889:4218":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:7361:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:8626:5758":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:3587:5384":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"15:288:20917":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:13212:3437":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11747:7768":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11818:7886":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3536:2984":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"9:500:5940":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13570:21905":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:7545:7045":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41133:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:16656:5275":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:4100:3345":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13554:4504":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"17:13119:4472":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:570:6020":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"15:0:2763":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:3005:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5357:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:2796:5348":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:5282:8153":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6731:7981":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12028:7895":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:12434:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13757:4546":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1639:5866":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:1880:3005":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11798:7774":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:34640:14533":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:971:9001":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:38730:14537":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:5473:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:41621:7394":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:523:5994":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:2505:3582":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7807:35413":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:765:26095":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:6559:9213":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6389:7946":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:2467:5328":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7044:5366":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:4827:7063":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:6652:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:21919:3318":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:46731:7556":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6042:5362":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:8292:14510":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12409:22007":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:772:5863":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:14845:4768":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6564:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5366:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5069:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:1645:5867":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13945:4580":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:1930:3486":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:16026:5092":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:14260:9004":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:9440:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:8503:5746":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3085:3398":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5241:6374":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14902:4775":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:47513:7629":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:2495:3577":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5025:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5387:6435":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2803:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"11:2137:8034":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:7703:9000":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:4492:8150":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5044:6321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10549:4323":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3674:2945":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:1580:8042":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11592:4305":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:2539:5871":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2989:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:5348:5412":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:3720:7857":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:12461:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21958:33039":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:1250:34847":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:47434:7624":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:10409:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6691:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:9295:3052":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:8284:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5395:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:3125:3406":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:22965:9202":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:7647:3352":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6028:5359":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:46987:7582":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:40060:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6493:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:7518:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:43429:2915":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:538:6003":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:12759:2718":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10246:21891":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6064:5364":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"14:7:8020":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4497:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5341:6418":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5007:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:4873:5397":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:3039:8144":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:8319:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12537:7916":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5301:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:40735:3451":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"14:165:20898":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:32638:3328":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:7391:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1727:6171":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:33948:9116":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46664:7553":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:10095:33081":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:34294:14531":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3448:2373":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"2:45203:7505":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:8353:7017":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:1928:3485":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7372:5369":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:5186:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7192:21832":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6098:7944":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:7692:3008":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:96:26085":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:8267:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:10660:3021":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6822:3058":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:14708:4729":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1521:6046":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:40100:8994":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:46290:7520":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:1920:5868":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}