{"root":"0:0:2076","crate_version":"1.1.0","includes_private":false,"index":{"2:12899:33042":{"id":"2:12899:33042","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12897:33041"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:2065":{"id":"2:12929:2065","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:943":{"id":"2:12894:943","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12248:455"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:33761":{"id":"5:5612:33761","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2545","`String`":"5:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2545","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2883:246-0:122:1921":{"id":"a:2:2883:246-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5846:1667":{"id":"5:5846:1667","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31816:2541-0:86:138":{"id":"a:2:31816:2541-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:2541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12908:25775":{"id":"2:12908:25775","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:25802":{"id":"2:12917:25802","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12916:25801","str::split_at_mut_checked":"2:12919:25806"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:2806":{"id":"5:729:2806","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:25805":{"id":"2:12918:25805","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12919:25806"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13023:25720":{"id":"2:13023:25720","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38223"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:122:1921":{"id":"b:2:3496-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:122:1921":{"id":"b:5:725-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:2804","5:728:2805","5:729:2806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41394:8365-0:122:1921":{"id":"a:2:41394:8365-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:8365","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12906:25774":{"id":"2:12906:25774","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:33046":{"id":"2:12927:33046","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43417:2860","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:33048":{"id":"2:12958:33048","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12584:2844","str::split":"2:12946:2068","prim@char":"1:12248:455","str::split_terminator":"2:12955:33047"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43221:2868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:33044":{"id":"2:12914:33044","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12254:1609","str::slice_mut_unchecked":"2:12915:33045","crate::ops::Index":"2:38889:8394"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2675-0:86:138":{"id":"b:2:2675-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12915:33045":{"id":"2:12915:33045","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12254:1609","crate::ops::IndexMut":"2:3158:8395","str::slice_unchecked":"2:12914:33044"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:33057":{"id":"2:12996:33057","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893":{"id":"2:12893","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12894:943","2:12895:2067","2:12896:33040","2:12897:33041","2:12899:33042","2:12902:25492","2:12903:33043","2:12904:334","2:12905:25778","2:12906:25774","2:12908:25775","2:12910:25776","2:12912:25777","2:12914:33044","2:12915:33045","2:12916:25801","2:12917:25802","2:12918:25805","2:12919:25806","2:12921:2055","2:12922:6899","2:12923:6487","2:12924:31674","2:12925:31682","2:12926:2206","2:12927:33046","2:12928:31686","2:12929:2065","2:12932:2208","2:12935:25817","2:12938:2207","2:12942:2746","2:12946:2068","2:12949:25808","2:12952:25810","2:12955:33047","2:12958:33048","2:12961:2211","2:12964:25813","2:12967:25815","2:12970:25816","2:12973:2329","2:12976:33049","2:12979:33050","2:12982:33051","2:12985:2074","2:12987:33052","2:12989:33053","2:12991:33054","2:12992:33055","2:12993:33056","2:12996:33057","2:12999:25818","2:13002:25819","2:13005:33058","2:13008:33059","2:13011:33060","2:13014:2217","2:13016:25511","2:13017:25715","2:13018:25512","2:13019:25508","2:13020:25507","2:13021:25718","2:13022:25719","2:13023:25720","2:13024:33061","2:13026:8357","2:13027:33062"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5614:25510":{"id":"5:5614:25510","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13019:25508"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-0:86:138":{"id":"0:35-0:86:138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:86:138","glob":false}}},"2:12964:25813":{"id":"2:12964:25813","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12248:455","str::splitn":"2:12961:2211","self::pattern":"2:12584:2844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43275:2866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:25511":{"id":"2:13016:25511","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2024":{"id":"0:66:2024","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:132:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12993:33056":{"id":"2:12993:33056","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12610:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:757":{"id":"0:132:757","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:33061":{"id":"2:13024:33061","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4680:33061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43452:2857","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:25508":{"id":"2:13019:25508","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13020:25507":{"id":"2:13020:25507","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:757":{"id":"0:89:757","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2045":{"id":"0:73:2045","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2076":{"id":"0:0:2076","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:35-0:86:138","0:122:1921","0:48:656","0:49:1934","0:50:1940","0:51:1109"],"is_stripped":false}}},"0:28:429":{"id":"0:28:429","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:25718":{"id":"2:13021:25718","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38223"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2385-0:86:138":{"id":"b:2:2385-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2314"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12938:2207":{"id":"2:12938:2207","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12955:33047":{"id":"2:12955:33047","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12584:2844","str::split":"2:12946:2068","prim@char":"1:12248:455","`DoubleEndedIterator`":"2:7966:131","str::rsplit_terminator":"2:12958:33048"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43203:2869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:25492":{"id":"2:12902:25492","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12132:2196"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41394:8365-0:86:138":{"id":"a:2:41394:8365-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:8365","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:65:2022":{"id":"0:65:2022","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2040":{"id":"0:71:2040","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2031":{"id":"0:68:2031","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2051":{"id":"0:75:2051","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:130:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12979:33050":{"id":"2:12979:33050","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12584:2844","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::rmatch_indices":"2:12982:33051"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43303:2861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:33052":{"id":"2:12987:33052","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:1921":{"id":"0:122:1921","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:41394:8365-0:122:1921","a:2:31759:237-0:122:1921","a:2:2883:246-0:122:1921","a:2:41395:8485-0:122:1921","a:2:31816:2541-0:122:1921","b:2:2660-0:122:1921","b:2:2388-0:122:1921","b:2:3496-0:122:1921","b:2:2670-0:122:1921","b:2:2664-0:122:1921","b:2:2385-0:122:1921","b:2:2675-0:122:1921","b:5:725-0:122:1921","0:129","0:131"]}}},"b:2:2675-0:122:1921":{"id":"b:2:2675-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:656":{"id":"0:48:656","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:25817":{"id":"2:12935:25817","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:33053":{"id":"2:12989:33053","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:1951":{"id":"0:54:1951","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5235:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:2054":{"id":"0:76:2054","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:2208":{"id":"2:12932:2208","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:33059":{"id":"2:13008:33059","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:25715":{"id":"2:13017:25715","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39243:13733","Self::is_ascii":"2:13016:25511"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39243:13733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","cause","type_id","provide","description"],"trait":{"name":"Error","id":"2:2723:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:2187","0:28:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2660-0:86:138":{"id":"b:2:2660-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12982:33051":{"id":"2:12982:33051","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12584:2844","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::match_indices":"2:12979:33050"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43321:2862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2388-0:122:1921":{"id":"b:2:2388-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:25487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3498:1705":{"id":"2:3498:1705","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39057:6648","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41395:8485-0:122:1921":{"id":"a:2:41395:8485-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:8485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:2033":{"id":"0:69:2033","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:33758":{"id":"5:5600:33758","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2042":{"id":"0:72:2042","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:2746":{"id":"2:12942:2746","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2674:1692":{"id":"2:2674:1692","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:25806":{"id":"2:12919:25806","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12918:25805"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2385-0:122:1921":{"id":"b:2:2385-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2314"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:2027":{"id":"0:67:2027","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31759:237-0:122:1921":{"id":"a:2:31759:237-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:51:1109":{"id":"0:51:1109","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2387:2314":{"id":"2:2387:2314","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2012":{"id":"0:63:2012","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1980":{"id":"0:58:1980","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13026:8357":{"id":"2:13026:8357","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4681:8357"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43461:2858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2663:1959":{"id":"2:2663:1959","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2637:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1940":{"id":"0:50:1940","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2017":{"id":"0:64:2017","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2036":{"id":"0:70:2036","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:2048":{"id":"0:74:2048","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:25801":{"id":"2:12916:25801","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12918:25805","str::split_at_mut":"2:12917:25802"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:33757","5:5597:13901","5:5600:33758","5:5603:33759","5:5611:33760","5:5612:33761","5:5613:2428","5:5614:25510","5:5615:25509"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5844-0:86:138":{"id":"b:5:5844-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5842:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5846:1667"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2679:1690":{"id":"2:2679:1690","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1975":{"id":"0:57:1975","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:33054":{"id":"2:12991:33054","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:25776":{"id":"2:12910:25776","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12999:25818":{"id":"2:12999:25818","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2390:25487":{"id":"2:2390:25487","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13005:33058":{"id":"2:13005:33058","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:33040":{"id":"2:12896:33040","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:727:2804":{"id":"5:727:2804","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2388-0:86:138":{"id":"b:2:2388-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:25487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12928:31686":{"id":"2:12928:31686","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43445:2845","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2666:786":{"id":"2:2666:786","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:33049":{"id":"2:12976:33049","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12584:2844","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::matches":"2:12973:2329"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43375:2864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:86:138":{"id":"b:2:3496-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:2540","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2664-0:122:1921":{"id":"b:2:2664-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12905:25778":{"id":"2:12905:25778","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12265:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12949:25808":{"id":"2:12949:25808","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12400:2847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:6899":{"id":"2:12922:6899","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12248:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43129:2852","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5596:33757":{"id":"5:5596:33757","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2545","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2545","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:25815":{"id":"2:12967:25815","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13002:25819":{"id":"2:13002:25819","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:33060":{"id":"2:13011:33060","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:2428":{"id":"5:5613:2428","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:757":{"id":"0:30:757","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42313:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2673:138":{"id":"2:2673:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:49:1934":{"id":"0:49:1934","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:2055":{"id":"2:12921:2055","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12248:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43123:2853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:25816":{"id":"2:12970:25816","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:33760":{"id":"5:5611:33760","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:2067":{"id":"2:12895:2067","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:31682":{"id":"2:12925:31682","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12924:31674"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43436:2846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:13901":{"id":"5:5597:13901","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2664-0:86:138":{"id":"b:2:2664-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:138":{"id":"0:86:138","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41394:8365-0:86:138","a:2:31759:237-0:86:138","a:2:2883:246-0:86:138","a:2:41395:8485-0:86:138","a:2:31816:2541-0:86:138","b:2:2660-0:86:138","b:2:2388-0:86:138","b:2:3496-0:86:138","b:2:2670-0:86:138","b:2:2664-0:86:138","b:2:2385-0:86:138","b:2:2675-0:86:138","b:5:5844-0:86:138","0:29","0:88","0:26"]}}},"2:12923:6487":{"id":"2:12923:6487","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43139:2406","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41395:8485-0:86:138":{"id":"a:2:41395:8485-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:8485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12904:334":{"id":"2:12904:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12905:25778","`u8`":"1:12265:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2883:246-0:86:138":{"id":"a:2:2883:246-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5603:33759":{"id":"5:5603:33759","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:459":{"id":"0:130:459","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:33041":{"id":"2:12897:33041","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1109","0:54:1951","0:57:1975","0:58:1980","0:62:2009","0:63:2012","0:64:2017","0:65:2022","0:66:2024","0:67:2027","0:68:2031","0:69:2033","0:70:2036","0:71:2040","0:72:2042","0:73:2045","0:74:2048","0:75:2051","0:76:2054"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:62:2009":{"id":"0:62:2009","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:2206":{"id":"2:12926:2206","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43407:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2678:138":{"id":"2:2678:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31687:2473","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13014:2217":{"id":"2:13014:2217","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12545:137","`FromStr`":"2:12544:2457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12544:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12544:2457","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:25512":{"id":"2:13018:25512","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2187":{"id":"0:27:2187","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:33062":{"id":"2:13027:33062","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4678:33062"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43470:2859","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:86:138":{"id":"b:2:2670-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12992:33055":{"id":"2:12992:33055","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:25810":{"id":"2:12952:25810","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12584:2844","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::split":"2:12946:2068"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43171:2865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2660-0:122:1921":{"id":"b:2:2660-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:1959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13022:25719":{"id":"2:13022:25719","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38223"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1109":{"id":"0:53:1109","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31816:2541-0:122:1921":{"id":"a:2:31816:2541-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:2541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:728:2805":{"id":"5:728:2805","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:33043":{"id":"2:12903:33043","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:2068":{"id":"2:12946:2068","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12584:2844","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::split_whitespace":"2:12924:31674","str::rsplit":"2:12952:25810"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43153:2407","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:2211":{"id":"2:12961:2211","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12248:455","self::pattern":"2:12584:2844","str::rsplitn":"2:12964:25813"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43257:2867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:2074":{"id":"2:12985:2074","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:122:1921":{"id":"b:2:2670-0:122:1921","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:122:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31759:237-0:86:138":{"id":"a:2:31759:237-0:86:138","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5615:25509":{"id":"5:5615:25509","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13020:25507"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:2329":{"id":"2:12973:2329","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12584:2844","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12248:455","str::rmatches":"2:12976:33049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43357:2863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:25777":{"id":"2:12912:25777","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:31674":{"id":"2:12924:31674","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12925:31682"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43427:2848","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:12262:849":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5436:5905":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:849:2887":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:1929:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:531:3589":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:742:7448":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6120:21200":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:10959:2960":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:364:34547":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:45388:6971":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:38905:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:46045:7042":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5020:5748":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:7473:13884":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11812:7329":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:2723:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:11662:7520":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:4228:29660":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:5736:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:41353:6854":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10759:3769":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:12599:2840":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14977:4375":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:5817:4827":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5385:3731":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13399:3977":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:6181:30722":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2918:2877":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:9041:2469":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:883:7455":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8153:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:5743:7088":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10643:2425":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:261:7268":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:1723:5608":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12089:3834":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:3669:3633":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11915:21370":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:4920:8431":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:7575:6403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10967:1916":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:45569:6980":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:15624:4553":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:2554:34553":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12264:7350":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10828:34585":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42753:6878":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7306:34577":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3413:2413":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:42749:6877":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:45696:7001":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:0:2228":{"crate_id":17,"path":["object"],"kind":"module"},"17:13568:4018":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:45758:7003":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8462:2406":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11825:7331":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4149:8426":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:1692:5597":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"14:31:7442":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11688:3785":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15410:4480":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:33019:13911":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10446:27526":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:21967:8584":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:2808:4755":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:5401:34184":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6532:6100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:608:7261":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:13438:6538":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:15814:4601":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:7573:2356":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:4386:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:7421:31521":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12863:3895":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:4668:8464":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:3077:13637":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:13877:4087":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5502:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:5031:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:3036:33842":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:14575:3862":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2660:4748":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:31816:2541":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6231:4895":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:22154:13931":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:15582:4540":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:5211:2496":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:7356:13891":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:39884:2374":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:15197:4424":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:479:5403":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:45646:6999":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:43436:2846":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:867:5300":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:1098:7271":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:6082:7088":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:497:5411":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:2304:5023":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:1578:2750":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:2383:2452":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:14147:4124":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8797:2453":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6768:6208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:491:5408":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:3278:5302":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2684:4749":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:473:5400":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:7429:6320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7428:6483":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:12258:701":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2944:5037":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10524:7283":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:43041:7540":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:13400:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:32422:5033":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:11130:7517":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:39971:6796":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:10901:2997":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:4802:4805":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:859:2750":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:5037:4813":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:41775:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:43737:6906":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12342:3851":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:42502:6869":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:7584:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:9212:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:11155:2470":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4743:4803":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1463:2452":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:7793:3728":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:14386:4177":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:1582:7464":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:43954:14035":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:1824:2939":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:45519:6978":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12189:7344":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11115:7297":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:16249:4709":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:40124:6815":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:6775:6209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:6442:4910":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:39661:6778":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41270:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11595:3777":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:6721:6194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:11075:3753":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:1854:6493":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:14177:4143":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14855:4327":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:10284:6523":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:44185:6934":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:39683:31274":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:8155:5153":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:4468:4795":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:42971:7538":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4250:8441":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8703:2448":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11324:7302":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:3158:8395":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:9108:2750":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:31760:2540":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:3575:1914":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:31736:7527":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12127:3836":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:1699:5600":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:689:3611":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5370:5867":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6562:6123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:7643:2430":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:1680:5593":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8115:2997":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1526:5488":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15445:4488":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:2764:2812":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:4543:2537":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13235:3944":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:1917:5304":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2281:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6456:21202":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:1189:34075":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6749:4959":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:39698:6782":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:635:3607":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5064:5771":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:45248:6955":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:21333:8498":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13946:4094":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:10039:2719":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:7448:2750":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11788:7325":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:573:3584":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8791:2452":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:7558:31418":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3369:1913":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"1:9114:7160":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10137:21247":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:14051:4110":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"9:424:20185":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:1340:7456":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5039:5758":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11443:3774":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:16212:4703":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:12318:3844":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6385:4905":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1544:7447":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6811:6222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11600:7196":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:11706:2849":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5046:5760":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:38889:8394":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:41064:8414":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:1724:34184":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:10950:7514":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:8006:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:1142:7460":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:8216:5156":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:2528:4742":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"11:1066:20264":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:10025:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:2660:2417":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5407:1173":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:9938:21268":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6763:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:42313:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2295:13931":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:3323:2426":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:832:7462":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:8253:6431":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:9398:7168":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:2124:5023":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9143:8489":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:5014:8472":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:0:2229":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:643:3584":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:2425:1962":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:39904:2434":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:12286:6882":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1580:5525":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:1862:2949":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11755:7565":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1494:2750":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:6689:2507":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10044:21270":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:10890:7180":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:7293:25682":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"9:447:20183":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:22471:2817":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5565:5961":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:4174:13703":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"9:53:20201":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6427:7404":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:12116:7521":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:43533:13668":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:40032:6806":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5536:5947":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:538:5440":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:40110:3605":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6813:4973":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15778:4597":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:10244:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:41048:6834":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:41855:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13497:3994":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:46302:7055":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:4966:2433":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:11056:30711":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:7602:6409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:613:34592":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:43357:2863":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:38809:2890":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:10686:3802":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5320:5851":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:651:3584":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:32842:8493":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:45502:6977":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:3740:34184":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7514:8376":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:9497:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:15273:4442":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:40517:6826":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2471:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:41032:6832":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:10676:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:6388:8592":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8535:7140":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:2562:5311":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5219:5801":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44075:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5277:5834":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15400:4477":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:9995:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:12362:6887":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8108:2993":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:10035:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4992:5732":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"15:327:20295":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:2403:2887":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:40507:6825":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:39243:13733":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"14:187:20278":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:5842:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7590:4775":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11773:3878":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:914:7447":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:46291:7054":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:5910:6510":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"14:214:5240":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:40053:6808":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2607:13732":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:2234:7277":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:8301:5163":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14341:4170":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:1575:7476":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13344:3969":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:16093:4674":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:39874:2375":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:7420:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:2548:5309":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:43554:6891":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:7100:34191":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:46355:7064":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:14235:4156":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:836:2452":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6620:4933":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:10911:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5466:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:4148:2887":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:12034:25680":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4587:4799":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12464:21395":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:1160:7461":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11528:7190":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1939:2807":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:43203:2869":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:6049:14228":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:4330:7566":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:6689:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:9266:7164":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3518:2390":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12443:3864":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6300:7390":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:2499:1912":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:31743:2727":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"18:96:25446":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:38920:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13292:3958":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:31687:2473":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:4352:4793":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:8226:21211":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:2112:7479":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:5742:4820":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:3126:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10170:3732":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:12272:1320":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:1525:5301":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6698:6185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:2338:4727":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7132:5022":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:2271:2976":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13855:4080":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10350:3738":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6588:4923":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4885:5682":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:6749:34184":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:7357:13892":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:7339:6291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12584:7287":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:14516:4202":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:10646:2421":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:2634:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:6532:4921":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7741:4778":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5502:2464":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:7452:6327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6872:4987":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15058:4387":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7857:5102":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"11:1923:5305":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:40469:6822":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:15078:4395":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12300:21394":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11153:7287":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13272:3957":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5722:4765":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:41405:2889":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:3014:20339":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:5107:4815":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12572:3769":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:6379:6016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10218:3734":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:581:2703":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:15635:4558":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:533:8348":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41232:6849":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:5995:4854":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:41736:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:2175:21328":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:1903:5302":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:45277:6957":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:14912:4365":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12107:3769":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:7348:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8562:7141":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:5158:7570":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42013:2717":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11823:28254":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:6619:6516":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:12818:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5515:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"16:2355:4729":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:11144:7518":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6729:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:4799:8473":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:10037:2718":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:2441:2984":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:3934:7565":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:8175:7438":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11042:7291":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:1590:5302":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:22482:31407":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:12231:28211":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:15281:4443":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5457:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:7585:2357":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10954:21281":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:21202:31652":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:41198:6848":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:710:7447":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:1968:2808":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:5445:2842":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5352:5857":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:7537:6384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15368:4469":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:43063:7541":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:15769:4595":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:7446:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:6880:6236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46317:7056":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:7399:29657":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:15190:4422":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6648:4935":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:23064:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:37486:13917":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:22311:6541":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:41396:13983":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:669:7470":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:10488:31221":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:6629:6157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:45487:6976":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:41319:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:3536:2392":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:32608:13910":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7804:7632":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11557:7314":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:7129:30706":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:40094:6812":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:22417:6543":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5122:5775":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:22073:2998":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:11256:3759":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:6491:6082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11227:7300":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:80:25445":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:41992:2715":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:33215:13914":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:10029:2715":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"15:0:2226":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:3406:13639":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6948:4769":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10355:2475":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:12289:3839":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:39711:6783":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11168:2471":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:909:7462":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:4940:4810":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:12266:1716":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:2423:2750":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:774:5300":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5897:4838":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:6930:13687":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:9977:1914":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:31729:5077":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:9349:2510":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:3475:4785":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:6505:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6874:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:844:8377":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"11:102:5290":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6900:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14325:4168":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11511:30699":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:15760:4591":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:40000:6801":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:39829:31418":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10843:2887":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:22613:2832":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:8265:6433":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:4268:2382":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43569:6897":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12056:3831":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12949:3844":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:10930:2401":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:39818:2360":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:3871:7477":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:13473:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:1887:2750":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:43407:2403":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6263:4900":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:1891:7463":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:2369:7468":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:15206:4425":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7144:21206":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:15342:4459":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:21729:2998":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:11898:3798":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:2205:6459":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12824:21273":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:828:7471":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:12132:2196":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:10999:2472":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11715:3787":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11621:3779":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:9131:7161":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:5415:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6746:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:12255:1695":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4909:5696":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13455:3989":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:6756:6206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:42902:7537":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:3925:4791":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:5347:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:8341:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:37596:13919":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6678:6176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:43881:6919":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"11:787:5301":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13064:3909":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5112:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7052:7406":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"14:220:5242":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:14986:4376":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12508:3871":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:1863:6495":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11179:30519":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"14:165:20271":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:40259:2405":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:2101:7478":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:43123:2853":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:7984:6415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:22504:6554":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:9437:28203":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:42510:6870":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:46000:7041":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:4093:8421":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:589:3595":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7695:5090":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2878:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:4614:4800":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5361:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:5189:7570":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4424:4794":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10439:3741":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8579:7600":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:45601:6982":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11467:3776":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7727:4777":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:15301:4450":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:837:7449":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5802:21197":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10092:21271":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:2998:4781":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:2525:6469":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:9327:2502":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:13832:4077":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10185:3733":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:12264:836":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11634:3781":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:43583:6900":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:3281:2424":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11313:3766":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5014:5745":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15249:4433":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11419:3769":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"7:78:20176":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2477:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11837:7200":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12808:3892":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:45181:6951":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:12269:1710":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5483:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:4560:4798":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6398:4759":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6915:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:2788:4754":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:10236:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:3244:5303":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:10948:30521":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"0:51:1109":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"2:22432:6544":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12201:7345":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13424:3980":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:8271:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13308:3962":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:39020:8370":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7397:34578":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:1354:7461":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:7546:6387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"15:288:20290":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2297:13932":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:10671:34581":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7473:4868":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41413:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:1639:5569":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:8136:5150":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5236:5811":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6466:4914":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:22199:8580":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:4976:4811":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:7467:6333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:5283:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14994:4377":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13363:3970":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:880:5301":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:2498:20260":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:6667:2750":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12263:855":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8487:7598":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11293:21301":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:6991:34568":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12929:3899":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12993:21274":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:8118:5147":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9662:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:12768:21251":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:4279:8444":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:6714:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:5002:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:12215:28144":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:2151:7457":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2572:4744":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:9322:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:645:8359":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:6098:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:3129:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15473:4496":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13581:4022":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:39991:6799":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:578:5462":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:15092:4399":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:12590:2838":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:43221:2868":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:16165:4692":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:13986:4102":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:13276:7523":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46177:7046":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:12268:1728":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:21280:8502":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:1547:5503":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4916:5700":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:4738:6315":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:43002:6879":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:15176:4419":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:7461:6331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:553:5449":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:3366:2422":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:12251:1223":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"18:706:2840":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:0:948":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13116:3916":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:10268:2949":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:39981:6798":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10877:2993":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12076:7339":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:5598:5973":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:4467:2382":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:12246:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:564:5454":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:5912:7463":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:12400:2847":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7356:6481":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14189:4146":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:12270:917":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:1585:7477":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:40085:6811":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:14847:4324":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5630:5993":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:41478:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:42981:6531":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:21278:2998":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:10868:2407":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:3494:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"11:687:2887":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"0:122:1921":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"17:10419:3740":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:11061:7516":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:7389:6318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:586:5466":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6524:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:39721:6784":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:22555:31256":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:7999:2959":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:8306:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42962:6530":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4924:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:513:7270":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:1663:5586":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11567:7315":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:43747:6910":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2440:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8455:2405":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:46256:7051":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5314:5850":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:3032:33843":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:46245:7050":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:860:7365":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:9071:2471":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:16138:4683":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:14489:4198":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:22589:2818":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:6407:8593":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:43375:2864":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2902:20337":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:41328:2452":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6317:7393":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:45306:6959":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43153:2407":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:2936:20338":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:1585:5527":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7604:4776":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:2382:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:14212:4155":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:8019:2543":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12422:3860":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10818:7287":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:3018:5038":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5415:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:1062:34184":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:7633:34569":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11240:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:6408:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:41336:2887":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:1325:7457":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:9175:2838":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11853:7334":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1496:5475":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:40075:6810":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13766:4066":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:12100:13991":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:2195:8344":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5266:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7321:6854":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:41092:6841":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2961:13634":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:41010:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:30224:6573":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:6257:6536":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"9:482:20182":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:3473:7279":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:21331:2998":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:9684:31769":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:1840:13941":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:15569:4534":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:43445:2845":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:41469:2750":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:6586:34184":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11830:7200":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11561:7193":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7098:5017":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:4821:7281":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:46219:7048":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2696:2409":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:14449:4195":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:43129:2852":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:465:5395":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14025:4106":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:3597:7280":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"12:0:2224":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11242:7301":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15931:3929":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:39755:13727":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:9207:7602":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:13224:31732":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7813:5094":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:14131:4119":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11583:7320":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:7075:34193":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:7509:7428":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:39050:7528":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:30599:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:9492:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:7388:6482":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:1207:7272":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:279:34184":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:44162:6933":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7355:5060":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:9084:2472":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:1534:7462":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:4500:34186":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:43028:6532":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"14:202:13670":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:46370:7065":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:22582:6565":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:15521:4533":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:1975:744":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:3304:5305":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:42734:6876":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:42287:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:12683:7360":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:4:1186":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6849:4986":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:45164:6950":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:43893:6922":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:623:34593":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:7485:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:22087:8589":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:4258:8442":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"19:0:1203":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2401:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:9335:2382":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:9158:8488":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10887:34584":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:3321:2425":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:41502:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4590:8447":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:2838:4756":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:3246:30305":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13753:4064":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:7907:2998":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:16050:3957":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:5235:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6460:6061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5636:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:4103:34184":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:9058:2470":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2966:13635":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:45143:6945":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6480:4761":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:2303:20310":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:9339:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12543:7356":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:4108:7503":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:9807:21254":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:4570:2729":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2274:2977":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:7516:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3095:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15608:4549":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:8029:6428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:22540:31260":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5671:6009":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:0:2221":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:903:7477":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:637:7551":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10710:7286":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:21229:31654":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10287:7616":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:10982:21282":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:9886:21266":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7111:5020":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:8188:7441":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5329:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:42271:5121":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15214:4427":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1593:5532":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:485:5406":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:517:5428":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13412:3979":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:43865:6915":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:38960:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:113:25447":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43600:6901":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:1896:7477":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:1741:6492":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"18:598:34591":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:32236:5036":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:43778:2871":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12388:3857":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5344:5856":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:14876:4335":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7456:2750":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:12658:13662":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:43712:6905":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:8259:5077":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:9858:21265":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:872:7268":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:1602:5304":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:39800:6791":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11841:7333":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6746:2514":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:9669:2996":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:12433:3862":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5250:5817":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4568:8446":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4891:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:2323:20336":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:7690:7477":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:6577:2503":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:45455:6974":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:1826:2940":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:43889:6921":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:10666:2998":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:30626:2703":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:1063:7457":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11051:7292":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5290:5839":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:8300:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5212:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8125:2994":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11392:7307":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14723:4221":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5831:4830":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11214:7299":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:6478:6073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46236:7049":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4127:8422":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:41658:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12225:7347":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:3329:4784":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:5675:2467":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:2140:7456":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6543:4922":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:7888:5106":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6494:4917":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1621:5557":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"11:2536:5307":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:3119:2542":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:14475:4197":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:7031:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:21447:2998":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:21351:6539":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:1485:5470":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:7529:2355":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"13:109:34555":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:39844:2359":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7597:7497":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7412:2750":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:542:4716":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:15168:4416":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:8288:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:4514:13711":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:45210:6953":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:15:2332":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:5936:2512":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:1565:5513":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:21458:6539":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9380:3000":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11877:3796":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11128:3721":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6047:7368":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:2548:4743":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:22364:6542":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:7608:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:8540:8445":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7379:34576":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5005:8471":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:10473:30708":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:621:2809":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6621:6156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:4031:2382":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:945:7454":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:2878:4758":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"0:48:656":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"16:6079:4719":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:31848:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41344:2750":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:5306:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:45335:6968":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:14752:4241":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:4079:8419":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:10538:2469":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12792:3696":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:5400:3732":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:42531:2448":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8546:7599":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40009:6802":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13972:3804":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:3396:7477":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:3842:4789":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2925:2879":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:0:2227":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:31817:2881":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:15138:4405":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:40498:2431":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:11102:2867":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15289:4444":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4837:5651":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:43873:6917":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:5781:4764":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:40476:6823":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:2469:7477":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:13251:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:12265:1734":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:42259:31244":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10317:3737":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:4316:2726":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"9:502:5377":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:2049:6498":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12695:7361":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:6433:4909":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:2307:6468":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:9976:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:7503:2455":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:1910:5303":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10769:34579":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7686:7437":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:10456:31606":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"13:226:5289":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:5769:4825":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:4308:2452":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1574:2452":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6335:7401":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:559:5452":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15944:3943":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:1596:5303":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11367:3753":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:5070:8477":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:7844:30712":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:4395:7507":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:7648:7436":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8425:2402":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:491:3583":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12408:3859":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:12259:717":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14091:4115":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10867:7172":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:5643:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:640:7553":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6758:4960":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:22101:13931":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:44116:7543":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5400:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10018:21250":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3778:4787":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"9:330:5355":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2438:4738":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12362:3856":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:22227:8581":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:14246:4158":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:4523:2728":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:10612:7284":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:10982:28213":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:1007:5023":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:7339:3095":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:718:3617":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:33734:5042":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:39962:6795":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11811:7199":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:4531:4797":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:45128:6944":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:33078:13913":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:856:7452":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2985:7561":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:735:25456":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:40:8396":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11270:7186":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4932:5704":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7061:5011":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6895:4988":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:4833:757":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:41210:7139":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12647:7357":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:15434:4484":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11189:3757":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2636:4747":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9501:2955":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:2956:13633":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:13089:3910":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:2374:4735":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11493:7309":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:362:7548":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:403:7269":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:9415:7612":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:40269:6819":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:32960:13912":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:6815:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7799:4766":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:6540:7463":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:11404:7629":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:14038:4108":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:9679:32802":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3108:2408":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6098:21199":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:1676:34551":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3249:33997":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:41176:31419":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:9362:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2876:2875":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:25464:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5376:5869":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:2443:2985":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:3329:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45470:6975":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:570:5457":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:2674:30708":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:3264:7278":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:123:5291":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:6617:2513":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:875:7454":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:3614:4786":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:38893:6642":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:7428:21207":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:3025:2804":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5382:5872":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7539:4773":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:1040:5023":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8445:2404":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:8093:5144":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:1607:5305":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4410:7567":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:507:3584":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:6760:2515":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:867:7267":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:43427:2848":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:8328:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:45064:6938":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11647:3782":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:21260:31662":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:16105:4676":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:11166:3755":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:41384:7530":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6657:6170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:3279:2423":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"0:49:1934":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"16:8073:5143":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8392:2430":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:16269:3979":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:8257:7589":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"7:31:20169":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13899:4088":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:2326:7456":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:7755:4768":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:1478:2887":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2644:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:6273:30721":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:43901:6924":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:9344:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8605:7142":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:725:2998":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:7656:21208":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13046:3906":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13252:3947":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14545:4205":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:15596:4546":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:680:3608":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:40062:6809":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12621:3874":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:8481:7596":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2435:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9674:27523":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:10915:34582":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:8259:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12043:7337":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:39953:6793":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8098:2995":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:4242:7505":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:22602:2193":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:1309:5023":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2888:2731":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:13528:8380":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12030:7336":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:10872:7174":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:43726:13669":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:46265:7052":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:4141:8424":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10279:8407":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9916:21267":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:6609:6149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:2592:4745":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:4907:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:14868:4334":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:12253:1577":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:5864:2499":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:45373:6970":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5617:5987":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4979:5726":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:8384:2456":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"10:44:5317":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2728:4751":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:8294:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13797:4073":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:46198:7047":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43303:2861":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13485:3993":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12261:843":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:43675:6904":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4811:5631":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5863:21198":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:10161:6845":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:10640:2423":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:31750:6638":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:9064:7512":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"9:392:20184":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:33388:13915":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1517:5483":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:15822:4604":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:39931:7529":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8468:2407":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:2631:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"18:698:3612":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:15390:4474":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:1734:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11497:7310":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:43054:6533":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2427:2980":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:3240:28092":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:1054:7456":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:46393:7066":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"10:0:2222":{"crate_id":10,"path":["adler"],"kind":"module"},"2:21246:31648":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11589:7582":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:39781:13728":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:45438:6973":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4897:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:9279:28207":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:2037:7273":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:42232:6858":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:43073:6534":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:10939:30523":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:8638:8481":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:25:665":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:41250:6850":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5472:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:3810:4788":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:6153:2382":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:1885:2955":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11537:7313":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3456:2431":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:4856:4807":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:5796:6507":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7168:7164":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:13418:6536":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:12346:6886":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:2708:4750":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:38230:13921":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:14356:4174":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:11062:30714":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8173:7588":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:588:8356":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:4928:31625":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:7545:2358":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11764:3795":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11354:7306":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:0:2223":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5557:5959":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42519:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:2606:2998":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:8431:32806":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:3737:2750":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:8012:6418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15734:4582":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:1648:2382":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"2:5008:923":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13999:4103":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:1566:20265":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14587:4212":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"8:0:2220":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:44146:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:3593:2393":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7570:4774":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:22496:6553":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2637:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:46432:7082":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6597:6144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8655:2447":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5006:4812":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:42991:7539":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7769:5092":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:3283:33998":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6504:4918":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10284:3736":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13606:4026":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13922:4093":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4959:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:38845:13638":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:21248:31660":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13526:4003":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:4137:8423":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7931:7092":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:3660:2887":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9781:21264":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:44173:5314":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:8808:2454":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:22232:8579":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:6940:13688":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:5347:4817":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12724:21272":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43897:6923":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:15799:4600":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:6608:6519":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:4830:4806":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:29788:2816":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:43257:2867":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13814:4076":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:38942:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8583:3020":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:1555:7448":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4876:5677":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:43452:2857":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:7314:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13375:3973":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:8202:4780":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:15222:4429":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:6028:2496":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:538:3592":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:5678:2468":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:7863:30702":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:35610:5043":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:39767:6786":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11405:7308":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:14529:4203":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:6360:7088":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:22:772":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:4718:4802":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5160:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11222:7185":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:5607:1916":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:299:5292":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11045:30719":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:41816:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:2458:4739":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:10031:2716":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:45923:7040":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14968:4371":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13594:4023":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:22049:8586":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:11674:3784":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:563:3594":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:22140:8590":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12399:3858":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10399:2406":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42494:6867":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"7:0:1784":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7014:21205":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12371:3899":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"11:430:34549":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:503:8344":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:16121:4681":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:2612:4746":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:7251:2758":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4870:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:9984:21269":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:7368:7463":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:7887:13890":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:42242:2724":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:6692:2508":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:11187:6924":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"18:765:25457":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1671:5587":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:30218:6490":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:7644:28150":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:21456:8499":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:7966:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4985:5729":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1503:5478":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8014:2960":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:356:7546":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:8317:6446":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:4724:8421":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:754:3625":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:8247:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12485:21396":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:1535:5494":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:10027:2714":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:3314:13922":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:39813:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8262:7590":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11799:7326":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:396:34545":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:15678:4574":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:39911:6532":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:12597:3873":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:4266:8443":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13509:3995":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"11:351:34543":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:12254:1609":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:5996:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:7330:6285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:15324:4455":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:11734:7564":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:4437:34186":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3270:5304":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"9:178:20250":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2379:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:6665:21203":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:7926:7583":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:45292:6958":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:11205:3000":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:4029:8417":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:22099:31483":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:45713:7002":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6435:6056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:150:4714":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:3364:2421":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22448:6548":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13738:4059":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:1686:5596":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:4273:6500":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:1581:7463":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"14:0:2225":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11026:21283":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:3251:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:14463:4196":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:45825:7006":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12454:3865":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12328:3846":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12900:3898":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:43099:2194":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:1051:7457":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4155:13632":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:6907:13686":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7559:5084":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15646:4559":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:2087:2420":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:40041:6807":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3829:7563":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11269:21300":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:45096:6942":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11574:5306":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5083:5772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:5719:2382":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6976:4996":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"14:160:7442":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:4482:7568":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:11534:2477":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:1107:7459":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6519:6094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:10911:2847":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:0:2076":{"crate_id":0,"path":["autocfg"],"kind":"module"},"1:9253:7609":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:21880:2998":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:39070:6650":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:6419:6511":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12969:3901":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:14599:4219":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:217:7469":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12251:7349":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:4986:7282":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:10573:34580":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6441:6059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:3243:30301":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:3335:13701":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:2287:33989":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:16235:4708":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:5488:2463":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3486:2382":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13387:3974":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:7306:6268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2478:4740":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:42334:2725":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:45787:7004":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5260:5823":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:39655:2858":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:7412:6319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13844:4079":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1490:5472":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44124:6930":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1707:5604":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:868:8378":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:2628:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12557:3753":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:5914:4843":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11702:3786":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:13202:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5075:4814":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:14436:4194":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6802:4972":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5244:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5390:5877":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:3603:7463":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:16176:4697":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:941:2452":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:7937:2544":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9671:21249":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"0:50:1940":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"16:5846:4832":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12478:3867":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:6471:6069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6788:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:10819:2452":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:4469:2727":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11063:7293":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5307:4816":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:1771:1261":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2418:4737":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:16187:4698":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:5445:5911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:6574:4779":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:16259:3974":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15039:4386":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:21758:6540":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14298:4164":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:31759:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:41395:8485":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:5503:1609":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"17:16198:4699":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:11142:3769":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5052:5762":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:39672:6779":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:15151:4411":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6927:4992":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12213:7346":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:726:2819":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:21339:8501":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:8387:2888":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:6409:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13325:3964":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:2203:7274":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9047:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:41461:2887":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10622:34583":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:9246:7608":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12659:7358":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:16069:4669":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:4971:5721":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:3026:33847":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:659:7262":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:12273:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43083:7542":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10905:7289":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:45231:6954":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:7580:5085":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:918:7448":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4824:5641":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4736:6313":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:8741:2450":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:8351:6453":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9258:7610":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:2231:5306":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:5857:2498":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:8181:2418":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:4897:7569":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:46276:7053":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:8103:2996":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:5102:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5146:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11605:1918":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:4238:2382":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:9225:28205":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14111:4118":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:523:5431":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:2591:2416":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:33561:13916":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6342:34575":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4035:8416":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:4839:8432":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13774:4068":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:12584:2844":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11865:7335":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11743:3791":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:5367:21196":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5653:6000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"5:1516:5300":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:2394:4736":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13723:4055":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12150:3837":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:15376:4472":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2934:8494":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15836:4607":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:9218:7604":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:37541:13918":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:5756:7366":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:4802:8446":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:2883:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:41697:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11102:7296":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11547:3675":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7823:21209":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4800:5623":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:5449:2843":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10720:34587":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:39000:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5546:5953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1887:2956":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:437:3682":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3767:8415":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10251:3735":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:15418:4481":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"9:238:2448":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15010:4378":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:8197:6429":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:8781:2451":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:39057:6648":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:532:5437":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6417:6043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3986:2184":{"crate_id":1,"path":["std","num"],"kind":"module"},"6:5225:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:39748:2857":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:8554:7596":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6634:4767":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:3354:31228":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:44083:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5581:5966":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6447:6060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:43461:2858":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:44062:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:5677:6012":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5174:5779":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:43648:6903":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:2443:7463":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:8413:2401":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6412:21201":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:6471:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:1929:1910":{"crate_id":1,"path":["std","error"],"kind":"module"},"17:15463:4491":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:43321:2862":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:45111:6943":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40492:6824":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5553:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:4459:6501":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13187:3929":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4787:5614":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:12260:861":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:45675:7000":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12707:7362":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9755:21246":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:30186:6572":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:11023:2865":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:40134:6816":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:37651:13920":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2453:2990":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:7706:7500":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:2640:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:10289:7615":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:10661:7285":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:43275:2866":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:39940:2404":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:42953:6529":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:8393:13888":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:5700:4763":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7006:7405":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:924:8379":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:46148:7045":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:42541:6874":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:9100:7601":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7631:7498":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:939:7452":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5891:2500":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"2:3123:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:43943:6927":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:1653:5580":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6650:6169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:4502:4796":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:10155:3731":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:2768:4753":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:8528:7139":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:21231:31657":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:6614:6518":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"11:2569:2455":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:12267:1722":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:4120:7504":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5134:5776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12516:7353":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"15:306:20291":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:12544:2457":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:45049:6935":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:515:3587":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"14:7:7442":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6066:4864":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14311:4165":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:5750:7089":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:673:2452":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"15:394:20301":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:4132:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:7085:5013":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:43877:6918":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:43139:2406":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:14414:4183":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3806:7478":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:811:7477":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:11341:7305":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45263:6956":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:2245:1911":{"crate_id":1,"path":["std","fs"],"kind":"module"},"17:15720:4580":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:22011:8585":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"18:521:25458":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7497:5079":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:928:8377":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10581:30704":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:21192:2703":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:4087:8420":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:12247:1105":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6026:4860":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:5686:4760":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8726:2449":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:11116:2866":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10877:7288":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:42549:6875":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:481:3582":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:9194:2501":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7549:5083":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:9354:2511":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:2508:4741":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6636:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:3237:2452":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:7250:7983":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4065:8418":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:8282:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:2234:6462":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:951:7455":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7908:7091":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"9:357:20198":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:12220:8364":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3603:2396":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:4771:4804":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:45196:6952":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11606:7197":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8137:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:13024:21275":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4942:5710":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:15313:4451":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13785:4071":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:6305:7574":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:0:2219":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:2748:4752":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:700:2750":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:10390:14002":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:5624:5990":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5296:5842":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10997:3750":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6160:20309":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:10848:7624":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:1087:34550":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:16032:3947":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:46119:7044":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5415:4818":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:43470:2859":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:15266:4441":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6353:4902":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:4843:8435":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:7703:2491":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3029:3628":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4062:4792":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43919:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:545:5444":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:4734:6311":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"11:1883:2452":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:7561:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11755:3794":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:30239:2724":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6738:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:8267:2186":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:41894:2497":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:7043:8496":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:294:2545":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:46090:7043":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14066:4113":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7910:21210":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:43885:6920":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9737:21248":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:1169:33844":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:14271:4161":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7618:5086":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:14284:4163":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:15992:4655":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:14079:4114":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:39732:2859":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11671:27524":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5191:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:41580:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:45356:6969":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:5588:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:21770:31658":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14503:4201":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:9299:7167":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:6706:6189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:14788:4272":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:7924:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:9824:2737":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:16079:4670":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:6581:2504":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14402:4181":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:41999:2714":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13959:4097":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8475:2403":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:40283:6820":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:22520:31254":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:10033:2717":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5336:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:6940:4994":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:481:30717":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:21214:31652":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:1072:7461":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:15126:4402":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:22185:2998":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:12271:1794":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:15748:4589":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:41541:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:30250:31277":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:7348:2750":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:31725:7526":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:10020:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12887:3896":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:9173:8490":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14560:4209":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:7993:8363":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11661:3783":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:4390:7506":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3584:30464":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:597:3728":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14933:4370":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:7398:33981":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:3791:2420":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:42006:2716":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9092:2452":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4965:5718":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:16151:4689":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:434:34537":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"14:40:3944":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:41394:8365":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12175:7340":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:2756:6472":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:3196:4726":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:922:7449":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:726:3620":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:5623:2382":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:32901:8495":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:12610:2837":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:7951:3802":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:15957:4625":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5927:4844":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2736:2419":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:43112:2856":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:5708:13686":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:41453:2452":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:12323:6885":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12353:3855":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13674:4030":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1628:5561":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:5522:2465":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:14012:4105":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:328:5295":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:4882:4808":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:7928:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15116:4401":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11575:7194":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12278:7351":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8189:2420":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:4747:13721":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11510:7311":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:15383:4473":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:40483:2503":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4952:5713":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10920:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:5665:6007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6782:21204":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"10:36:5316":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:10988:7515":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:45586:6981":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6560:4762":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6606:4931":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:800:7463":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:7979:8362":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:15456:4489":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4641:4801":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:16223:4705":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:2854:4757":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:40023:6805":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6542:6107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6278:7375":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13173:3928":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:46340:7063":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40525:6828":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"11:1025:7456":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:1559:5511":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8159:7095":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:11466:3179":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:3369:13636":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6962:4770":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:39774:6787":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:5960:4851":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10068:21253":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:893:7463":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:45846:7007":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:7621:6488":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:7366:3020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8164:7096":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:13211:3943":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:670:7266":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:1828:7477":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:4913:4809":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:1153:34074":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:7378:7496":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:31761:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:15333:4458":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45079:6939":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"11:1603:7465":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:2542:5308":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7528:5080":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2712:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13538:4006":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13437:3981":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12530:7355":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:31846:2880":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12851:3894":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15616:4552":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10534:34586":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11730:3790":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:21882:8500":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:3028:6465":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12238:7348":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8401:2432":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:557:7550":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:3832:7564":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:3341:13700":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:5061:2382":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"13:0:2218":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:44137:7545":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:15356:4466":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12494:3868":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5181:5781":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:7359:6297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6821:6224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5423:5895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:12248:455":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:43171:2865":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:8075:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:2352:7457":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:4841:8434":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5538:2466":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13146:3920":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:2279:2391":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:45548:6979":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10429:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:3899:4790":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11524:7312":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:45808:7005":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:43760:2870":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:0:1601":{"crate_id":1,"path":["std"],"kind":"module"},"2:43417:2860":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:42296:2724":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:15426:4483":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:4073:7463":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:256:7267":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5477:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:38980:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:12249:1755":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:3324:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:39740:2858":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:12605:2839":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12671:7359":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:12252:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:6664:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5528:5942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:15023:4383":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:1510:5480":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13553:4012":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14372:4175":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3647:2452":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4864:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13015:3862":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:39856:2361":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:15701:4575":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41619:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:11629:7519":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:21734:8504":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15655:4561":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:8492:8413":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:43869:6916":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11694:7563":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:41815:1917":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"17:11016:7290":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:44065:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6670:6174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:12199:7635":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:5200:5793":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:15102:4400":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13473:3990":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:45417:6972":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:2929:8492":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:14260:4160":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11089:7295":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5489:5934":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:7891:13889":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}