{"root":"0:0:1843","crate_version":"1.1.0","includes_private":false,"index":{"2:12180:27514":{"id":"2:12180:27514","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:34100":{"id":"2:12199:34100","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:34100"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:2588","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:34755":{"id":"5:5444:34755","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2309","`String`":"5:7283:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2309","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-0:86:128":{"id":"0:35-0:86:128","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:86:128","glob":false}}},"b:2:3317-0:86:128":{"id":"b:2:3317-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2540:1724":{"id":"2:2540:1724","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8313:7865-0:123:1686":{"id":"a:2:8313:7865-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:7865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2698:228-0:86:128":{"id":"a:2:2698:228-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2252:24265":{"id":"2:2252:24265","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:86:128":{"id":"b:2:2537-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1724"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:54:1716":{"id":"0:54:1716","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5119:191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1843":{"id":"0:0:1843","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:35-0:86:128","0:123:1686","0:48:601","0:49:1699","0:50:1705","0:51:944"],"is_stripped":false}}},"2:12076:1834":{"id":"2:12076:1834","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5428:34751":{"id":"5:5428:34751","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2309","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2309","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:2823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:48:601":{"id":"0:48:601","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:26992":{"id":"5:5446:26992","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12197:26995"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:31178":{"id":"2:12103:31178","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12102:31179"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:2579","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2738:2302-0:86:128":{"id":"a:2:2738:2302-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3317-0:123:1686":{"id":"b:2:3317-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3315:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3319:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12169:34093":{"id":"2:12169:34093","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12133:34084":{"id":"2:12133:34084","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11776:2577","str::split":"2:12124:1835","prim@char":"1:11978:418","`DoubleEndedIterator`":"2:7304:121","str::rsplit_terminator":"2:12136:34085"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:2600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:34091":{"id":"2:12165:34091","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:27513":{"id":"2:12113:27513","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:1783":{"id":"0:64:1783","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:34085":{"id":"2:12136:34085","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11776:2577","str::split":"2:12124:1835","prim@char":"1:11978:418","str::split_terminator":"2:12133:34084"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:2599","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3319:1500":{"id":"2:3319:1500","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39418:5984","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8314:7864-0:86:128":{"id":"a:2:8314:7864-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:7864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:76:1820":{"id":"0:76:1820","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:13263":{"id":"5:5429:13263","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:27473":{"id":"2:12091:27473","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1746":{"id":"0:58:1746","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:1972":{"id":"2:12104:1972","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:34081":{"id":"2:12095:34081","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11984:1406","str::slice_mut_unchecked":"2:12096:34082","crate::ops::Index":"2:2978:7774"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:1487":{"id":"2:2551:1487","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5432:34752":{"id":"5:5432:34752","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5691:1464":{"id":"5:5691:1464","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:123:1686":{"id":"b:2:2547-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12171:34095":{"id":"2:12171:34095","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11801:2570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:128":{"id":"0:86:128","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2698:228-0:86:128","a:2:2681:220-0:86:128","a:2:8313:7865-0:86:128","a:2:2738:2302-0:86:128","a:2:8314:7864-0:86:128","b:2:2250-0:86:128","b:2:2247-0:86:128","b:2:2552-0:86:128","b:2:3317-0:86:128","b:2:2607-0:86:128","b:2:2547-0:86:128","b:2:2537-0:86:128","b:2:2541-0:86:128","b:5:5689-0:86:128","0:29","0:26","0:88"]}}},"b:2:2541-0:86:128":{"id":"b:2:2541-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12177:24565":{"id":"2:12177:24565","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:34079":{"id":"2:12080:34079","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12078:34078"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9206:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53:944":{"id":"0:53:944","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:86:128":{"id":"b:2:2552-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12194:26990":{"id":"2:12194:26990","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1793":{"id":"0:67:1793","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1686":{"id":"0:123:1686","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:2698:228-0:123:1686","a:2:2681:220-0:123:1686","a:2:8313:7865-0:123:1686","a:2:2738:2302-0:123:1686","a:2:8314:7864-0:123:1686","b:2:2250-0:123:1686","b:2:2247-0:123:1686","b:2:2552-0:123:1686","b:2:3317-0:123:1686","b:2:2547-0:123:1686","b:2:2537-0:123:1686","b:2:2541-0:123:1686","b:5:680-0:123:1686","0:132","0:130"]}}},"2:12130:27508":{"id":"2:12130:27508","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11776:2577","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split":"2:12124:1835"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12074":{"id":"2:12074","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12075:816","2:12076:1834","2:12077:34077","2:12078:34078","2:12080:34079","2:12083:24967","2:12084:34080","2:12085:314","2:12086:27475","2:12087:27471","2:12089:27472","2:12091:27473","2:12093:27474","2:12095:34081","2:12096:34082","2:12097:27497","2:12098:27498","2:12099:1821","2:12100:6234","2:12101:5838","2:12102:31179","2:12103:31178","2:12104:1972","2:12105:34083","2:12106:31175","2:12107:1832","2:12110:1974","2:12113:27513","2:12116:1973","2:12120:2492","2:12124:1835","2:12127:27506","2:12130:27508","2:12133:34084","2:12136:34085","2:12139:1977","2:12142:27511","2:12145:34086","2:12148:34087","2:12151:2095","2:12154:34088","2:12157:34089","2:12160:34090","2:12163:1841","2:12165:34091","2:12167:34092","2:12169:34093","2:12170:34094","2:12171:34095","2:12174:34096","2:12177:24565","2:12180:27514","2:12183:34097","2:12186:34098","2:12189:34099","2:12192:1983","2:12194:26990","2:12195:28616","2:12196:26994","2:12197:26995","2:12198:26996","2:12199:34100","2:12201:7742","2:12202:34101"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","cause","source","type_id","description"],"trait":{"name":"Error","id":"2:2600:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1953","0:28:394"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32097:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:2738:2302-0:123:1686":{"id":"a:2:2738:2302-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2738:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12107:1832":{"id":"2:12107:1832","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:34754":{"id":"5:5443:34754","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1811":{"id":"0:73:1811","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1741":{"id":"0:57:1741","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:1977":{"id":"2:12139:1977","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577","str::rsplitn":"2:12142:27511"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:2598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:34092":{"id":"2:12167:34092","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:26995":{"id":"2:12197:26995","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:123:1686":{"id":"b:2:2250-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:24265"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12154:34088":{"id":"2:12154:34088","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11776:2577","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2095"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:2595","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12124:1835":{"id":"2:12124:1835","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11776:2577","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::split_whitespace":"2:12102:31179","str::rsplit":"2:12130:27508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:2165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12202:34101":{"id":"2:12202:34101","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:34101"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:2590","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9211:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12160:34090":{"id":"2:12160:34090","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11776:2577","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::match_indices":"2:12157:34089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:2593","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:34097":{"id":"2:12183:34097","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:671":{"id":"0:89:671","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:27497":{"id":"2:12097:27497","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12098:27498"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:26994":{"id":"2:12196:26994","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2543:697":{"id":"2:2543:697","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:34082":{"id":"2:12096:34082","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11984:1406","crate::ops::IndexMut":"2:2982:7775","str::slice_unchecked":"2:12095:34081"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:34089":{"id":"2:12157:34089","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11776:2577","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::rmatch_indices":"2:12160:34090"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:2592","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:123:1686":{"id":"a:2:2681:220-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12106:31175":{"id":"2:12106:31175","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2607-0:86:128":{"id":"b:2:2607-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2600:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3371:13063","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2609:2557"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"0:66:1790":{"id":"0:66:1790","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:2550":{"id":"5:683:2550","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:6234":{"id":"2:12100:6234","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:123:1686":{"id":"b:2:2537-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:1724"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30:671":{"id":"0:30:671","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42669:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12083:24967":{"id":"2:12083:24967","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11343:1962"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:394":{"id":"0:28:394","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2600:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:422":{"id":"0:131:422","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:1983":{"id":"2:12192:1983","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11737:127","`FromStr`":"2:11736:2215"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11736:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11736:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1814":{"id":"0:74:1814","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5689-0:86:128":{"id":"b:5:5689-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9211:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5687:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5691:1464"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2541-0:123:1686":{"id":"b:2:2541-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12075:816":{"id":"2:12075:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:1486":{"id":"2:2556:1486","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2249:2080":{"id":"2:2249:2080","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1817":{"id":"0:75:1817","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:5838":{"id":"2:12101:5838","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:2164","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1808":{"id":"0:72:1808","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2698:228-0:123:1686":{"id":"a:2:2698:228-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2698:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8314:7864-0:123:1686":{"id":"a:2:8314:7864-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8314:7864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12084:34080":{"id":"2:12084:34080","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:314":{"id":"2:12085:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12086:27475","`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:27475":{"id":"2:12086:27475","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:123:1686":{"id":"b:5:680-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2549","5:683:2550","5:684:2551"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12093:27474":{"id":"2:12093:27474","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:31179":{"id":"2:12102:31179","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12103:31178"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:2581","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12148:34087":{"id":"2:12148:34087","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12195:28616":{"id":"2:12195:28616","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39626:28612","Self::is_ascii":"2:12194:26990"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39626:28612","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:1841":{"id":"2:12163:1841","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:7742":{"id":"2:12201:7742","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:7742"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:2589","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:27471":{"id":"2:12087:27471","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:2549":{"id":"5:682:2549","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12099:1821":{"id":"2:12099:1821","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1775":{"id":"0:62:1775","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1797":{"id":"0:68:1797","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1788":{"id":"0:65:1788","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:34098":{"id":"2:12186:34098","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:27498":{"id":"2:12098:27498","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12097:27497"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:1974":{"id":"2:12110:1974","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:1973":{"id":"2:12116:1973","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:34083":{"id":"2:12105:34083","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:2591","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12127:27506":{"id":"2:12127:27506","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11599:2580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1806":{"id":"0:71:1806","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1953":{"id":"0:27:1953","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2681:220-0:86:128":{"id":"a:2:2681:220-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2681:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:944","0:54:1716","0:57:1741","0:58:1746","0:62:1775","0:63:1778","0:64:1783","0:65:1788","0:66:1790","0:67:1793","0:68:1797","0:69:1799","0:70:1802","0:71:1806","0:72:1808","0:73:1811","0:74:1814","0:75:1817","0:76:1820"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2247-0:123:1686":{"id":"b:2:2247-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2080"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12078:34078":{"id":"2:12078:34078","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:27472":{"id":"2:12089:27472","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12145:34086":{"id":"2:12145:34086","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2552-0:123:1686":{"id":"b:2:2552-0:123:1686","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1486"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12120:2492":{"id":"2:12120:2492","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41589:179","prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8313:7865-0:86:128":{"id":"a:2:8313:7865-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8313:7865","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:2609:2557":{"id":"2:2609:2557","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3383:6783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:2551":{"id":"5:684:2551","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:34077":{"id":"2:12077:34077","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1778":{"id":"0:63:1778","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1799":{"id":"0:69:1799","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:86:128":{"id":"b:2:2547-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12142:27511":{"id":"2:12142:27511","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11978:418","str::splitn":"2:12139:1977","self::pattern":"2:11776:2577"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:2597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:2095":{"id":"2:12151:2095","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11776:2577","`DoubleEndedIterator`":"2:7304:121","prim@char":"1:11978:418","str::matches":"2:12151:2095"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:2594","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:34094":{"id":"2:12170:34094","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:34099":{"id":"2:12189:34099","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11796:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5435:34753":{"id":"5:5435:34753","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5447:26993":{"id":"5:5447:26993","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12198:26996"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:944":{"id":"0:51:944","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:671":{"id":"0:133:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9181:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9170:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427":{"id":"5:5427","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5428:34751","5:5429:13263","5:5432:34752","5:5435:34753","5:5443:34754","5:5444:34755","5:5445:2186","5:5446:26992","5:5447:26993"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:1802":{"id":"0:70:1802","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1699":{"id":"0:49:1699","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1705":{"id":"0:50:1705","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:86:128":{"id":"b:2:2247-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2080"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12174:34096":{"id":"2:12174:34096","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11978:418","self::pattern":"2:11776:2577"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11781:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:86:128":{"id":"b:2:2250-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2688:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:24265"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12198:26996":{"id":"2:12198:26996","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:2186":{"id":"5:5445:2186","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:7327:2307":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10832:6653":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:4906:7850":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:7297:5839":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8381:7860":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10906:3370":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:2738:2302":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"18:599:35321":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:23162:2559":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:488:4824":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:44275:6250":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"14:165:19068":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:40498:3156":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:1636:5843":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7061:4448":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"11:311:4719":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:2693:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:2781:4185":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:3262:2184":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"15:394:19098":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:40482:6149":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:5422:2224":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:6764:3021":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:5841:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:5284:2576":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5008:5369":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10931:6654":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:8974:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47771:6369":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:2168:4728":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:44295:6255":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:43839:2579":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:47065:6331":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:6894:3073":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13448:3864":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:1426:2617":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"14:187:19075":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2637:4179":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:1495:4891":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:7079:2497":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:2746:2612":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:1500:4893":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:40430:6144":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:551:6824":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12605:3637":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:43334:5865":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:1501:19063":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:2750:7872":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:21671:2726":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12646:3644":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13368:3802":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11832:3478":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:44575:4735":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2689:2606":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:14350:4125":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:927:6751":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:5771:2257":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3580:4219":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2883:3060":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11944:30554":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4395:5105":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"10:0:1988":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13167:3742":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10529:3411":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:4407:2298":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:14403:4134":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8277:6440":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:261:2969":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:8086:4576":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:3596:2617":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12106:3534":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13894:3981":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:660:6576":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11241:20187":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:41705:6809":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13109:3733":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12921:3700":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:7546:5797":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7033:5833":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:2519:4174":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:7331:35305":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:43810:2161":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:5338:1406":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"17:10597:6647":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11034:6665":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13964:4003":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:5951:2144":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:10745:2721":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:207:2967":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:1257:4449":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:0:1989":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:48022:6383":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7362:20001":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4626:5196":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6136:5591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3231:13010":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:44351:6262":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8326:5656":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13707:3932":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:20648:31468":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:2760:4462":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:2201:2213":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:986:6758":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6554:4363":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11981:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:44188:2602":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11398:3088":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4854:5286":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:4900:4242":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:9223:2466":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11142:2728":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10981:6661":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11467:3429":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:21979:5888":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5955:5535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5849:5473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:5793:4275":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:9188:3282":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6589:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:4076:2617":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:0:1995":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:2632:2177":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:793:6765":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:43778:2595":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2556:2175":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2465:4172":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12394:3607":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:491:3134":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8203:2164":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:5639:4257":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:5280:2575":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10581:6645":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3220:2181":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:8887:6460":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4463:5137":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:43991:6235":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13830:3963":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:2735:2608":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:352:6822":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6516:4361":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11983:1376":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11272:6667":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12566:3633":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:2141:5816":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9124:2728":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2793:13272":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:2688:2301":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13732:3941":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4800:5263":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:42224:2254":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:14329:4119":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:20972:7887":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:9344:35314":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:44134:13044":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:0:1993":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2857:4188":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6805:5742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:1558:2210":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:7095:5834":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:22451:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:968:4449":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6232:6705":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2493:2174":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:12421:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3985:7798":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5386:2222":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:590:3146":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:481:3133":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:1915:5850":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:44279:6251":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:1818:2679":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:25972:2560":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:32097:2231":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:7759:6805":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:10156:6794":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:6673:6847":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:1586:4726":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12479:3619":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13548:3901":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10735:6476":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:11416:3425":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:5987:5548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:10267:6796":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:5491:1681":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:632:6825":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:399:35284":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6537:2264":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:3222:2182":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40035:6114":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"13:226:4714":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:22041:31106":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:39418:5984":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5843:4283":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:9030:6463":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:42586:6193":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12333:3595":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:2049:6758":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8798:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:39152:2619":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14037:4019":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10445:3081":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:20607:2451":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5028:4246":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:4488:7825":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6128:4325":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13719:3935":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:4762:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39269:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:5962:3063":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:541:4858":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2755:7874":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4518:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:40389:6138":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:7116:2497":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:21843:5877":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46137:6297":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:20665:31470":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3187:30855":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"0:51:944":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"17:9977:6599":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:43454:5871":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4955:7856":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:9887:6605":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:12502:3624":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:3181:27393":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5920:5514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:2105:20118":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:2388:2718":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6724:4401":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13795:3957":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:5469:2144":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"9:426:18983":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11960:24966":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:22077:2563":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:21227:2726":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:817:6754":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"9:237:2206":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1681:5008":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:7250:5773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2692:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:7278:5776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8862:2497":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:854:2617":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7255:6191":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:9182:27051":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:4034:2969":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4789:3061":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:9821:3294":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:6197:6694":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:47920:6377":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11991:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:22418:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12435:3611":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:3519:6594":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11252:6490":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:5073:6843":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4963:5350":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:7589:3078":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5067:4247":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:46727:6326":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:40421:6143":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:9153:3281":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:8932:7870":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:7564:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11888:3493":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:4177:7822":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:62:13613":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"11:1852:4726":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:7511:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:44008:6236":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:45546:6270":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:1574:4724":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:4184:2472":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:1717:5025":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3453:2154":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:2825:4187":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:43464:6819":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6427:4349":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14301:4110":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:39626:28612":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:44311:6259":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:21790:5876":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:482:4821":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:695:6750":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:10868:6800":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:1184:6586":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12365:3602":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6671:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10923:1681":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2771:13271":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:2035:2178":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11020:6664":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4560:7842":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4872:5297":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:9105:6467":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11118:3389":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11483:6839":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:1103:6763":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2352:4167":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5959:4296":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:5065:2253":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:7272:3004":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:8632:20052":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:506:4832":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6886:4202":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:43362:5868":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:7552:5798":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11924:3500":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:39446:2473":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:6175:6679":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10716:6892":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13870:3974":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:6534:2263":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:4236:2210":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10266:6623":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8209:2165":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12659:3645":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14044:4021":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:7706:7746":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:6273:2991":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6347:19996":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:113:24012":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:4261:6788":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:20620:31365":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:7575:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4380:5098":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11327:6496":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:1611:2962":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12905:3698":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13778:3954":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4606:5194":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:7065:33745":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:43940:13043":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2497:4173":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2777:4463":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:4396:4227":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:538:3143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:32133:6805":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:47874:6373":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:582:7741":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:10835:6799":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:7407:4300":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:43422:6817":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:12614:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:2978:7774":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2802:4464":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:9219:2465":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13991:4010":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:7505:5788":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:12566:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1892:2553":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"14:215:4665":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:3383:6783":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:20801:2726":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:9442:35315":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:45658:6275":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2836:13278":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:43848:2578":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:42851:6202":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:9017:6878":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:44283:6252":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13971:4004":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2600:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:434:3229":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:500:4829":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:8997:20040":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9528:35311":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10945:6658":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:9010:6877":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:2966:34835":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:2461:5825":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:7696:33369":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:14216:4088":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:4536:4231":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11250:3404":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:7652:6851":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:3991:7799":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8868:6459":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6915:35302":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:40029:2589":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:10308:2598":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4328:5062":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11127:3430":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:6649:2505":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:4691:7851":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9434:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:11007:6663":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"11:836:6756":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:4032:4225":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:10049:2617":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41436:6171":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:9192:6472":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:7655:2618":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:7283:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:21234:7888":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:1672:2969":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4704:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11354:3243":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:7523:5791":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:4809:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:1536:4909":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4506:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:42024:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:9359:6793":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:9211:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:20986:13291":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6171:5616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10957:6659":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:4142:5851":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11979:3508":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11290:20063":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12757:3674":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:7652:2214":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4949:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7099:6463":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:30543:31097":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:9806:20074":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:41502:31091":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4315:5052":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10544:6639":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:11976:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:2293:19107":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:365:2960":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:9875:6604":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6357:4342":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3963:7796":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:2848:13281":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9090:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6977:6710":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:12002:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5651:4196":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:45843:6282":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7633:6391":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4568:5192":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:4476:4229":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:42626:4547":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13803:3959":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11753:3459":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:7584:6739":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:7657:6392":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:10790:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:7570:3076":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:3932:2144":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12318:3590":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:5529:5852":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:43106:6212":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:554:4864":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6763:4414":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4374:5096":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:7382:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:47523:6365":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3315:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:2970:34832":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7124:2497":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:10550:3082":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:7883:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:4166:2144":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:4428:2998":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:6726:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5119:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42064:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:11488:6217":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:8739:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13847:3971":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11074:3377":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:2243:5824":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:2759:4184":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:9474:5862":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1911:15015":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:582:3273":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:21561:31369":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:7732:6394":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:11091:2228":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:2194:4732":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:46388:6305":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12792:3685":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:40380:6136":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5805:5451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1569:4932":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:43283:6814":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:885:4723":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:40680:6157":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:9474:3080":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"11:1068:6762":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11988:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:2421:4170":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14341:4121":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:6632:3020":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:47999:6382":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:44291:6254":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5363:19991":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:22583:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:261:6582":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4524:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8196:2163":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5807:4276":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:7540:5796":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:47865:6372":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"9:52:18999":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6900:4424":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:12394:32182":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12354:3599":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:22715:2564":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:11454:3427":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9223:3283":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:21042:2726":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:1580:4725":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3732:6838":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:9213:2462":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41799:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:6981:2188":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:47946:6379":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:43760:2594":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12994:3713":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:4733:7812":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4895:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5074:5400":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12691:3649":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:9171:1678":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:582:2451":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4996:4245":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9100:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:805:7759":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12539:3628":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13016:3724":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13749:3946":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:8949:20062":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:11790:2573":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:7379:3012":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:45945:6286":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9744:35317":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13757:3949":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2923:2304":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12526:3625":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:44287:6253":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:46091:6296":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:400:6583":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:4810:5267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:8542:20041":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:3025:4213":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6008:5560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:11329:6801":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:630:2210":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10417:3318":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:2926:2305":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:2332:4161":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12089:3526":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10066:6613":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:41525:6185":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6705:5681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10313:6627":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:3435:2152":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11999:1505":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:4814:4239":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6868:5767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:10194:6795":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4556:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:97:4715":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:21952:2562":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:5687:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:10810:26868":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:47725:6368":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11726:3451":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:5381:2144":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:21124:5873":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4695:5209":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2213:2705":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:9673:3041":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:0:1398":{"crate_id":1,"path":["std"],"kind":"module"},"1:3667:7793":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5673:19992":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11669:3441":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10223:3311":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:6044:5571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:5622:3064":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:46310:6303":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47413:6364":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:6077:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10175:3304":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:35:2965":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:2785:7875":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:43962:6226":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11098:3384":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4428:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4475:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8109:2192":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:41587:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:10138:6884":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10013:3301":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:9170:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:4378:3029":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:39293:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:21896:5878":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10845:3367":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8004:1952":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:12372:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11371:3423":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:43556:2165":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13435:3857":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:40157:13104":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:44168:2601":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6392:2497":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:531:3140":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12552:3337":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:8734:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4748:5236":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6022:5563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8322:6868":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11210:3400":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11905:3495":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40131:13103":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:4228:6840":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:671:6580":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46189:6299":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9318:3286":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21457:7893":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:30118:2561":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:43624:2599":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5994:19994":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4291:5035":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:21025:7883":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:30365:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:0:1994":{"crate_id":17,"path":["object"],"kind":"module"},"16:2373:4168":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:667:6749":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11329:20064":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12982:3711":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:42186:1682":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"1:914:6765":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:44563:6268":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13949:3999":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:5861:2253":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13905:3985":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:46167:6298":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:1138:33806":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13083:3731":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10148:6619":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10654:3332":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4616:5195":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6160:4330":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:9866:6603":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:4004:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5051:5394":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"9:507:4798":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:39238:5978":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:7679:4210":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12035:3520":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:41723:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:9016:3276":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:4626:5667":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:276:2309":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"11:119:2956":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:10510:2179":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:8924:20061":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5775:4270":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:44083:6239":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7505:4206":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:2803:4186":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:40044:6115":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:12446:6803":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:1843:2686":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"11:1858:4727":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:41573:6187":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:494:4827":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8969:6871":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6931:6709":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:10297:1680":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:4761:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:10314:24963":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:10069:2679":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:45720:6277":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7240:35303":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"11:1121:6764":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40370:6135":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:44145:6241":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:681:3159":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:1702:5018":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4685:5202":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:22550:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:7515:4511":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:40360:6133":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13456:3865":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:644:2617":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:727:3171":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:7225:13251":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8824:2229":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"0:50:1705":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"1:1059:6758":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:20635:31365":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:1302:6764":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:22484:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:10800:2159":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"15:0:1992":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4420:5121":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:41396:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"8:0:1986":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11994:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"11:1845:4725":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:1545:4915":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:44120:6240":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:755:3176":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"0:0:1843":{"crate_id":0,"path":["autocfg"],"kind":"module"},"1:6638:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4341:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11955:3504":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"9:486:18980":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:3777:4221":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:4628:5669":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:11558:6500":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:42906:6210":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:39439:6807":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:6573:5628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11045:3372":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:9118:3280":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:119:13667":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:4812:7809":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10253:6622":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10758:6484":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:7994:6857":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:4965:4244":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:532:4852":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7073:20000":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11852:3488":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:3111:2191":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:11115:26866":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13155:3397":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:11985:1490":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:43660:2598":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12377:3604":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:4731:7810":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11979:1525":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:1527:4904":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:1543:2144":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:40270:2136":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10671:20160":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:5972:4152":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11333:6497":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12815:3686":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13604:3913":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:527:3054":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:4735:7813":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:3810:4222":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:2918:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:11949:7748":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:12669:7760":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:44363:13393":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:7363:3008":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"11:2180:4730":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:8740:20055":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:1012:6760":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14189:4079":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10249:6621":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7855:20004":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7592:20002":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:4616:7799":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13787:3955":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:6137:3051":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43706:2592":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:47894:6375":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6289:4335":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:6384:6847":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:13914:3988":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13096:3732":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11498:3430":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"10:44:4737":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:2174:4729":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:43532:2583":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:45742:6278":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5372:2221":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:7474:4205":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9475:6596":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:3220:4216":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:44299:6256":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7632:2726":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8186:2162":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12936:3704":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4368:5095":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14395:4131":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11992:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:6028:5566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:41482:6178":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:9850:20075":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:10786:6650":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:47809:6370":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:21987:5889":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1595:4948":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:2962:19134":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:2809:13275":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:2131:2988":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9274:2164":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:11599:2580":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7525:4207":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:3042:19135":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:3194:13009":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"0:48:601":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"1:7755:2690":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:10322:2597":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10568:6643":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4456:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:2130:19057":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:10074:2165":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:40320:6808":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4917:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:9688:3046":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:9215:2463":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:5745:2256":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:30349:5909":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10994:6662":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41647:2210":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:1273:6760":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8489:2208":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"15:327:19092":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:3186:6592":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:6738:13253":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:4620:4234":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:14282:4105":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5015:5372":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:7171:2213":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:9217:2464":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:673:7745":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:5890:5491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:9867:2726":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:4944:2144":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:9181:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:41774:2210":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:43977:6232":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:10504:2181":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40473:6148":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:39335:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12303:3586":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"6:4787:5258":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:8252:4588":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:5738:2255":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:44588:6269":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:46043:6295":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:9990:3299":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:11056:20185":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:5608:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5301:4249":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:123:13668":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"11:749:2991":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:1841:2685":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6303:4191":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1520:4901":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6775:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:41731:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:1562:2497":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:6425:2260":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4842:5281":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:42898:6209":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:55:4560":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6841:5761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:587:4882":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6323:4337":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3927:7795":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:7041:2248":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:3330:3008":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:20667:31472":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:11761:3092":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40342:6130":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11235:3086":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:41944:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2797:13274":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:47847:6371":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11551:24595":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:1822:2497":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:760:3008":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:13882:3980":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:14205:4083":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:96:24011":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13055:3727":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13999:4011":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:32137:5974":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:43352:6815":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:4603:13097":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7753:4520":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:6319:2969":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:40237:2122":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:12053:3521":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:6502:4359":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:8899:20060":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12457:3618":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:5414:4251":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11234:3403":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:1482:6765":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:47885:6374":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:43820:2591":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:11781:2571":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13923:3989":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"0:49:1699":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"2:11796:2572":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:530:4149":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:614:35320":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:3304:1677":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"1:11539:6499":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:5590:4197":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:5406:2223":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:8222:6864":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:4365:2998":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4466:7824":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6421:2259":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11815:3475":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10280:6624":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5100:4248":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4753:4237":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4630:5671":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:7908:6856":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:1464:4722":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6939:19999":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"14:202:13045":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:9656:3040":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:41984:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:5382:3276":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4944:5342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:6834:5758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6018:19995":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1709:5021":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14359:4127":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8449:2206":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:7530:6898":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:6850:5764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:6604:2269":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:14236:4091":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:2874:4189":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:49867:7895":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:579:4877":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:4506:4230":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:4694:7824":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14150:4064":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:3344:2171":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:2589:4177":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9399:6595":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:45861:6283":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:736:24021":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10351:3312":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:7016:2823":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:6438:4350":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"9:450:18981":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:564:3145":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:14417:4137":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:895:2210":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:403:35285":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10969:6660":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3645:2497":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5342:4250":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12966:3707":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7199:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:21208:7879":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:2210:2704":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4716:5221":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:7259:2119":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:46851:6328":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:573:4874":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"11:844:6757":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3217:33737":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10511:3328":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14227:4089":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:48061:6384":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:14007:4013":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:8166:4581":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:45991:6293":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:9065:6466":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:3894:4224":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13043:3726":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:9952:3266":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11600:20067":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:4724:4236":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:652:3135":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11428:3426":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12727:3655":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:1732:13302":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:3238:4727":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:9469:13113":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:2314:4159":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12161:3553":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:44525:6820":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:4841:4240":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:12711:3650":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:43383:6214":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:42346:2463":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:43514:2587":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:5836:5464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:2959:2549":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1442:2497":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:898:2991":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:3744:4220":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:9083:3279":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:43574:2596":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:1603:4953":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:515:3138":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:41714:13346":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13854:3972":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:1411:2210":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:5398:3277":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2814:13276":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:9206:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:8659:20053":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1513:4899":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5967:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:6061:3065":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"14:7:6745":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:6471:2969":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:14259:4104":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:8314:7864":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:2164:6591":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2162:13292":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:7739:2689":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12346:3597":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:22091:1959":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:20803:7884":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:42360:2464":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:5689:4259":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5626:6670":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4764:5244":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6625:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:44056:6238":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11462:6838":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:21102:2726":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11030:3084":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13957:4002":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:39453:5986":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:45821:6281":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:6185:6846":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:40463:6147":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5994:5549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:5978:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:11178:3395":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10812:3364":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:20650:31473":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6470:4211":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46213:6300":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11123:6259":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:21104:7880":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:10914:4795":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:7055:2981":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7763:20003":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:39411:6806":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7313:35304":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2900:4190":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12186:3557":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11542:3432":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:12359:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:42353:2462":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:7659:13249":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40143:6122":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:43343:5866":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10110:6618":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4638:5197":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:657:2497":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14026:4018":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6711:5683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:7586:5805":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:4818:5271":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4592:4233":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:12002:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:11927:6901":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:4928:4243":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:1118:33782":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3139:13283":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:21203:2726":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11300:6494":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1557:4924":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:45566:6271":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:20853:13291":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"18:690:3162":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11084:3379":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:6850:4420":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3722:2178":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2853:13282":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2926:19133":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6036:5568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:5877:5485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:7275:2308":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7799:4528":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6618:5652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:2133:6588":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3299:2179":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:1973:6587":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:6785:31458":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:5882:4286":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21058:7878":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:40412:6142":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6067:5577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:46235:6301":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:45898:6285":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:2223:33875":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:45690:6276":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8304:6441":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:46615:6324":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:40877:2259":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6598:5646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8547:2211":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:4308:6841":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:3058:3179":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:7916:2176":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2840:13279":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:11343:1962":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13140:3739":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:9426:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:46915:6330":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:9590:3037":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:11179:6467":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2824:4468":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:3160:13081":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11989:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"18:507:3135":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3511:2991":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12864:3693":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2691:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11967:3505":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:923:6750":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:615:2555":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10486:3324":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:521:24023":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:653:14024":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12254:3561":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40911:6163":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"14:160:6745":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:9614:35309":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:7860:2725":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:40652:2163":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4848:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:950:6756":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4304:5044":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6815:4416":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:149:2953":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:2715:4182":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:2765:4459":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:39313:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:40919:6165":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:45880:6284":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:8902:33368":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4436:5125":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13862:3973":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:7045:2991":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:4387:2474":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13069:3728":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12004:3511":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:9044:24566":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:1663:5001":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7308:6782":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9655:6599":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11565:6500":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:47663:6367":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:8288:6867":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:4196:2144":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:2541:4175":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:24:610":{"crate_id":2,"path":["core","env"],"kind":"macro"},"16:6057:19106":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40870:6160":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:11285:6493":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9734:6601":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:41561:6186":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:30437:31077":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:7739:4198":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4992:5364":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:0:1985":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11995:1509":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:32224:2613":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:1746:5844":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:6688:5676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:14177:4076":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10458:3321":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:40512:6152":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:7843:2723":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"9:357:18996":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2844:13280":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4781:5255":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:9095:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:40280:2135":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:8105:4579":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:1523:6771":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:7087:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7665:4209":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:43864:2589":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:11978:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:14197:4082":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:11525:6220":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:47969:6380":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:9160:6881":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:46491:6307":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:20895:7891":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:43724:2593":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:1638:4982":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:21110:7882":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:10226:2233":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:8021:4569":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:1492:6749":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:39253:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:12577:3051":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:3996:6784":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:21928:5883":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7707:4518":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:933:7759":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10740:6478":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:9877:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:40329:2162":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4156:7820":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:40108:2590":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:477:3053":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:595:4887":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2908:2166":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:41782:2617":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8216:2161":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:2403:1676":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:5940:6672":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:8399:2205":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:7445:6732":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:1075:6585":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:3737:6772":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22616:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:41453:7792":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:636:3158":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:1818:2210":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:30941:2451":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14315:4112":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:40398:6139":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:9221:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:8907:32058":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:21912:5879":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13981:4007":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:9777:20073":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:8043:4570":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:822:2975":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:358:6823":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5818:5452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9469:2724":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10038:6611":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:644:3135":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:1885:1674":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:4323:3028":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6317:6708":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:3183:33723":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:766:24022":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8282:7823":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:10350:6798":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4862:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:21673:7881":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:11801:2570":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6789:4415":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:4783:33665":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:2689:4181":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8228:6866":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:2378:2713":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:46021:6294":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2468:2726":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8955:2258":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13697:3931":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4897:7849":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2703:2477":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:1780:2669":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12851:3691":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1045:4449":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:782:2972":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10910:2690":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:3802:3008":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:5615:3063":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10780:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:562:4869":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:609:6575":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4483:5147":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:2186:35283":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:44307:6258":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:1776:3008":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8270:6439":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4723:5222":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:8420:2571":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:4333:2473":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6484:4351":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7553:4512":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5882:5486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:5551:2225":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:41419:6169":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12579:3634":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:40223:6128":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:43500:1960":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43873:2590":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:11847:13037":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:45636:6274":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40863:6159":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:45760:6279":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:44303:6257":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:3517:2157":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:11164:3394":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:30913:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7693:4200":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:568:4872":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7631:4516":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:11313:13353":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5058:5397":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2217:2153":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46805:6327":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:872:4722":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6986:4439":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:12003:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:10471:3322":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:1820:5849":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3834:6839":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"13:0:1984":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1631:4978":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:47905:6376":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10633:3330":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:5044:5391":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4035:7801":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10330:6631":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:41824:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10609:6648":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:40086:6119":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:43110:6213":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:504:6584":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:2060:6760":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1690:5014":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:878:2977":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7484:4509":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:10507:2183":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13771:3952":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:22517:2565":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:7678:3082":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:40666:6156":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:1575:4934":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:2170:5818":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6565:5623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:14015:4014":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4413:5117":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:21549:5875":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:47931:6378":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:14102:4063":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:7870:2722":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:6348:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11264:3407":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:4256:6787":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9272:2685":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10361:1683":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13179:3749":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"11:1517:6766":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:42859:6204":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:42144:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:20851:32205":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:9716:35316":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:12001:1563":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:2208:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:3729:6837":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6607:5647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:22103:2566":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11998:1508":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:3295:4217":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:3635:3183":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8153:2159":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:6720:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:11315:6850":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:4008:6785":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9462:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:42867:6205":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:47984:6381":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7012:4440":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:8541:2210":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:39432:4503":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:46357:6304":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:5567:4195":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:7848:2724":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12952:3705":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7494:4510":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13029:3725":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:1068:6760":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:11548:6221":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6720:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:1755:5846":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:736:4723":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:21452:7885":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:11977:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:6820:5749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12118:3537":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:547:4861":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:40056:31088":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:2663:4180":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8233:7791":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"11:1048:35282":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13683:3930":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4389:5103":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:12000:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"7:32:18967":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:40892:2189":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5080:5403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:3395:6593":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13513:3900":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3583:2210":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:2781:7873":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2741:2610":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:11993:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4929:5333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:13639:3917":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10161:6620":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12592:3636":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:3204:4726":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4833:5275":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12065:3524":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:40522:6153":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:8315:6791":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:80:24010":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7038:4446":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1565:2991":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:11982:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:4164:7821":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:7272:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4678:5200":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13427:3854":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:45612:6273":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:9143:6468":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:40300:5869":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:707:2573":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:21236:5873":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10520:3329":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:7295:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10499:3325":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10303:3222":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:723:4722":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3886:1950":{"crate_id":1,"path":["std","num"],"kind":"module"},"6:5767:5432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:39379:7752":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"9:177:19048":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2360:1727":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:22385:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:11036:3085":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:22352:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:7999:6858":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:40195:2121":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:4441:4228":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9604:3304":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10799:6651":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:13937:3996":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:9225:2467":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43830:2581":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:40450:6146":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:47271:6363":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2184:1675":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:2960:13011":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:41790:2497":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13659:3925":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:3184:30844":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:1733:5029":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40116:2589":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:2962:5821":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10080:6614":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11258:2235":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11199:3399":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11520:3377":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:6461:2267":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:3933:7794":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5793:5447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7599:5809":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6658:4387":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11791:3474":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:43444:6818":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:4698:4235":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11109:3388":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13332:3771":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:41663:2497":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:7463:5787":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11872:3489":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10377:3314":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:10935:24589":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:11997:1507":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:2819:13277":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10293:6625":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6250:4332":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:4126:26647":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12174:3554":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3301:2180":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:4564:4232":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8838:2230":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:3171:2210":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:5553:4192":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10339:6634":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:22025:31103":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7622:6740":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10444:3320":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:8176:20005":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:1782:2670":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6214:6697":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8165:2160":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:40072:6118":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:1077:6764":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:42888:2206":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:7246:2118":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:5025:5377":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7558:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:7463:4506":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:11736:2215":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"14:31:6745":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:2982:7775":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11155:3393":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:8210:4503":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:2681:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12133:3543":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2919:2303":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:9926:6608":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10953:2230":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11992:3510":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11388:20065":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"13:110:35290":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:7128:26648":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12840:3690":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"14:0:1991":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9561:6598":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8854:6870":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:20939:7892":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:43542:2164":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:8711:20054":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10863:3304":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:9939:6609":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:11990:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:944:6754":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:719:3168":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:8794:20057":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7370:30548":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6864:4422":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11642:3440":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:7721:7747":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3671:2969":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4785:4238":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:6240:3063":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11568:20066":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13620:3916":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:14380:4130":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:7025:2497":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:1696:5017":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12878:3694":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10323:6628":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:5299:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40096:6120":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4794:5260":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"9:0:1987":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:2960:34833":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11767:3460":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:14054:4026":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12769:3676":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4887:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:908:3008":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:8313:7865":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:1503:6750":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:1011:2969":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6540:4199":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:9032:3277":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4973:5356":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:4543:5179":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7433:4505":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:3867:4223":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13303:3751":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:7025:4443":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:919:6749":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:8771:20056":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4550:5181":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:629:6768":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8987:24597":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:7529:5792":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:3260:2183":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11019:3083":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"0:123:1686":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"16:3441:4218":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:635:6827":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:574:3135":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9571:35312":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:6622:3018":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:10025:2210":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:526:4849":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8558:2212":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1288:6758":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:43435:5870":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11160:6489":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:256:6581":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9485:35310":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10051:6612":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:30309:5908":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4323:4226":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"15:306:19088":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"12:0:1990":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4824:5272":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4729:5225":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4650:5198":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:1569:3008":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:5916:4292":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:2469:13108":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:14163:4070":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4908:5318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3501:30505":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:2698:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5900:5498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:40124:2588":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6396:4346":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:5704:4262":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:42367:2465":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:7900:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11996:1506":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:5877:13587":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:5530:3006":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7539:4208":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10123:3297":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:6153:3069":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:21964:31085":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:3977:7797":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6386:4345":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3377:2189":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:39191:13012":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:8472:2207":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12077:3525":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:4025:7800":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:5863:5484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13574:3907":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:43606:2600":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:7517:5790":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5612:4253":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:7020:3074":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:41672:6191":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:1590:4946":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13557:3905":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:7216:2120":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:8872:20059":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:8792:2227":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:474:4816":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:3076:7776":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6456:4194":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:2737:4183":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6692:19998":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:6809:7876":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2789:13273":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12148:3549":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:40150:6123":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:2611:4178":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4955:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6372:4193":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:8841:20058":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:1921:2554":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:40190:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:2592:2167":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3178:4725":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:11564:6222":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:6789:3024":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8810:2228":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12671:3646":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9913:6607":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:1473:4723":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5068:5398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:4148:7819":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:10555:6640":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11623:3437":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:7183:7758":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6015:5562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:2830:4469":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10430:3319":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:1102:33808":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:699:3163":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13492:3895":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:8138:6744":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:6603:3006":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:1591:4727":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4401:5108":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46645:6325":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2362:2708":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:498:2988":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5720:4264":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2929:2306":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13673:3929":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:44533:6265":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:20839:7886":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:4047:7804":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12891:3695":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:8152:4212":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:8348:6442":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:3212:4724":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7568:35301":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:4434:2475":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:43091:6211":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6744:5699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:43855:2588":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"14:40:3475":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12424:3610":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:864:2497":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8296:6864":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:2049:6772":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:6288:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5829:5460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:10229:2596":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10097:6617":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6872:4201":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:9048:3278":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40176:6127":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12017:3512":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:7230:31090":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8916:7868":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:2690:5828":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:8980:6873":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:2033:4449":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:22004:31107":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6648:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6713:4400":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:5231:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6571:19997":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9296:3285":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:9022:6879":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:40207:31090":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44155:6245":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2743:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:6590:2268":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:10199:3309":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10088:24962":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4770:5247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5799:5450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:9966:3304":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10390:3316":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:43409:5869":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:4380:6842":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:11776:2577":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11943:3501":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:10336:6797":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10621:6649":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"9:330:4775":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:30343:5841":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:3166:13080":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:43526:2584":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:41904:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4535:5174":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:10117:2580":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:5554:2226":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:40441:6145":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:40351:6132":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11984:1406":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:5816:2266":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:11421:6837":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:8068:4573":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11144:3392":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:22682:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4446:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:47601:6366":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:9706:6600":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:4868:4241":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:1838:4724":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6332:4338":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11189:3397":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:9665:35313":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:640:7744":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4496:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10883:3369":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46569:6323":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11696:3447":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:7924:2178":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6239:35306":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9840:6602":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:30379:31096":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:6796:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8900:7869":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:5437:1680":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:4043:13008":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6667:4388":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:2567:4176":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:5775:5434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:5236:2969":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"11:332:2958":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3407:2144":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6130:5590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5737:19993":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:40886:6161":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:3179:31475":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9965:6182":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:7304:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3371:13063":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:3492:1678":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:956:6757":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8137:2188":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:4039:7802":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"15:288:19087":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11591:3397":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:46411:6306":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4984:5362":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:2376:2712":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13125:3735":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:1831:3008":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:41638:2496":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"10:36:4736":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:41864:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2570:3041":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4489:5150":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11103:2229":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:41538:6439":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4754:5238":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2160:13291":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4664:5199":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7833:4532":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:1826:2991":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:8125:6741":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:285:4716":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5979:5547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12631:3641":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1506:4896":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9409:35308":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13591:3908":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6156:5605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:39357:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"9:393:18982":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:7727:6393":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:14:2098":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:22070:5900":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:2399:4169":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"14:221:4667":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5737:5407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:2443:4171":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:7262:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:798:6751":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:43372:6816":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:9899:3297":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:5757:2991":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9518:6597":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:5988:5855":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:4395:2144":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:8144:2190":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10402:2227":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6978:7420":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:7289:4486":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:624:35319":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12412:3608":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:841:2210":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:5587:5854":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1027:19062":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11220:20186":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:8846:2210":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:22649:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"11:1538:6767":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12826:3688":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7519:3273":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4938:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10403:3317":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4587:5193":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:7609:5811":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"7:79:18974":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:46881:6329":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41655:2617":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4740:5232":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8531:2209":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1649:4990":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:8605:20039":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:5042:6843":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:45590:6272":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:4111:6786":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13566:3906":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:6832:13245":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:45791:6280":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:7229:13250":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:3510:2155":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:7266:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12618:3639":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46259:6302":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:7853:2721":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:40901:3035":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:6140:7969":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:1673:5007":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4469:5139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:6531:2955":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:10770:2725":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:43678:2597":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}