{"root":"0:0:1857","crate_version":"1.1.0","includes_private":false,"index":{"2:2549:702":{"id":"2:2549:702","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12241:31746":{"id":"2:12241:31746","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:86:128":{"id":"b:2:2553-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2523:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12159:26334":{"id":"2:12159:26334","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11412:1979"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12175:1835":{"id":"2:12175:1835","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43602:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-0:86:128":{"id":"0:35-0:86:128","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:86:128","glob":false}}},"2:12218:27348":{"id":"2:12218:27348","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12030:421","str::splitn":"2:12215:1994","self::pattern":"2:11852:2589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43754:2609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1807":{"id":"0:67:1807","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1825":{"id":"0:73:1825","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:31751":{"id":"2:12250:31751","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:1816":{"id":"0:70:1816","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1834":{"id":"0:76:1834","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:31735":{"id":"2:12160:31735","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2704:228-0:86:128":{"id":"a:2:2704:228-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:75:1831":{"id":"0:75:1831","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:31732":{"id":"2:12153:31732","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3323-0:86:128":{"id":"b:2:3323-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3321:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3325:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2543-0:123:1700":{"id":"b:2:2543-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:1738"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12154:31733":{"id":"2:12154:31733","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1857":{"id":"0:0:1857","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:35-0:86:128","0:123:1700","0:48:606","0:49:1713","0:50:1719","0:51:951"],"is_stripped":false}}},"2:12161:316":{"id":"2:12161:316","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12162:315","`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1802":{"id":"0:65:1802","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:31750":{"id":"2:12247:31750","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11877:2582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:31753":{"id":"2:12262:31753","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:27335":{"id":"2:12174:27335","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12173:27334"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12221:31741":{"id":"2:12221:31741","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2562:1500":{"id":"2:2562:1500","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12243:31747":{"id":"2:12243:31747","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5771-0:86:128":{"id":"b:5:5771-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5773:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2561:128":{"id":"2:2561:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32173:2250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:2687:220-0:123:1700":{"id":"a:2:2687:220-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:133:676":{"id":"0:133:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9245:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12259:31752":{"id":"2:12259:31752","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12277:7740":{"id":"2:12277:7740","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4543:7740"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43940:2601","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:29481":{"id":"2:12182:29481","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43924:2590","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12278:31756":{"id":"2:12278:31756","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4540:31756"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43949:2602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:951":{"id":"0:53:951","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12230:31743":{"id":"2:12230:31743","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11852:2589","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::matches":"2:12227:2113"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43854:2607","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:1719":{"id":"0:50:1719","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["var",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2558-0:86:128":{"id":"b:2:2558-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2561:128","2:2562:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12209:31739":{"id":"2:12209:31739","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11852:2589","str::split":"2:12200:1849","prim@char":"1:12030:421","`DoubleEndedIterator`":"2:7310:121","str::rsplit_terminator":"2:12212:31740"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43682:2612","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1970":{"id":"0:27:1970","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:32412","5:5511:13261","5:5514:32413","5:5517:32414","5:5525:32415","5:5526:32416","5:5527:2205","5:5528:25708","5:5529:25709"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8388:7863-0:86:128":{"id":"a:2:8388:7863-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8388:7863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:74:1828":{"id":"0:74:1828","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["expr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:2000":{"id":"2:12268:2000","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11813:127","`FromStr`":"2:11812:2234"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11812:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11812:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1804":{"id":"0:66:1804","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2744:2314-0:86:128":{"id":"a:2:2744:2314-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2744:2314","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5514:32413":{"id":"5:5514:32413","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:676":{"id":"0:89:676","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9245:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:397":{"id":"0:28:397","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"error::Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:123:1700":{"id":"b:5:680-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:2561","5:683:2562","5:684:2563"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12180:1989":{"id":"2:12180:1989","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43886:2180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:27350":{"id":"2:12189:27350","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:25712":{"id":"2:12274:25712","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:2562":{"id":"5:683:2562","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:27309":{"id":"2:12163:27309","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2543-0:86:128":{"id":"b:2:2543-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:1738"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:30:676":{"id":"0:30:676","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42745:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:27334":{"id":"2:12173:27334","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12174:27335"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:123:1700":{"id":"b:2:2547-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12196:2504":{"id":"2:12196:2504","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:128":{"id":"0:86:128","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2704:228-0:86:128","a:2:8388:7863-0:86:128","a:2:2687:220-0:86:128","a:2:2744:2314-0:86:128","a:2:8387:7748-0:86:128","b:2:2256-0:86:128","b:2:2253-0:86:128","b:2:2558-0:86:128","b:2:2613-0:86:128","b:2:2543-0:86:128","b:2:2547-0:86:128","b:2:3323-0:86:128","b:2:2553-0:86:128","b:5:5771-0:86:128","0:29","0:88","0:26"]}}},"5:684:2563":{"id":"5:684:2563","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1713":{"id":"0:49:1713","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12178:29489":{"id":"2:12178:29489","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12179:29467"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43906:2593","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12203:27343":{"id":"2:12203:27343","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11668:2592","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12246:31749":{"id":"2:12246:31749","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2205":{"id":"5:5527:2205","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2613-0:86:128":{"id":"b:2:2613-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3377:13061","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2615:2569"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"a:2:8387:7748-0:123:1700":{"id":"a:2:8387:7748-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8387:7748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12227:2113":{"id":"2:12227:2113","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11852:2589","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatches":"2:12230:31743"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43836:2606","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","cause","type_id","description","provide"],"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1970","0:28:397"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:1730":{"id":"0:54:1730","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dir",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2517:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"PathBuf","id":"1:5126:191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:27312":{"id":"2:12169:27312","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:27310":{"id":"2:12165:27310","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1789":{"id":"0:62:1789","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12275:31755":{"id":"2:12275:31755","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4542:31755"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43931:2600","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:31748":{"id":"2:12245:31748","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12272:25710":{"id":"2:12272:25710","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2255:2097":{"id":"2:2255:2097","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:27311":{"id":"2:12167:27311","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12239:1855":{"id":"2:12239:1855","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12181:31738":{"id":"2:12181:31738","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43896:2603","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1813":{"id":"0:69:1813","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:86:128":{"id":"b:2:2253-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2097"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:123:1700":{"id":"0:123:1700","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:2704:228-0:123:1700","a:2:8388:7863-0:123:1700","a:2:2687:220-0:123:1700","a:2:2744:2314-0:123:1700","a:2:8387:7748-0:123:1700","b:2:2256-0:123:1700","b:2:2253-0:123:1700","b:2:2558-0:123:1700","b:2:2543-0:123:1700","b:2:2547-0:123:1700","b:2:3323-0:123:1700","b:2:2553-0:123:1700","b:5:680-0:123:1700","0:130","0:132"]}}},"2:12215:1994":{"id":"2:12215:1994","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589","str::rsplitn":"2:12218:27348"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43736:2610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:5866":{"id":"2:12177:5866","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43618:2183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150":{"id":"2:12150","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12151:823","2:12152:1848","2:12153:31732","2:12154:31733","2:12156:31734","2:12159:26334","2:12160:31735","2:12161:316","2:12162:315","2:12163:27309","2:12165:27310","2:12167:27311","2:12169:27312","2:12171:31736","2:12172:31737","2:12173:27334","2:12174:27335","2:12175:1835","2:12176:6262","2:12177:5866","2:12178:29489","2:12179:29467","2:12180:1989","2:12181:31738","2:12182:29481","2:12183:1846","2:12186:1991","2:12189:27350","2:12192:1990","2:12196:2504","2:12200:1849","2:12203:27343","2:12206:27345","2:12209:31739","2:12212:31740","2:12215:1994","2:12218:27348","2:12221:31741","2:12224:31742","2:12227:2113","2:12230:31743","2:12233:31744","2:12236:31745","2:12239:1855","2:12241:31746","2:12243:31747","2:12245:31748","2:12246:31749","2:12247:31750","2:12250:31751","2:12253:25912","2:12256:27351","2:12259:31752","2:12262:31753","2:12265:31754","2:12268:2000","2:12270:25706","2:12271:28446","2:12272:25710","2:12273:25711","2:12274:25712","2:12275:31755","2:12277:7740","2:12278:31756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2256-0:86:128":{"id":"b:2:2256-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:24053"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2253-0:123:1700":{"id":"b:2:2253-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2097"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12151:823":{"id":"2:12151:823","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12030:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:6262":{"id":"2:12176:6262","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43608:2595","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2704:228-0:123:1700":{"id":"a:2:2704:228-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5511:13261":{"id":"5:5511:13261","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3323-0:123:1700":{"id":"b:2:3323-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3321:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3325:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:1797":{"id":"0:64:1797","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["path",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8388:7863-0:123:1700":{"id":"a:2:8388:7863-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8388:7863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12172:31737":{"id":"2:12172:31737","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12036:1420","crate::ops::IndexMut":"2:2988:7774","str::slice_unchecked":"2:12171:31736"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:31734":{"id":"2:12156:31734","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12154:31733"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:25708":{"id":"5:5528:25708","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12273:25711"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5773:1478":{"id":"5:5773:1478","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:27345":{"id":"2:12206:27345","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11852:2589","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split":"2:12200:1849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43650:2608","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:27351":{"id":"2:12256:27351","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2557:1501":{"id":"2:2557:1501","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1755":{"id":"0:57:1755","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1760":{"id":"0:58:1760","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["major",{"primitive":"usize"}],["minor",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:425":{"id":"0:131:425","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:1991":{"id":"2:12186:1991","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:32415":{"id":"5:5525:32415","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12224:31742":{"id":"2:12224:31742","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:951":{"id":"0:51:951","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:32416":{"id":"5:5526:32416","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2321","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:25709":{"id":"5:5529:25709","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12274:25712"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2615:2569":{"id":"2:2615:2569","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3389:6798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1822":{"id":"0:72:1822","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:1846":{"id":"2:12183:1846","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:123:1700":{"id":"b:2:2256-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:24053"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12162:315":{"id":"2:12162:315","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:32414":{"id":"5:5517:32414","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:31736":{"id":"2:12171:31736","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12036:1420","str::slice_mut_unchecked":"2:12172:31737","crate::ops::Index":"2:2984:7773"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:31745":{"id":"2:12236:31745","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11852:2589","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::match_indices":"2:12233:31744"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43800:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2258:24053":{"id":"2:2258:24053","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2687:220-0:86:128":{"id":"a:2:2687:220-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:682:2561":{"id":"5:682:2561","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12273:25711":{"id":"2:12273:25711","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8387:7748-0:86:128":{"id":"a:2:8387:7748-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8387:7748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12179:29467":{"id":"2:12179:29467","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12178:29489"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43915:2591","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:32412":{"id":"5:5510:32412","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2835","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2546:1738":{"id":"2:2546:1738","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2520:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:951","0:54:1730","0:57:1755","0:58:1760","0:62:1789","0:63:1792","0:64:1797","0:65:1802","0:66:1804","0:67:1807","0:68:1811","0:69:1813","0:70:1816","0:71:1820","0:72:1822","0:73:1825","0:74:1828","0:75:1831","0:76:1834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48:606":{"id":"0:48:606","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["cfg",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1811":{"id":"0:68:1811","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12233:31744":{"id":"2:12233:31744","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11852:2589","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatch_indices":"2:12236:31745"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43782:2604","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12253:25912":{"id":"2:12253:25912","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:123:1700":{"id":"b:2:2553-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2523:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2547-0:86:128":{"id":"b:2:2547-0:86:128","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:86:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12265:31754":{"id":"2:12265:31754","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2744:2314-0:123:1700":{"id":"a:2:2744:2314-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2744:2314","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12270:25706":{"id":"2:12270:25706","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:1990":{"id":"2:12192:1990","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:2589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:28446":{"id":"2:12271:28446","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39702:28455","Self::is_ascii":"2:12270:25706"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39702:28455","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:128":{"id":"2:2556:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:71:1820":{"id":"0:71:1820","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:1849":{"id":"2:12200:1849","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11852:2589","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split_whitespace":"2:12178:29489","str::rsplit":"2:12206:27345"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43632:2184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3325:1514":{"id":"2:3325:1514","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39494:6013","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12152:1848":{"id":"2:12152:1848","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2558-0:123:1700":{"id":"b:2:2558-0:123:1700","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AutoCfg","id":"0:123:1700","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2561:128","2:2562:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:1792":{"id":"0:63:1792","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["name",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12212:31740":{"id":"2:12212:31740","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11852:2589","str::split":"2:12200:1849","prim@char":"1:12030:421","str::split_terminator":"2:12209:31739"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43700:2611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12864:3721":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7313:32741":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:40376:5898":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:482:4849":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4368:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:41671:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12148:3577":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"18:609:6590":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:45666:6300":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2932:2317":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:39267:13010":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11623:3465":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:22560:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:41622:6467":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13854:4000":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2803:13272":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7250:5801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40598:6181":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:506:4860":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:10843:26333":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12186:3585":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:638:6841":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9040:6491":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:40968:2208":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:1557:4952":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9887:6620":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13957:4030":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4854:5314":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:12001:7747":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5818:5480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4446:5159":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:8809:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4304:5072":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:41537:7791":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:1702:5046":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12769:3704":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:9294:2477":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6028:5594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:11557:6245":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:8711:20052":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13513:3928":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"15:327:19090":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12579:3662":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11603:26586":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"8:0:2003":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:10470:3093":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:8388:7863":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:2606:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:12522:6817":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7710:7745":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:614:32756":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:42690:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:4900:4270":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4842:5309":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:915:6764":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:14341:4149":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:587:4910":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:5689:4287":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:3519:6609":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"9:330:4803":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10013:3329":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:46386:6331":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:5972:4180":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:3183:31348":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:2033:4477":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2377:2725":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:11542:3460":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40588:6180":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:39314:6007":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4436:5153":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:4163:7819":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:1538:6782":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11199:3427":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:14015:4042":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:5639:4285":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:45867:6308":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:5080:6857":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12377:3632":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:44371:6283":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:8043:4598":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6357:4370":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:719:3196":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:9318:3314":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:2186:32722":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:2180:4758":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:7221:2993":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:9939:6624":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:119:13665":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:1672:2981":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:5567:4223":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:45622:6298":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:481:3065":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12592:3664":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8296:6880":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:4054:7803":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:6726:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14177:4104":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5940:6687":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1717:5053":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14205:4111":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3298:2198":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40172:6149":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:49943:7893":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:6289:4363":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"11:1826:3003":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:636:3186":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"14:165:19066":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:43590:2599":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4506:4258":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:4315:6855":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:9866:6618":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2353:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:2174:4757":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:574:3163":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:1917:2566":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:2960:32688":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11416:3453":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:3220:4244":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4740:7811":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:5362:2587":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13999:4039":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"9:237:2225":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1690:5042":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:7718:2233":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:7599:5837":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:39329:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6484:4379":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13109:3761":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"2:1630:592":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5799:5478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:3970:7795":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11832:3506":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:564:3173":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11967:3533":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:878:2989":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12354:3627":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8878:6487":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:6955:3036":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11189:3425":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13862:4001":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"14:160:6760":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"14:187:19073":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4475:5170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4781:5283":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12539:3656":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8818:2247":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12479:3647":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:7637:6419":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:8068:4601":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:10904:6813":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:579:4905":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:2959:2561":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:968:4477":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:20711:29789":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8211:2183":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:7382:2138":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10253:6637":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8230:6877":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6232:6720":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:481:3161":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10323:6643":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:4904:7848":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:45974:6313":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:22527:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:44038:6254":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:42221:1696":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"1:4171:7820":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8497:2227":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:531:3168":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:5028:4274":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:541:4886":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6128:4353":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11155:3421":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:3669:2981":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"15:0:2009":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11815:3503":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:7575:5832":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:44548:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:8542:20039":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:21919:5906":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4740:5260":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"7:32:18965":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:43186:6241":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:6987:2207":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:0:2007":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:1426:2629":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:3651:2509":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:8899:20058":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12815:3714":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:12012:25902":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:5475:2163":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:7725:13247":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1776:2681":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:434:3257":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13303:3779":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:644:2629":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:44651:4763":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:531:3066":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:30441:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:11877:2582":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:515:3166":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:7564:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:653:14022":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:40558:6177":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2771:4487":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5553:4220":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:4609:13095":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7494:4538":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:8252:4616":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11234:3431":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:9409:32749":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:8176:20003":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:3186:24332":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:6930:3033":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:11398:6815":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:9100:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2815:13273":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4824:5300":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6036:5596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10981:6676":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:1102:31148":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:42964:2225":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10633:3358":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4291:5063":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10609:6663":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:44244:2613":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"9:426:18981":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5900:5526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6502:4387":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:1778:2682":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:5049:6857":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:21637:29792":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:923:6766":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:9292:2476":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12921:3728":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4420:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:21200:5902":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6850:4448":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:12745:7760":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11371:3451":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:7425:2137":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:2105:20116":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:7268:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13448:3892":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:7182:2835":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:10427:2246":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8997:25918":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:8834:2248":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:4753:4265":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6540:4227":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:22153:2575":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:12033:1061":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:42702:4575":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:39702:28455":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:2212:2717":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10417:3346":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6789:4443":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6886:4230":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4716:5249":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4315:5080":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:868:4750":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:8539:2228":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:6788:3030":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:43886:2180":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:42436:2476":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:595:4915":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2591:2186":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3735:6787":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:10765:6506":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:20726:29916":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11924:3528":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:2901:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:22117:29775":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:850:2629":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:44355:6279":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12727:3683":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"11:365:2972":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:837:2229":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:1733:5057":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12711:3678":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5916:4320":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"9:450:18979":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:30425:5938":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7505:4234":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11813:3104":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8278:6467":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:40233:13102":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:1696:5045":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:43485:5898":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6175:6694":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:12048:1520":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:42429:2474":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:2133:6603":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4973:5384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:5994:19992":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6688:5704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1545:4943":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:4396:4255":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2874:4217":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9840:6617":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2984:7773":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:12053:1577":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12424:3638":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9475:6611":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"0:51:951":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"17:9977:6614":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:3893:1967":{"crate_id":1,"path":["std","num"],"kind":"module"},"1:904:3020":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:43359:6828":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:7864:2737":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:1888:2565":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:8494:2583":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:5393:2241":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:4724:4264":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12605:3665":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6986:4467":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6456:4222":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:9744:32750":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:2314:4187":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9899:3325":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:1822:2509":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4704:5242":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11385:6525":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:23238:2571":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:2611:4206":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:8632:20050":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11287:3098":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:1495:4919":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6372:4221":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2514:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:40995:6193":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:7261:5862":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:8965:2277":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7523:5819":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:7463:5867":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5044:5419":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:3581:2229":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:7682:3094":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:4637:5699":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:7568:32736":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:5954:2272":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13155:3425":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7622:6755":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10947:4823":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:4768:391":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:4032:4253":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:21101:7881":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:261:2981":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11109:3416":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40418:6158":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6156:5633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:7396:29764":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10532:2202":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:1761:615":{"crate_id":1,"path":["std","env"],"kind":"module"},"13:110:32724":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:1637:5871":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:2709:2489":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:7517:5818":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:3178:4753":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6915:32735":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:400:6598":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9485:32748":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:46097:6322":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:42222:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:4002:3003":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:261:6597":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:6791:30010":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"0:50:1719":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"16:7099:6491":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10575:3094":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6018:19993":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11600:20065":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13847:3999":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:356:6836":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:1631:5006":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:12078:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:817:6769":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11498:3458":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1590:4974":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:4476:4257":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:2594:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:1911:15013":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6015:5590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:10118:2629":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7534:6913":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11250:3432":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:7282:2509":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:500:4857":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10101:6898":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:11594:6248":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7445:6747":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:3300:2199":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:1075:6600":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:45642:6299":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4794:5288":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4887:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:41798:13344":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:1582:4754":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7505:5816":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:48075:6410":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:45712:6302":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:5824:2285":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6077:5607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4550:5209":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10280:6639":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:1073:6779":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:21747:2738":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:1576:4753":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:43782:2604":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:8982:30515":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:9528:32745":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:9288:2474":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:43410:5894":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4754:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4738:7809":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7584:6754":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:41789:6823":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:573:4902":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:1464:4750":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:43428:6829":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8872:2509":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13719:3963":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:14:2116":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5775:5462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:119:2968":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13604:3941":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8389:7859":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12043:751":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:14403:4162":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:32300:2625":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:7211:3003":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:7310:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:5745:2274":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:47941:6400":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6692:19996":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13905:4013":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:7887:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:12051:1519":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:1561:3003":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10266:6638":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8407:2224":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4963:5378":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6900:4452":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:0:2011":{"crate_id":17,"path":["object"],"kind":"module"},"16:5882:4314":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:681:3187":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:45734:6303":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4764:5272":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:3499:1692":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10529:3439":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:14216:4116":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2567:4204":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7592:20000":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:8166:4609":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:9118:3308":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13083:3759":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6815:4444":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:20927:29552":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:22080:29772":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13125:3763":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:12041:650":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:10943:2702":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:47981:6404":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12936:3732":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4996:4273":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1979:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:44196:6268":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2935:2318":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2752:2624":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:2166:13289":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10377:3342":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:40226:6152":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:5128:2272":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4496:5181":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13591:3936":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:6538:2282":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4387:6856":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:4701:7823":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:20915:7884":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6044:5599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8141:2207":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:7199:5861":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:624:32757":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:39494:6013":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:2715:4210":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:7529:5820":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9032:6892":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12757:3702":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:4032:7799":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:2850:13278":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:10103:6897":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:7855:20002":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:2882:3072":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6658:4415":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7012:4468":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4955:5373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"14:7:6760":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:42261:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11231:6495":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:6872:4229":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12412:3636":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5074:5428":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12691:3677":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13574:3935":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7289:4514":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5301:4277":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46721:6353":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:3200:13007":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2783:4491":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"9:507:4826":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:42181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:8740:20053":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:4413:2310":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6713:4428":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4395:5133":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:910:6780":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4489:5178":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:895:2229":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:0:2002":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1442:2509":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:42982:6238":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:3204:4754":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6977:6725":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7362:19999":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"11:805:7759":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13923:4017":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12133:3571":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13427:3882":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:43800:2605":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:9744:3053":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:6805:5770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:2474:2738":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5629:3076":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6485:2981":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4456:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12049:1521":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8330:6881":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:946:6771":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:44264:2614":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5994:5577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4469:5167":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:4363:3010":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:40526:6174":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:8924:20059":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:9850:20073":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:11668:2592":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6939:19997":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:5673:19990":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5058:5425":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2373:4196":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:46927:6356":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:47739:6395":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4695:5237":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:1517:6781":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:6744:13251":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:42767:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:1041:4477":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:21118:2738":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:635:6839":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11872:3517":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13870:4002":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:2209:2716":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6775:5753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:43576:1977":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:41609:6213":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:30194:2573":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4917:5352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12174:3582":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:9296:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:491:3162":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46119:6323":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:44067:6263":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5793:5475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"7:79:18972":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"14:221:4695":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6820:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:9054:25909":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:4473:7823":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40962:6189":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:5420:1420":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"16:7553:4540":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:2820:13274":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:755:3204":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:42662:6221":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:9202:6500":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:4:1026":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12851:3719":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:21279:2738":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:48007:6406":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42745:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13620:3944":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:21533:7891":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:46167:6324":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:41566:6206":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2637:4207":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9604:3332":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13732:3969":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:8389:6806":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:3082:7775":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5829:5488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:7278:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:22040:29771":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12161:3581":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:2527:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12792:3713":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2317:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:13971:4032":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:2443:4199":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:0:500":{"crate_id":2,"path":["core"],"kind":"module"},"1:3261:2203":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:5318:2981":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:10082:2691":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:21972:5907":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4810:5295":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:2555:2194":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:2836:4497":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:21186:7880":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7631:4544":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:40313:2141":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:47996:6405":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11591:6527":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:42727:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9571:32747":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4862:5319":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11905:3523":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:41858:2229":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:6594:2287":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:21528:7883":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:14150:4092":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:8771:20054":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12394:3635":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6931:6724":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:3186:6607":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:8086:4604":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:5535:5880":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:6796:5767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:46213:6325":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7255:6219":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:45688:6301":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:6145:3063":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2825:13275":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:3330:3020":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:4770:5275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:2519:4202":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:42025:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2799:13270":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9821:3322":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4818:5299":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:2492:2193":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6589:5668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:12031:1539":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:44363:6281":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6598:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:1839:2698":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1536:4937":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9518:6612":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:4148:5879":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:47961:6402":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:41586:29778":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:47489:6392":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12118:3565":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:2830:4496":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:8872:20057":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11329:20062":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12346:3625":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:526:4877":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:5498:1695":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:2699:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13749:3974":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:40506:6172":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:1587:4755":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:2962:5849":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40728:2182":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46691:6352":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:43540:6833":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11020:6679":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6171:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:4962:7855":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:20879:7882":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"14:215:4693":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12333:3623":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:4965:4272":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:21303:2738":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:2704:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43906:2593":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:474:4844":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6720:5715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:986:6773":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:11812:2234":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6022:5591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10654:3360":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:9614:32746":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4413:5145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:40105:2601":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:643:7742":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:7047:2267":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:844:6772":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3171:2229":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:10419:6812":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:502:3000":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5793:4303":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2747:2622":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5955:5563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:12435:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:3810:4250":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:43836:2606":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:7418:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:2465:4200":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10038:6626":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:5025:5405":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:3635:3211":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2925:2315":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:532:4880":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4155:7818":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"14:0:2008":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5015:5400":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11979:6916":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4483:5175":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11144:3420":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13548:3929":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:43448:6830":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:9282:2697":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11992:3538":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9442:32742":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6711:5711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1118:31308":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:2689:4209":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:5775:4298":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10795:2737":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11454:3455":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:4426:3010":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:8659:20051":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:44427:6290":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1570:4752":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:4049:13006":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:332:2970":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6296:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11074:3405":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:4928:4271":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:12040:648":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:9926:6623":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:9936:2738":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10444:3348":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7474:4233":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12303:3614":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2857:4216":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4535:5202":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:9016:3304":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4339:2485":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2846:13277":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:39508:4531":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:5877:5513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2766:4490":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:4190:2484":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:11304:6518":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:6439:3003":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6239:32740":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8204:2182":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11753:3487":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:8241:7790":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4650:5226":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10671:20158":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8926:7866":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:2293:19105":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:5379:2240":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4895:5336":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:14163:4098":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8008:1969":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11617:6528":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:7725:7746":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:362:6837":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7525:4235":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12017:3540":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:12050:1522":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:7552:5826":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"14:31:6760":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4723:5250":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:3777:4249":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:5843:4311":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:766:24020":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:1747:5872":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:30513:29766":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:7438:3016":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:736:4751":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9716:32751":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7545:3024":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:4698:4263":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12053:3549":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10199:3337":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:7743:2701":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:4620:4262":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:2201:2232":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:7020:3086":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6250:4360":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:3594:2629":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13757:3977":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:7529:3020":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"0:48:606":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"16:4564:4260":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:44664:6297":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12526:3653":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:7762:29919":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:2523:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:9978:6210":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:7523:3301":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:7609:5839":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:20741:29912":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:39345:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10597:6662":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:5737:19991":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6573:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:41747:2509":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:7998:6870":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10313:6642":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:48022:6407":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10845:3395":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2520:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:45919:6310":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:2141:5844":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:42443:2477":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:1814:2691":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:4623:7798":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:4026:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10994:6677":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:11617:6249":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11007:6678":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:20743:29917":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:40517:6173":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"0:0:1857":{"crate_id":0,"path":["autocfg"],"kind":"module"},"13:0:2001":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:1881:1688":{"crate_id":1,"path":["std","error"],"kind":"module"},"2:40299:2139":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:22028:2574":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6323:4365":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6516:4389":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:9134:2740":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:5363:19989":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14236:4119":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:8150:2209":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:8217:2184":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:44375:6284":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:40148:6147":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:8021:4597":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:7928:2197":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:9153:6496":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8806:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"18:590:3174":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:47347:6391":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1520:4929":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:2243:5852":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:22004:5912":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11473:6851":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6057:19104":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:46881:6355":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:44231:6273":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2744:2314":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2966:13009":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:9875:6619":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:21866:5905":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:41645:6214":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8334:5684":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6214:6712":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:9256:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5080:5431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:9727:3052":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11272:6682":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9966:3332":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"9:393:18980":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13991:4038":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:55:4588":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"5:7349:7758":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:3441:4246":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:11056:20183":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9105:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:46433:6332":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:1818:2229":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:881:4751":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:10298:2608":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:32209:6819":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8003:6871":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:39455:7752":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5100:4276":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:0:2006":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:43915:2591":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:5959:4324":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9665:32744":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:39487:6820":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:3739:6852":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13894:4009":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:40987:6191":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:6541:2283":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:21178:2738":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:22428:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13167:3770":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:1027:19060":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7295:5814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:2756:7870":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:10251:2252":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:12690:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:97:4743":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13964:4031":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:7337:2232":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12318:3618":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:12037:1504":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11568:20064":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:43602:2596":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:44351:6278":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:8457:2225":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:2687:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:2035:2197":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:40219:6151":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:2631:2196":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:4440:2487":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6356:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:62:13611":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11388:20063":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:43520:6832":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:43419:5895":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:660:6591":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:1918:5878":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:1506:4924":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:5612:4281":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:2781:4213":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:43736:2610":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:35:2977":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:6136:5619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14417:4165":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11044:3096":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11167:26331":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4984:5390":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:9661:3049":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:6724:4429":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:3580:4247":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12952:3733":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9706:6615":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12106:3562":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:2917:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:12365:3630":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:3517:2174":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2741:2620":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:2497:4201":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:44210:13042":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:14395:4159":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5126:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:47923:6399":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:42300:2273":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:43682:2612":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:12470:30034":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:30419:5869":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:9245:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:9274:2183":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7331:32738":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:14350:4153":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:822:2987":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:919:6765":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:43511:5899":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8312:6469":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:8290:7822":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:3894:4252":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11178:3423":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:1273:6775":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14359:4155":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:1482:6780":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:276:2321":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12044:752":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:2207:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:44558:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:30619:29767":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:12826:3716":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8800:2246":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:7558:5827":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2737:4211":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13557:3933":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12457:3646":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:6193:6860":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:9990:3327":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:5967:5568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8549:2229":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13778:3982":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3183:24337":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12254:3589":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43854:2607":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:521:24021":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10339:6649":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:6425:2278":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7753:4548":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6303:4219":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8910:7867":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11520:3405":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:8152:4240":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12552:3365":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:9246:1692":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44084:6264":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:3377:13061":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:41986:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10581:6660":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8942:7868":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12502:3652":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:8236:6879":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11264:3435":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13683:3958":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:7540:5824":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11852:3516":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:1976:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10931:6669":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"11:836:6771":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:494:4855":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14197:4110":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:530:4177":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5051:5422":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:14102:4091":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6671:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:7474:6797":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13179:3777":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11888:3521":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4992:5392":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:7736:6422":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:10783:6512":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:44132:6266":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44016:13041":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13673:3957":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:44359:6280":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:2517:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14007:4041":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:940:6769":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:40497:6171":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:5651:4224":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9806:20072":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:671:6595":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:5612:3018":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3221:2201":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:12448:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:22167:1976":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:11050:3097":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:3442:2171":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:11872:2584":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:9300:2479":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:14301:4138":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:14282:4133":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41731:2229":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5805:5479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:2461:5853":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:48137:6412":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:4234:2229":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:22626:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11696:3475":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:4592:4261":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2859:13280":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:7847:2735":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8555:2230":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:5622:3075":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:11923:13035":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:4014:6800":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:3841:6853":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13882:4008":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:46803:6354":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:45937:6311":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:1569:4960":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10555:6655":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:42927:6230":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8304:6877":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:44221:6269":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7515:4539":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:32213:6003":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4685:5230":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7799:4556":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:1184:6601":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:798:6766":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10330:6646":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:8814:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:10405:6811":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13803:3987":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7407:4328":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:6637:2981":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:5593:5882":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:2690:5856":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4341:5100":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:44609:6293":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10834:26329":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11290:20061":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:568:4900":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:1603:4981":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4787:5286":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10906:3398":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:860:2509":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11098:3412":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:45796:6305":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:6838:13243":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"11:695:6765":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:48045:6408":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5807:4304":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:7763:6819":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:41947:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2854:13279":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:5413:2242":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7833:4560":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:3998:7798":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13830:3991":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11767:3488":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:4536:4259":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40192:2601":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6667:4416":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12566:3661":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4567:7841":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12065:3552":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10051:6627":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:40539:6175":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:113:24010":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:10143:2184":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:3155:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13949:4027":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:14044:4049":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:10339:26469":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:547:4889":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13140:3767":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4524:5197":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:11857:2583":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:12042:754":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:1776:3020":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4872:5325":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:20683:2463":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:12047:1523":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10303:3250":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:4985:2163":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2919:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13659:3953":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:7412:2136":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:1558:2509":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:2541:4203":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10486:3352":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:40742:6184":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:2791:7873":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:9083:3307":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11642:3468":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:7235:13248":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:7912:6869":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"9:177:19046":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:894:3003":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:736:24019":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:40756:6185":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:9540:13111":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:11633:6250":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:12497:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:629:6783":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11118:3417":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12982:3739":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:44367:6282":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11045:3400":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13566:3934":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:6834:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:22758:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:21310:7886":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:7665:4237":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3524:2176":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:12646:3672":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:24:615":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:43896:2603":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:4329:3040":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13795:3985":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:43949:2602":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:14054:4054":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11141:2247":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:40427:6160":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:667:6764":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:40456:6164":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:2130:19055":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:14037:4047":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:582:3301":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5836:5492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10175:3332":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:9296:3313":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:723:4750":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:929:7759":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46464:6333":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:40488:6170":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6864:4450":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:4184:7821":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7707:4546":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:285:4744":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:42935:6232":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8979:6884":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:1667:1099":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2900:4218":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:43924:2590":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:8997:20038":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:1138:31149":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"9:52:18997":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5863:5512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7245:2509":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:43650:2608":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:4698:7850":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9281:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:21312:5902":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11379:6524":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:11996:26156":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4518:5194":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10161:6635":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:39522:2485":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:7661:6420":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"9:357:18994":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42103:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7546:5825":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12840:3718":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"11:1103:6778":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:44566:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10863:3332":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:7025:4471":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10249:6636":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8984:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:2475:13106":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:3343:2190":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:5429:2243":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8990:6886":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:8605:20037":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:41883:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:2216:2172":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:1973:6602":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:10336:6810":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44406:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:3166:13079":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:8794:20055":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:2168:4756":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:7593:3090":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:7191:2509":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10351:3340":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:10186:2592":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4729:5253":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21988:5908":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:45956:6312":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10621:6664":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:4074:2629":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:6306:7967":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2988:7774":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3217:31347":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:1837:2697":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:1838:4752":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6317:6723":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4833:5303":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:46243:6326":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:1831:3020":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:5779:2276":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:4384:3041":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:8161:2178":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2569:3053":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5882:5514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:30989:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:7231:13249":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10110:6633":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:1554:2229":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:40953:2278":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:40207:13101":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14189:4107":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4638:5225":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12966:3735":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:46567:6335":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:47677:6394":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:793:6780":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:48060:6409":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43182:6240":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5979:5575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:1733:13300":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:7721:2630":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:22146:5929":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:45897:6309":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43608:2595":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11084:3407":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2332:4189":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9075:6494":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:10263:6809":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"3:0:446":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:3800:3020":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:1411:2229":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:5366:2588":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3508:26502":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:1302:6779":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:782:2984":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:6798:3032":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:690:3190":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2787:7871":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11979:3536":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:3414:2163":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:41756:6219":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11467:3457":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:8125:6756":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:4046:7801":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7231:31330":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10322:1694":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:7290:2509":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7484:4537":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:562:4897":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:5986:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43498:6831":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:9020:6890":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:45818:6306":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:1121:6779":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3160:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12077:3553":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:21625:5904":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:2929:2316":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:1257:4477":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14315:4140":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46487:6334":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:31017:2463":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:2131:3000":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:1924:661":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:6531:2967":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:2777:13269":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:5561:2245":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10544:6654":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10293:6640":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6347:19994":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:21:689":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12004:3539":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:7463:5815":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11212:6517":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:3720:2197":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2914:2185":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:9487:3092":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4664:5227":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:1492:6764":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12052:799":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:6809:7874":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11354:3271":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:3295:4245":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11241:20185":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:707:2585":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:46991:6358":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:10978:13033":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:10377:2610":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:9286:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"11:1852:4754":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10390:3344":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:5970:3075":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:207:2979":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11591:3425":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:1821:5877":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:311:4747":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:13914:4016":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11337:6521":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:4815:805":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:11514:6852":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11610:6528":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12905:3726":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:14227:4117":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4328:5090":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8356:6470":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:7372:26158":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:40549:6176":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6763:4442":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:7852:2736":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:1673:5035":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4389:5131":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10471:3350":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:11412:1979":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1595:4976":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10957:6674":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:30385:5937":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6160:4358":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:7281:2320":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:630:2229":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:9561:6613":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:22494:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:44379:6285":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:40465:6166":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7679:4238":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4587:5221":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:555:6838":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:749:3003":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"14:202:13043":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4678:5228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:9497:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:10832:6668":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8113:2211":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:22692:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:12035:1390":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:5008:5397":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:40162:6148":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10403:3345":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:41657:6215":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:3940:7793":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:4913:7849":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:4393:2486":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12878:3722":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14329:4147":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:6161:3081":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:2966:32683":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10148:6634":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7693:4228":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:42974:6237":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:6655:2517":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:554:4892":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:9192:26339":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:8897:6488":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:8387:7748":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7038:4474":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41520:6199":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:32173:2250":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:39411:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4463:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6332:4366":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:20929:13289":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6008:5588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:1473:4751":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12435:3639":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13771:3980":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4495:7824":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:80:24008":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:40252:6156":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:96:24009":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10123:3325":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:4633:5695":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:13096:3760":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13787:3983":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:4441:4256":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12089:3554":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6850:5792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7763:20001":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:9505:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:47801:6396":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"15:306:19086":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:8864:6883":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"15:394:19096":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:47141:6359":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2962:19132":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46957:6357":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:619:2567":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:44622:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:4164:2163":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13368:3830":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:9298:2478":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12891:3723":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:22101:29774":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:2170:5846":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:644:3163":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13492:3923":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2795:13271":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:43632:2184":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:5994:5883":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:47970:6403":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40120:6144":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:1756:5874":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:12653:3063":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:21284:7877":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4235:6854":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4606:5222":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:1845:4753":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10520:3357":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10458:3349":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:6069:3077":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:1048:32723":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9344:32743":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:3389:6798":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:8977:29918":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:42142:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:44053:6260":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:2697:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:4393:2163":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12994:3741":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:2049:6773":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:7636:2738":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:20877:2738":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:47847:6397":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:42943:6233":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:10805:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:41503:6197":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:46021:6314":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:22659:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:46289:6328":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:8138:6759":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7463:4534":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2695:2618":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"13:226:4742":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6648:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40977:3047":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:8949:20060":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:8210:4531":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4848:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4929:5361":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:507:3163":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:2749:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:3395:6608":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:40474:6167":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:8285:6468":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46067:6321":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:9115:6495":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:44159:6267":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12659:3673":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4785:4266":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:39228:2631":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46645:6351":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:11535:6853":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:45836:6307":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:9475:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:10161:6899":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11175:6287":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:7731:6421":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:7586:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:2663:4208":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:9946:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:4032:2981":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2183:1689":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:41866:2629":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:1544:2163":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"9:486:18978":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:4133:25687":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:7511:5817":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10361:1697":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7433:4533":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1709:5049":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:2049:6787":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2825:4215":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:3867:4251":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:2421:4198":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:47885:6398":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:2402:1690":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10799:6666":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4568:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8856:2229":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2842:13276":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13981:4035":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4401:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:5558:2244":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:21048:7885":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:11194:2740":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"11:1611:2974":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43438:5897":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11034:6680":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4949:5372":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5590:4225":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4819:7808":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:41739:2629":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:3042:19133":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:9027:6891":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"9:0:2004":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:5444:1694":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4323:4254":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6868:5795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3110:2210":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"11:760:3020":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:504:6599":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:1513:4927":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:22725:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:11352:6522":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:0:2010":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:1012:6775":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4117:6801":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:7874:2734":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:5382:3304":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:6608:2288":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:399:32721":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:47950:6401":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5704:4290":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6396:4374":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:46265:6327":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:727:3199":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12045:753":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:7539:4236":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:42952:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6386:4373":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:43700:2611":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:3517:3003":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:6642:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:6465:2286":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40396:6822":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11450:3100":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40200:2600":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:8480:2226":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:1011:2981":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2361:2720":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:657:2509":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:2589:4205":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:488:4852":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:1068:6777":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11164:3422":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:403:32716":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44383:6286":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:3219:2200":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:5890:5519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:12034:313":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:10815:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:2803:4214":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:39529:6015":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:43931:2600":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:42064:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:21180:7878":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:7920:2195":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:10825:2178":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:7904:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:4042:7800":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:9153:3309":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:6248:3075":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:4908:5346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8194:2181":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12671:3674":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9655:6614":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9777:20071":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8566:2231":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10511:3356":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:11382:13351":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4374:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:47599:6393":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:10986:2249":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:43754:2609":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11033:3095":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:8841:20056":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"0:123:1700":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"2:22593:2577":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:12029:948":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:10568:6658":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:6079:2163":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11310:2254":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:2694:2313":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:9734:6616":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6744:5727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:3238:4755":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:10968:25903":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:40346:2155":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"15:288:19085":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:1501:19061":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:12030:421":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:1288:6773":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2375:2724":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:4194:2163":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:5839:3003":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:5975:13585":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6067:5605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:3736:6851":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:40574:3184":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6554:4391":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7073:19998":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:9482:2736":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:39389:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:5720:4292":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:4267:6803":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:5615:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11669:3469":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:0:1412":{"crate_id":1,"path":["std"],"kind":"module"},"2:20724:29914":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6197:6709":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:41480:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:1064:6775":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:5398:3305":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:2223:31329":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:5414:4279":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:10225:6808":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:14259:4132":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:1575:4962":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10097:6632":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:3938:2163":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13937:4024":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3984:7796":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:149:2965":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5767:5460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:3321:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:44601:6834":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:20971:7889":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4428:5151":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13016:3752":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11791:3502":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13029:3753":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:6894:3085":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:41807:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:2156:593":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10812:3392":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:30455:29756":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:9032:3305":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:952:6772":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11726:3479":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:8173:2179":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:21015:7890":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:42672:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46335:6330":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40446:6163":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11127:3458":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:7656:6864":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:43530:5900":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:4258:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:9170:6894":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:4002:6799":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:3237:13008":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4796:3073":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:40436:6161":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:7272:5802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2511:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:1681:5036":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:4742:7812":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:256:6596":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3180:26905":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13697:3959":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:1055:6773":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:3172:13078":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1663:5029":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6618:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4944:5370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6438:4378":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4635:5697":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"0:49:1713":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"2:3185:30178":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6625:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40271:2140":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:41908:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11210:3428":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:652:3163":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:14026:4046":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:40266:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:41815:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:40356:2154":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12631:3669":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1565:3020":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:5342:4278":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:39433:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:9110:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:10937:6814":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:2759:4212":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:43459:6242":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:5387:2163":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:21749:7879":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:43940:2601":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6571:19995":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6841:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10430:3347":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:40111:6143":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10499:3353":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:4380:5126":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:9759:3058":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:3058:3207":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:1858:4755":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:44439:13391":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:9399:6610":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:43618:2183":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:7574:3088":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:41722:2508":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:6769:3018":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:8848:2249":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:40132:29759":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13639:3945":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4626:5224":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:1500:4921":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5920:5542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:2761:7872":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:5306:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:2359:1741":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:1523:6786":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6130:5618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:13332:3799":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4841:4268":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:12055:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12054:1143":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:10770:2733":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4800:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:39515:6821":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:7363:2319":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:44639:6296":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:22461:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:3992:7797":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:3744:4248":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:123:13666":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:3025:4241":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9952:3294":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:4789:29949":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10883:3397":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10741:6907":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13069:3756":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1638:5010":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3460:2173":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:2399:4197":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"10:44:4765":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:538:3171":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:12036:1420":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:4814:4267":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:21134:7876":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:43167:6239":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:20696:29789":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:2164:6606":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:3212:4752":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:46311:6329":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:10956:1695":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:599:32755":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"14:40:3503":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:42718:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:9188:3310":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:2970:32684":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5849:5501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:22791:2576":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:44387:6287":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:22055:5917":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:1649:5018":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8224:2180":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:6565:5651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2926:19131":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:40939:6187":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10945:6673":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9913:6622":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:4262:6802":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:12046:749":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6470:4239":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7739:4226":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:2060:6775":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:6705:5709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:10529:2200":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:11367:6863":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:1503:6765":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2359:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2698:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:2808:4492":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:8105:4607":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:3303:1691":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"17:14380:4158":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5067:4275":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:7128:25697":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10760:6504":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:3674:7792":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5626:6685":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:9048:3306":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"10:0:2005":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7240:32739":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:45766:6304":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:12028:374":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10223:3339":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:3934:7794":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4543:5207":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:41874:2509":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10969:6675":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:12035:3548":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:586:7739":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:22063:5918":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12618:3667":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3386:2208":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6427:4377":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:6978:7422":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:699:3191":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:4759:676":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:5068:5426":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"10:36:4764":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4616:5223":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4748:5264":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:4868:4269":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:12642:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:10535:2198":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5752:2275":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11955:3532":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:39369:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:40405:2181":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:10391:2609":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:6558:2509":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:21062:13289":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11220:20184":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:40946:6188":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:1527:4932":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2352:4195":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13055:3755":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5737:5435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7061:4476":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:2387:2730":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:40283:29764":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:0:2012":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13435:3885":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4556:5211":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11155:2248":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10080:6629":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:7272:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:22179:2578":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:48098:6411":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5987:5576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:5238:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:6607:5675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13456:3893":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:9223:3311":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13043:3754":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:6429:2279":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:9545:5890":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:2194:4760":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11943:3529":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11428:3454":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:26048:2572":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13707:3960":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:7759:2702":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:11852:2589":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:2168:13290":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:42422:2475":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10786:6665":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:10094:2229":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4506:5188":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:7857:2733":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4938:5367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:3145:13281":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40184:2602":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:3259:2202":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:582:2463":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:11866:2585":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:9290:2475":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10066:6628":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}