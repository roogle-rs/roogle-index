{"root":"0:0:1748","crate_version":"1.1.0","includes_private":false,"index":{"0:119:1711":{"id":"0:119:1711","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3742:3167":{"id":"2:3742:3167","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:5828:2536":{"id":"5:5828:2536","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9222:2912":{"id":"2:9222:2912","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13379:55129":{"id":"2:13379:55129","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10493:142":{"id":"2:10493:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10494:703","2:10496:53013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8843:2132":{"id":"2:8843:2132","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:110:1680":{"id":"0:110:1680","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2897:124":{"id":"2:2897:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6671:2800":{"id":"1:6671:2800","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6672:53244","1:6673:6685","1:6674:6686","1:6675:6688","1:6676:6687","1:6677:6689","1:6678:6690","1:6679:6692","1:6680:4887","1:6681:6695","1:6682:6696","1:6683:6697","1:6684:6698","1:6685:6699","1:6686:6700","1:6687:6693","1:6688:6694"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3351:3156":{"id":"2:3351:3156","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:102:1620":{"id":"0:102:1620","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["dir",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:7318:176","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13366:58688":{"id":"2:13366:58688","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15845:1912"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3169-0:172:1589":{"id":"b:2:3169-0:172:1589","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:1629"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3143:149":{"id":"2:3143:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3145:1629"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13451:58699":{"id":"2:13451:58699","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10268:2391":{"id":"2:10268:2391","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3969-0:134:127":{"id":"b:2:3969-0:134:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3240:200":{"id":"2:3240:200","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2843-0:172:1589":{"id":"b:2:2843-0:172:1589","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:1976"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6098:2089":{"id":"5:6098:2089","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13446:58698":{"id":"2:13446:58698","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8411:120","str::match_indices":"1:15845:1912","self::pattern":"2:12997:2538","prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49488:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3382:3179":{"id":"2:3382:3179","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:171","2:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13377:55128":{"id":"2:13377:55128","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3146:135":{"id":"2:3146:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:2240-0:134:127":{"id":"a:2:3281:2240-0:134:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:134:127":{"id":"0:134:127","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["a:2:9222:2912-0:134:127","a:2:3252:209-0:134:127","a:2:3240:200-0:134:127","a:2:9223:2911-0:134:127","a:2:3281:2240-0:134:127","b:2:2843-0:134:127","b:2:3169-0:134:127","b:2:3173-0:134:127","b:2:3184-0:134:127","b:2:3969-0:134:127","b:2:2846-0:134:127","b:2:3179-0:134:127","b:5:6406-0:134:127","0:136","0:60","0:63"]}},"1:6849:2793":{"id":"1:6849:2793","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6850:55011"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13362:1739":{"id":"2:13362:1739","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3329:3147":{"id":"2:3329:3147","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:171","2:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:117:1704":{"id":"0:117:1704","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:131":{"id":"2:3489:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:121:1716":{"id":"0:121:1716","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14109:141":{"id":"2:14109:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14110:266","2:14111:507","2:14112:269","2:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10205:1581":{"id":"2:10205:1581","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10206:1509","2:10207:58130","2:10209:2626"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13455:58701":{"id":"2:13455:58701","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122:1719":{"id":"0:122:1719","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2840:2530":{"id":"2:2840:2530","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2842:52516"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3187:127":{"id":"2:3187:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38669:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"1:5783:2802":{"id":"1:5783:2802","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5784:4845"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4669:1581":{"id":"1:4669:1581","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4670:1994","1:4671:2622","1:4673:2623","1:4674:2624","1:4675:1642","1:4676:2625","1:4677:2626","1:4686:2461"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22812:2783":{"id":"2:22812:2783","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22802:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13443:58697":{"id":"2:13443:58697","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15845:1912","self::pattern":"2:12997:2538","`DoubleEndedIterator`":"2:8411:120","prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49470:2553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22961:15390":{"id":"2:22961:15390","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22962:5840","2:22963:57195","2:22964:57196"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22954:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5713:2804":{"id":"1:5713:2804","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5714:4845","1:5715:53038","1:5716:53039"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3184-0:134:127":{"id":"b:2:3184-0:134:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3169-0:134:127":{"id":"b:2:3169-0:134:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3172:1629"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3343:2920":{"id":"2:3343:2920","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2837:97":{"id":"2:2837:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2839:1976"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5633:2827":{"id":"1:5633:2827","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5634:52963","1:5635:3734"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3548:3266":{"id":"2:3548:3266","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3544:2904","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3472:2072":{"id":"2:3472:2072","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13416:55159":{"id":"2:13416:55159","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15845:1912","`DoubleEndedIterator`":"2:8411:120","prim@char":"1:15839:1907","self::pattern":"2:12997:2538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49338:2557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6776:2788":{"id":"1:6776:2788","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6777:7334"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":{"restricted":{"parent":"0:44:1577","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:137:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3779:3168":{"id":"2:3779:3168","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:97:1603":{"id":"0:97:1603","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:789:2489":{"id":"5:789:2489","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:6945:2789":{"id":"1:6945:2789","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6946:53220"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6099:52601":{"id":"5:6099:52601","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15845:1912"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13487:58709":{"id":"2:13487:58709","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15839:1907"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49637:2551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13370:58689":{"id":"2:13370:58689","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6096:59347":{"id":"5:6096:59347","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13371:293":{"id":"2:13371:293","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15845:1912","`u8`":"1:15856:1921"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13389:31287":{"id":"2:13389:31287","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15845:1912"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49603:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13478:1879":{"id":"2:13478:1879","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12936:2133","FromStr::Err":"2:12936:2133"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:2133","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:2133","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13725:150":{"id":"2:13725:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13726:171","2:13727:150","2:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13385:1726":{"id":"2:13385:1726","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49290:2545","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3394:3185":{"id":"2:3394:3185","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8850:3238":{"id":"2:8850:3238","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7891:3240","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13710:138":{"id":"2:13710:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13711:171","2:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3967:68":{"id":"2:3967:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3355:3158":{"id":"2:3355:3158","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3149:217":{"id":"2:3149:217","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3151:127","2:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:116:1702":{"id":"0:116:1702","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3406:3190":{"id":"2:3406:3190","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9222:2912-0:172:1589":{"id":"a:2:9222:2912-0:172:1589","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:2912","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3240:200-0:134:127":{"id":"a:2:3240:200-0:134:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3492:132":{"id":"2:3492:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3494:171","2:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2846-0:172:1589":{"id":"b:2:2846-0:172:1589","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:2530","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:52516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3172:1629":{"id":"2:3172:1629","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3146:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13363:58686":{"id":"2:13363:58686","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13466:55165":{"id":"2:13466:55165","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15839:1907","self::pattern":"2:12997:2538"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106:1651":{"id":"0:106:1651","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13469:58705":{"id":"2:13469:58705","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15839:1907","self::pattern":"2:12997:2538"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2848:52516":{"id":"2:2848:52516","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3526:3260":{"id":"2:3526:3260","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:226","2:3529:196","2:3530:57833"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6423:2788":{"id":"1:6423:2788","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6424:3042","1:6425:3043","1:6426:7333","1:6427:56873","1:6429:56877","1:6431:56874","1:6432:56875","1:6434:56876"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:124:1725":{"id":"0:124:1725","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13431:58694":{"id":"2:13431:58694","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13406:2433":{"id":"2:13406:2433","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15839:1907","`None`":"2:47356:166","self::pattern":"2:12997:2538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3137:75":{"id":"2:3137:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8363:136":{"id":"2:8363:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10264:2389":{"id":"2:10264:2389","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4018:2498":{"id":"2:4018:2498","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4019:2506"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:180:397"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:59344","5:6078:2071","5:6081:59345","5:6084:59346","5:6096:59347","5:6097:59348","5:6098:2089","5:6099:52601","5:6100:52602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8436:2242":{"id":"2:8436:2242","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8437:780","2:8438:1739"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13391:58691":{"id":"2:13391:58691","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49584:2552","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3402:3188":{"id":"2:3402:3188","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3248:207":{"id":"2:3248:207","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13388:31297":{"id":"2:13388:31297","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15845:1912"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49594:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13369:52927":{"id":"2:13369:52927","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12468:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3075:3172":{"id":"2:3075:3172","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3074:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3971:1408":{"id":"2:3971:1408","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45892:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5832:2537":{"id":"5:5832:2537","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:32241"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3347:3154":{"id":"2:3347:3154","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6845:2790":{"id":"1:6845:2790","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6846:52569"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3179-0:172:1589":{"id":"b:2:3179-0:172:1589","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3377:2875":{"id":"2:3377:2875","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:171","2:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:113:1693":{"id":"0:113:1693","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:2505","1:2579:1894","1:2580:1848","1:2581:1850","1:2582:2506"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3188:1394":{"id":"2:3188:1394","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3398:3173":{"id":"2:3398:3173","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:101:907","0:102:1620","0:105:1646","0:106:1651","0:110:1680","0:111:1683","0:112:1688","0:113:1693","0:114:1695","0:115:1698","0:116:1702","0:117:1704","0:118:1707","0:119:1711","0:120:1713","0:121:1716","0:122:1719","0:123:1722","0:124:1725"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:99:907":{"id":"0:99:907","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3252:209":{"id":"2:3252:209","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:2874":{"id":"2:3372:2874","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:171","2:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13386:3221":{"id":"2:13386:3221","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49296:2544","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3684:3532":{"id":"2:3684:3532","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:3531","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4694:2064":{"id":"1:4694:2064","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4695:52750","1:4696:52751","1:4697:52752","1:4699:2063","1:4700:52753","1:4702:1740","1:4703:1868"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4612:2057","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2928:167":{"id":"2:2928:167","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2929:404","2:2930:2374","2:2931:2371","2:2932:2426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3969-0:172:1589":{"id":"b:2:3969-0:172:1589","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3967:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3971:1408"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:115:1698":{"id":"0:115:1698","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3707:3098":{"id":"2:3707:3098","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3709:54062"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4972:2829":{"id":"1:4972:2829","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4973:2124","1:4974:55048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5639:2826":{"id":"1:5639:2826","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5640:4436","1:5641:52927"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:7891:3240":{"id":"2:7891:3240","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7892:58292","2:7893:58293","2:7894:58290","2:7895:58288","2:7896:58294","2:7897:58291","2:7898:58289"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:64:648":{"id":"0:64:648","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48422:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:172:1589":{"id":"b:2:3184-0:172:1589","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3143:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3187:127","2:3188:1394"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9323:2780":{"id":"1:9323:2780","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9324:53348","1:9325:53349","1:9326:53350","1:9327:53351","1:9328:3500","1:9329:38642","1:9330:53347"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13373:55126":{"id":"2:13373:55126","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13381:2856":{"id":"2:13381:2856","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3544:2904","`str`":"1:15845:1912","str::slice_mut_unchecked":"1:15845:1912"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:59346":{"id":"5:6084:59346","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10270:2392":{"id":"2:10270:2392","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:123:1722":{"id":"0:123:1722","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13481:52603":{"id":"2:13481:52603","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10266:2390":{"id":"2:10266:2390","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6773:2786":{"id":"1:6773:2786","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6774:52552","1:6775:52996"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13383:55149":{"id":"2:13383:55149","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15845:1912"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6097:59348":{"id":"5:6097:59348","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2244","`String`":"5:8352:205"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2244","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13475:58707":{"id":"2:13475:58707","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15839:1907","self::pattern":"2:12997:2538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12444:3623":{"id":"2:12444:3623","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12445:2437","2:12446:58285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3153:216":{"id":"2:3153:216","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:127","2:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2892:173":{"id":"2:2892:173","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2894:593","2:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13434:58695":{"id":"2:13434:58695","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10274:2393":{"id":"2:10274:2393","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4687:2061":{"id":"1:4687:2061","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4688:57039","1:4689:39116","1:4690:57040","1:4691:57041"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1748":{"id":"0:0:1748","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:134:127","0:172:1589","0:96:1596","0:97:1603","0:98:1609","0:99:907"]}},"2:13402:1869":{"id":"2:13402:1869","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15839:1907","`None`":"2:47356:166","self::pattern":"2:12997:2538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3483:2241":{"id":"2:3483:2241","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3339:2919":{"id":"2:3339:2919","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3140:74":{"id":"2:3140:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142:2427"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10272:179":{"id":"2:10272:179","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:96:1596":{"id":"0:96:1596","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"a:2:9223:2911-0:134:127":{"id":"a:2:9223:2911-0:134:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:2911","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13486:2824":{"id":"2:13486:2824","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15839:1907"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49628:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3175:669":{"id":"2:3175:669","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:172:1589":{"id":"b:5:787-0:172:1589","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:2489","5:790:2490","5:791:2491"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13364:58687":{"id":"2:13364:58687","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2489","5:785:2490","5:786:2491"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6404:212":{"id":"5:6404:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23006:3310":{"id":"2:23006:3310","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23655:3283","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22997:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5721:2805":{"id":"1:5721:2805","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5722:4845","1:5723:7144"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13457:58703":{"id":"2:13457:58703","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12997:2538","prim@char":"1:15839:1907"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13027:2531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112:1688":{"id":"0:112:1688","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13007:2532":{"id":"2:13007:2532","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13009:2534","2:13010:58002","2:13011:58007","2:13012:58003","2:13013:58005","2:13014:58004","2:13015:58006"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3318:3142":{"id":"2:3318:3142","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:171","2:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13027:2531":{"id":"2:13027:2531","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3486:130":{"id":"2:3486:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5705:2803":{"id":"1:5705:2803","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:57124","1:5707:57126","1:5708:57125","1:5709:57127"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13413:31154":{"id":"2:13413:31154","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12997:2538","prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12789:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:1991":{"id":"2:13437:1991","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12997:2538","`DoubleEndedIterator`":"2:8411:120","str::matches":"1:15845:1912","prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49524:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3360:3174":{"id":"2:3360:3174","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3361:171","2:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13399:55164":{"id":"2:13399:55164","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15839:1907","self::pattern":"2:12997:2538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7781:2153":{"id":"1:7781:2153","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7782:53368"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:790:2490":{"id":"5:790:2490","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1609":{"id":"0:98:1609","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:5727:2800":{"id":"1:5727:2800","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:6338","1:5729:53372","1:5730:4845","1:5731:53373","1:5732:3042","1:5733:3043","1:5734:53374","1:5735:1283","1:5736:53375","1:5737:53376","1:5738:53377","1:5739:53378","1:5740:53379","1:5741:53380","1:5742:53381","1:5743:53382"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13396:1870":{"id":"2:13396:1870","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:2538","prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12936:2133":{"id":"2:12936:2133","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12937:126","2:12938:1621"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8846:2577":{"id":"2:8846:2577","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6445:2818":{"id":"1:6445:2818","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6446:53098","1:6447:6763","1:6448:53099","1:6449:53100","1:6450:53101","1:6451:53102"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13360":{"id":"2:13360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13361:780","2:13362:1739","2:13363:58686","2:13364:58687","2:13366:58688","2:13369:52927","2:13370:58689","2:13371:293","2:13372:55130","2:13373:55126","2:13375:55127","2:13377:55128","2:13379:55129","2:13381:2856","2:13382:58690","2:13383:55149","2:13384:55150","2:13385:1726","2:13386:3221","2:13387:2861","2:13388:31297","2:13389:31287","2:13390:1868","2:13391:58691","2:13392:31282","2:13393:1737","2:13396:1870","2:13399:55164","2:13402:1869","2:13406:2433","2:13410:1740","2:13413:31154","2:13416:55159","2:13419:58692","2:13422:58693","2:13425:1873","2:13428:55162","2:13431:58694","2:13434:58695","2:13437:1991","2:13440:58696","2:13443:58697","2:13446:58698","2:13449:1746","2:13451:58699","2:13453:58700","2:13455:58701","2:13456:58702","2:13457:58703","2:13460:58704","2:13463:13914","2:13466:55165","2:13469:58705","2:13472:58706","2:13475:58707","2:13478:1879","2:13480:3630","2:13481:52603","2:13482:52604","2:13483:52605","2:13484:58708","2:13486:2824","2:13487:58709"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:180:397":{"id":"0:180:397","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:134:127":{"id":"b:2:3173-0:134:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13460:58704":{"id":"2:13460:58704","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15839:1907","self::pattern":"2:12997:2538"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13419:58692":{"id":"2:13419:58692","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:2538","str::split":"1:15845:1912","str::rsplit_terminator":"1:15845:1912","prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49370:2561","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10262:119":{"id":"2:10262:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6078:2071":{"id":"5:6078:2071","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3313:2876":{"id":"2:3313:2876","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:171","2:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3459:116":{"id":"2:3459:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:210","2:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3335:3150":{"id":"2:3335:3150","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:171","2:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3544:2904":{"id":"2:3544:2904","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3546:171","2:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:3240:200-0:172:1589":{"id":"a:2:3240:200-0:172:1589","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3240:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13428:55162":{"id":"2:13428:55162","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12997:2538","prim@char":"1:15839:1907","str::splitn":"1:15845:1912"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49442:2558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3252:209-0:134:127":{"id":"a:2:3252:209-0:134:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13382:58690":{"id":"2:13382:58690","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15845:1912","str::slice_unchecked":"1:15845:1912","crate::ops::IndexMut":"2:3548:3266"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:137:648":{"id":"0:137:648","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3388:3182":{"id":"2:3388:3182","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:171","2:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9223:2911":{"id":"2:9223:2911","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2938:174":{"id":"2:2938:174","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2940:984","2:2941:813","2:2942:779","2:2943:701","2:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5771:2807":{"id":"1:5771:2807","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5772:53372"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10276:2394":{"id":"2:10276:2394","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218:115":{"id":"2:3218:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8330:3113":{"id":"2:8330:3113","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8332:2481"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3252:209-0:172:1589":{"id":"a:2:3252:209-0:172:1589","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3252:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13022:2533":{"id":"2:13022:2533","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13024:2428","2:13025:57804","2:13026:57805"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13016:2534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:5:6406-0:134:127":{"id":"b:5:6406-0:134:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6408:1376"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23655:3283":{"id":"2:23655:3283","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23656:3309"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23651:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13482:52604":{"id":"2:13482:52604","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10897:203":{"id":"2:10897:203","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10899:171","2:10900:55126","2:10901:55127","2:10902:55128","2:10903:55129","2:10904:740","2:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10888:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:118:1707":{"id":"0:118:1707","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4612:2057":{"id":"1:4612:2057","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4613:2673","1:4614:54862","1:4616:54863","1:4617:54864","1:4618:2058","1:4619:54865","1:4620:52681","1:4622:54866","1:4623:2461","1:4624:2861","1:4625:2445","1:4627:1670"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:2240-0:172:1589":{"id":"a:2:3281:2240-0:172:1589","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3281:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3323:3144":{"id":"2:3323:3144","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:171","2:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13463:13914":{"id":"2:13463:13914","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12997:2538","prim@char":"1:15839:1907"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13483:52605":{"id":"2:13483:52605","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3173-0:172:1589":{"id":"b:2:3173-0:172:1589","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3146:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3175:669"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:114:1695":{"id":"0:114:1695","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:1850":{"id":"0:62:1850","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"error::Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2845:1976":{"id":"2:2845:1976","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3245:2239":{"id":"2:3245:2239","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:111:1683":{"id":"0:111:1683","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:3193":{"id":"2:3411:3193","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:105:1646":{"id":"0:105:1646","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13425:1873":{"id":"2:13425:1873","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:12997:2538","str::rsplitn":"1:15845:1912","prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49424:2559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:182:648":{"id":"0:182:648","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10215:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10204:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3308:2918":{"id":"2:3308:2918","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:171","2:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:61:1848":{"id":"0:61:1848","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:1746":{"id":"2:13449:1746","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3367:2873":{"id":"2:3367:2873","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:171","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:172:1589":{"id":"0:172:1589","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:100","a:2:9222:2912-0:172:1589","a:2:3252:209-0:172:1589","a:2:3240:200-0:172:1589","a:2:9223:2911-0:172:1589","a:2:3281:2240-0:172:1589","b:2:2843-0:172:1589","b:2:3169-0:172:1589","b:2:3173-0:172:1589","b:2:3184-0:172:1589","b:2:3969-0:172:1589","b:2:2846-0:172:1589","b:2:3179-0:172:1589","b:5:787-0:172:1589","0:179","0:181"]}},"2:10538:2872":{"id":"2:10538:2872","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10539:146","2:10540:32487","2:10541:52517"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:182:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10503:146":{"id":"2:10503:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10504:640","2:10505:1994","2:10506:53121","2:10507:53122","2:10508:53123","2:10509:53124","2:10510:53125","2:10511:53126","2:10512:53127","2:10513:53128","2:10514:53129","2:10515:53130","2:10516:53131","2:10517:53132","2:10518:53133","2:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2846-0:134:127":{"id":"b:2:2846-0:134:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2840:2530","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2848:52516"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6081:59345":{"id":"5:6081:59345","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9223:2911-0:172:1589":{"id":"a:2:9223:2911-0:172:1589","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9223:2911","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:172:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3182:127":{"id":"2:3182:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"2:13453:58700":{"id":"2:13453:58700","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8411:120":{"id":"2:8411:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8412:2428","2:8413:2429","2:8414:2430","2:8415:2431","2:8419:2432","2:8422:2433"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13422:58693":{"id":"2:13422:58693","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12997:2538","prim@char":"1:15839:1907","str::split":"1:15845:1912","str::split_terminator":"1:15845:1912"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49388:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6543:2814":{"id":"1:6543:2814","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6544:53293","1:6545:53294"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13361:780":{"id":"2:13361:780","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15839:1907"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13393:1737":{"id":"2:13393:1737","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15839:1907","self::pattern":"2:12997:2538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8326:3114":{"id":"2:8326:3114","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8328:2480"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13384:55150":{"id":"2:13384:55150","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15845:1912"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13392:31282":{"id":"2:13392:31282","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49612:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2862:104":{"id":"2:2862:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:397","2:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3183:1395":{"id":"2:3183:1395","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9222:2912-0:134:127":{"id":"a:2:9222:2912-0:134:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9222:2912","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13387:2861":{"id":"2:13387:2861","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49306:2067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6100:52602":{"id":"5:6100:52602","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15845:1912"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:1740":{"id":"2:13410:1740","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15845:1912","self::pattern":"2:12997:2538","prim@char":"1:15839:1907","`DoubleEndedIterator`":"2:8411:120","str::split_whitespace":"1:15845:1912"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49320:2069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6077:59344":{"id":"5:6077:59344","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2244","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2244","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3250:106":{"id":"2:3250:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8376:2243":{"id":"2:8376:2243","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8378:2434","2:8380:2435","2:8381:2436"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":{"restricted":{"parent":"0:44:1577","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","description","cause","provide","source","backtrace"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2576:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:61:1848","0:62:1850"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8565:157":{"id":"2:8565:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8566:2437","2:8567:909","2:8568:2439","2:8571:2440","2:8572:484","2:8574:2441","2:8577:2442","2:8578:2443","2:8579:2444","2:8580:2445","2:8582:2446","2:8584:2447","2:8585:2448","2:8587:828","2:8590:2449","2:8597:1747","2:8599:2450","2:8602:2451","2:8603:2452","2:8604:2453","2:8606:2454","2:8608:2455","2:8611:1287","2:8612:1670","2:8613:2456","2:8617:2457","2:8620:2458","2:8621:2459","2:8622:2460","2:8624:2461","2:8625:1732","2:8627:2462","2:8630:2463","2:8632:2464","2:8642:2465","2:8657:2466","2:8659:2467","2:8663:2468","2:8672:2469","2:8675:2470","2:8677:2471","2:8680:265","2:8687:283","2:8694:1869","2:8701:2472","2:8710:2473","2:8720:1001","2:8727:2474","2:8734:2374","2:8735:2371","2:8736:2376","2:8748:2375","2:8755:2373","2:8767:2372","2:8774:2475","2:8775:2476","2:8780:2477","2:8783:2478","2:8786:2479","2:8787:2480","2:8789:2481","2:8791:404","2:8794:2482","2:8797:984","2:8800:2483","2:8803:593","2:8806:2484","2:8809:894","2:8811:813","2:8813:779","2:8815:701","2:8817:684","2:8819:2485","2:8820:2486","2:8828:2487"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4750:3231":{"id":"2:4750:3231","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4751:2437","2:4752:58162","2:4753:2440"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:791:2491":{"id":"5:791:2491","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8367:151":{"id":"2:8367:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:2437","2:8369:2438","2:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13372:55130":{"id":"2:13372:55130","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15856:1921"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13016:2534":{"id":"2:13016:2534","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13018:3214","2:13019:909","2:13020:58238","2:13021:58239"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13472:58706":{"id":"2:13472:58706","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15839:1907","self::pattern":"2:12997:2538"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5775:2808":{"id":"1:5775:2808","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:53300"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10545:2784","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13390:1868":{"id":"2:13390:1868","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49574:2070","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3696:213":{"id":"2:3696:213","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3697:171","2:3698:3098","2:3699:674","2:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10255:109":{"id":"2:10255:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3615:3531":{"id":"2:3615:3531","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3617:57206","2:3618:57207","2:3619:1737"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6847:2792":{"id":"1:6847:2792","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6848:53068"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3281:2240":{"id":"2:3281:2240","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:120:1713":{"id":"0:120:1713","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1079:2822":{"id":"1:1079:2822","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:2489","1:1081:3630","1:1082:52601","1:1083:52602","1:1084:52603","1:1085:52604","1:1086:52605"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6408:1376":{"id":"5:6408:1376","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:134:127":{"id":"b:2:3179-0:134:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3153:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3149:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:127","2:3183:1395"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":{"restricted":{"parent":"0:44:1577","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:64:648"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13456:58702":{"id":"2:13456:58702","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13480:3630":{"id":"2:13480:3630","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3249:206":{"id":"2:3249:206","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3701:137":{"id":"2:3701:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:101:907":{"id":"0:101:907","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14183:2845":{"id":"2:14183:2845","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14184:54807","2:14185:54808","2:14186:54809","2:14187:54810","2:14188:54811","2:14189:54812","2:14190:2461"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2843-0:134:127":{"id":"b:2:2843-0:134:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:134:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2845:1976"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5761:2806":{"id":"1:5761:2806","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5762:52945","1:5763:52946","1:5764:52947","1:5765:52948"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13440:58696":{"id":"2:13440:58696","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:2538","prim@char":"1:15839:1907","str::matches":"1:15845:1912"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49542:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:2533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13375:55127":{"id":"2:13375:55127","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13484:58708":{"id":"2:13484:58708","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15839:1907"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49619:2549","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:2166:2864":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11714:4911":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:8181:2438":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12671:5101":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11932:4955":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:15860:1925":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:6923:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3701:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:14449:2671":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:46189:3376":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"12:937:2891":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11738:4915":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"12:1100:2895":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:3320:4343":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9264:4767":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:7604:3692":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"9:41:3842":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:12659:5100":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:13760:58235":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:15805:52981":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:2840:2530":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5548:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:22603:58090":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:1441:2895":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10224:7234":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"12:429:3927":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:12048:2934":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12685:5102":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:46160:3373":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:12783:5117":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4678:53346":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:10623:7246":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:782:4676":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:23999:6848":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10468:4427":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12552:5078":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:48444:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:169:52235":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5595:4007":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:699:2957":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13477:5355":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:22954:2784":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:5228:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"12:2309:5840":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10353:4399":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:1011:2124":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:8929:45940":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:57291:7055":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:4972:2829":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:3743:4347":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:24479:2521":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:3714:5529":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"14:11:7289":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3339:2919":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11159:4834":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:811:4471":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4401:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:3800:5531":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:53257:7036":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13733:5438":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:3118:1578":{"crate_id":1,"path":["std","fs"],"kind":"module"},"6:3881:6156":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:4823:5549":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:10771:2668":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:10274:2393":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4517:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4371:6370":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"9:749:3794":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"12:2039:2868":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2506:1577":{"crate_id":1,"path":["std","error"],"kind":"module"},"6:605:5984":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:14893:2690":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:5312:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:49603:2540":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:48693:2120":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:7918:53065":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"17:9849:59900":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:4585:2049":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13520:5370":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:511:5928":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2399:2630":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:3043:58609":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:2512:4392":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:6445:2818":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13054:5236":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12155:4999":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:51759:6988":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:10270:2392":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2187:2868":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13547:5377":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:49424:2559":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:774:4676":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:7718:1584":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:49139:3456":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"9:776:3839":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:3146:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:10590:2968":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:4:966":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13933:5498":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:23984:3396":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:52797:3325":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"13:232:5834":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:8160:3641":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:52987:3329":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:23008:3309":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13554:5378":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:1708:6120":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:3965:4575":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12152:2183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:1432:2576":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:892:3914":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:4317:6342":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:1623:2895":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:3184:2058":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:32177:3529":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13506:5363":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:2793:2494":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:15852:1917":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:9841:4620":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:9746:4618":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"19:117:4671":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:13221:5293":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:4120:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:6569:4313":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:3140:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:15846:1913":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6518:4164":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:2213:3709":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"12:1200:3924":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8676:2181":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:5152:2235":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:3143:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4511:6428":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:5006:3425":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5400:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:12738:3474":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:13906:58159":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:7804:4119":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:525:5936":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7781:2153":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:5828:2536":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:744:59905":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:53338:7043":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:15854:1919":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:51111:6977":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46502:3106":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:15862:1927":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10304:4394":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:14022:3493":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10236:4377":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:53286:7039":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:11324:3075":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13356:5327":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10407:4391":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:47356:166":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:50028:3479":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:3834:4575":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11416:13532":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3195:4286":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:9088:45944":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:812:2889":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:2462:2649":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:11904:3466":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:9799:7223":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:3684:3532":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6424:4162":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:5360:3020":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13865:5478":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4255:3040":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:6856:3112":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10814:4350":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10924:1847":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:50934:3353":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:45913:3303":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11378:4354":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:51627:3316":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3631:2073":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:49320:2069":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:23651:2784":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10081:4406":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:766:4687":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:49769:3204":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:22582:58093":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:9574:4384":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:903:2962":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46552:3111":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:112:59891":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:3549:5528":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:51005:3321":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:14509:53036":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10938:7255":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"14:56:4862":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5167:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:3483:2241":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:4380:2085":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"15:230:3944":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4193:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:5855:4020":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:9961:7226":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1723:6129":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5359:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:47483:195":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:4073:6266":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6366:3942":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:51092:3346":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"12:354:5835":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:7764:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:11101:2576":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11082:4360":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:3241:4288":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:8187:2438":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:50056:3480":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6554:4165":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:22584:58088":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13370:5329":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7216:4180":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:46329:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4459:6407":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:49574:2070":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2201:1037":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:10788:2672":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:11388:3451":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12262:5014":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:48496:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:11048:2060":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:4612:2057":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:15839:1907":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:46281:3611":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:32212:2910":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13386:5332":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:49388:2560":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:6776:2788":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:49442:2558":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46347:3537":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:24377:2522":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:3064:4341":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:10888:2784":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:49470:2553":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11847:4947":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12467:5064":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:6543:2814":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1729:3033":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:15309:7151":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12741:5109":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:5547:2033":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11199:4837":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:3331:2867":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:23556:2782":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:3957:6210":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:9440:4772":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:56016:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49220:3462":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12307:5022":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:6849:2793":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:11319:3449":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:14784:4627":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:45892:2499":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7884:4117":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12598:5085":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6644:4168":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"7:85:43916":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:4033:2497":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:11822:4943":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10211:7233":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:10538:2872":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:7719:3101":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2274:3290":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:4386:5536":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11118:2831":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"18:712:2370":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12118:4994":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11578:2124":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6949:4324":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:1136:2500":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6731:4317":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:9698:3013":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"11:54:3912":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:4888:3423":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"14:231:3645":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9551:4379":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:6423:2788":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10160:4779":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:24115:1855":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:13856:1584":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:48703:6968":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:13710:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:51404:3350":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11227:52684":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:1522:6003":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6881:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:49185:3459":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12982:5177":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7823:4121":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:51255:6979":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7103:13531":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:2305:3775":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7870:4116":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:7437:4575":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:1450:2885":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:6681:3649":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:49121:3454":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12756:5113":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12712:5106":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"7:38:43909":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:5295:44364":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:9729:59898":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:23820:3509":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:1736:6132":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:925:2887":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:4641:5543":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6176:4155":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:5531:2177":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:1235:3754":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10317:4393":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11767:4924":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:4246:2094":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:13810:5462":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:1689:3751":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5241:6502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:610:5986":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:3313:2876":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"12:0:1886":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:50032:3482":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1596:6044":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6768:4320":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:50036:3484":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:10543:3242":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13272:5307":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:2892:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:4852:3422":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10140:4408":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:51236:3311":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4439:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:8297:3537":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:8328:2016":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:5231:5556":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4449:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:9210:45946":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"12:2315:59887":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:14867:2149":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:5844:3068":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:6401:3109":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1195:58646":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46572:3118":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:8850:3238":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:3181:2673":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:27932:2509":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8275:2985":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:4762:5547":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12051:4978":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11406:4843":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:3248:207":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:820:4472":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:569:5964":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5436:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46534:3108":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:11389:2791":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:10276:2394":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11275:3023":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13912:5492":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:10546:2958":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:49628:2550":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:6305:3039":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11981:4969":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:7073:4173":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:10673:46131":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:8144:2438":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4052:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13842:5477":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11434:4847":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"10:0:1884":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:5721:2805":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5386:6578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:13463:2641":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:9731:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:8411:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:547:4014":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:15850:1915":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:13554:2944":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:45927:2404":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4033:6247":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11148:2837":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:46632:3124":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:32278:58118":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:11665:4900":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:49198:3460":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10266:2390":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:8130:58476":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7024:4327":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5282:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9186:4359":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10001:45993":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:45737:184":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:13022:2533":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:14141:2082":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12610:5087":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:1501:2889":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:53266:7037":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8625:2179":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4227:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11270:3022":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:12645:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:7663:1583":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:2968:4282":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:15344:3953":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:3742:3167":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:48119:2390":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:45885:3237":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13978:5504":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:136:52233":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1602:6046":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:12654:4625":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4523:6433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:5633:2827":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"12:377:3929":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:50265:3492":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:14073:191":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:10914:2951":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:48656:2903":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5987:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12221:5007":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:720:4678":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6101:4105":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:12754:3475":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:3250:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:15056:2852":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:8375:3643":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:8143:2173":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:46464:3102":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"9:1075:3860":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:6464:4122":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4241:6312":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13348:5324":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:667:4484":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:5868:4584":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10516:4430":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:4417:2086":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:3918:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5469:6607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:374:3714":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13465:5354":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:49895:3208":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:48672:3243":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9649:7220":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:3335:3150":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"12:853:2886":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9447:7462":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4145:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9769:59901":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:9943:59904":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7318:176":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:4694:2064":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:12715:3473":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:6887:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8474:2933":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11572:4884":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:3034:58610":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:3338:4027":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:3137:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:10802:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:10545:2784":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11993:7134":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:10493:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:10572:2983":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6807:4171":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:2945:4304":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4687:2061":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:1648:2887":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13488:5359":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7205:4179":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"12:784:2888":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:12097:2937":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:9034:45942":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:12042:2438":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:5001:3424":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10149:7224":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:53277:7038":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11971:7133":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:11077:2124":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:5421:3995":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:45783:188":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:10041:7228":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:14424:2796":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:3522:4693":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:624:5994":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4410:6384":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9713:3014":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13258:5302":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:24:589":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:32037:2510":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:12789:2541":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:704:4676":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"12:949:2892":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:1486:2898":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:45762:185":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12182:5003":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:12004:4598":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:11588:4889":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:3018:4283":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:578:5970":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:14138:2086":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6413:3941":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8179:4602":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:1476:2864":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:10357:7336":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4293:6332":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:47787:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:1547:6013":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5975:4150":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"12:463:59892":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:8070:2091":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13318:5313":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:11595:2127":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:10204:195":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:9280:4768":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4501:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:51727:6987":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:3889:3738":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:49916:3210":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13942:5500":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:13453:5348":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:3696:213":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:8105:3745":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6185:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:11281:2557":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:22806:2781":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12343:5028":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5420:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:24445:2520":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11026:7262":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:3091:4342":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:11175:2839":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"16:6087:4107":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:51943:3344":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:3972:6217":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5221:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:5538:1845":{"crate_id":1,"path":["std","num"],"kind":"module"},"1:7635:2146":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:14000:5510":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11779:4927":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:47913:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:786:4620":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:22565:57993":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:10264:2389":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:3329:3147":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:15861:1926":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12456:5063":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11434:2110":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13377:5331":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:14462:7145":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:11246:3448":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13205:5290":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"9:1020:3859":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11809:4939":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:49159:3458":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3488:4292":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:45852:3530":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6014:4152":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:15842:1909":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:6005:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:660:4483":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:46422:2034":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:4304:5534":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11975:53004":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"16:6136:4148":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:3725:3236":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:50064:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:51350:3343":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1630:2885":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:47829:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5347:6564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13532:5373":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:4210:2864":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12234:5009":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:57312:7056":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:11147:4833":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11231:4382":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"12:181:3930":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:7913:2984":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"6:5407:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9332:4423":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:15857:1922":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:22802:2784":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:10432:4623":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"0:97:1603":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"17:11653:4899":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:14800:4628":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12195:5004":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:584:5973":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12537:5074":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:9049:2189":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:5068:3430":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4347:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6812:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:8565:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:3035:6824":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:45806:187":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:50256:3491":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:15837:1905":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:1534:2894":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:47703:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:7894:4145":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:4477:5539":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:69:3687":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:3713:3235":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:3951:6208":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:6665:2177":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11933:2149":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:49338:2557":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2866:4280":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:12997:2538":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3218:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10458:4729":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:3347:3154":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46295:3613":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:5175:2407":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:897:2961":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11970:4966":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:49929:7313":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:8363:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:8467:2932":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:5078:2404":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:4510:3724":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:10599:7244":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:10407:4621":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:5456:3997":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:51197:3326":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9809:59902":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11264:3021":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:3966:6215":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5459:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"13:120:44260":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:3607:4600":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4494:6420":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:46543:3116":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"12:2303:5839":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:563:5961":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:2314:4398":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:3343:2920":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11604:4890":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:38732:2572":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:1690:6113":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:2325:3755":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"14:250:5789":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:3287:4290":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:3360:3174":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:55897:3279":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:5563:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:50044:3487":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:1486:2865":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:3178:2670":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:15234:3020":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:53199:3352":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4425:6392":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:11145:2833":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:50957:3341":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6072:4092":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:11039:2093":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11172:2838":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:9133:45945":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12795:5124":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:6185:3038":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:4669:1581":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:12936:2133":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12028:4975":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4023:6244":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3967:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10887:4820":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:1153:7316":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:23749:3508":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:48383:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:1669:2889":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:46834:6951":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:3249:206":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13402:5336":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:3318:3142":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:8282:2017":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:5632:4008":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:6683:6697":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13620:5393":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:46214:3615":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:47457:3542":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13119:5273":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:14:1994":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11277:4838":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:1622:6060":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:2754:4029":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4095:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:3041:4284":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5428:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13282:5308":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:50212:6974":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:7633:2446":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5522:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11186:4835":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:510:7216":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:5996:4151":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10962:7257":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:15589:4630":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:2484:46031":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"13:0:1880":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:5088:648":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:11312:2831":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:1311:4458":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:4345:2438":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"14:0:1887":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:49149:3457":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3176:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:2460:2648":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6577:4166":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6155:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"0:96:1596":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"6:5953:6656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5371:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:1908:40380":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:50099:3552":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:12275:5015":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10975:7258":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:0:1889":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:24649:2155":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:7626:3693":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7761:4186":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:49370:2561":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:53391:7046":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:47745:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:7303:4184":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:10268:2391":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6780:4170":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10128:4454":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:53361:7044":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"9:0:1883":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13685:5437":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11337:4424":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10864:4819":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5945:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11993:4971":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:4306:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10828:2997":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:10639:2878":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6999:4172":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"9:809:2120":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:3245:2239":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6605:4124":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:49906:3209":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:14216:2968":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:3544:2904":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:15859:1924":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7549:4118":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:1527:6005":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:51500:3323":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:3075:3172":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13172:5279":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5274:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6021:4278":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:616:5989":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12095:4988":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3492:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:49239:3464":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"9:234:3817":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:6126:4153":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9933:7225":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:8447:3688":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:3317:2680":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6893:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:5766:4017":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:3252:209":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:10897:203":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3508:2077":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:3218:4287":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:3351:3156":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10584:4363":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:14669:2151":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:3486:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6152:4109":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:3240:200":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47389:2437":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:48392:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:10776:2669":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:37488:168":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10543:4823":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5771:2807":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:47414:2438":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"9:686:3790":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"5:1838:4575":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:591:5976":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:47661:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:8363:3642":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10844:4408":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13540:5376":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"12:866:2864":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4331:6348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:47871:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:636:4676":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"12:968:2893":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10529:4783":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:51783:6989":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:3033:2489":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:15838:1906":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:9296:4769":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2928:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46204:3614":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5197:6480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:5410:2049":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:23913:3400":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:15843:1910":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:3172:4285":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:1511:2891":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:5967:3077":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:1463:2886":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:49229:3463":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:51679:6986":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:48359:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"14:216:44294":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:51531:3327":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:56055:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:7104:4589":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:14806:4629":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:7615:2145":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:5896:1319":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"6:519:5933":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4378:2084":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13446:5347":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:8114:2864":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13163:5278":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:7250:4183":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:47475:178":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10836:2079":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:9368:4770":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:49278:2548":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:49211:3461":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:3319:2681":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4478:6415":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:56042:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4112:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5815:4019":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13884:5483":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"0:99:907":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"5:8152:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2773:4305":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"12:2025:2866":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4358:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:1934:2865":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12725:5107":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:152:52234":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:10682:2065":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"5:1592:2124":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:15821:53003":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5528:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:52183:3324":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8460:192":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:9160:7325":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:24751:2517":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:739:7212":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:48711:6969":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:5775:2808":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:607:7217":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:50309:2495":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:543:5944":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:22812:2783":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7928:3303":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"3:300:195":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:1194:10284":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:3862:6146":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9046:2188":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:1688:3937":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:6773:2786":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:50202:191":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:15845:1912":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6391:4161":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2176:6830":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3597:2078":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10844:2081":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:10677:3762":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:10179:4781":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:7778:2152":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2265:3289":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:2991:4293":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11640:4897":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1091:4575":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:1522:2892":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11001:7260":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:6124:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:885:4477":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:51554:3330":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:46364:3538":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:1572:6027":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:24047:38312":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13924:5494":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:8902:45939":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:15333:3953":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:45721:186":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11060:2062":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"12:1762:4573":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:45829:189":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5927:4023":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4215:6310":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:8346:6828":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"5:7205:2864":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:9726:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:48133:2391":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:1563:6021":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:0:1881":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:1639:2886":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:46868:6954":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:2912:4281":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:1021:2985":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6910:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:4417:5537":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:11330:3032":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:47423:3540":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:52021:3351":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6691:4169":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:13818:1583":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4300:6333":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13240:5294":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11499:4867":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:6468:2864":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:6945:2789":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:10255:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"9:603:44088":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:0:1891":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13564:5381":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:13801:177":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10117:4453":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:46581:3119":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2060:2049":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:48422:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"18:754:59908":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12645:5099":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:45673:3261":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10827:4351":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:14492:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:49844:3206":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46412:2035":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46334:2018":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:1533:6008":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:7427:175":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:13834:53064":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:1676:6102":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:1180:3923":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:46235:3609":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:8367:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:9759:7222":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:46612:3122":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:11099:2067":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:157:39076":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:10567:2966":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:45920:3304":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:11482:4862":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4013:6238":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6085:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:5357:3019":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"12:774:2438":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:1658:6090":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:53323:7042":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:48903:3628":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:4594:4578":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:542:4040":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:24513:2518":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:1457:2897":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13819:5464":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:9896:59903":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:14012:3233":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11947:4959":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:49637:2551":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:10503:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:24411:2519":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"9:157:3809":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:2257:3756":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:3939:5532":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"12:1144:2897":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:5568:3359":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:4638:4580":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:5969:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12408:5058":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:15069:2858":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:4890:5551":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11032:2091":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"12:2005:2124":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:10272:179":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:9719:7221":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:4350:5535":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:2251:3286":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11304:45949":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6214:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:23946:6843":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:51038:3354":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:2733:4030":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:13007:2532":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:48664:6964":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:866:4476":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"0:134:127":{"crate_id":0,"path":["autocfg","Error"],"kind":"struct"},"2:11871:3465":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:3754:2124":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:3074:2784":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:9839:4408":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:823:4620":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:12917:5126":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:8099:2438":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:5594:766":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:5761:2806":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:8127:57539":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:5159:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:5960:4025":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13098:5268":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2192:2869":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:9224:2971":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:3118:4295":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3145:4294":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4046:6252":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:46492:3105":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:7250:4575":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:12468:1858":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:52261:3331":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:3779:3168":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6852:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"12:1235:3925":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13780:5456":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:49130:3455":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"9:963:3857":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:24717:2513":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:6935:6821":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13041:5229":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9600:59896":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:46227:2551":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:49488:2554":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:50052:3486":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11112:2070":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"9:722:3793":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:6166:4154":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:53312:7041":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:2543:4425":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:23891:6838":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"12:2013:2864":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11555:4882":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:896:4478":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46859:2092":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:12315:2648":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10950:7256":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:3365:2866":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"14:189:7289":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"12:840:2885":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"9:27:3841":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:4066:6263":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1665:6094":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:53376:7045":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:3548:3266":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"12:1253:2898":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12507:5069":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13497:5362":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3707:3098":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10635:4784":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:13016:2534":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:11485:2120":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4431:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7264:4125":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10061:7230":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4470:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:15851:1916":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:1617:6058":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:0:477":{"crate_id":2,"path":["core"],"kind":"module"},"16:6718:4316":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6200:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:50982:3333":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"12:930:2890":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:1700:6119":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:5727:2800":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12327:5023":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12431:5059":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:15041:2851":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3411:3193":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5472:4000":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12142:4996":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:4506:5540":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"0:0:1748":{"crate_id":0,"path":["autocfg"],"kind":"module"},"2:5132:2406":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:7961:4602":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:51602:3315":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:46850:6952":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:8843:2132":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11914:2148":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:3615:3531":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:5639:2826":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:14880:2150":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:49263:1856":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11118:45948":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12771:5114":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13772:5453":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"12:976:2894":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7174:4176":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3344:1579":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:47577:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:10205:1581":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4133:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:2366:589":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:15855:1920":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6106:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2159:2124":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4553:2092":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:12192:2690":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10448:4428":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4630:2059":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:6474:3110":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:1646:2897":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9614:4617":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"12:761:2576":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:2195:4577":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10377:4397":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:48907:3627":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:4614:5542":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11519:4877":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:24581:2516":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4005:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:13482:53056":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:14499:2060":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:2492:3232":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:15255:3027":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:47543:2438":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5130:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:5375:3606":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6682:4123":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:12444:3623":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7843:4187":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:48377:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:3459:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:6757:2049":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11794:4933":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:32226:58120":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"15:269:3949":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:51303:3355":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:5123:3431":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6644:6802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:2897:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:6671:2800":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:49584:2552":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:47466:38566":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:5882:4587":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:13963:5503":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5292:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46879:6956":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:49542:2556":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6252:4158":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:49752:3203":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:24100:2512":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11458:4861":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13180:5280":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:10262:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:56003:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8894:2184":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10071:4457":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:51381:3347":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:8234:2131":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:15840:1908":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:4456:2082":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:5938:3073":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6964:3540":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:24025:38320":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11920:171":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:11250:7117":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:12480:5066":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6110:4147":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10279:4406":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:46511:3107":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:15863:1928":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:50297:2496":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:22537:2370":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:161:39077":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:1079:2822":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8632:2180":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12168:4791":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:46563:3117":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1554:6016":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:49061:3450":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7342:4142":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"12:396:3928":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:15318:55031":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:49738:3200":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:5191:6479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4535:5541":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4281:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:55990:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2920:170":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4101:6282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:14135:2084":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:7808:4589":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3301:1632":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12582:5081":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:1161:10283":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11082:2065":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12699:5105":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:531:5939":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5916:3071":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:6923:2794":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:50040:3483":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:56029:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24683:2515":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5998:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:49619:2549":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:53050:3349":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:5269:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13331:5319":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5736:4013":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"0:172:1589":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"16:7119:4037":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:2175:2866":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:13590:5387":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:46314:3378":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:15849:1914":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"9:900:5896":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:25121:2508":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5255:6513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:829:4473":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:4922:5552":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:14444:7139":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:11986:52686":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:46252:2550":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:47535:2576":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13799:5461":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5488:4001":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:49612:2539":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6620:4311":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12385:5049":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:9607:56998":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"14:47:7289":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6591:4167":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:923:3743":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:4671:5544":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:1215:3753":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:50909:6976":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13760:5450":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8013:2985":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:10253:4396":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:45972:3412":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:7236:4182":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:5029:5555":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4955:5553":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:837:2534":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:994:3744":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11616:4893":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10346:4841":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:11169:2541":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:11360:2559":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:4695:3262":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:22605:58092":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12373:5047":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:46643:2066":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10571:7242":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4419:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4734:5546":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:2862:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:10557:55030":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:2816:4298":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:3506:4291":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13746:5444":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:12157:2185":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:2437:2641":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:5360:3992":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:48480:2388":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:52908:3345":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4387:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:1613:2438":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:4301:2576":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3981:2954":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:9619:56997":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:5185:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:8122:3746":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:12162:2192":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:14932:2915":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:537:5941":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:48140:2392":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2598:7323":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"17:11539:4878":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:1658:2888":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6870:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9751:4619":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"16:3604:4697":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7738:4185":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12442:5061":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7856:4188":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4164:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11100:4385":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4262:6313":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:12026:2124":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:11363:2787":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:51990:3348":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:22865:3309":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"9:692:3792":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:8118:2985":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"6:4060:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4272:6320":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5790:4018":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:12068:2935":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:6899:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11328:5114":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:46482:3104":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:51453:3335":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"14:194:44288":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4340:3004":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:5484:3027":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12073:4987":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:7601:2144":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:8825:7325":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:88:39010":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:8436:2242":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:15196:3019":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:13394:5334":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:1492:2887":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:13227:38605":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"16:5707:4010":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:1540:6011":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:46442:3100":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:5954:3076":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:3258:2409":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:9323:2780":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:5713:2804":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:3370:3707":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:2401:2631":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:7378:4114":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7406:4113":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6357:4160":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12010:4974":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11948:2150":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:4157:4364":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:51069:3342":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:22961:15390":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:4932:2403":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:294:7214":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8911:3054":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"16:7453:4110":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:5705:2803":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:8326:3114":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:48681:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10403:4404":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:9971:59897":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:5505:4002":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:11092:2066":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13296:5309":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:432:2244":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:15075:2859":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:11105:2069":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10656:2636":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:24007:6849":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:3365:4028":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:3264:4289":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:4008:7219":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:2548:3759":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5379:6577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:13725:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10988:7259":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:6491:4163":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11207:7111":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:8789:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13306:5310":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:3892:6164":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6068:3029":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10420:4390":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:37512:2370":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:9689:59895":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:2170:2865":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:10477:4426":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11678:4901":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:10095:4451":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:299:7215":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13062:5238":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10649:2899":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:10919:2952":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:4719:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:3429:4032":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:50048:3485":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10502:4782":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:7649:2147":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11628:4894":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:4750:3231":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6614:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:3406:3190":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:10410:7305":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:10215:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:3336:3706":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7042:4328":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:24063:38321":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:2843:4279":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:9223:2911":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:3990:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6051:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:6597:58161":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:15856:1921":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6219:4157":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:1045:2817":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7279:4329":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:47406:2576":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8374:2120":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:11726:4914":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4127:6294":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:12081:2936":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:11208:3447":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:1156:7318":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:4852:5550":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12208:5006":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:46600:3121":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:3978:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:55977:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7571:4106":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:32378:58117":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:9125:2191":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:3391:2869":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:49817:3205":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11367:6684":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4040:6250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:3483:2865":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:2753:568":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1630:6065":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10106:4452":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"12:469:59888":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4364:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3489:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:8314:2015":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:3281:2240":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:53113:3314":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3303:2676":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13154:5274":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10618:10280":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:3997:6233":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11525:2122":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10788:7247":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6176:6768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12946:5146":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:10258:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:7146:4174":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:48410:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:7241:7324":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:6947:3636":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:10820:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11045:45947":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:50888:6975":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:15810:10285":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46473:3103":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13192:5285":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:6028:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:9005:45941":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:13681:2157":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2163:2438":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:46591:3120":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:49296:2544":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:15864:1929":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12247:5011":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:9942:3434":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11142:2832":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:46663:3115":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1584:6036":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7195:4178":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"9:927:44013":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:1637:2896":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6864:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5433:3996":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:6636:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:53453:7048":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12521:5072":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4377:6373":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5522:4003":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13637:5400":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:8959:2195":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12632:5098":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:46151:6936":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:8846:2577":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:15174:2840":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:4995:5554":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:3685:2080":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:0:1885":{"crate_id":11,"path":["adler"],"kind":"module"},"5:6404:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"14:244:5787":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:14970:2159":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:47398:2124":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2381:2955":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:694:4485":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:4018:2498":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:0:1890":{"crate_id":17,"path":["object"],"kind":"module"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:3868:6147":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:12652:2669":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:49112:3453":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:3388:3182":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10611:7245":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"12:2018:2865":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:2772:3758":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:14962:7148":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6636:4126":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:15858:1923":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9162:4381":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:5783:2802":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:3392:4296":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10558:7239":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:2751:2493":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:13073:3199":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:22550:57993":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:49594:2542":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:49700:3196":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2923:169":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13429:5340":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:8954:4361":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:53414:7047":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:610:4480":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1760:6140":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:7295:4127":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:3377:2875":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13582:5385":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9659:59899":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:4237:4575":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:7158:4175":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:1236:7218":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:3323:3144":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:4790:5548":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:3246:2569":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:14912:7147":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8366:2985":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:5717:4012":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:24547:2523":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:1419:2124":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:2889:4299":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11178:2947":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"5:8430:2865":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:9476:4773":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3308:2918":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:53297:7040":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:3268:2571":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:46145:2550":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5580:4006":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:632:5999":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:9574:4616":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:3398:3173":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:9245:4352":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:15853:1918":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:13317:3034":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10435:7235":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:4230:5533":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"0:98:1609":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"1:0:1310":{"crate_id":1,"path":["std"],"kind":"module"},"1:1655:2898":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"12:2009:2438":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:52230:3328":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:644:4482":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11254:4380":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13574:5384":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:1744:6136":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7185:4177":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:46520:6947":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:3905:6174":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11015:7261":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:1667:3936":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6221:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:47997:2178":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:14002:4626":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:49881:3207":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7226:4181":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:8090:3635":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:4704:5545":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:2331:2131":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5561:4005":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:3877:2081":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"11:46:5845":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:49290:2545":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2181:2867":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:14656:2828":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:14475:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:51864:3356":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:52654:3357":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:4438:2124":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:801:4470":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6091:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6032:4036":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:8352:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:9065:45943":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46288:3612":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"12:160:3926":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:11126:2069":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10331:4408":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3357:2868":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:52104:3336":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:48126:2389":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:14439:7137":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2938:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:10656:4786":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3382:3179":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"9:1056:3852":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11508:2121":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3329:2686":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:3402:3188":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9404:4771":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:7366:2438":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:24128:2524":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13609:5392":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5346:4108":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12568:5079":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"15:0:1888":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:12137:2182":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:51216:6978":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:599:5981":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5414:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:49524:2555":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:50279:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:4461:1580":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"2:3394:3185":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9886:7224":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:47619:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10028:7227":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5978:6674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6239:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:15844:1911":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10200:7232":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7786:4120":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13788:5457":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10801:7249":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:38669:2154":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46451:2065":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:15025:2850":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7514:4129":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"9:996:3858":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:5384:3993":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6744:4318":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:47527:2124":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11344:3041":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:10781:2671":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"3:0:419":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:5407:3994":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:4343:3005":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:12034:2931":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:8330:3113":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:11374:2558":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:10673:2643":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:52447:3337":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:51579:3312":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:47957:1585":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"2:4637:2049":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:23655:3283":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4341:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:13929:2148":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:4694:4580":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:11568:2123":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:12113:2938":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:650:4479":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:46173:3374":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:6685:6699":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11584:2126":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:2837:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4395:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46653:3125":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:5832:2537":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11915:4949":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:5273:4034":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:50086:2921":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"16:3772:5530":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:51143:3334":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:4346:3006":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:10266:4395":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10912:7250":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4183:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:7833:4595":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10052:7229":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:1528:2893":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:24093:6860":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"8:0:1882":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:5783:4575":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:12212:2916":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6238:4112":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6681:6695":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:3472:2072":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:3526:3260":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:50060:3481":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:3324:2124":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4203:6309":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12040:4977":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11835:4944":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:9937:3433":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:9344:2532":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:13222:7306":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"12:2045:2869":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2169:567":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:45645:2578":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7477:4131":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13598:5388":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12494:5068":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:8247:2902":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:14652:2643":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:5314:4767":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8724:2194":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:53238:3317":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:4419:2087":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5210:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:2323:5842":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:3372:2874":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:1472:2896":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2794:4031":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4028:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"12:747:2124":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:857:4475":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4325:6346":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47552:168":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11963:2151":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:6845:2790":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:46258:3610":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:23971:2511":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:4997:2405":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:51174:3322":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:849:4474":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:13836:7307":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46274:2549":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:13027:2531":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9528:2067":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"12:2032:2867":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1602:2576":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11750:4916":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3355:3158":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:4448:5538":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5672:4009":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:670:39408":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:790:4469":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6858:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:6068:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:53160:3332":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:49723:3197":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:12678:3472":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:8376:2243":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13627:5395":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:4707:3263":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"9:469:44019":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:14183:2845":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11358:4355":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"12:1159:3922":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6208:4156":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7467:4111":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:50220:180":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:47955:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6269:4159":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:52296:3313":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:23006:3310":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:23930:6840":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:11338:3021":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12287:5016":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:14109:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"15:248:3945":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:6250:3692":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5330:4768":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:620:4675":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7333:4128":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:12167:2193":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:681:4841":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:3945:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:6847:2792":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:11402:3452":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8396:3737":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"16:7392:4115":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:7493:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:46841:2184":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11962:4964":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:3946:2865":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:22997:2784":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:3153:216":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:7821:3306":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:24615:2514":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:5753:4016":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10633:10282":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:7891:3240":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:1442:2438":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:12172:2915":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:8849:4378":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4458:2083":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:1717:6126":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:3367:2873":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:7272:7324":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4026:195":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:3767:2576":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6100:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"12:877:2865":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:3149:217":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"12:1118:2896":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:729:59907":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:49306:2067":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:46622:3123":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:32218:3555":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"12:1651:3935":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13986:5507":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:3039:58607":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:11319:3072":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:9222:2912":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:7420:4130":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:11696:4910":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:5946:3074":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:1505:2890":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13898:5485":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10489:4429":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10926:7254":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4083:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1497:2888":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"}},"external_crates":{"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}