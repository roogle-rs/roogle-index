{"root":"0:0:1774","crate_version":"1.1.0","includes_private":false,"index":{"0:58:1677":{"id":"0:58:1677","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:56153":{"id":"2:11332:56153","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48019:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64:1714":{"id":"0:64:1714","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:59902":{"id":"2:11412:59902","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5070":{"id":"5:5070","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4981:1344","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5071:60543","5:5072:2098","5:5075:60544","5:5078:60545","5:5086:60546","5:5087:60547","5:5088:2118","5:5089:54339","5:5090:54340"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11352:1763":{"id":"2:11352:1763","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12352:1933","self::pattern":"2:11021:2561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:58910":{"id":"2:11348:58910","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11347:58912"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50268:2563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:56195":{"id":"2:11425:56195","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12352:1933","self::pattern":"2:11021:2561"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:59892":{"id":"2:11341:59892","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2974:3007","str::slice_unchecked":"2:11340:59891","`str`":"1:12358:1938"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:131:409":{"id":"0:131:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11319":{"id":"2:11319","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10584:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11320:782","2:11321:1765","2:11322:59887","2:11323:59888","2:11325:59889","2:11328:53097","2:11329:59890","2:11330:306","2:11331:56157","2:11332:56153","2:11334:56154","2:11336:56155","2:11338:56156","2:11340:59891","2:11341:59892","2:11342:56178","2:11343:56179","2:11344:1752","2:11345:3319","2:11346:2063","2:11347:58912","2:11348:58910","2:11349:1893","2:11350:59893","2:11351:58906","2:11352:1763","2:11355:1895","2:11358:56194","2:11361:1894","2:11365:2472","2:11369:1766","2:11372:56187","2:11375:56189","2:11378:59894","2:11381:59895","2:11384:1898","2:11387:56192","2:11390:59896","2:11393:59897","2:11396:2018","2:11399:59898","2:11402:59899","2:11405:59900","2:11408:1772","2:11410:59901","2:11412:59902","2:11414:59903","2:11415:59904","2:11416:59905","2:11419:59906","2:11422:53152","2:11425:56195","2:11428:59907","2:11431:59908","2:11434:59909","2:11437:1904","2:11439:3675","2:11440:54341","2:11441:54342","2:11442:54343","2:11443:59910","2:11445:3010","2:11446:59911"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:28:383":{"id":"0:28:383","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:2561:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:58906":{"id":"2:11351:58906","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50277:2562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:54343":{"id":"2:11442:54343","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:59911":{"id":"2:11446:59911","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4451:59911"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50302:2574","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:56156":{"id":"2:11338:56156","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2499:1655":{"id":"2:2499:1655","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2473:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:56178":{"id":"2:11342:56178","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11343:56179"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:59909":{"id":"2:11434:59909","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:3010":{"id":"2:11445:3010","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4454:3010"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50293:2573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11408:1772":{"id":"2:11408:1772","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:86:126":{"id":"b:2:2506-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:126","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:71:1737":{"id":"0:71:1737","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:56192":{"id":"2:11387:56192","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933","str::splitn":"2:11384:1898"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50107:2581","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11369:1766":{"id":"2:11369:1766","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11375:56189","prim@char":"1:12352:1933","str::split_whitespace":"2:11347:58912","`DoubleEndedIterator`":"2:7061:119","self::pattern":"2:11021:2561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49985:2096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:86:126":{"id":"b:2:3304-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5078:60545":{"id":"5:5078:60545","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:123:1616":{"id":"b:2:2496-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:1655"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11443:59910":{"id":"2:11443:59910","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4453:59910"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50284:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11384:1898":{"id":"2:11384:1898","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11387:56192","prim@char":"1:12352:1933","self::pattern":"2:11021:2561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50089:2582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5088:2118":{"id":"5:5088:2118","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:86:126":{"id":"0:86:126","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2709:2261-0:86:126","a:2:7717:2944-0:86:126","a:2:2645:214-0:86:126","a:2:7718:2946-0:86:126","a:2:2659:222-0:86:126","b:2:2506-0:86:126","b:2:3304-0:86:126","b:2:2221-0:86:126","b:2:2496-0:86:126","b:2:2568-0:86:126","b:2:2224-0:86:126","b:2:2500-0:86:126","b:2:2511-0:86:126","b:5:5339-0:86:126","0:88","0:26","0:29"]}},"2:11381:59895":{"id":"2:11381:59895","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933","str::split":"2:11369:1766","str::split_terminator":"2:11378:59894"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50053:2583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:3675":{"id":"2:11439:3675","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5086:60546":{"id":"5:5086:60546","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:3319":{"id":"2:11345:3319","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12352:1933"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49961:2567","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11378:59894":{"id":"2:11378:59894","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11021:2561","str::rsplit_terminator":"2:11381:59895","`DoubleEndedIterator`":"2:7061:119","prim@char":"1:12352:1933","str::split":"2:11369:1766"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50035:2584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11328:53097":{"id":"2:11328:53097","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10589:1883"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:673:2529":{"id":"5:673:2529","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:11325:59889":{"id":"2:11325:59889","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11323:59888"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428:59907":{"id":"2:11428:59907","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12352:1933","self::pattern":"2:11021:2561"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334:56154":{"id":"2:11334:56154","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48019:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:59893":{"id":"2:11350:59893","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50249:2575","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:56155":{"id":"2:11336:56155","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2223:2002":{"id":"2:2223:2002","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:1893":{"id":"2:11349:1893","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50239:2097","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2261-0:86:126":{"id":"a:2:2709:2261-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:65:1719":{"id":"0:65:1719","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2261-0:123:1616":{"id":"a:2:2709:2261-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11437:1904":{"id":"2:11437:1904","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10983:125","`FromStr`":"2:10982:2161"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10982:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10982:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5075:60544":{"id":"5:5075:60544","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11320:782":{"id":"2:11320:782","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12352:1933"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11419:59906":{"id":"2:11419:59906","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:1616":{"id":"0:123:1616","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:2709:2261-0:123:1616","a:2:7717:2944-0:123:1616","a:2:2645:214-0:123:1616","a:2:7718:2946-0:123:1616","a:2:2659:222-0:123:1616","b:2:2506-0:123:1616","b:2:3304-0:123:1616","b:2:2221-0:123:1616","b:2:2496-0:123:1616","b:2:2224-0:123:1616","b:2:2500-0:123:1616","b:2:2511-0:123:1616","b:5:671-0:123:1616","0:130","0:132"]}},"2:11361:1894":{"id":"2:11361:1894","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12352:1933","`None`":"2:48019:173","self::pattern":"2:11021:2561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11422:53152":{"id":"2:11422:53152","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:123:1616":{"id":"b:2:2224-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:53093"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:70:1733":{"id":"0:70:1733","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:123:1616":{"id":"b:2:2511-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:126","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":{"restricted":{"parent":"0:20:1604","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8581:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2500-0:123:1616":{"id":"b:2:2500-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3306:1432":{"id":"2:3306:1432","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46490:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2570:2539":{"id":"2:2570:2539","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3365:2813","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:1647":{"id":"0:54:1647","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["dir",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5390:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11396:2018":{"id":"2:11396:2018","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933","str::matches":"2:11396:2018","`DoubleEndedIterator`":"2:7061:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50189:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:59904":{"id":"2:11415:59904","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1724":{"id":"0:67:1724","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:86:126":{"id":"b:2:2224-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:53093"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11375:56189":{"id":"2:11375:56189","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11021:2561","`DoubleEndedIterator`":"2:7061:119","str::split":"2:11369:1766","prim@char":"1:12352:1933"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50003:2580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:1745":{"id":"0:74:1745","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:123:1616":{"id":"a:2:2645:214-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:68:1728":{"id":"0:68:1728","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11372:56187":{"id":"2:11372:56187","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12352:1933","self::pattern":"2:11021:2561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10845:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:674:2530":{"id":"5:674:2530","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5339-0:86:126":{"id":"b:5:5339-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8581:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5337:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5341:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11330:306":{"id":"2:11330:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12369:1947","str::as_mut_ptr":"2:11331:56157"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:908","0:54:1647","0:57:1672","0:58:1677","0:62:1706","0:63:1709","0:64:1714","0:65:1719","0:66:1721","0:67:1724","0:68:1728","0:69:1730","0:70:1733","0:71:1737","0:72:1739","0:73:1742","0:74:1745","0:75:1748","0:76:1751"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7718:2946-0:123:1616":{"id":"a:2:7718:2946-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:675:2531":{"id":"5:675:2531","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1709":{"id":"0:63:1709","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1623":{"id":"0:48:1623","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:123:1616":{"id":"b:2:2506-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:126","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11322:59887":{"id":"2:11322:59887","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2946-0:86:126":{"id":"a:2:7718:2946-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:2221-0:123:1616":{"id":"b:2:2221-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2002"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5090:54340":{"id":"5:5090:54340","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11442:54343"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:59908":{"id":"2:11431:59908","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:1706":{"id":"0:62:1706","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5072:2098":{"id":"5:5072:2098","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:2472":{"id":"2:11365:2472","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48019:173","prim@char":"1:12352:1933","self::pattern":"2:11021:2561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:908":{"id":"0:53:908","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:59905":{"id":"2:11416:59905","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11046:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27:1874":{"id":"0:27:1874","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11393:59897":{"id":"2:11393:59897","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1751":{"id":"0:76:1751","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11323:59888":{"id":"2:11323:59888","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7717:2944-0:123:1616":{"id":"a:2:7717:2944-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2944","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11347:58912":{"id":"2:11347:58912","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11348:58910"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50259:2565","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5087:60547":{"id":"5:5087:60547","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2268","`String`":"5:6955:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6700:3041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1748":{"id":"0:75:1748","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:1895":{"id":"2:11355:1895","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:56194":{"id":"2:11358:56194","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11321:1765":{"id":"2:11321:1765","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11331:56157":{"id":"2:11331:56157","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12369:1947"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:30:650":{"id":"0:30:650","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:49059:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2515:1418":{"id":"2:2515:1418","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:86:126":{"id":"a:2:2659:222-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:49:1630":{"id":"0:49:1630","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1742":{"id":"0:73:1742","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:123:1616":{"id":"b:5:671-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:2529","5:674:2530","5:675:2531"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2568-0:86:126":{"id":"b:2:2568-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2561:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3353:2814","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:2539"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:11410:59901":{"id":"2:11410:59901","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2510:1419":{"id":"2:2510:1419","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5071:60543":{"id":"5:5071:60543","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6700:3041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6700:3041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:86:126":{"id":"b:2:2500-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:57:1672":{"id":"0:57:1672","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:1398":{"id":"5:5341:1398","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:59903":{"id":"2:11414:59903","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2502:668":{"id":"2:2502:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:54342":{"id":"2:11441:54342","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11402:59899":{"id":"2:11402:59899","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:12352:1933","str::rmatch_indices":"2:11405:59900","`DoubleEndedIterator`":"2:7061:119","self::pattern":"2:11021:2561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50135:2576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72:1739":{"id":"0:72:1739","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2509:126":{"id":"2:2509:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:89:650":{"id":"0:89:650","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8536:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8525:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:56179":{"id":"2:11343:56179","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11342:56178"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:54341":{"id":"2:11440:54341","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2514:126":{"id":"2:2514:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39262:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11329:59890":{"id":"2:11329:59890","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:86:126":{"id":"b:2:2496-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:1655"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":{"restricted":{"parent":"0:20:1604","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2659:222-0:123:1616":{"id":"a:2:2659:222-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"error::Error","name":"Error","id":"0:86:126","glob":false}},"2:11390:59896":{"id":"2:11390:59896","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:86:126":{"id":"b:2:2511-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:126","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5089:54339":{"id":"5:5089:54339","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11441:54342"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66:1721":{"id":"0:66:1721","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50:1636":{"id":"0:50:1636","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:59900":{"id":"2:11405:59900","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11402:59899","`DoubleEndedIterator`":"2:7061:119","prim@char":"1:12352:1933","self::pattern":"2:11021:2561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50153:2577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11399:59898":{"id":"2:11399:59898","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11021:2561","prim@char":"1:12352:1933","str::matches":"2:11396:2018","`DoubleEndedIterator`":"2:7061:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50207:2579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:59891":{"id":"2:11340:59891","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:11341:59892","crate::ops::Index":"2:2970:2996","`str`":"1:12358:1938"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:86:126":{"id":"a:2:2645:214-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11344:1752":{"id":"2:11344:1752","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12352:1933"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49955:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:908":{"id":"0:51:908","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:123:1616":{"id":"b:2:3304-0:123:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2226:53093":{"id":"2:2226:53093","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1730":{"id":"0:69:1730","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:86:126":{"id":"b:2:2221-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2002"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1774":{"id":"0:0:1774","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:35","0:123:1616","0:48:1623","0:49:1630","0:50:1636","0:51:908"],"is_stripped":false}},"a:2:7717:2944-0:86:126":{"id":"a:2:7717:2944-0:86:126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2944","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:11346:2063":{"id":"2:11346:2063","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49971:2094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":{"restricted":{"parent":"0:20:1604","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","source","description","cause","provide"],"trait":{"name":"Error","id":"2:2561:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1874","0:28:383"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:133:650":{"id":"0:133:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8536:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8525:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"12:274:6001":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:12363:1941":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:51710:3429":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2810:3017":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:49943:2571":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13039:5501":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:4879:5713":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10221:7439":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:8210:1873":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:2548:4368":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8688:3200":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:21822:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:62:38935":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:2647:2109":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3891:2076":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"12:2184:6005":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:96:52927":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4592:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:681:4607":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"12:60:60783":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5495:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:6932:2042":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:4968:2822":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1120:2991":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:46483:3374":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:4740:5709":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:4432:5700":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8517:7289":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21657:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:6724:2866":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4505:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:6133:4710":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:46407:195":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:6294:3710":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:6987:3094":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10088:4949":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4013:3188":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12022:5216":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:10705:1610":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7461:4094":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10642:4558":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:2725:59885":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10921:4986":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11485:5114":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8724:6850":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:46908:3365":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7430:192":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"14:31:7471":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11335:53304":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:12367:1945":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:8418:4497":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:39298:3776":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:12148:5233":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:545:6125":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:915:2978":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:49803:3055":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:53001:3407":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"12:2198:6007":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5538:6709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:9592:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:3254:5684":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12730:5427":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:7965:3776":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:7215:4182":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:53994:7215":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:47540:7135":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13231:5554":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:7720:4984":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10845:4552":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:5436:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12926:5476":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:5819:2181":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:3466:54068":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:4248:3488":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11617:5139":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:6434:7504":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:9350:4568":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:5592:4338":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:12371:1949":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:7887:4101":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:766:4614":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:0:1915":{"crate_id":17,"path":["object"],"kind":"module"},"12:1866:2870":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:4318:5696":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"0:49:1630":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"1:10927:2111":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:1678:6280":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:50708:3520":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:3599:2477":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:1931:4446":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4467:6474":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"7:32:44097":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:21789:2547":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:2432:2922":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13492:5639":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:6797:58941":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:6977:3750":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13071:5509":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:6382:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:8106:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9283:7422":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:10559:3669":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8425:2097":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:542:3151":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:3179:5683":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:50942:3527":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4662:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11164:7323":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:448:3132":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:49895:3062":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:7879:3139":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:582:2405":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4615:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"12:2178:6004":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:50189:2578":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:8941:7413":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4369:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"12:1138:2991":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11212:2087":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:3457:1608":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"19:0:991":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:7853:3137":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11330:5079":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:51666:7153":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11800:5165":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8929:2151":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6164:4084":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:8526:1608":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2645:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:50950:3528":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:6809:2201":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5597:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:11021:2561":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:9738:4518":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9501:4460":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4530:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:7049:3704":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:2402:4384":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:2380:4361":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11500:5118":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10670:4555":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:1964:2534":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:6225:200":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:48068:2476":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"12:2205:2159":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:12265:5257":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:7202:6999":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12909:5471":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:29312:2543":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:21954:163":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:12353:1934":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:5974:4158":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6178:4163":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9885:7431":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6248:4085":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8945:2154":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:7934:4096":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6101:4082":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:9456:2951":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:10332:4592":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:9658:7427":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10360:4585":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5356:6603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:1021:4570":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12211:5251":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6337:4168":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:2734:59416":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:11637:58396":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:8393:4484":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:2652:2260":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:2900:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5654:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:52141:3423":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8628:3190":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:46490:2815":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"18:652:4800":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4350:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12934:5479":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1088:2988":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:707:2557":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4408:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:47113:3087":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9700:4514":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13007:5492":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6322:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:9336:2923":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:3249:4501":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:1861:2671":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2223:1605":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:5877:2924":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10207:7435":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:6715:3791":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:5941:2866":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4644:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7113:4360":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7256:4185":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9504:7515":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:51778:3397":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:53967:3393":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7825:4193":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10682:4556":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:11735:7335":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:11559:7328":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:9778:4517":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:575:6142":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:736:4612":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:8608:2963":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"9:920:3818":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:20276:2917":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:24:592":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:10608:4435":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2757:2850":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"12:1044:3981":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"12:1085:3983":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:2795:2875":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:524:4340":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:6265:3708":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2771:2857":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5113:5715":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:4597:5704":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6632:4175":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6354:4169":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:20402:2820":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:6451:4728":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12164:5237":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:521:4732":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"12:738:2979":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10403:4430":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:7179:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:46852:3656":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9764:4913":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:10810:3510":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:50788:3595":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"9:592:3861":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:52111:3419":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11199:5042":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:1555:3997":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:20435:3261":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:2935:2152":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"12:300:3988":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:20407:15607":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:4714:2205":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:967:7410":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:36:3703":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13572:5658":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:38089:177":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:6732:3792":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:20245:3263":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:1551:2076":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:47284:3106":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:7139:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:47216:3102":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:11973:7339":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:10377:3202":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:50712:3519":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11893:5176":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:54040:7219":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"12:1628:4708":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11141:7315":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:20323:3261":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:29606:3568":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:52287:3403":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:49971:2094":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8779:13744":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:8475:4439":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"14:0:1912":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:2918:2264":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"9:896:3821":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:3017:4817":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:2470:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:1654:6263":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:51911:3410":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:4253:5694":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7850:4100":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:1562:6197":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10744:1611":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:3140:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:6209:2924":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:6549:3478":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:11578:2885":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:7920:4195":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3939:3437":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:6129:4736":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:48017:175":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:3081:2123":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:6633:7505":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:8752:2094":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:8295:46525":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10721:4983":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11646:7329":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:2916:4489":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:56922:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1636:6251":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:495:6094":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10385:4528":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:11603:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13436:5631":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:9805:4572":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:3623:5688":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:6770:3681":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12781:5443":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:1580:6207":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8374:2089":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:11999:4013":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:7061:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:658:2535":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6265:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:5500:184":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:10575:3671":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:6919:2041":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5870:200":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2596:4420":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:6807:4401":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:54142:7225":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6451:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:49301:7143":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:1601:2152":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:11026:2555":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:48330:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:56987:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5695:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:2830:3027":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8089:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:12365:1943":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:9474:53153":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2561:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:771:3789":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6888:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:5390:185":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:2730:59417":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:48292:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6182:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:8583:2427":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:9382:2928":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5640:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:1394:2980":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:9350:2926":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:21313:58054":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:8596:4899":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:47248:3104":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:52018:7157":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:9292:2177":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13031:5500":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:9517:4179":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:11046:2554":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4210:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:1928:1604":{"crate_id":1,"path":["std","error"],"kind":"module"},"5:1404:2981":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:21888:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11708:7333":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6305:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:646:39336":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:47258:3105":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:7138:154":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46769:3361":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13557:5657":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9165:60797":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:624:60802":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:48756:2428":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:47485:7130":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:6502:3082":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11997:5212":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2478:4366":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:14:2021":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:4348:5697":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5662:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4325:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5774:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9362:4462":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:3680:5689":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3472:3797":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4630:6553":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:5365:4083":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:47207:3101":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:48482:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:6416:2485":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11436:5089":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3228:2116":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12739:5431":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:4565:5703":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:3001:4376":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"12:1872:2871":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"15:175:4004":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:5007:2828":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:48204:2152":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10233:7440":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13413:5618":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:6775:2215":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:276:2268":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:4072:3481":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:567:6137":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:5605:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10506:4965":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:3353:2814":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:5417:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13340:5598":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:29712:3569":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:3310:2103":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12797:5446":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:6834:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11661:5147":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6713:4106":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8622:3189":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4460:3209":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11326:2821":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:8110:46520":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:9873:7430":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2268:182":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11186:5041":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:47519:4730":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:21224:2544":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13168:5538":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:2805:2877":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8054:2699":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7266:4186":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11106:5030":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:3548:4710":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6323:4088":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4300:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:6749:2120":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11137:5034":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:2019:59488":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:46922:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8059:2701":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11853:5172":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:9616:2721":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:4867:4710":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4113:3195":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:53185:3413":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3482:2091":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:9577:4453":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:2273:4348":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1500:6164":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12337:4552":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:20842:2918":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:5574:4146":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8887:2150":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:12334:53311":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:1671:1047":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:6702:2219":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"10:0:1909":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:20026:59075":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7140:4745":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:47197:3100":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:47174:3098":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2659:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:1738:6301":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4652:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4245:6411":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:7788:4748":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7037:3580":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:9539:4447":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:50277:2562":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:2253:2085":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:11954:2909":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10490:4964":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:3529:2867":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:6328:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5500:6681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:5816:2180":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:20005:59080":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7637:4081":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:609:7404":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:54025:7218":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:8441:4553":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:49714:3505":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:6674:2212":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6037:4364":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:247:7407":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:12374:1952":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:12366:1944":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46868:2572":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9031:60796":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:3393:5685":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:21723:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:6983:3095":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3265:2111":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6413:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:1385:2979":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11315:5073":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:9531:53307":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:562:4984":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:47032:3042":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4156:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:9947:46715":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:5758:4152":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:487:6089":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9263:7420":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4195:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:11092:3295":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13047:5502":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:113:52928":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2674:4369":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:6006:2208":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6124:4132":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:8666:4901":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12087:5224":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6188:4164":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:554:6131":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2653:2596":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:4536:5702":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:9897:7432":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:53721:3405":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:50433:3300":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11639:5146":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:51880:7155":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:11832:2951":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:3302:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:5472:4141":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:11741:7336":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"12:646:2607":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4730:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:50268:2563":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4498:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:716:10507":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:9844:4576":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:4834:2836":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:6762:192":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13374:5610":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3460:2110":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:4206:2819":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12033:5217":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1102:2989":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11235:5051":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5756:1611":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4332:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13354:5604":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:19973:59019":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"12:1120:3984":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4714:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7162:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:50776:2888":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12008:5214":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11547:5130":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:4953:4717":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"5:6754:2477":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10949:4990":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:8525:204":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"5:3350:2607":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:4498:198":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:9328:4566":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:3188:2113":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4288:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2648:4379":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7843:53599":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:4552:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:9722:1613":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:9118:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1376:2978":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46889:3659":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"12:98:3985":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12073:5221":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4202:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:56909:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7404:4109":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:699:4609":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:52333:3388":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6450:4002":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:50704:3518":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:5687:2175":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7948:4097":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:8595:2432":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10796:4549":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"13:220:6000":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12972:5486":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:1635:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4486:6486":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:564:4621":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7189:4075":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7489:4064":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4073:6308":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2238:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12630:5390":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:1518:6172":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4150:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:8576:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2480:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:5653:2173":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11368:5087":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11528:5125":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6474:4171":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:1511:6169":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12884:5462":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:2726:7002":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11594:5136":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4569:6529":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"12:853:2986":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"12:353:3986":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:46385:196":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:20685:3264":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:53643:3421":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2310:183":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:29506:2973":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7535:4087":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:595:2839":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9831:4575":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:48996:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5646:6761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:5178:3708":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10583:4432":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:5787:15819":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9061:4462":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7335:4105":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6545:4102":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:1595:6219":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:21297:58060":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11576:5135":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:11787:5163":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9371:7416":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:481:4616":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"15:193:4005":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:987:2985":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:5443:3091":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"12:1518:3995":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:2800:2876":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11429:4753":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:8561:4511":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1884:2678":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13126:5527":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:29548:3567":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:46785:3363":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11878:3188":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:80:52926":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:1216:2989":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"0:123:1616":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"11:0:1910":{"crate_id":11,"path":["adler"],"kind":"module"},"1:2583:4734":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:10185:4731":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:3150:3173":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:50899:205":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:20220:3436":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13141:5531":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8395:2092":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:12318:54485":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:51840:3418":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5626:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6115:4080":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4251:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11761:5160":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:7411:2608":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:2826:3025":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:2473:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:4258:2899":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:6791:2477":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:2763:2853":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"12:0:1911":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:4308:2901":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:21756:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:50545:3303":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:1643:6255":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1668:6274":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12609:5380":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:5313:7503":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9751:4516":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:54104:7223":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6139:4162":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:897:2607":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4264:2900":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:11322:2673":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:420:4052":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2664:2446":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:46748:7115":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:1033:59882":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:29472:3353":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:48102:3580":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8670:2943":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:9434:3067":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1887:40311":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:4242:2897":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11815:2966":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:10921:2113":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11125:5031":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:3721:2866":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11222:53481":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11723:7507":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:51862:3422":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10997:5005":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4265:6421":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:5856:4156":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11034:5018":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:5789:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:50700:3515":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:9597:2885":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6206:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:6778:2216":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9193:60800":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6242:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12369:1947":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:12368:1946":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:2724:2529":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:12176:5239":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:7938:2992":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:50387:3293":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:9317:4565":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:46742:2573":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:50992:3125":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2887:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"12:1065:3982":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:8241:4554":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2984:4377":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:49029:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:21363:1880":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:1359:2477":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12756:5433":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:2822:3023":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5438:4139":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:52477:7165":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:49955:2568":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:7098:7696":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4546:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1348:2607":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:3326:157":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11435:4754":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:8494:4897":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:12323:10508":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:10734:3507":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:3448:4821":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:11616:32387":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3190:2114":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3151:3079":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11054:5019":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:1714:6293":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:7127:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:4186:3483":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:10982:2161":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:999:2987":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:7408:2160":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:49544:3045":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:50732:3517":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"12:2190:60788":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:6068:2218":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:10845:2564":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7022:4356":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3270:1607":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"2:51686:7154":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7374:4191":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:1903:46610":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:50089:2582":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7581:4110":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9691:4515":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4672:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:5490:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"12:387:60784":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:1771:4452":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:50728:3516":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:52971:3404":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:4510:5701":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11559:5132":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:0:787":{"crate_id":6,"path":["libc"],"kind":"module"},"1:4900:6861":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:11247:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:1701:6290":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:599:60803":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:8881:60792":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6441:4170":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:11721:5155":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3130:3572":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:2273:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:7868:4099":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:8536:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2332:4383":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:4902:6863":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9183:7418":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:21349:2545":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"14:165:44830":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:5831:3093":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:3418:2086":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:46955:3578":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11514:53479":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"3:223:204":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7133:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11684:5151":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4288:5695":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3475:2088":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"9:111:3878":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:10875:4495":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9422:7424":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:5337:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3145:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1201:2990":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"0:0:1774":{"crate_id":0,"path":["autocfg"],"kind":"module"},"2:4658:2058":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:6030:4161":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:1824:2949":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:2696:4370":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:513:6102":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:5987:4710":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1886:2679":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5518:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:48596:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:21259:7028":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:1617:2868":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:21690:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:5009:2829":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4338:6457":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4808:5711":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:2500:4378":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:8055:4426":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:11664:186":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:6059:2477":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11899:3195":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5927:4157":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:21855:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4707:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:939:4710":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:1943:3680":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4306:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:50416:3299":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:571:3156":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:501:6097":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"9:505:3809":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:49985:2096":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:11146:7317":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4736:6599":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:6422:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12874:5461":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:6844:2159":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6294:4112":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:8991:60798":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:12351:1932":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:4705:768":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:47233:3103":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12322:5265":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:21251:7027":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:560:6134":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:46846:2573":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:7822:2555":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:0:1914":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:5681:4149":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13594:5664":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:8339:46526":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5508:6686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:675:7496":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1525:6174":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:3400:2084":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21342:7039":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:907:2477":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7144:4181":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:7033:2267":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:777:3980":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:9497:7514":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13279:5591":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:5210:4898":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:5941:188":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:0:1906":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8362:2087":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:6489:2924":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"14:40:5005":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:884:2152":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:9328:2152":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50720:3521":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:52689:3420":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:1759:3615":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9857:4500":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:56948:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21276:58052":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:49340:7147":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:2968:2870":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:4421:3236":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:56974:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:7415:3074":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:7718:2946":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:3986:2948":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"12:1836:2477":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:56935:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13158:5535":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:52531:7167":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9118:60791":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9306:2178":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11813:5167":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:4303:3489":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:7024:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7521:4086":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:1550:6188":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:47103:3086":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46799:3660":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:538:4620":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6794:4400":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4563:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:2250:2704":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:2465:3772":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:676:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:951:2867":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:5175:44903":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:50402:3296":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8573:2943":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:2834:3029":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:21147:7017":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:12237:5253":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:8956:2155":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"12:393:60785":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:9357:2564":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11974:5211":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2970:2996":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10182:4952":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4432:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:10500:54793":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:11741:58397":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:8309:3492":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12361:5275":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:46510:4128":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:50107:2581":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46939:3577":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51941:3398":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"14:221:5955":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:8799:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:3751:4710":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10854:4512":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:8796:4436":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:20233:2820":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8682:3238":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:53985:7214":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9274:7421":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6012:4160":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:5526:3740":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:54119:7224":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:49020:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:3002:2871":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:19960:2405":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:614:60804":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10455:4587":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4576:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6820:5788":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:9414:2930":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:4626:5705":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8596:2962":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:50293:2573":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:5739:4151":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4171:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4511:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:9576:3066":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4740:2822":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:1623:2869":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:7717:2944":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:8631:4900":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:9155:7417":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12514:5297":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:4399:3234":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:12006:4013":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12816:5447":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:36:6010":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"14:202:3752":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"12:985:2988":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:10794:3509":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13082:5513":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:6426:4722":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:6537:200":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:4177:201":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:9396:3057":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:7283:55964":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:8871:7412":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:5598:2076":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11734:4922":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4250:2898":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:50365:3292":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:49840:3042":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:2976:2868":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:47299:3096":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:4712:5708":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4429:3237":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:2424:4362":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11757:4757":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:20282:2919":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:7156:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1185:2988":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2746:2845":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:46341:192":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:54181:7226":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:21200:7022":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11693:7332":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:48229:177":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:9401:4911":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:7071:4180":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6337:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13459:5632":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:20194:3375":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:52925:3400":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:2718:4371":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:50580:3306":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12955:5483":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:8034:4065":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11149:5035":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:970:2983":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"0:48:1623":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"1:4312:2902":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:47492:2211":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:2885:4381":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:46263:3330":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:2476:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:6230:4166":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:12370:1948":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:3156:3175":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:52430:7164":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8412:2094":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"7:0:1483":{"crate_id":7,"path":["unwind"],"kind":"module"},"8:0:1907":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:49866:3060":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4067:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:4355:2444":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2833:4346":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:7945:2666":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:5510:2205":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5411:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:47002:2060":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4581:3206":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4278:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:8313:2124":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"9:800:6061":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:5401:2866":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:12372:1950":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:4332:2256":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:2657:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6768:4177":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:4009:4712":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:50570:3305":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5995:4159":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:8729:7488":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:10863:4751":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:49875:3063":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:50716:3523":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:2467:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:7615:4098":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5467:6668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:47529:7133":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"12:697:2982":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6437:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:49793:3054":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8122:2108":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:12350:1931":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:5450:4140":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:48153:187":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:50889:199":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:1608:2866":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:6597:160":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9437:2210":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:51732:3417":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:49318:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:21184:7019":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6682:4104":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3792:2607":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4123:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6219:4165":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:6872:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:3845:5691":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:6955:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:9601:4451":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6721:4176":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:2456:4389":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4762:2935":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:9469:2580":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:3067:3571":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10374:4527":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4086:6317":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11014:5008":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13536:5654":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:52065:3431":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"14:215:5953":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:9590:3065":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:50736:3593":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:8526:4531":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:2396:2712":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4218:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"14:160:7471":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7958:4129":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11247:5054":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:2622:4380":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4317:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5194:4897":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5423:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"12:751:2866":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:12377:1955":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:39311:2599":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:9458:4425":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2215:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:20007:59078":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"13:108:60789":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5999:2207":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:10108:3059":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:454:3133":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:4679:58420":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:5610:58702":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:320:3987":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6149:4133":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:46829:3655":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:5060:2830":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:242:7406":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6458:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11087:5025":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2974:3007":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"9:709:2148":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:5959:4344":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4208:5693":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7287:4188":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:49774:3052":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:8848:2874":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9280:180":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:5673:2174":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2921:2265":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:6966:3749":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:49309:2913":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:11842:3529":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:8212:4550":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:4653:3207":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1584:4710":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:4312:2443":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9382:4909":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8471:2957":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10108:4492":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:48598:1612":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"2:50963:155":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10283:7444":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:3963:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:1686:6281":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:48077:2152":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:9930:4917":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3590:2959":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:49133:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"12:822:2984":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:5519:4144":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1600:6221":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11418:4752":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:50559:3304":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:50481:3301":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13327:5592":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8418:2096":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:8951:60793":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2864:3006":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5748:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:9507:3064":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2775:2859":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:8633:3191":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13176:5539":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:49540:3673":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11828:5170":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:12194:4758":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4135:5692":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:9320:2179":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9820:4573":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:47062:2092":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10497:46788":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:9582:161":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11522:3593":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8049:2698":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8205:3004":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:9712:4912":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8431:150":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"17:9293:4569":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5402:4137":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10310:7446":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:632:2152":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:53929:3428":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"12:815:2983":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:50053:2583":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:2952:3329":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"12:725:2978":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:39262:2182":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"12:1534:3996":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2141:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:5005:2826":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:22386:2541":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:47084:3084":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3226:2115":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8353:2122":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:8579:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:12860:5460":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"12:762:2867":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:6262:4095":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:8368:4429":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:8591:188":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:6856:2995":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"12:1845:2867":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:52379:3392":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6224:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4477:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2709:2261":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:941:2866":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11343:5083":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:11041:2556":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:2406:2717":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"9:188:3886":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"12:810:2980":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:2740:4372":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5754:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:683:10506":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:1707:3201":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11606:5138":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:49047:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:4165:1871":{"crate_id":1,"path":["std","num"],"kind":"module"},"2:2431:2820":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:48220:2477":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:53533:3401":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:6903:3577":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4298:2896":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9644:4444":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13393:5615":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4177:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:52257:3399":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:51756:3409":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12748:5432":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2921:4068":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:52847:3412":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9021:7415":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"9:33:3911":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:9223:46572":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13114:5524":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:9303:4460":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:8911:60799":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"12:2069:2989":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:8981:7414":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:11353:2179":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2464:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:7350:4407":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12768:5438":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:3365:2813":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:52000:3387":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:2218:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"9:19:3910":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:1750:7008":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:47145:3089":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:50593:2585":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:1574:6205":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:20690:15625":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4446:6473":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:6596:3075":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:47053:3081":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:4912:5714":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:531:4619":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10520:4968":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6571:4173":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4398:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2898:204":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:13059:5508":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:7192:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:5165:2940":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:1608:6226":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:5873:4722":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"12:2080:2990":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:2039:3769":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4388:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:215:3748":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1629:2870":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:8137:46524":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6855:4178":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2779:2861":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:1049:3767":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12225:5252":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"12:1681:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:3590:5687":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12836:5455":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:2291:4390":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9888:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5393:6629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8130:2110":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:7079:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11300:5067":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12103:5226":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13148:5532":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46927:2044":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:12359:1939":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8488:2958":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:46517:7494":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:7321:4092":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:966:2982":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13214:5547":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13382:5611":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10350:4428":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6308:4736":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"2:20950:3262":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10625:4437":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"9:676:3908":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:4039:2076":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:2244:3773":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11873:5175":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:2788:3012":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:47510:2121":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:20433:3385":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:2510:2106":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9274:2176":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:2767:2855":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"14:187:44836":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:4653:5706":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4522:6503":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:5567:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:7221:3184":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:51810:3430":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:48093:2477":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:7731:7525":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2394:2711":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:7928:2879":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:39302:2812":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:6866:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:21624:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12980:5488":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:20274:2820":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:3157:3277":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"12:834:2985":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12695:5426":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4097:6325":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2696:2598":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:8114:3167":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:51981:7156":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7961:2673":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:8510:4898":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:12352:1933":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:3167:3373":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:19988:59019":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:48444:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:47075:3083":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:11873:199":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:12291:5259":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10434:4959":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7095:4359":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:10771:3508":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8939:2152":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:3182:3290":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:6386:3529":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:1823:2660":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4257:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10159:4951":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8797:2138":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4420:6471":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:9369:2927":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4582:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:4071:4712":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:4162:6371":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3343:2121":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10245:7441":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:12060:5220":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:4181:3482":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"13:0:1905":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7832:3128":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:7992:4128":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7276:4187":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:771:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:12375:1953":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:1971:3770":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:21375:2548":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:9265:2152":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:5793:4154":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:5536:4145":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:4404:5699":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10321:4584":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:11541:2721":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:4501:3197":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:962:2981":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13100:5517":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5385:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:48212:2607":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"9:649:3863":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:50003:2580":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:5715:4150":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6495:4001":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:4010:3187":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:1680:2867":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:1634:2871":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:10075:3058":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"15:214:4009":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:49348:7148":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:49014:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:48161:204":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:8587:2429":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12251:5254":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:2947:3677":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2784:4375":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:6215:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10296:7445":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13580:5661":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:11202:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13404:5616":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:3951:3438":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"12:1003:2989":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46429:197":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:46821:2574":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:5606:4147":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:678:7498":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10270:7443":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6894:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:515:4618":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:48135:3582":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:0:1336":{"crate_id":1,"path":["std"],"kind":"module"},"17:10121:4493":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5481:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:8589:2430":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:50755:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5447:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:8304:3491":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:6284:3709":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:47131:7126":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:842:3790":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:50907:189":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:1695:6287":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6361:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:50239:2097":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:52735:3424":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10894:4494":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13221:5549":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:47183:3099":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:8585:2428":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:3897:2152":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6759:4103":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:48558:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:50613:2586":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:48254:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11536:5127":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:5174:3120":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2547:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:21987:2546":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:11996:2412":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:48777:2430":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5585:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11630:4755":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:48520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:48085:2607":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6087:4108":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"12:1029:2990":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:8593:2431":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:4042:3480":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"12:1859:2869":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:8701:4902":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12307:5261":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"9:382:3814":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:4405:650":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:976:2984":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:10708:4551":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7803:4192":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:4967:4720":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"18:491:4799":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:52355:3391":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:487:7409":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:1736:3616":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:48770:2429":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"9:622:3862":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:7121:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:3125:7411":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:4112:2441":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:5083:2825":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:153:4072":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:47122:3088":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13134:5530":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:2981:3678":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4890:2900":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3994:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:46310:3339":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:6740:59470":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:9635:2886":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"9:0:1908":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:719:4610":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12278:5258":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:53783:3425":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5642:4148":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:53845:3390":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6485:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:11035:2557":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8720:2823":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11841:5171":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:521:4615":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:54066:7221":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5612:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7475:4089":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:1541:6182":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:4981:1344":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"6:5633:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9289:2607":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:12358:1938":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:9446:7426":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:993:2986":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11748:5159":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:6709:2477":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:53391:3433":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:4593:2076":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:1933:3151":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4904:6865":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6597:4174":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:1230:2991":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:9548:2582":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:2783:2863":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6467:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9909:4915":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2526:4367":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11708:5152":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6048:4074":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:4965:2824":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13203:5546":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:4840:5712":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:10636:2184":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:46365:193":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:51963:3402":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"14:7:7471":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7245:4184":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10139:4462":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:3267:2112":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:9451:7511":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:50508:3302":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6654:4090":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:644:4800":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:50302:2574":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:8813:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:2252:4349":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13024:5499":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6288:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:8847:2148":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:50249:2575":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:11502:2178":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:7858:3154":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:727:4611":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:1111:2990":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7545:4113":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:52508:7166":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:9344:2477":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:7307:4190":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:1642:3351":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11356:5084":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:6869:7505":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:49929:1881":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9701:2678":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:12948:5481":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:7831:2820":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9553:4462":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:3557:5686":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:6889:2043":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:5226:5716":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:4516:3652":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10445:4552":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:9631:4445":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:21094:3545":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:52611:3432":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8560:3231":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:2570:4419":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:4911:2559":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11176:2702":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:21921:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4536:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:49885:3061":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10528:4548":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9627:4458":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11271:5056":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10752:4430":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:2762:4373":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8454:2956":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"12:444:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:54005:7216":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:21236:3450":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4110:6335":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:53891:3408":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:50153:2577":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:9791:4914":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2026:178":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:3219:3291":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5424:4138":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2900:2099":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:50207:2579":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2839:3032":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:12362:1940":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:2023:179":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:9398:2929":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:9562:2581":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:49961:2567":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"7:79:44104":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2607:2100":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12355:1935":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:2751:2847":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:49293:2914":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:586:6147":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"12:659:2477":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"9:863:3819":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:47501:7131":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:20948:2820":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:8581:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:4320:2904":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11490:2177":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:12364:1942":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:10481:2671":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:50724:3522":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:3707:5690":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:50135:2576":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:47154:3097":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:48368:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:52309:3406":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:48144:38564":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:600:6155":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:581:6145":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9526:4448":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6308:4167":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:54051:7220":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:20157:3258":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:10589:1883":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:48406:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:12357:1937":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12356:1936":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"18:507:4800":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:5344:7503":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"0:50:1636":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"1:2247:2700":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11259:5055":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:10722:56122":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:3153:3174":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:38106:2405":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:5223:13743":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:8146:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10973:5004":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:4915:2560":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:58262:7233":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:4624:6551":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"12:1852:2868":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6235:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:2942:2869":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:46882:3658":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11130:2832":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:4212:2818":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:608:6160":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:9462:3155":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13366:5607":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:8774:4427":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:52765:3427":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:1722:6297":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:9108:2820":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12046:5219":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:6343:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:5488:4142":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:48634:2206":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10420:4586":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"9:586:3859":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:49117:2426":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:5685:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:54014:7217":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12617:5383":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:4258:2442":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:1415:2982":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"9:977:3822":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:620:7476":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12964:5484":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12550:5328":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:9897:4750":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:3337:2152":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2859:4347":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:507:6100":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:2053:2988":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11838:3187":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:47269:2093":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:660:4605":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7297:4189":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8696:3189":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5817:4155":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:410:4757":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:10966:3139":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12198:5250":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:1962:4513":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:6797:2477":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2245:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2915:2263":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2311:4067":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11955:7338":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11217:5050":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:46875:3657":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:8141:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8076:2703":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"0:51:908":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"2:53035:3389":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12638:5391":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:2816:4374":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:7032:2867":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:8405:2093":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:1426:192":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:9488:4449":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:12376:1954":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3949:2964":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10075:7434":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4271:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13192:5542":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:50259:2565":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2722:2600":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"12:1832:2152":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:7366:4107":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:574:4800":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:5884:2925":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11174:5040":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:2573:2107":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:9314:2096":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:11288:5064":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:7907:10503":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:690:4608":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46524:2442":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:29512:3354":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:1612:2867":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:386:7408":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:47012:2059":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:539:6122":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:4:976":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"12:861:2987":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:1918:2950":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6911:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"15:0:1913":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:519:6105":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:49765:3053":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:7207:3183":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:4724:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:0:1916":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7413:4125":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7907:4194":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:671:4606":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:9552:7314":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:9509:7516":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:50980:3127":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:7084:2266":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10774:4428":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"9:827:3816":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:7719:2947":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10257:7442":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:3094:2867":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:135:39002":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:49081:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:1825:2661":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:131:39001":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8066:2702":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4228:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46809:3661":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:592:6150":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:46569:3270":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:56961:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6700:3041":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:10820:2176":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4450:3240":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:928:2979":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:10924:2115":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:6670:2211":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11909:5181":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12674:5421":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7447:4093":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13478:5637":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5701:1610":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:9433:7425":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6506:4172":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11161:5038":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2358:4365":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6843:4403":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:52211:3411":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"12:119:3989":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:957:2980":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:636:4811":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12896:5465":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5573:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13527:5652":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10822:46528":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4636:6556":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:590:4802":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:1338:2152":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:46325:194":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9895:2699":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:7769:4746":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10550:2954":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:2656:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4183:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7227:4183":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:49814:3044":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4600:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:7922:10505":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:56552:3534":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:8702:3210":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11515:5123":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:5154:4350":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12349:5268":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:8162:4498":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:47163:3092":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13184:5541":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4238:6408":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:11899:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9475:4450":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:2380:2707":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:4437:3239":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8537:3230":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:9671:4485":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"9:956:3817":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9339:4567":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:49783:3056":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12850:5459":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:20854:59017":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:2736:2842":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9681:4854":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8346:2120":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:2421:1606":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:9071:60794":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:1605:2477":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6646:4398":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:21041:3544":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11654:2186":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:11689:7489":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:3373:2076":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:755:4613":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6881:4179":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5454:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:339:159":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:48763:2427":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:5503:4143":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10476:46787":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:4777:5710":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:548:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:49059:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12118:5230":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:21168:3454":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2816:3020":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2741:2840":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:9587:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:7020:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6190:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:5771:4153":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8870:2149":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5639:2172":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:2655:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10546:46527":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2378:1658":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:49330:2148":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:46451:3570":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:29534:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:12373:1951":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:47093:3085":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4606:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4691:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1505:6166":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:46757:3360":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"12:1840:2866":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8200:3003":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:58283:7234":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:5379:4136":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:50284:2572":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9108:7416":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6668:4091":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:625:3008":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:49853:3043":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11939:5200":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:3417:4710":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:20028:59077":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13091:5516":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:4376:5698":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:1067:3768":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:20426:2820":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10062:7433":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:6032:2209":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8746:2827":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:4680:5707":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:44:3972":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:1473:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:8822:60795":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:7168:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10466:4962":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4683:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:7522:54471":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:50035:2584":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1435:3765":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:6402:4743":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2911:2262":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12485:5277":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:859:2152":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:54089:7222":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:25196:2542":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:46224:2609":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:2304:176":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:8853:2912":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11186:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10394:4529":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11951:5202":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11774:5162":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11070:5023":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12134:5231":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:1532:6177":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13518:5648":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13506:5646":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6697:4396":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:1935:2533":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6276:4111":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9250:7419":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:6949:7006":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:8272:4557":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:11151:2701":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:7005:2916":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:5366:3090":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:7150:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6392:6920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:52163:3426":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8677:3235":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"12:669:2981":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"}},"external_crates":{"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}