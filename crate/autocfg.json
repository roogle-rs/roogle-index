{"root":"0:0:1810","crate_version":"1.1.0","includes_private":false,"index":{"a:2:2667:218-0:123:1652":{"id":"a:2:2667:218-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2667:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:49:1666":{"id":"0:49:1666","crate_id":0,"name":"rerun_path","span":{"filename":"src/lib.rs","begin":[107,0],"end":[109,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if `path` changes.\n\nThis looks like: `cargo:rerun-if-changed=PATH`\n\nThis requires at least cargo 0.7.0, corresponding to rustc 1.6.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1778":{"id":"0:73:1778","crate_id":0,"name":"probe_expression","span":{"filename":"src/lib.rs","begin":[351,4],"end":[354,5]},"visibility":"public","docs":"Tests whether the given expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub fn probe() { let _ = EXPR; }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:86:127":{"id":"b:2:2526-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2528:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11905:28661":{"id":"2:11905:28661","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11551:2545","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split":"2:11899:1802"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42668:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50:1672":{"id":"0:50:1672","crate_id":0,"name":"rerun_env","span":{"filename":"src/lib.rs","begin":[118,0],"end":[120,1]},"visibility":"public","docs":"Writes a line telling Cargo to rerun the build script if the environment\nvariable `var` changes.\n\nThis looks like: `cargo:rerun-if-env-changed=VAR`\n\nThis requires at least cargo 0.21.0, corresponding to rustc 1.20.0.  Earlier\nversions of cargo will simply ignore the directive.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["var",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1769":{"id":"0:70:1769","crate_id":0,"name":"probe_type","span":{"filename":"src/lib.rs","begin":[322,4],"end":[325,5]},"visibility":"public","docs":"Tests whether the given type can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub type Probe = TYPE;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:28626":{"id":"2:11866:28626","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1755":{"id":"0:65:1755","crate_id":0,"name":"emit_has_path","span":{"filename":"src/lib.rs","begin":[273,4],"end":[277,5]},"visibility":"public","docs":"Emits a config value `has_PATH` if `probe_path` returns true.\n\nAny non-identifier characters in the `path` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8184:7636-0:123:1652":{"id":"a:2:8184:7636-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8184:7636","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:74:1781":{"id":"0:74:1781","crate_id":0,"name":"emit_expression_cfg","span":{"filename":"src/lib.rs","begin":[357,4],"end":[361,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_expression` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27:1913":{"id":"0:27:1913","crate_id":0,"name":"description","span":{"filename":"src/error.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:2149":{"id":"5:5341:2149","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5325:12979":{"id":"5:5325:12979","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:33829":{"id":"2:11976:33829","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4511:33829"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42967:2558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:683:2517":{"id":"5:683:2517","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:30:659":{"id":"0:30:659","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[29,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:41715:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2532-0:123:1652":{"id":"b:2:2532-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2502:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2535:127","2:2536:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8184:7636-0:86:127":{"id":"a:2:8184:7636-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8184:7636","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:8185:7635-0:86:127":{"id":"a:2:8185:7635-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8185:7635","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:8185:7635-0:123:1652":{"id":"a:2:8185:7635-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8185:7635","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11969:24991":{"id":"2:11969:24991","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9047:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11942:33820":{"id":"2:11942:33820","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2232-0:86:127":{"id":"b:2:2232-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2226:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2234:2041"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:123:1652":{"id":"b:5:681-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:2517","5:684:2518","5:685:2519"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:67:1760":{"id":"0:67:1760","crate_id":0,"name":"probe_trait","span":{"filename":"src/lib.rs","begin":[293,4],"end":[296,5]},"visibility":"public","docs":"Tests whether the given trait can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub trait Probe: TRAIT + Sized {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2525:1691":{"id":"2:2525:1691","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2499:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1766":{"id":"0:69:1766","crate_id":0,"name":"emit_trait_cfg","span":{"filename":"src/lib.rs","begin":[309,4],"end":[313,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_trait` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2522-0:123:1652":{"id":"b:2:2522-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2525:1691"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2526-0:123:1652":{"id":"b:2:2526-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2528:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11860:312":{"id":"2:11860:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11861:28628","`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:23991":{"id":"2:11858:23991","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11119:1922"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:31028":{"id":"2:11878:31028","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11877:31024"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42933:2547","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11868:28627":{"id":"2:11868:28627","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:2057":{"id":"2:11926:2057","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11551:2545","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:2057"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42854:2562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:33827":{"id":"2:11964:33827","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:33828":{"id":"2:11973:33828","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4513:33828"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42949:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2537-0:86:127":{"id":"b:2:2537-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:127","2:2541:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11908:33812":{"id":"2:11908:33812","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11551:2545","str::split":"2:11899:1802","prim@char":"1:11896:412","`DoubleEndedIterator`":"2:7173:120","str::rsplit_terminator":"2:11911:33813"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42700:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:2519":{"id":"5:685:2519","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:33817":{"id":"2:11932:33817","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11551:2545","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::rmatch_indices":"2:11935:33818"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42800:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:28666":{"id":"2:11955:28666","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:929":{"id":"0:53:929","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[140,4],"end":[145,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `OUT_DIR` is not set in the environment, or is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:28651":{"id":"2:11873:28651","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11872:28650"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:68:1764":{"id":"0:68:1764","crate_id":0,"name":"emit_has_trait","span":{"filename":"src/lib.rs","begin":[302,4],"end":[306,5]},"visibility":"public","docs":"Emits a config value `has_TRAIT` if `probe_trait` returns true.\n\nAny non-identifier characters in the trait `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:684:2518":{"id":"5:684:2518","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2667:218-0:86:127":{"id":"a:2:2667:218-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2667:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11864:28625":{"id":"2:11864:28625","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2266-0:86:127":{"id":"a:2:2731:2266-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2237:23777":{"id":"2:2237:23777","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5339:34480":{"id":"5:5339:34480","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2235-0:86:127":{"id":"b:2:2235-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2229:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2237:23777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2235-0:123:1652":{"id":"b:2:2235-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2229:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2237:23777"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11871:33810":{"id":"2:11871:33810","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11902:1380","crate::ops::IndexMut":"2:2992:7544","str::slice_unchecked":"2:11870:33809"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2596:2525":{"id":"2:2596:2525","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3387:6549","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2532-0:86:127":{"id":"b:2:2532-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2502:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2535:127","2:2536:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:5584-0:86:127":{"id":"b:5:5584-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5582:230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5586:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11875:6004":{"id":"2:11875:6004","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42626:2551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2681:226-0:86:127":{"id":"a:2:2681:226-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2681:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11859:33808":{"id":"2:11859:33808","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:5731":{"id":"2:11876:5731","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42636:2127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9047:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11911:33813":{"id":"2:11911:33813","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11551:2545","str::split":"2:11899:1802","prim@char":"1:11896:412","str::split_terminator":"2:11908:33812"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42718:2567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2537-0:123:1652":{"id":"b:2:2537-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:127","2:2541:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11935:33818":{"id":"2:11935:33818","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11551:2545","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::match_indices":"2:11932:33817"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42818:2561","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:33824":{"id":"2:11949:33824","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:1937":{"id":"2:11914:1937","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545","str::rsplitn":"2:11917:28664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42754:2566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5324:34477":{"id":"5:5324:34477","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2273","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:2788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2273","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:2788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[13,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","source","description","cause"],"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:27:1913","0:28:390"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:86:127":{"id":"0:86:127","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[9,0],"end":[11,1]},"visibility":"public","docs":"A common error type for the `autocfg` crate.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2681:226-0:86:127","a:2:8185:7635-0:86:127","a:2:8184:7636-0:86:127","a:2:2731:2266-0:86:127","a:2:2667:218-0:86:127","b:2:2235-0:86:127","b:2:2594-0:86:127","b:2:2526-0:86:127","b:2:2522-0:86:127","b:2:3326-0:86:127","b:2:2232-0:86:127","b:2:2532-0:86:127","b:2:2537-0:86:127","b:5:5584-0:86:127","0:26","0:88","0:29"]}},"5:5340:34481":{"id":"5:5340:34481","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2273","`String`":"5:7192:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2273","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:2788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11870:33809":{"id":"2:11870:33809","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11902:1380","str::slice_mut_unchecked":"2:11871:33810","crate::ops::Index":"2:2988:7543"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:28:390":{"id":"0:28:390","crate_id":0,"name":"cause","span":{"filename":"src/error.rs","begin":[18,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"error::Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:929":{"id":"0:51:929","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[127,0],"end":[129,1]},"visibility":"public","docs":"Create a new `AutoCfg` instance.\n\n# Panics\n\nPanics if `AutoCfg::new()` returns an error.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5343:24994":{"id":"5:5343:24994","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11972:24997"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2594-0:86:127":{"id":"b:2:2594-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3375:12777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2596:2525"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:11851:1801":{"id":"2:11851:1801","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:123:1652":{"id":"b:2:3326-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1469"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:64:1750":{"id":"0:64:1750","crate_id":0,"name":"probe_path","span":{"filename":"src/lib.rs","begin":[265,4],"end":[267,5]},"visibility":"public","docs":"Tests whether the given path can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub use PATH;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11855:33807":{"id":"2:11855:33807","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11853:33806"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:1934":{"id":"2:11885:1934","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2731:2266-0:123:1652":{"id":"a:2:2731:2266-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2731:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:123:1652":{"id":"0:123:1652","crate_id":0,"name":"AutoCfg","span":{"filename":"src/lib.rs","begin":[83,0],"end":[90,1]},"visibility":"public","docs":"Helper to detect compiler features for `cfg` output in build scripts.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:52","a:2:2681:226-0:123:1652","a:2:8185:7635-0:123:1652","a:2:8184:7636-0:123:1652","a:2:2731:2266-0:123:1652","a:2:2667:218-0:123:1652","b:2:2235-0:123:1652","b:2:2526-0:123:1652","b:2:2522-0:123:1652","b:2:3326-0:123:1652","b:2:2232-0:123:1652","b:2:2532-0:123:1652","b:2:2537-0:123:1652","b:5:681-0:123:1652","0:132","0:130"]}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[37,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2535:127":{"id":"2:2535:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:72:1775":{"id":"0:72:1775","crate_id":0,"name":"emit_type_cfg","span":{"filename":"src/lib.rs","begin":[338,4],"end":[342,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_type` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:86:127":{"id":"b:2:3326-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1469"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:133:659":{"id":"0:133:659","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[82,16],"end":[82,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8995:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:1742":{"id":"0:62:1742","crate_id":0,"name":"probe_sysroot_crate","span":{"filename":"src/lib.rs","begin":[246,4],"end":[249,5]},"visibility":"public","docs":"Tests whether the given sysroot crate can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\nextern crate CRATE as probe;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:802":{"id":"2:11850:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11896:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:33806":{"id":"2:11853:33806","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:1808":{"id":"2:11938:1808","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:33826":{"id":"2:11961:33826","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:7512":{"id":"2:11975:7512","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4514:7512"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42958:2557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57:1708":{"id":"0:57:1708","crate_id":0,"name":"probe_rustc_version","span":{"filename":"src/lib.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Test whether the current `rustc` reports a version greater than\nor equal to \"`major`.`minor`\".","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2234:2041":{"id":"2:2234:2041","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2522-0:86:127":{"id":"b:2:2522-0:86:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2499:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2525:1691"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11944:33821":{"id":"2:11944:33821","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:33825":{"id":"2:11958:33825","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3328:1469":{"id":"2:3328:1469","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38986:5877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:34479":{"id":"5:5331:34479","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2528:685":{"id":"2:2528:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1713":{"id":"0:58:1713","crate_id":0,"name":"emit_rustc_version","span":{"filename":"src/lib.rs","begin":[199,4],"end":[203,5]},"visibility":"public","docs":"Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\nif the current `rustc` is at least that version.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["major",{"kind":"primitive","inner":"usize"}],["minor",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1773":{"id":"0:71:1773","crate_id":0,"name":"emit_has_type","span":{"filename":"src/lib.rs","begin":[331,4],"end":[335,5]},"visibility":"public","docs":"Emits a config value `has_TYPE` if `probe_type` returns true.\n\nAny non-identifier characters in the type `name` will be replaced with\n`_` in the generated config value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:659":{"id":"0:89:659","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[8,9],"end":[8,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:9006:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8995:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2232-0:123:1652":{"id":"b:2:2232-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2226:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2234:2041"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11881:31023":{"id":"2:11881:31023","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42942:2546","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:1943":{"id":"2:11967:1943","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11513:126","`FromStr`":"2:11512:2179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11512:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11512:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:33823":{"id":"2:11946:33823","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11576:2538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2541:1455":{"id":"2:2541:1455","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5586:1434":{"id":"5:5586:1434","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:2460":{"id":"2:11895:2460","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:28242":{"id":"2:11888:28242","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:28628":{"id":"2:11861:28628","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:31024":{"id":"2:11877:31024","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11878:31028"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42924:2549","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:416":{"id":"0:131:416","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[82,9],"end":[82,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:1802":{"id":"2:11899:1802","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11551:2545","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split_whitespace":"2:11877:31024","str::rsplit":"2:11905:28661"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42650:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:28664":{"id":"2:11917:28664","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11896:412","str::splitn":"2:11914:1937","self::pattern":"2:11551:2545"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42772:2565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:28624":{"id":"2:11862:28624","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:24996":{"id":"2:11971:24996","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1787":{"id":"0:76:1787","crate_id":0,"name":"emit_constant_cfg","span":{"filename":"src/lib.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_constant` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1810":{"id":"0:0:1810","crate_id":0,"name":"autocfg","span":{"filename":"src/lib.rs","begin":[1,0],"end":[453,1]},"visibility":"public","docs":"A Rust library for build scripts to automatically configure code based on\ncompiler support.  Code snippets are dynamically tested to see if the `rustc`\nwill accept them, rather than hard-coding specific version support.\n\n\n## Usage\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[build-dependencies]\nautocfg = \"1\"\n```\n\nThen use it in your `build.rs` script to detect compiler features.  For\nexample, to test for 128-bit integer support, it might look like:\n\n```rust\nextern crate autocfg;\n\nfn main() {\n#   // Normally, cargo will set `OUT_DIR` for build scripts.\n#   std::env::set_var(\"OUT_DIR\", \"target\");\n    let ac = autocfg::new();\n    ac.emit_has_type(\"i128\");\n\n    // (optional) We don't need to rerun for anything external.\n    autocfg::rerun_path(\"build.rs\");\n}\n```\n\nIf the type test succeeds, this will write a `cargo:rustc-cfg=has_i128` line\nfor Cargo, which translates to Rust arguments `--cfg has_i128`.  Then in the\nrest of your Rust code, you can add `#[cfg(has_i128)]` conditions on code that\nshould only be used when the compiler supports it.\n\n## Caution\n\nMany of the probing methods of `AutoCfg` document the particular template they\nuse, **subject to change**. The inputs are not validated to make sure they are\nsemantically correct for their expected use, so it's _possible_ to escape and\ninject something unintended. However, such abuse is unsupported and will not\nbe considered when making changes to the templates.","links":{},"attrs":["#![deny(missing_debug_implementations)]","#![deny(missing_docs)]","#![allow(unknown_lints)]","#![allow(bare_trait_objects)]","#![allow(ellipsis_inclusive_range_patterns)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:35-0:86:127","0:123:1652","0:48:1659","0:49:1666","0:50:1672","0:51:929"],"is_stripped":false}},"2:11945:33822":{"id":"2:11945:33822","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:28659":{"id":"2:11902:28659","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11375:2548","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:28650":{"id":"2:11872:28650","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11873:28651"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:33819":{"id":"2:11940:33819","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1659":{"id":"0:48:1659","crate_id":0,"name":"emit","span":{"filename":"src/lib.rs","begin":[97,0],"end":[99,1]},"visibility":"public","docs":"Writes a config flag for rustc on standard out.\n\nThis looks like: `cargo:rustc-cfg=CFG`\n\nCargo will use this in arguments to rustc, like `--cfg CFG`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1784":{"id":"0:75:1784","crate_id":0,"name":"probe_constant","span":{"filename":"src/lib.rs","begin":[370,4],"end":[373,5]},"visibility":"public","docs":"Tests whether the given constant expression can be used.\n\nThe test code is subject to change, but currently looks like:\n\n```ignore\npub const PROBE: () = ((), EXPR).0;\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["expr",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:33814":{"id":"2:11920:33814","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:33805":{"id":"2:11852:33805","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:1933":{"id":"2:11891:1933","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[381,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:929","0:54:1683","0:57:1708","0:58:1713","0:62:1742","0:63:1745","0:64:1750","0:65:1755","0:66:1757","0:67:1760","0:68:1764","0:69:1766","0:70:1769","0:71:1773","0:72:1775","0:73:1778","0:74:1781","0:75:1784","0:76:1787"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11849":{"id":"2:11849","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11850:802","2:11851:1801","2:11852:33805","2:11853:33806","2:11855:33807","2:11858:23991","2:11859:33808","2:11860:312","2:11861:28628","2:11862:28624","2:11864:28625","2:11866:28626","2:11868:28627","2:11870:33809","2:11871:33810","2:11872:28650","2:11873:28651","2:11874:1788","2:11875:6004","2:11876:5731","2:11877:31024","2:11878:31028","2:11879:1932","2:11880:33811","2:11881:31023","2:11882:1799","2:11885:1934","2:11888:28242","2:11891:1933","2:11895:2460","2:11899:1802","2:11902:28659","2:11905:28661","2:11908:33812","2:11911:33813","2:11914:1937","2:11917:28664","2:11920:33814","2:11923:33815","2:11926:2057","2:11929:33816","2:11932:33817","2:11935:33818","2:11938:1808","2:11940:33819","2:11942:33820","2:11944:33821","2:11945:33822","2:11946:33823","2:11949:33824","2:11952:23990","2:11955:28666","2:11958:33825","2:11961:33826","2:11964:33827","2:11967:1943","2:11969:24991","2:11970:24995","2:11971:24996","2:11972:24997","2:11973:33828","2:11975:7512","2:11976:33829"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2681:226-0:123:1652":{"id":"a:2:2681:226-0:123:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2681:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"AutoCfg","id":"0:123:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11952:23990":{"id":"2:11952:23990","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:24997":{"id":"2:11972:24997","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1745":{"id":"0:63:1745","crate_id":0,"name":"emit_sysroot_crate","span":{"filename":"src/lib.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Emits a config value `has_CRATE` if `probe_sysroot_crate` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["name",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:1799":{"id":"2:11882:1799","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:2545"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:33816":{"id":"2:11929:33816","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11551:2545","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:2057"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42872:2563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5328:34478":{"id":"5:5328:34478","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:1683":{"id":"0:54:1683","crate_id":0,"name":"with_dir","span":{"filename":"src/lib.rs","begin":[155,4],"end":[189,5]},"visibility":"public","docs":"Create a new `AutoCfg` instance with the specified output directory.\n\n# Common errors\n\n- `rustc` can't be executed, from `RUSTC` or in the `PATH`.\n- The version output from `rustc` can't be parsed.\n- `dir` is not a writable directory.\n","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["dir",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:86:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2496:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5064:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:1788":{"id":"2:11874:1788","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42620:2552","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5342:24993":{"id":"5:5342:24993","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11971:24996"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:33815":{"id":"2:11923:33815","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2536:1456":{"id":"2:2536:1456","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:24995":{"id":"2:11970:24995","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66:1757":{"id":"0:66:1757","crate_id":0,"name":"emit_path_cfg","span":{"filename":"src/lib.rs","begin":[280,4],"end":[284,5]},"visibility":"public","docs":"Emits the given `cfg` value if `probe_path` returns true.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["path",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["cfg",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:1932":{"id":"2:11879:1932","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42904:2124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2540:127":{"id":"2:2540:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31758:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:35-0:86:127":{"id":"0:35-0:86:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[73,0],"end":[73,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"error::Error","name":"Error","id":"0:86:127","glob":false}},"5:5323":{"id":"5:5323","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5324:34477","5:5325:12979","5:5328:34478","5:5331:34479","5:5339:34480","5:5340:34481","5:5341:2149","5:5342:24993","5:5343:24994"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11880:33811":{"id":"2:11880:33811","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42914:2559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:1926:2522":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:7579:6161":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10418:2142":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:40709:2464":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:39672:5919":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6022:19632":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13399:3900":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11907:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:5317:2185":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:2686:2445":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5690:5330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:3189:30388":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:13240:3858":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3830:1910":{"crate_id":1,"path":["std","num"],"kind":"module"},"17:11282:3375":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1731:4925":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6876:4105":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:6939:2788":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:3322:2152":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10743:6433":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"11:1138:6529":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4720:5160":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:4445:4132":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39982:5933":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2206:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21553:5771":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:5779:4174":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:2936:2269":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:5553:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7115:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3205:2146":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:3946:2886":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:637:6591":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:2454:12823":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:2178:4630":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6336:4241":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:8667:3188":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:40644:5957":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:525:4749":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:44647:6054":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:2296:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4862:5235":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:42668:2564":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10402:6420":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:42650:2128":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:6164:4233":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:20680:7581":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:41215:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:30004:5734":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9696:3208":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:9006:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4871:5241":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13194:3845":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:2319:4063":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:42914:2559":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4322:5004":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13426:3907":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:7366:19638":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:6654:30420":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:6032:7688":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:4070:28122":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6218:6463":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"18:481:3051":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:1787:6357":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:6376:4097":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:2902:2517":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4416:5049":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:46648:6147":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:2846:12994":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2502:4077":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4237:4945":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22174:2533":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:8310:19690":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:815:6517":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:3988:6551":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2787:4367":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:4540:4135":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:515:3056":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:44292:6040":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6819:4320":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4899:7627":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:45973:6131":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:11556:2539":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3126:25280":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41431:2431":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:10718:6566":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:6179:6445":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13419:3906":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:9933:3225":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4994:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12770:3651":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"10:36:4637":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7669:4113":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9683:6388":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13082:3820":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13433:3908":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:762:2875":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:10735:3308":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12576:3633":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:4108:2107":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4574:5569":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:39510:6574":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:3676:6604":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5910:5446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7244:34627":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11821:3499":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:7843:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:9874:5952":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10377:3271":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:8909:2127":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4559:5098":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:6904:4328":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:45113:6074":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:557:6590":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:3147:4628":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:10668:6250":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13257:3861":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:3207:2147":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:10897:3326":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7743:4102":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7040:2465":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:766:23552":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:43214:6009":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:2694:4085":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:1890:1640":{"crate_id":1,"path":["std","error"],"kind":"module"},"1:11906:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8479:2173":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:3160:33515":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4346:5018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:39579:5908":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:810:6530":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"11:669:6515":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:6701:12961":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4921:5264":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:4231:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:9038:34630":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:6290:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:10310:2191":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:48977:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22108:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:9557:3215":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5772:5371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:21447:5769":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:11301:5990":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13015:3801":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11910:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2775:4363":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"14:7:6511":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:4172:6606":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13659:3986":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4757:4141":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:3673:6603":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:11903:1459":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:45617:6098":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:4679:7584":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4476:5081":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:3872:4127":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:6831:3004":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"6:4261:4963":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:4932:4147":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:0:1954":{"crate_id":17,"path":["object"],"kind":"module"},"1:11384:6604":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11193:3351":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:21096:7677":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"11:2069:6524":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:6514:2924":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5797:4178":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:12194:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:7791:2692":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:533:2971":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:4733:5165":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:20600:7658":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:5920:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:3273:2875":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:8085:2151":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:3454:2118":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1571:4824":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13516:3930":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:1687:4907":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:39380:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:6127:6612":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:6079:2968":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2795:7646":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12915:3764":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:39663:5918":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4597:5101":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6479:2228":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"11:1065:34607":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5402:3188":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2803:12988":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:40609:6209":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41697:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:3815:4126":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"0:51:929":{"crate_id":0,"path":["autocfg","new"],"kind":"function"},"2:7098:12966":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:40794:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7543:4112":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:2744:2577":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:8186:6557":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12403:3604":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4334:5009":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12085:3539":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:44523:6049":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13651:3983":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40632:5956":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:10117:6562":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4795:5193":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:5843:2107":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:2113:5712":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:25617:2528":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:6888:7190":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:8605:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10923:3327":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:535:4053":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:7135:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:5944:6438":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:1628:2880":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:1085:6527":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9907:3223":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11921:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:624:34639":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2130:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:43249:6014":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:2343:2676":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:6229:2886":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11263:3004":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:6094:5514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:3979:7571":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11946:3519":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7317:34626":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1747:4929":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:3241:12722":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8181:7561":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12510:3626":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13842:4034":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:3931:2107":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:6975:2898":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:7146:30507":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13356:3885":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6488:5521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7757:4424":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10798:19701":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5805:5384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6293:4238":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7837:4436":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:8090:4480":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:7440:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:7942:6625":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:2571:2130":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6628:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11920:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10080:6414":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:2369:2686":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:4756:7579":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:38979:6572":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:6967:2911":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:9530:2958":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:12194:3555":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:30602:2417":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10354:3270":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10283:3265":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:5716:2221":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2829:2977":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8880:7641":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:42466:6582":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:9052:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:13564:3967":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10857:19702":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6496:5526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10626:3294":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:9047:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:1527:4799":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:43393:6025":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:43401:6027":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4662:5127":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:1073:6525":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:2731:2266":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4396:5039":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:40975:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:9545:2963":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:39602:5912":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"9:0:1947":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4340:2917":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:3524:2174":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12536:3628":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4828:5210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10589:3290":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1363:2585":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:48964:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:727:3089":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46365:6135":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46633:6146":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6643:5585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13698:3995":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5728:5349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:7524:2586":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:499:4729":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10929:2999":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:3324:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13181:3839":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8230:7594":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:8753:3191":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:8156:4116":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5811:4179":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"10:44:4638":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:8170:4485":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:42904:2124":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6594:5573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6728:4305":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:2903:33554":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:43228:12756":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11770:3486":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:39631:5915":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13469:3917":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4910:5258":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:932:6517":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:636:3076":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2720:4086":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:481:4721":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:2933:6362":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11013:2193":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:41789:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:2909:33553":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:2616:4082":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:3741:2886":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:8521:19696":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:11166:2199":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:6634:5581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12419:3605":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:4078:2107":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6717:4304":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"11:393:34610":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:8917:6638":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:60:34608":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4218:4935":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:733:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4812:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:11878:24012":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:1859:4627":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9312:6370":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:4987:6609":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:8996:1644":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5759:5362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"13:0:1944":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:46115:6132":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:7013:5727":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12433:3607":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:0:1949":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:5305:4153":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9322:34631":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:41965:5975":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11879:3508":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:3300:4121":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:928:6516":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11199:6259":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:7192:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:6675:2928":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4379:5033":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9822:6391":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13233:3856":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:39751:5927":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:5351:2187":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12331:3593":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4328:5006":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3352:2107":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6671:4292":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:39490:5762":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4656:5124":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:5754:2217":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:39013:6573":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:42538:6584":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:2905:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7572:34624":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8746:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4952:5274":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1992:6537":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:9424:3205":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:1583:4832":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5963:4199":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:242:6351":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:6381:2886":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11247:6263":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:567:4772":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4483:5083":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6053:5488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:386:6353":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4877:5244":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:8443:19694":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:40734:2465":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:42620:2552":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:586:4782":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11895:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"18:531:3058":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10885:3325":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12902:3757":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:6541:5550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5959:5466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:7511:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10720:25532":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13292:3867":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:39470:2098":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:2184:1641":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:3170:12795":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6061:18745":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11845:6664":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:2791:7644":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10681:3301":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:725:4624":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:2448:4075":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:22141:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:6548:5554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:9200:6559":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:39326:2556":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:40467:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:45271:6091":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:7132:2082":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12059:3536":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4560:7569":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:645:7514":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4677:7583":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:11911:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:43102:6006":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2812:4368":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44693:6061":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9534:6379":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4121:7593":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:11089:13069":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4429:5055":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:1710:4917":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:3935:7569":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7635:4420":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:42189:5981":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:2992:7544":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:39287:12817":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:2862:4092":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:21585:5776":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4687:5140":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10026:6406":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6558:4267":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:8995:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:6773:5662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12158:3549":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:9453:19712":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:3988:2585":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11069:19704":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6571:5572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5931:5458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:1713:13019":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11862:25439":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:3266:6364":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:564:3063":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:44444:6046":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10415:2146":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:8244:6631":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12522:3627":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:43177:6008":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44563:6051":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"16:4702:4139":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11861:3507":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7099:7528":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13721:4008":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:9181:2653":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:42529:5763":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8157:2128":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:504:2904":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:39702:5922":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:5696:30899":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:20394:32860":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:11628:3453":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:6182:2980":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:43397:6026":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:5386:3187":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11924:3518":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:507:3053":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:43282:2570":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11615:3449":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:38821:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:8256:4492":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:6910:2212":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13506:3925":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"9:445:18627":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8940:23987":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:11891:3510":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:9058:2431":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5698:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6474:4115":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:1541:4804":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:1055:33550":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:29781:2529":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10303:6419":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10527:19808":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:21569:5772":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:46427:6136":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10416:6424":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:44869:6066":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6649:5586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:21760:2534":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:3446:4122":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8225:6210":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:4092:7590":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:42608:2555":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8101:2122":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:39206:5880":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:4728:4140":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:5331:2186":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1567:2465":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:4638:7595":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:653:13741":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:41095:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"12:0:1950":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11556:3426":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9596:3212":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4781:5185":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:3176:12794":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9628:6382":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:11375:2548":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:22042:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:38806:5871":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:12411:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4611:5102":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9641:6383":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11089:6237":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:7173:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:690:3080":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:39550:5903":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:6236:6471":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12307:3590":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:4624:4138":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:387:34609":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:11241:6262":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:41255:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:35:2882":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:1585:4627":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:39957:5931":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9064:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:5180:2544":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11109:3340":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:29970:5801":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:697:6516":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6728:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:11897:1493":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"18:614:34641":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:9056:2430":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:8185:7635":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:5104:4152":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:1872:4629":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13249:3859":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:39688:3074":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:21354:7581":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:46686:6149":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:9488:6375":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:1451:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:8931:3196":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9478:6374":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4775:5183":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:43576:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:42456:5761":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4637:5116":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:7218:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2668:4084":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2718:2575":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:3782:4125":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10580:3289":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13639:3980":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:40718:2174":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:9732:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:487:6354":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:3585:4123":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:2756:2580":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:98:4617":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"11:353:2873":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:834:6520":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2384:1642":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:7481:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:39972:2952":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:7029:4347":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3057:2154":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:40935:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:39560:5905":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:39027:5879":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4108:7592":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:39227:30503":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:41295:2218":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10635:3295":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:10079:2564":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5843:5412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:1848:2654":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:2338:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:4504:7613":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:2524:4078":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:7702:6571":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:2573:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:11320:3006":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:2184:4631":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:2931:18772":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:562:3335":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:12146:12828":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:44793:6064":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:9228:34635":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"11:2198:4633":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5917:5447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2337:4065":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:7498:5702":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6059:5489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:9886:6397":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4673:5134":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:853:6522":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:3246:2143":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:11340:5992":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:1899:14722":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4489:5085":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:39588:5909":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40573:30509":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"0:48:1659":{"crate_id":0,"path":["autocfg","emit"],"kind":"function"},"2:46303:6134":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8052:2155":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:9054:2429":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9409:19711":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4981:5293":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:8274:5554":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:3916:2911":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11060:3298":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6943:19636":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4224:4936":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9380:19710":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11484:3412":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9653:6384":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2863:12998":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2594:4081":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:38861:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:2084:5710":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:7796:2689":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:7851:6623":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:5132:2886":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:48990:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:483:2970":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:31758:2195":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1645:4878":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:1919:19741":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:5847:4186":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:7452:5690":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:9275:34629":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:6079:5503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:39006:4407":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:41417:2430":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:2819:12991":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8420:2171":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11446:3408":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:5176:2543":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12388:3600":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:1514:4793":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2834:4372":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:1617:4853":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:860:2894":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2298:18746":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4571:5099":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:12466:7546":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:1618:5736":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:40870:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:40524:7562":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4274:4973":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:1727:5737":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:7094:12967":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5064:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11915:1475":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:44248:6038":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:13488:3922":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10000:3311":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4820:5205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:7469:5695":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:7565:32894":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:39310:12818":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:420:3145":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7259:5961":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3289:2134":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"11:1044:18707":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:8683:3189":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:9876:3138":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:2537:2138":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:1075:33603":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13159:3835":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:877:2174":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:822:7529":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:2229:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:7867:2141":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:31807:2581":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:8778:31981":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:7675:6164":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:41957:5974":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6095:2986":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:48925:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9060:2432":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:11571:2540":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:7206:5732":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"8:0:1946":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6981:6476":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12646:3649":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:40490:5939":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:20413:32887":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:8632:19677":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8296:6212":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2864:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:271:2886":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7467:4410":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:8651:3187":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"9:325:4675":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:46701:6150":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:48951:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8983:6233":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:40596:5955":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:7665:6163":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"7:32:18613":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:7535:2994":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6767:4318":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13477:3918":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:39020:2441":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4714:5157":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:1987:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:42942:2546":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"11:1845:2875":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:6506:4263":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12835:3702":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:40507:5941":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:42208:5983":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12126:3545":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:11777:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10142:19783":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13857:4035":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:7144:2272":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:1611:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:11867:7518":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:49003:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"14:160:6511":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:21644:5782":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4501:5094":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7711:4422":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4389:5036":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:10006:6560":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3871:7565":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:4148:2174":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2679:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13865:4038":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:869:2465":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:5976:4056":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10820:2658":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:11914:1474":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:20411:32891":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13219:3853":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10680:2693":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:44338:6042":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:572:4774":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:7251:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12178:3550":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:7578:7581":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11696:3010":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:20682:7651":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:9967:2548":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:1194:4353":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5677:19629":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:5496:2189":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:4277:2917":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:11461:6265":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:5594:4101":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4457:5071":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3665:6537":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4890:5251":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:5920:4195":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11832:3502":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11969:3524":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:412:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:38759:12724":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:5648:2911":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:2301:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10334:3215":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12293:3588":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:24:601":{"crate_id":2,"path":["core","env"],"kind":"macro"},"2:2929:2267":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:20432:32892":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:9722:7581":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11653:3457":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43056:5996":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11025:25534":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:736:23551":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4451:5068":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:11622:12749":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:10645:6242":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:9670:6387":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9218:3215":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7478:4109":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9866:6395":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2215:2116":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11919:1530":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:20729:5766":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:4386:2262":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:955:6522":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:1550:4809":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:42700:2568":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6351:19633":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:2404:4073":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13041:3807":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9523:6378":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11813:3497":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:39427:2084":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:12033:3533":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3129:26514":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:4673:659":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:640:6593":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:8389:19692":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"14:0:1951":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1379:2465":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:39532:5901":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:473:4716":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2850:12995":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13791:4023":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:7626:6506":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:3969:7570":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"9:502:4698":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:630:6533":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:44891:6067":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:4327:4130":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:961:6523":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4900:5257":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:4789:4142":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11993:3525":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:360:6589":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:8072:4477":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:9577:3210":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4432:7596":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:699:3081":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:3749:4124":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8113:2123":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:8176:6633":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9498:3208":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10761:19700":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:46225:6133":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:3504:2911":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10465:6428":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:1419:6530":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:5571:4099":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8437:2172":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4766:5177":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:8953:3197":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:41996:5979":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:44268:6039":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11785:3490":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3877:7564":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:22372:2532":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:12372:3598":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10555:3280":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:39200:2557":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:4023:12720":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12318:3591":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:42004:5980":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13121:3829":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"15:0:1952":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:43584:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:7005:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:21621:30492":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:1840:2911":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:10824:4695":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10068:6413":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:3249:1643":{"crate_id":1,"path":["std","io","stdio","stderr"],"kind":"function"},"17:11544:3425":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7437:4409":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10452:6427":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:3114:2174":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4945:5271":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13101:3821":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:41737:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:6307:4095":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10569:3285":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10705:3304":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:11576:2538":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4727:5162":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:39366:5898":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:320:2871":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6615:6613":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:11501:6270":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:8858:3194":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:10158:2566":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13879:4041":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5890:5438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:21609:2530":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:6546:2233":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:7195:5672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13411:3903":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1704:4914":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:2742:4087":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6254:4235":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:6230:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:6983:33038":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:3640:3101":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"11:1836:2465":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:861:6523":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:3929:7568":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:6367:2224":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:8184:7636":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:9018:6236":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:5526:5747":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8506:2176":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:39934:5929":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:594:4787":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:2378:4072":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"14:165:18713":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5990:5475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:6952:2465":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:7386:5685":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:39347:12819":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4301:4996":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9545:3182":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:30026:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:4163:2440":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9148:34633":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10052:6411":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:31798:5867":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:50299:6160":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:6518:2473":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:8610:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:96:23541":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8772:2193":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:890:4625":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13777:4016":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:44961:6070":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:12354:2968":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:39723:2126":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5752:5358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11372:3395":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:41685:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:8195:19678":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"15:180:18726":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10967:3330":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:2681:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:877:4624":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:8151:2127":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6757:5656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:4366:2442":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:2474:2137":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:38720:2587":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:11355:3393":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11405:6605":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:2770:4366":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13625:3974":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11909:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:7488:4413":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:1527:2107":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:43381:6022":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:21734:2531":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:660:6346":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7803:4432":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13376:3892":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:39215:5881":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13367:3889":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:43457:13110":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:521:23553":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11917:1473":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:10458:2998":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:9959:3228":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:44392:6044":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43389:6024":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10134:2197":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:10650:6244":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:6363:2223":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:22273:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:7947:1912":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13169:3836":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:5643:4161":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10946:3001":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:2357:2680":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:43640:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41015:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:42626:2551":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11912:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:6003:2982":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:7475:5696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:4000:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:247:6352":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:574:3053":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8252:6211":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:5346:4154":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:62:13330":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:11899:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:777:2879":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:40785:13062":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:5018:6609":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:39541:5902":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:2913:33556":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2499:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:30010:5802":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2829:12993":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4618:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:8788:3192":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:9917:1649":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:644:3053":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:9378:2692":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:39304:2557":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:538:3061":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:9796:3222":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2341:1694":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8134:2125":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4751:5173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5708:4166":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"7:0:1520":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:274:4618":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:4845:4144":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10840:3323":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:7175:2081":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:4720:2097":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:9566:6369":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:44937:6069":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:221:4569":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:5436:1647":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:678:7515":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:10833:1647":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:3907:7566":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:41424:2429":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:2786:4089":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:8025:4473":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:40726:2585":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10270:6417":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12282:3586":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4703:5149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:44493:6048":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11573:3434":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:1574:2875":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:5244:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:2967:18773":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5786:5382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:2824:12992":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:43619:6586":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:10845:24037":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:0:1953":{"crate_id":16,"path":["gimli"],"kind":"module"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42377:6580":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:44360:6043":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:1410:4625":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11532:3424":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:7616:2998":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:1895:5743":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4369:5027":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8170:6631":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:7937:6624":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10660:3298":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:46587:6142":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:45317:6092":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13461:3915":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4361:5024":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10545:3278":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8970:6645":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:2854:12996":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:7478:6661":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4037:4129":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:20563:7657":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:42933:2547":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4733:2978":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:39397:30507":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2858:12997":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:4596:4137":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:1120:6528":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:8598:19699":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:1609:2886":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:46671:6148":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:3375:12777":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:42636:2127":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:5567:2981":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:7087:2177":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:42594:1920":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1039:33602":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:20379:32860":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:48568:7686":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:5998:19631":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7596:19639":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:5690:2220":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"11:1003:6524":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:3155:4626":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6854:4324":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6431:4253":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5902:5445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46607:6144":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:4235:6553":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:22306:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:11001:2192":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"17:12607:3639":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:30098:30465":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:9997:25963":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12046:3534":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11339:3389":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:1534:4801":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:3611:7563":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:4408:5044":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:39990:5935":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8164:2124":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:4307:2107":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:3899:4128":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5000:5301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:39611:5913":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:846:2174":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4549:5097":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:3225:4120":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40895:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:1520:4796":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:40553:5948":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:41715:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:5878:5433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:3165:2144":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"15:198:18727":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:4357:2946":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:43085:6005":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4850:7621":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:587:7511":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"9:52:18645":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:9069:6237":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:1801:5742":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:1770:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4962:5279":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:2933:2268":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:9066:2434":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:2633:5722":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:2226:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"11:1534:6531":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:42204:5982":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:561:4769":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:4412:2443":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13812:4029":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2332:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"9:481:18626":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:7446:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:659:2465":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:39243:5884":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4520:5095":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6400:4250":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:20841:5766":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:43071:6002":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:20366:2417":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:38947:7522":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"7:79:18620":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:7487:5698":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:7162:2080":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:1677:4901":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6535:2868":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:7034:2465":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:4576:12811":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11220:3359":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:9748:3215":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:39460:2099":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:1591:4628":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:41135:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4353:5022":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10205:1646":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:12072:3537":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9617:6381":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:707:2541":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6512:5538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:43034:12755":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11459:3410":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:2205:2177":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:8573:19698":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:21248:5768":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:55:4464":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"6:540:4758":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:38903:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:949:6520":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:42558:6585":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:46567:6140":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:8291:2539":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3379:2115":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9853:6394":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7065:4352":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:12133:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:7038:28123":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:8347:2169":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8270:6635":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:6700:2941":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:39963:2152":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11901:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:677:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:6948:6547":{"crate_id":5,"path":["alloc","alloc","AllocErrorPanicPayload"],"kind":"struct"},"1:8835:6230":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:5886:4189":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12098:3541":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"11:738:4625":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:20813:7650":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:2547:2958":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:20639:7581":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:8180:19642":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:6575:19634":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12224:3574":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:2830:4091":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4988:5296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11214:6260":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:42958:2557":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13763:4014":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:7272:2875":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:1695:4908":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13211:3850":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12563:3632":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11422:3404":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:39737:5926":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10598:3330":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:42872:2563":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6868:4326":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:4855:2107":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6698:5623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:6997:2465":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5693:4163":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:39519:2125":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:123:13385":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:938:7529":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"0:49:1666":{"crate_id":0,"path":["autocfg","rerun_path"],"kind":"function"},"2:46511:6138":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12980:3800":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:1559:4815":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:12167:32640":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:3159:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:4882:5246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6667:5597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7519:4415":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:3181:4629":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3461:2120":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6442:4254":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5945:5461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11502:3420":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11913:1477":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4841:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:6631:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:21500:5770":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4402:5041":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:1947:6358":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8810:2465":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12236:3576":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:7528:12965":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:21748:1919":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:8816:6229":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:7803:2693":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:9315:5755":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:44314:6041":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12496:3625":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12959:3795":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5382:1646":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8997:24020":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:3126:33516":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11090:3337":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11520:3421":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4313:4999":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:46622:6145":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6243:34625":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:7289:2931":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:1716:4918":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12259:3585":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:6476:2227":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:7516:2992":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:1348:2174":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7683:4114":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10125:3233":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:4252:6607":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12449:3611":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13145:3834":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7767:19640":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8092:2153":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6201:6460":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:7698:2658":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6532:2232":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:6764:5659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:4904:4146":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7529:4111":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:1435:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:5176:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:38986:5877":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:11908:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"9:388:18628":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:6850:2151":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:1978:2141":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:1440:6516":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:45583:6097":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:985:4353":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4805:5199":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13385:3893":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:7595:6162":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6611:5574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:7131:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:46763:6152":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:5655:4100":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:20626:7659":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:1823:2647":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:8490:19695":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:2208:2672":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:8283:19689":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3204:12721":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:2404:5719":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:9899:2585":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:681:3077":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4697:5146":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:3976:6550":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:4969:4148":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:487:4724":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9178:6368":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:11512:2179":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13344:3884":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:3991:7574":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:3387:6549":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:2506:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11434:3405":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10710:2122":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:5722:5348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:39712:5923":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:9443:6372":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10685:6565":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:41055:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:43150:6007":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5938:5460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:1579:4626":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:31794:6571":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:42854:2562":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:40776:6575":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:0:1955":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:1723:4921":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41667:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:10712:19810":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:40658:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:2808:4090":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"9:421:18629":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:493:4727":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12345:3594":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12113:3544":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11410:3401":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1239:6529":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:2546:4079":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:9062:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:780:2889":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:42428:5758":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10989:3278":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:578:4777":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:4410:7595":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:7217:6548":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:20651:7649":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:42548:5764":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:1518:18708":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:7428:5686":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2490:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:20808:7581":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:2211:2673":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8786:2194":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7016:4344":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:1570:2911":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:12219:6569":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:39279:2558":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:9028:6365":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:11264:5987":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:3436:1644":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:8420:19693":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8489:2174":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:45059:6072":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:919:6530":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:10655:2689":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:7521:2178":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:1555:6532":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:1978:6361":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:30204:30498":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:4324:6608":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:2186:5718":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11800:3495":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:12894:3754":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:2053:4353":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:5557:4096":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5967:5469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11033:6028":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:7859:19641":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6743:5647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13309:3875":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:113:23542":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8218:6209":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:11894:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:39653:5917":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10649:3296":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11229:6617":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:42818:2561":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:354:6588":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13689:3993":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"15:219:18731":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:7268:25424":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:8823:3193":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:8129:6507":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:41773:2439":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:3604:2886":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8236:6634":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:5904:2980":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:5741:5350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:42949:2556":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9512:6377":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9340:6371":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11391:3400":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10478:6429":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4635:7622":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11258:3374":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:6327:4240":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44915:6068":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:119:13384":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:859:2585":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11916:1476":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2453:7581":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11011:3332":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"14:40:3375":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:2970:12723":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:3778:6605":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13821:4031":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9772:3220":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:11160:6256":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:4121:5744":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:1852:4626":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4468:5076":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8864:7639":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10936:3329":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"0:0:1810":{"crate_id":0,"path":["autocfg"],"kind":"module"},"16:6361:4246":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:2496:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:8360:19691":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5823:5396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:43627:6034":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:1897:2521":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10316:3268":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10505:6431":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:7201:5674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12634:3642":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:6000:5477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:2799:12989":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9946:3227":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:42516:6583":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10200:6564":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:8548:19697":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:3167:2145":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:39257:5885":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:43657:6037":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:7659:7517":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6696:19635":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9188:34638":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:10044:6561":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6990:4343":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8848:7640":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8802:6637":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:41986:2170":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:7813:2690":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8928:6640":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:6302:2465":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:3085:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:1846:2653":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:5234:1380":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"16:7509:4110":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6321:6474":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:2493:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:42437:5759":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2765:7645":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:9310:12830":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:5660:5305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:45193:6075":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:3149:12999":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:1429:6515":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:1609:4848":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:6930:2990":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6520:4265":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:21356:7652":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"13:226:4616":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3639:2465":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:21682:30488":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:42446:6581":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11037:19703":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4439:5062":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12799:3671":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3513:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:7859:2139":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:6607:12969":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:1563:2174":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:6791:5665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:10823:3159":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2587:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:9826:6392":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:286:2273":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7449:6498":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7467:3335":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9839:6393":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13667:3987":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3244:2142":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"5:3722:2875":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:8214:4407":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:10222:25965":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:3445:24920":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4248:4953":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:45012:6071":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12592:3635":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:9265:6369":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:6533:2936":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3397:2117":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:10172:2565":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12006:3528":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:7173:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12923:3765":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:1082:6529":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11163:3347":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:2807:12990":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:43669:4636":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4850:5226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:6403:2231":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:10940:3000":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:8142:6510":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:8979:34636":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:9924:2128":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43445:6031":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5813:5389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:44545:6050":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:2470:4076":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3132:26515":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8903:2222":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6919:34623":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:4240:6554":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:9275:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"14:187:18720":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:2988:7543":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:39948:2223":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2840:4373":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9107:6238":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:9513:2957":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:3030:4117":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8975:6646":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:2074:2904":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11902:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:10412:2144":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:44723:6062":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:924:6515":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:38925:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:1785:2637":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:4767:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:11565:2541":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12483:3624":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:39385:2083":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:5367:2188":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:11896:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:7557:4416":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11900:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13024:3805":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:40743:5961":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:9383:2996":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:671:6350":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5759:2230":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:43373:6020":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:2080:6525":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:3653:2141":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:1663:4890":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:1029:6525":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:22240:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:38881:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:10691:19809":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5800:5383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:4818:4143":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4480:4133":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:1596:4629":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:5426:2924":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:3164:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"11:1832:2174":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8329:7631":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4628:5111":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:39340:5894":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:7826:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:10047:6649":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11343:6603":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6890:4106":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:21698:30466":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:45767:6099":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4787:5188":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:22339:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4649:5123":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"0:50:1672":{"crate_id":0,"path":["autocfg","rerun_env"],"kind":"function"},"17:13316:3876":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:3142:6363":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:1401:4624":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:8718:3190":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:42718:2567":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11471:3411":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:39941:5930":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:913:2875":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12358:3595":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44462:6047":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:43369:6019":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:44582:6052":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:50278:6159":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:5616:4157":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9138:6367":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:582:2417":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:80:23540":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9108:34634":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"9:174:18693":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:5560:2980":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:4312:2441":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"18:599:34642":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:3047:18774":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:2642:4083":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7411:4203":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3063:3097":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:41974:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10353:2997":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:22009:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:652:3053":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11844:3504":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5367:18744":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11136:3341":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:7786:2691":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:30040:30478":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:7498:4414":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11143:3002":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:8109:4483":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:8256:19676":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:4307:4997":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:45553:6096":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12019:3238":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:6183:2911":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:8758:2192":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10721:3305":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:6751:7647":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:5499:2190":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"11:646:2585":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11234:3360":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10039:6409":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:42924:2549":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13453:3914":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:20434:32889":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:5630:6436":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11299:3378":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9973:3229":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:21661:30482":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:21091:7654":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:13612:3968":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10440:6426":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:505:4732":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:4302:2945":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:3983:7572":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:1866:4628":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:46724:6151":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8495:2175":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5724:4168":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13053:3812":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1984:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2939:2270":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10491:6430":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:42477:5984":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10015:6405":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:7042:4350":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8740:2191":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11508:6270":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:4572:5567":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13443:3911":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3086:7545":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:9064:2433":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:5683:2219":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"9:352:18642":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13803:4025":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:1509:4791":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:46576:6141":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:40861:2465":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:44422:6045":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:43262:2569":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12622:3298":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13033:3806":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6544:4103":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5032:4150":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:9978:2647":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:39333:5893":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:22075:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:531:4752":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:39267:5886":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:7463:5694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13744:4009":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:2677:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10428:6425":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12550:3631":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:39413:5899":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:21727:5793":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"14:215:4567":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13324:3877":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42503:5762":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:7521:5705":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:2190:34606":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4743:5169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10092:6415":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6662:4291":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9469:6373":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5071:4151":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11721:3461":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43239:6010":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:42754:2566":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8144:2126":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:7590:6618":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:2359:2681":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12461:3613":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:44600:6053":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:45090:6073":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:217:2884":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:1460:6536":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:9431:2954":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:9267:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:41257:1648":{"crate_id":2,"path":["core","sync","atomic","ATOMIC_USIZE_INIT"],"kind":"constant"},"6:4539:5096":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:40853:2585":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:1050:4353":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:9734:6390":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11902:3511":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:43566:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:14:2060":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:21260:32864":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6935:6475":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7103:6233":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:11324:5991":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13332:3878":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:4741:32698":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:5920:5748":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:39640:5916":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:4872:4145":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:755:3094":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:4759:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:11105:6567":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:43377:6021":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:2667:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:1210:6525":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"10:0:1948":{"crate_id":10,"path":["adler"],"kind":"module"},"16:4568:4136":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:6719:5637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42967:2558":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:11551:2545":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4929:5266":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"9:234:2170":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7335:34628":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4681:5138":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:7077:19637":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13265:3863":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:2781:12987":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:6326:6613":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:7293:4390":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:6580:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:491:3052":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:590:3064":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:2357:4071":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:43385:6023":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10615:3293":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:6521:5544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5951:5464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2572:4080":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:6543:2938":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:2166:33010":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11585:3437":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:8047:4474":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:553:4764":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:11476:6266":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:632:2174":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:1589:4834":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:12343:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:11052:2695":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:43424:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:546:4761":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:5582:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10186:6563":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:719:3086":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:20839:7655":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:1736:5739":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:903:2911":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:2674:2265":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:42772:2565":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:10626:6657":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:11119:1922":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:44839:6065":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:48938:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4400:4131":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:46596:6143":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4422:5052":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:2918:2129":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:1648:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8794:2174":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:609:6345":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:2675:2573":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:8963:6644":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:119:2869":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:620:2523":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5418:4155":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:2502:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:5000:4149":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:20688:7653":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:12385:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:4976:2217":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:39570:5906":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:4262:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:44745:6063":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6488:4255":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:22807:2527":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:21636:5781":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9895:6400":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:2905:4094":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:7434:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:0:1945":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:7682:2657":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:6530:5545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:812:2892":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:9721:6389":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:41949:5972":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46473:6137":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4841:7620":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:1713:2875":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:40845:2174":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"14:31:6511":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10670:3300":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:41438:2432":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9068:34632":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5741:19630":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:2426:4074":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:2866:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:45429:6094":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:1064:6524":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11600:3443":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:5449:5745":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:9350:34637":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12138:3546":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:3537:2585":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10257:6416":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"11:751:2911":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:975:6355":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1604:4846":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5716:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8397:2170":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:43405:6028":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:4100:7591":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4757:5174":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:3121:4627":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7588:6505":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:10863:2194":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:4091:6552":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:1652:4882":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6390:4249":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6132:4228":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:20832:7581":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"13:110:34613":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"0:123:1652":{"crate_id":0,"path":["autocfg","AutoCfg"],"kind":"struct"},"17:10516:3273":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:4510:4134":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:300:4621":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:2760:7643":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:38837:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10104:3231":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:1225:6524":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9098:6366":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:42800:2560":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11070:6255":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:6958:5726":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:2905:5715":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:6115:2928":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:2764:4088":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:9115:24030":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"1:1787:2638":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:960:2886":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:5734:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6460:4098":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:6793:4319":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11641:3454":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2611:2140":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:3921:7567":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:1034:6356":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:41657:5963":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11319:3388":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13499:3923":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13066:3817":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:41175:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:39620:5914":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9088:2695":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:4675:7580":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13678:3992":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:9986:3230":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7697:4104":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4583:5100":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13135:3833":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:5770:13304":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:45347:6093":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:4570:5565":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:7196:2271":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:46549:6139":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:45507:6095":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:11918:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:7644:7516":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:9048:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"14:202:12757":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:8773:32893":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:9875:2174":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:154:2866":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:30574:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:40802:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:2879:4093":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}