{"root":"0:0:1667","crate_version":"0.4.0","includes_private":false,"index":{"0:90:1870":{"id":"0:90:1870","crate_id":0,"name":"TO_SHOUTY_SNEK_CASE","span":{"filename":"src/shouty_snake.rs","begin":[28,4],"end":[28,49]},"visibility":"default","docs":"CONVERT THIS TYPE TO SNEK CASE.","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23429:16466":{"id":"2:23429:16466","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23430:58285","2:23431:58286","2:23432:58287"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23424:3237","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3345:3169":{"id":"2:3345:3169","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3346:181","2:3347:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:56234":{"id":"2:13446:56234","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15916:2027","self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49523:3432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10507:142":{"id":"2:10507:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10508:715","2:10510:8171"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[60,56],"end":[60,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"upper_camel::ToPascalCase","name":"ToPascalCase","id":"0:170:1612","glob":false}},"0:116:1891":{"id":"0:116:1891","crate_id":0,"name":"to_snake_case","span":{"filename":"src/snake.rs","begin":[19,4],"end":[19,43]},"visibility":"default","docs":"Convert this type to snake case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23424:3237":{"id":"2:23424:3237","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23425:1263","2:23426:1262","2:23427:1260","2:23428:1259"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22836:3300","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13481:7788":{"id":"2:13481:7788","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3558:2766":{"id":"2:3558:2766","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:181","2:3561:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3503:131":{"id":"2:3503:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6864:2513":{"id":"1:6864:2513","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6865:54657"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4688:2330":{"id":"1:4688:2330","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4689:1660","1:4690:54686","1:4692:54687","1:4693:3917","1:4694:54688","1:4695:7833","1:4696:2175","1:4705:2294"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5790:2502":{"id":"1:5790:2502","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5791:57295"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3159:228":{"id":"2:3159:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:127","2:3162:1409"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13405:2669":{"id":"2:13405:2669","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49387:2609","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124:1604":{"id":"0:124:1604","crate_id":0,"name":"AsSnakeCase","span":{"filename":"src/snake.rs","begin":[51,0],"end":[51,45]},"visibility":"public","docs":"This wrapper performs a snake case conversion in [`fmt::Display`].\n\n## Example:\n\n```\nuse heck::AsSnakeCase;\n\nlet sentence = \"We carry a new world here, in our hearts.\";\nassert_eq!(format!(\"{}\", AsSnakeCase(sentence)), \"we_carry_a_new_world_here_in_our_hearts\");\n```","links":{"`fmt::Display`":"2:10276:119"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3147:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:127:1533"],"impls":[]}},"2:3981:68":{"id":"2:3981:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3982:1421"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3408:3146":{"id":"2:3408:3146","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[57,56],"end":[57,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"snake::ToSnakeCase","name":"ToSnakeCase","id":"0:115:1606","glob":false}},"2:8381:151":{"id":"2:8381:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:1620","2:8383:2270","2:8384:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6792:2583":{"id":"1:6792:2583","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6793:54810","1:6794:54999"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:155:1593":{"id":"0:155:1593","crate_id":0,"name":"upper_camel","span":{"filename":"src/upper_camel.rs","begin":[1,0],"end":[84,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:166:1613","0:170:1612","0:175:1610"],"is_stripped":true}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[58,16],"end":[58,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"title::AsTitleCase","name":"AsTitleCase","id":"0:147:1608","glob":false}},"0:44:1596":{"id":"0:44:1596","crate_id":0,"name":"AsLowerCamelCase","span":{"filename":"src/lower_camel.rs","begin":[39,0],"end":[39,50]},"visibility":"public","docs":"This wrapper performs a lower camel case conversion in [`fmt::Display`].\n\n## Example:\n\n```\nuse heck::AsLowerCamelCase;\n\nlet sentence = \"It is we who built these palaces and cities.\";\nassert_eq!(format!(\"{}\", AsLowerCamelCase(sentence)), \"itIsWeWhoBuiltThesePalacesAndCities\");\n```","links":{"`fmt::Display`":"2:10276:119"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3147:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:47:1533"],"impls":[]}},"2:13393:56198":{"id":"2:13393:56198","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47437:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:1591":{"id":"0:104:1591","crate_id":0,"name":"snake","span":{"filename":"src/snake.rs","begin":[1,0],"end":[98,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:115:1606","0:117:1607","0:124:1604"],"is_stripped":true}},"0:143:1609":{"id":"0:143:1609","crate_id":0,"name":"ToTitleCase","span":{"filename":"src/title.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"This trait defines a title case conversion.\n\nIn Title Case, word boundaries are indicated by spaces, and every word is\ncapitalized.\n\n## Example:\n\n```rust\nuse heck::ToTitleCase;\n\nlet sentence = \"We have always lived in slums and holes in the wall.\";\nassert_eq!(sentence.to_title_case(), \"We Have Always Lived In Slums And Holes In The Wall\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:144:1951"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13487:59655":{"id":"2:13487:59655","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3262:220":{"id":"2:3262:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6103:1665":{"id":"5:6103:1665","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3318:2679":{"id":"2:3318:2679","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:181","2:3321:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13045:3095":{"id":"2:13045:3095","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13471:59650":{"id":"2:13471:59650","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2907:124":{"id":"2:2907:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4991:2542":{"id":"1:4991:2542","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4992:2693","1:4993:57621"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:99:1533":{"id":"0:99:1533","crate_id":0,"name":"0","span":{"filename":"src/shouty_snake.rs","begin":[53,44],"end":[53,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:13467:59648":{"id":"2:13467:59648","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3228:115":{"id":"2:3228:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3229:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:1775","5:785:2323","5:786:2324"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:1871":{"id":"2:3255:1871","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6442:2567":{"id":"1:6442:2567","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6443:2951","1:6444:2952","1:6445:54452","1:6446:57669","1:6448:57673","1:6450:57670","1:6451:57671","1:6453:57672"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6464:2564":{"id":"1:6464:2564","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6465:55242","1:6466:6795","1:6467:55243","1:6468:55244","1:6469:55245","1:6470:55246"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3398:3141":{"id":"2:3398:3141","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:181","2:3401:1229"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3486:2614":{"id":"2:3486:2614","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3473:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3416:3132":{"id":"2:3416:3132","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:1227"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6105:2635":{"id":"5:6105:2635","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88:1865":{"id":"0:88:1865","crate_id":0,"name":"to_shouty_snake_case","span":{"filename":"src/shouty_snake.rs","begin":[20,4],"end":[20,50]},"visibility":"default","docs":"Convert this type to shouty snake case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5837:3650":{"id":"5:5837:3650","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:33429"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:3648":{"id":"5:5833:3648","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3721:3049":{"id":"2:3721:3049","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3723:53879"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5724:2498":{"id":"1:5724:2498","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5725:54585","1:5726:54587","1:5727:54586","1:5728:54588"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22710:3299":{"id":"2:22710:3299","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22711:3236","2:22712:58511","2:22713:58931","2:22714:58932","2:22715:58933","2:22716:42883","2:22717:58934","2:22718:58935","2:22719:58936","2:22720:58937","2:22721:58938","2:22722:58939","2:22723:58940","2:22724:58941","2:22725:8194","2:22726:58942","2:22727:58551","2:22728:7519","2:22729:58286","2:22730:58285","2:22731:58287","2:22732:58512","2:22733:58513","2:22734:58514","2:22735:58515"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22812:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1667":{"id":"0:0:1667","crate_id":0,"name":"heck","span":{"filename":"src/lib.rs","begin":[1,0],"end":[206,1]},"visibility":"public","docs":"**heck** is a case conversion library.\n\nThis library exists to provide case conversion between common cases like\nCamelCase and snake_case. It is intended to be unicode aware, internally,\nconsistent, and reasonably well performing.\n\n## Definition of a word boundary\n\nWord boundaries are defined as the \"unicode words\" defined in the\n`unicode_segmentation` library, as well as within those words in this\nmanner:\n\n1. All underscore characters are considered word boundaries.\n2. If an uppercase character is followed by lowercase letters, a word\nboundary is considered to be just prior to that uppercase character.\n3. If multiple uppercase characters are consecutive, they are considered to\nbe within a single word, except that the last will be part of the next word\nif it is followed by lowercase characters (see rule 2).\n\nThat is, \"HelloWorld\" is segmented `Hello|World` whereas \"XMLHttpRequest\" is\nsegmented `XML|Http|Request`.\n\nCharacters not within words (such as spaces, punctuations, and underscores)\nare not included in the output string except as they are a part of the case\nbeing converted to. Multiple adjacent word boundaries (such as a series of\nunderscores) are folded into one. (\"hello__world\" in snake case is therefore\n\"hello_world\", not the exact same string). Leading or trailing word boundary\nindicators are dropped, except insofar as CamelCase capitalizes the first\nword.\n\n### Cases contained in this library:\n\n1. UpperCamelCase\n2. lowerCamelCase\n3. snake_case\n4. kebab-case\n5. SHOUTY_SNAKE_CASE\n6. Title Case\n7. SHOUTY-KEBAB-CASE","links":{},"attrs":["#![deny(missing_docs)]","#![forbid(unsafe_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:184","0:187","0:191","0:194","0:198","0:201","0:205","0:208","0:211","0:214","0:218","0:221","0:224","0:227","0:231","0:234","0:238","0:241","0:244","0:247"],"is_stripped":false}},"2:3328:3162":{"id":"2:3328:3162","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3330:181","2:3331:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3349:2680":{"id":"2:3349:2680","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3351:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3156:135":{"id":"2:3156:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9237:2809":{"id":"2:9237:2809","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13403:1657":{"id":"2:13403:1657","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15910:2022"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49371:3453","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10286:189":{"id":"2:10286:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10287:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4631:2518":{"id":"1:4631:2518","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4632:2885","1:4633:57419","1:4635:57420","1:4636:57421","1:4637:2601","1:4638:7745","1:4639:7744","1:4641:57422","1:4642:2294","1:4643:2669","1:4644:2277","1:4646:2288"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3629:3529":{"id":"2:3629:3529","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3631:58062","2:3632:58063","2:3633:56236"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:22899:2562":{"id":"2:22899:2562","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22889:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:55452","1:2579:2004","1:2580:55451","1:2581:55453","1:2582:55128"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10269:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10276:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10288:2331":{"id":"2:10288:2331","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10289:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6107:54463":{"id":"5:6107:54463","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15916:2027"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13378":{"id":"2:13378","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12475:1333","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13379:793","2:13380:2266","2:13381:8192","2:13382:59636","2:13384:59637","2:13387:54942","2:13388:59638","2:13389:304","2:13390:56201","2:13391:56197","2:13393:56198","2:13395:56199","2:13397:56200","2:13399:2662","2:13400:59639","2:13401:56220","2:13402:56221","2:13403:1657","2:13404:1646","2:13405:2669","2:13406:8403","2:13407:8401","2:13408:3994","2:13409:59640","2:13410:8140","2:13411:56236","2:13414:55862","2:13417:55864","2:13420:2305","2:13424:2265","2:13428:1621","2:13431:8402","2:13434:56230","2:13437:59641","2:13440:59642","2:13443:56232","2:13446:56234","2:13449:59643","2:13452:59644","2:13455:2106","2:13458:59645","2:13461:59646","2:13464:59647","2:13467:59648","2:13469:59649","2:13471:59650","2:13473:59651","2:13474:59652","2:13475:59653","2:13478:59654","2:13481:7788","2:13484:56237","2:13487:59655","2:13490:59656","2:13493:59657","2:13496:3339","2:13498:3631","2:13499:54464","2:13500:54465","2:13501:54466","2:13502:59658","2:13504:2538","2:13505:59659"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8425:120":{"id":"2:8425:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8426:2260","2:8427:2261","2:8428:2262","2:8429:2263","2:8433:2264","2:8436:2265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3357:3173":{"id":"2:3357:3173","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6964:2512":{"id":"1:6964:2512","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6965:55312"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3715:137":{"id":"2:3715:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3717:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3540:3246":{"id":"2:3540:3246","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3542:237","2:3543:206","2:3544:58219"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6106:54462":{"id":"5:6106:54462","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15916:2027"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23048:16447":{"id":"2:23048:16447","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23049:5870","2:23050:58441","2:23051:58442"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23041:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3421:3152":{"id":"2:3421:3152","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:1230"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:47:1533":{"id":"0:47:1533","crate_id":0,"name":"0","span":{"filename":"src/lower_camel.rs","begin":[39,43],"end":[39,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:13499:54464":{"id":"2:13499:54464","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:1621":{"id":"2:13428:1621","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13015:3091","str::split_whitespace":"1:15916:2027","`DoubleEndedIterator`":"2:8425:120","prim@char":"1:15910:2022","str::rsplit":"1:15916:2027"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49401:2611","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1533":{"id":"0:127:1533","crate_id":0,"name":"0","span":{"filename":"src/snake.rs","begin":[51,38],"end":[51,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:13474:59652":{"id":"2:13474:59652","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13496:3339":{"id":"2:13496:3339","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12954:2736","FromStr::Err":"2:12954:2736"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47564:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12954:2736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12954:2736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:2092"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8860:3213":{"id":"2:8860:3213","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3153:149":{"id":"2:3153:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:2259"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10290:2332":{"id":"2:10290:2332","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10291:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13434:56230":{"id":"2:13434:56230","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15910:2022","`DoubleEndedIterator`":"2:8425:120","self::pattern":"2:13015:3091","str::split":"1:15916:2027"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49419:3428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1333","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:60283","5:6085:2613","5:6088:60284","5:6091:1663","5:6103:1665","5:6104:60285","5:6105:2635","5:6106:54462","5:6107:54463"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3370:3133":{"id":"2:3370:3133","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3371:181","2:3372:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14:1595":{"id":"0:14:1595","crate_id":0,"name":"ToKebabCase","span":{"filename":"src/kebab.rs","begin":[17,0],"end":[20,1]},"visibility":"public","docs":"This trait defines a kebab case conversion.\n\nIn kebab-case, word boundaries are indicated by hyphens.\n\n## Example:\n\n```rust\nuse heck::ToKebabCase;\n\nlet sentence = \"We are going to inherit the earth.\";\nassert_eq!(sentence.to_kebab_case(), \"we-are-going-to-inherit-the-earth\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:15:1774"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13743:150":{"id":"2:13743:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13744:181","2:13745:150","2:13746:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:21:1533":{"id":"0:21:1533","crate_id":0,"name":"0","span":{"filename":"src/kebab.rs","begin":[38,38],"end":[38,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:13431:8402":{"id":"2:13431:8402","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15910:2022","self::pattern":"2:13015:3091"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12807:3425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22836:3300":{"id":"2:22836:3300","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22837:3236","2:22838:1240","2:22839:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2938:177":{"id":"2:2938:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2939:415","2:2940:2252","2:2941:2249","2:2942:2257"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2907:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3259:217":{"id":"2:3259:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3333:3164":{"id":"2:3333:3164","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:181","2:3336:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:166:1613":{"id":"0:166:1613","crate_id":0,"name":"ToUpperCamelCase","span":{"filename":"src/upper_camel.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"This trait defines an upper camel case conversion.\n\nIn UpperCamelCase, word boundaries are indicated by capital letters,\nincluding the first word.\n\n## Example:\n\n```rust\nuse heck::ToUpperCamelCase;\n\nlet sentence = \"We are not in the least afraid of ruins.\";\nassert_eq!(sentence.to_upper_camel_case(), \"WeAreNotInTheLeastAfraidOfRuins\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:167:1973"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3323:2681":{"id":"2:3323:2681","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:181","2:3326:1348"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13390:56201":{"id":"2:13390:56201","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15927:2036"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:178:1533":{"id":"0:178:1533","crate_id":0,"name":"0","span":{"filename":"src/upper_camel.rs","begin":[52,43],"end":[52,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:13490:59656":{"id":"2:13490:59656","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15910:2022","self::pattern":"2:13015:3091"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3361:3175":{"id":"2:3361:3175","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3363:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3562:3303":{"id":"2:3562:3303","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3564:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3558:2766","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13452:59644":{"id":"2:13452:59644","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14201:2689":{"id":"2:14201:2689","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14202:55395","2:14203:55396","2:14204:55397","2:14205:55398","2:14206:55399","2:14207:55400","2:14208:2294"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13406:8403":{"id":"2:13406:8403","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15916:2027"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49675:3468","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2850:3185":{"id":"2:2850:3185","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:54425"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13397:56200":{"id":"2:13397:56200","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:9236:2810":{"id":"2:9236:2810","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13440:59642":{"id":"2:13440:59642","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15916:2027","str::split":"1:15916:2027","self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49469:3459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68:1598":{"id":"0:68:1598","crate_id":0,"name":"AsShoutyKebabCase","span":{"filename":"src/shouty_kebab.rs","begin":[39,0],"end":[39,51]},"visibility":"public","docs":"This wrapper performs a kebab case conversion in [`fmt::Display`].\n\n## Example:\n\n```\nuse heck::AsShoutyKebabCase;\n\nlet sentence = \"We are going to inherit the earth.\";\nassert_eq!(format!(\"{}\", AsShoutyKebabCase(sentence)), \"WE-ARE-GOING-TO-INHERIT-THE-EARTH\");\n```","links":{"`fmt::Display`":"2:10276:119"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3147:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:71:1533"],"impls":[]}},"0:198":{"id":"0:198","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,23],"end":[53,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"shouty_kebab::AsShoutyKebabCase","name":"AsShoutyKebabCase","id":"0:68:1598","glob":false}},"1:5658:2579":{"id":"1:5658:2579","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5659:4369","1:5660:54942"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:26:1588":{"id":"0:26:1588","crate_id":0,"name":"lower_camel","span":{"filename":"src/lower_camel.rs","begin":[1,0],"end":[85,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:40:1597","0:44:1596"],"is_stripped":true}},"1:6868:2571":{"id":"1:6868:2571","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6869:57399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[51,29],"end":[51,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"kebab::ToKebabCase","name":"ToKebabCase","id":"0:14:1595","glob":false}},"2:13493:59657":{"id":"2:13493:59657","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15910:2022","self::pattern":"2:13015:3091"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14127:141":{"id":"2:14127:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14128:277","2:14129:518","2:14130:280","2:14131:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13449:59643":{"id":"2:13449:59643","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1844":{"id":"0:65:1844","crate_id":0,"name":"to_shouty_kebab_case","span":{"filename":"src/shouty_kebab.rs","begin":[20,4],"end":[20,50]},"visibility":"default","docs":"Convert this type to shouty kebab case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10278:2326":{"id":"2:10278:2326","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10279:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:76:1590":{"id":"0:76:1590","crate_id":0,"name":"shouty_snake","span":{"filename":"src/shouty_snake.rs","begin":[1,0],"end":[85,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:87:1602","0:89:1603","0:96:1600"],"is_stripped":true}},"2:13502:59658":{"id":"2:13502:59658","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15910:2022"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49700:3471","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5780:2501":{"id":"1:5780:2501","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5781:54981","1:5782:54982","1:5783:54983","1:5784:54984"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13505:59659":{"id":"2:13505:59659","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15910:2022"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49718:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3339:3159":{"id":"2:3339:3159","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:181","2:3342:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8450:2214":{"id":"2:8450:2214","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8451:793","2:8452:2266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13388:59638":{"id":"2:13388:59638","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3085:3184":{"id":"2:3085:3184","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3084:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6690:2497":{"id":"1:6690:2497","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6691:55345","1:6692:6717","1:6693:6718","1:6694:6720","1:6695:6719","1:6696:6721","1:6697:6722","1:6698:6724","1:6699:4916","1:6700:6727","1:6701:6728","1:6702:6729","1:6703:6730","1:6704:6731","1:6705:6732","1:6706:6725","1:6707:6726"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:170:1612":{"id":"0:170:1612","crate_id":0,"name":"ToPascalCase","span":{"filename":"src/upper_camel.rs","begin":[31,0],"end":[34,1]},"visibility":"public","docs":"ToPascalCase is an alias for ToUpperCamelCase. See ToUpperCamelCase for more\ndocumentation.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:171:1976"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10282:2333":{"id":"2:10282:2333","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10283:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3710:224":{"id":"2:3710:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3711:181","2:3712:3049","2:3713:686","2:3714:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3715:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13401:56220":{"id":"2:13401:56220","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15916:2027"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[52,22],"end":[52,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"lower_camel::AsLowerCamelCase","name":"AsLowerCamelCase","id":"0:44:1596","glob":false}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,81],"end":[55,97]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"shouty_snake::ToShoutySnekCase","name":"ToShoutySnekCase","id":"0:89:1603","glob":false}},"0:117:1607":{"id":"0:117:1607","crate_id":0,"name":"ToSnekCase","span":{"filename":"src/snake.rs","begin":[24,0],"end":[27,1]},"visibility":"public","docs":"Oh heck, SnekCase is an alias for ToSnakeCase. See ToSnakeCase for\nmore documentation.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:118:1895"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22763:3232":{"id":"2:22763:3232","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22764:3236","2:22765:58511","2:22766:1220","2:22767:1221","2:22768:42883","2:22769:58548","2:22770:8360","2:22771:58549","2:22772:58550","2:22773:58551","2:22774:58512","2:22775:58513","2:22776:58514","2:22777:58515","2:22778:58516","2:22779:58517","2:22780:58518"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22812:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,62],"end":[55,79]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"shouty_snake::ToShoutySnakeCase","name":"ToShoutySnakeCase","id":"0:87:1602","glob":false}},"2:13437:59641":{"id":"2:13437:59641","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15916:2027","prim@char":"1:15910:2022","`DoubleEndedIterator`":"2:8425:120","str::rsplit_terminator":"1:15916:2027","self::pattern":"2:13015:3091"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49451:3458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13395:56199":{"id":"2:13395:56199","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8340:3157":{"id":"2:8340:3157","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8342:2314"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3497:2213":{"id":"2:3497:2213","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2902:183":{"id":"2:2902:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2904:604","2:2905:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13473:59651":{"id":"2:13473:59651","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13034:3090":{"id":"2:13034:3090","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13036:3113","2:13037:922","2:13038:58079","2:13039:58080"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3756:3198":{"id":"2:3756:3198","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:71:1533":{"id":"0:71:1533","crate_id":0,"name":"0","span":{"filename":"src/shouty_kebab.rs","begin":[39,44],"end":[39,49]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"1:5740:2500":{"id":"1:5740:2500","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5741:1649","1:5742:7176"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13408:3994":{"id":"2:13408:3994","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49655:2612","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6091:1663":{"id":"5:6091:1663","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5652:2581":{"id":"1:5652:2581","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5653:55010","1:5654:3732"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10284:2334":{"id":"2:10284:2334","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10285:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13025:3092":{"id":"2:13025:3092","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13027:3090","2:13028:58996","2:13029:58997","2:13030:58998","2:13031:59000","2:13032:58999","2:13033:59001"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3793:3199":{"id":"2:3793:3199","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10219:2330":{"id":"2:10219:2330","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10220:1524","2:10221:55510","2:10223:2175"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:40:1597":{"id":"0:40:1597","crate_id":0,"name":"ToLowerCamelCase","span":{"filename":"src/lower_camel.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"This trait defines a lower camel case conversion.\n\nIn lowerCamelCase, word boundaries are indicated by capital letters,\nexcepting the first word.\n\n## Example:\n\n```rust\nuse heck::ToLowerCamelCase;\n\nlet sentence = \"It is we who built these palaces and cities.\";\nassert_eq!(sentence.to_lower_camel_case(), \"itIsWeWhoBuiltThesePalacesAndCities\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:41:1822"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13504:2538":{"id":"2:13504:2538","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15910:2022"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49709:2539","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:60285":{"id":"5:6104:60285","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8359:216","`Box<str>`":"5:432:2216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:3654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[57,29],"end":[57,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"snake::AsSnakeCase","name":"AsSnekCase","id":"0:124:1604","glob":false}},"2:13381:8192":{"id":"2:13381:8192","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10517:146":{"id":"2:10517:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10518:652","2:10519:1660","2:10520:55022","2:10521:55023","2:10522:55024","2:10523:55025","2:10524:55026","2:10525:55027","2:10526:55028","2:10527:55029","2:10528:55030","2:10529:55031","2:10530:55032","2:10531:55033","2:10532:55034","2:10533:1524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[51,16],"end":[51,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"kebab::AsKebabCase","name":"AsKebabCase","id":"0:18:1594","glob":false}},"2:13478:59654":{"id":"2:13478:59654","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10276:119":{"id":"2:10276:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4706:2604":{"id":"1:4706:2604","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4707:54496","1:4708:39910","1:4709:54497","1:4710:54498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22799:3298":{"id":"2:22799:3298","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22800:58511","2:22801:1220","2:22802:1221","2:22803:58512","2:22804:58513","2:22805:58514","2:22806:58515","2:22807:58516","2:22808:58517","2:22809:58518"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22812:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2948:184":{"id":"2:2948:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2950:997","2:2951:826","2:2952:792","2:2953:713","2:2954:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8857:2668":{"id":"2:8857:2668","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13407:8401":{"id":"2:13407:8401","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15916:2027"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49684:3469","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171:1976":{"id":"0:171:1976","crate_id":0,"name":"to_pascal_case","span":{"filename":"src/upper_camel.rs","begin":[33,4],"end":[33,44]},"visibility":"default","docs":"Convert this type to upper camel case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13484:56237":{"id":"2:13484:56237","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1600":{"id":"0:96:1600","crate_id":0,"name":"AsShoutySnakeCase","span":{"filename":"src/shouty_snake.rs","begin":[53,0],"end":[53,51]},"visibility":"public","docs":"This wrapper performs a shouty snake  case conversion in [`fmt::Display`].\n\n## Example:\n\n```\nuse heck::AsShoutySnakeCase;\n\nlet sentence = \"That world is growing in this minute.\";\nassert_eq!(format!(\"{}\", AsShoutySnakeCase(sentence)), \"THAT_WORLD_IS_GROWING_IN_THIS_MINUTE\");\n```","links":{"`fmt::Display`":"2:10276:119"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3147:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:99:1533"],"impls":[]}},"0:118:1895":{"id":"0:118:1895","crate_id":0,"name":"to_snek_case","span":{"filename":"src/snake.rs","begin":[26,4],"end":[26,42]},"visibility":"default","docs":"Convert this type to snek case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1390"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3377:2703":{"id":"2:3377:2703","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:181","2:3380:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13728:138":{"id":"2:13728:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13729:181","2:13730:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6866:2570":{"id":"1:6866:2570","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6867:55192"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:205":{"id":"0:205","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,4],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"shouty_snake::AsShoutySnakeCase","name":"AsShoutySnakeCase","id":"0:96:1600","glob":false}},"2:3150:74":{"id":"2:3150:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:2258"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10280:2325":{"id":"2:10280:2325","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10281:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13389:304":{"id":"2:13389:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15927:2036","str::as_mut_ptr":"1:15916:2027"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13461:59646":{"id":"2:13461:59646","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022","`DoubleEndedIterator`":"2:8425:120","str::rmatch_indices":"1:15916:2027"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49551:3462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3698:3530":{"id":"2:3698:3530","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3629:3529","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3:1587":{"id":"0:3:1587","crate_id":0,"name":"kebab","span":{"filename":"src/kebab.rs","begin":[1,0],"end":[70,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:14:1595","0:18:1594"],"is_stripped":true}},"2:8864:3242":{"id":"2:8864:3242","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7905:3243","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6562:2575":{"id":"1:6562:2575","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6563:55321","1:6564:55322"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:144:1951":{"id":"0:144:1951","crate_id":0,"name":"to_title_case","span":{"filename":"src/title.rs","begin":[20,4],"end":[20,43]},"visibility":"default","docs":"Convert this type to title case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10911:214":{"id":"2:10911:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10913:181","2:10914:56197","2:10915:56198","2:10916:56199","2:10917:56200","2:10918:753","2:10919:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10902:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13500:54465":{"id":"2:13500:54465","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:60283":{"id":"5:6084:60283","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:3654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:3654","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3147:75":{"id":"2:3147:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3149:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:1871","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13414:55862":{"id":"2:13414:55862","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15910:2022","self::pattern":"2:13015:3091"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:59636":{"id":"2:13382:59636","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3404:3144":{"id":"2:3404:3144","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3406:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13424:2265":{"id":"2:13424:2265","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022","`None`":"2:47437:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13464:59647":{"id":"2:13464:59647","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8425:120","prim@char":"1:15910:2022","str::match_indices":"1:15916:2027","self::pattern":"2:13015:3091"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49569:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3412:3148":{"id":"2:3412:3148","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3414:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13498:3631":{"id":"2:13498:3631","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3382:2704":{"id":"2:3382:2704","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:181","2:3385:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3473:116":{"id":"2:3473:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3474:221","2:3475:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4713:2607":{"id":"1:4713:2607","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4714:54812","1:4715:54813","1:4716:54814","1:4718:2606","1:4719:54815","1:4721:1621","1:4722:3994"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4631:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13417:55864":{"id":"2:13417:55864","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3387:2705":{"id":"2:3387:2705","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13380:2266":{"id":"2:13380:2266","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13443:56232":{"id":"2:13443:56232","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15916:2027","self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49505:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:234":{"id":"0:234","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[58,29],"end":[58,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"title::ToTitleCase","name":"ToTitleCase","id":"0:143:1609","glob":false}},"2:4032:2529":{"id":"2:4032:2529","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4033:55128"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8390:2215":{"id":"2:8390:2215","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8392:2267","2:8394:2268","2:8395:2269"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12954:2736":{"id":"2:12954:2736","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12955:126","2:12956:57653"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:167:1973":{"id":"0:167:1973","crate_id":0,"name":"to_upper_camel_case","span":{"filename":"src/upper_camel.rs","begin":[20,4],"end":[20,49]},"visibility":"default","docs":"Convert this type to upper camel case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3500:130":{"id":"2:3500:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3502:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3503:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:53:1589":{"id":"0:53:1589","crate_id":0,"name":"shouty_kebab","span":{"filename":"src/shouty_kebab.rs","begin":[1,0],"end":[72,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:64:1599","0:68:1598"],"is_stripped":true}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[52,40],"end":[52,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"lower_camel::ToLowerCamelCase","name":"ToLowerCamelCase","id":"0:40:1597","glob":false}},"1:5732:2499":{"id":"1:5732:2499","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5733:1649","1:5734:55142","1:5735:55143"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:150:1533":{"id":"0:150:1533","crate_id":0,"name":"0","span":{"filename":"src/title.rs","begin":[39,38],"end":[39,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:3392:3138":{"id":"2:3392:3138","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3394:181","2:3395:1226"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13387:54942":{"id":"2:13387:54942","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12486:3597"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1774":{"id":"0:15:1774","crate_id":0,"name":"to_kebab_case","span":{"filename":"src/kebab.rs","begin":[19,4],"end":[19,43]},"visibility":"default","docs":"Convert this type to kebab case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3291:2212":{"id":"2:3291:2212","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3353:2682":{"id":"2:3353:2682","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3355:1349"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[60,70],"end":[60,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"upper_camel::ToUpperCamelCase","name":"ToUpperCamelCase","id":"0:166:1613","glob":false}},"2:8377:136":{"id":"2:8377:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8379:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4764:3088":{"id":"2:4764:3088","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4765:1620","2:4766:58602","2:4767:2272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6795:2567":{"id":"1:6795:2567","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6796:54453"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3250:211":{"id":"2:3250:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3260:106":{"id":"2:3260:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13379:793":{"id":"2:13379:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15910:2022"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13475:59653":{"id":"2:13475:59653","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13045:3095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3365:3177":{"id":"2:3365:3177","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3367:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:89:1603":{"id":"0:89:1603","crate_id":0,"name":"ToShoutySnekCase","span":{"filename":"src/shouty_snake.rs","begin":[25,0],"end":[29,1]},"visibility":"public","docs":"Oh heck, ToShoutySnekCase is an alias for ToShoutySnakeCase. See\nToShoutySnakeCase for more documentation.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:90:1870"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13411:56236":{"id":"2:13411:56236","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15910:2022","self::pattern":"2:13015:3091"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5746:2497":{"id":"1:5746:2497","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5747:6370","1:5748:57295","1:5749:1649","1:5750:57296","1:5751:2951","1:5752:2952","1:5753:57297","1:5754:1297","1:5755:57298","1:5756:57299","1:5757:57300","1:5758:57301","1:5759:57302","1:5760:57303","1:5761:57304","1:5762:57305"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:2305":{"id":"2:13420:2305","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47437:176","prim@char":"1:15910:2022","self::pattern":"2:13015:3091"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64:1599":{"id":"0:64:1599","crate_id":0,"name":"ToShoutyKebabCase","span":{"filename":"src/shouty_kebab.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"This trait defines a shouty kebab case conversion.\n\nIn SHOUTY-KEBAB-CASE, word boundaries are indicated by hyphens and all\nwords are in uppercase.\n\n## Example:\n\n```rust\nuse heck::ToShoutyKebabCase;\n\nlet sentence = \"We are going to inherit the earth.\";\nassert_eq!(sentence.to_shouty_kebab_case(), \"WE-ARE-GOING-TO-INHERIT-THE-EARTH\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:65:1844"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13458:59645":{"id":"2:13458:59645","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13015:3091","prim@char":"1:15910:2022","`DoubleEndedIterator`":"2:8425:120","str::matches":"1:15916:2027"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49623:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[57,16],"end":[57,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"snake::AsSnakeCase","name":"AsSnakeCase","id":"0:124:1604","glob":false}},"1:7800:2784":{"id":"1:7800:2784","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7801:57343"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1822":{"id":"0:41:1822","crate_id":0,"name":"to_lower_camel_case","span":{"filename":"src/lower_camel.rs","begin":[20,4],"end":[20,49]},"visibility":"default","docs":"Convert this type to lower camel case.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"5:783:222","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10269:109":{"id":"2:10269:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10270:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13501:54466":{"id":"2:13501:54466","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1606":{"id":"0:115:1606","crate_id":0,"name":"ToSnakeCase","span":{"filename":"src/snake.rs","begin":[17,0],"end":[20,1]},"visibility":"public","docs":"This trait defines a snake case conversion.\n\nIn snake_case, word boundaries are indicated by underscores.\n\n## Example:\n\n```rust\nuse heck::ToSnakeCase;\n\nlet sentence = \"We carry a new world here, in our hearts.\";\nassert_eq!(sentence.to_snake_case(), \"we_carry_a_new_world_here_in_our_hearts\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:116:1891"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12462:3638":{"id":"2:12462:3638","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12463:1620","2:12464:58168"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[57,69],"end":[57,79]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"snake::ToSnekCase","name":"ToSnekCase","id":"0:117:1607","glob":false}},"2:3258:218":{"id":"2:3258:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7905:3243":{"id":"2:7905:3243","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7906:59034","2:7907:59035","2:7908:59032","2:7909:59030","2:7910:59036","2:7911:59033","2:7912:59031"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3163:227":{"id":"2:3163:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3165:127","2:3166:1408"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13402:56221":{"id":"2:13402:56221","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15916:2027"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23733:3038":{"id":"2:23733:3038","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23734:3236"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23729:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:132:1592":{"id":"0:132:1592","crate_id":0,"name":"title","span":{"filename":"src/title.rs","begin":[1,0],"end":[71,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:143:1609","0:147:1608"],"is_stripped":true}},"1:1079:2536":{"id":"1:1079:2536","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:1775","1:1081:3631","1:1082:54462","1:1083:54463","1:1084:54464","1:1085:54465","1:1086:54466"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13384:59637":{"id":"2:13384:59637","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15916:2027"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5802:2505":{"id":"1:5802:2505","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5803:1649"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:87:1602":{"id":"0:87:1602","crate_id":0,"name":"ToShoutySnakeCase","span":{"filename":"src/shouty_snake.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"This trait defines a shouty snake case conversion.\n\nIn SHOUTY_SNAKE_CASE, word boundaries are indicated by underscores and all\nwords are in uppercase.\n\n## Example:\n\n```rust\nuse heck::ToShoutySnakeCase;\n\nlet sentence = \"That world is growing in this minute.\";\nassert_eq!(sentence.to_shouty_snake_case(), \"THAT_WORLD_IS_GROWING_IN_THIS_MINUTE\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:88:1865"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13040:3094":{"id":"2:13040:3094","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13042:2260","2:13043:58498","2:13044:58499"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13034:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"shouty_snake::AsShoutySnakeCase","name":"AsShoutySnekCase","id":"0:96:1600","glob":false}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[60,4],"end":[60,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"upper_camel::AsUpperCamelCase","name":"AsUpperCamelCase","id":"0:175:1610","glob":false}},"2:10552:2702":{"id":"2:10552:2702","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10553:146","2:10554:7885","2:10555:57786"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13400:59639":{"id":"2:13400:59639","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15916:2027","crate::ops::IndexMut":"2:3562:3303","`str`":"1:15916:2027"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:9342:2559":{"id":"1:9342:2559","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9343:57271","1:9344:57272","1:9345:57273","1:9346:57274","1:9347:57275","1:9348:39515","1:9349:57270"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8579:157":{"id":"2:8579:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8580:1620","2:8581:922","2:8582:2271","2:8585:2272","2:8586:495","2:8588:2273","2:8591:2274","2:8592:2275","2:8593:2276","2:8594:2277","2:8596:2278","2:8598:2279","2:8599:2280","2:8601:841","2:8604:2281","2:8611:2282","2:8613:2283","2:8616:2284","2:8617:1647","2:8618:2285","2:8620:2286","2:8622:2287","2:8625:1301","2:8626:2288","2:8627:2289","2:8631:2290","2:8634:2291","2:8635:2292","2:8636:2293","2:8638:2294","2:8639:2221","2:8641:2295","2:8644:2296","2:8646:2297","2:8656:2298","2:8671:2299","2:8673:2300","2:8677:2301","2:8686:2302","2:8689:2303","2:8691:2304","2:8694:276","2:8701:294","2:8708:2305","2:8715:2306","2:8724:2307","2:8734:1014","2:8741:2308","2:8748:2252","2:8749:2249","2:8750:2254","2:8762:2253","2:8769:2251","2:8781:2250","2:8788:2309","2:8789:2310","2:8794:2311","2:8797:2312","2:8800:2313","2:8801:2314","2:8803:2315","2:8805:415","2:8808:2316","2:8811:997","2:8814:2317","2:8817:604","2:8820:2318","2:8823:907","2:8825:826","2:8827:792","2:8829:713","2:8831:696","2:8833:2319","2:8834:2320","2:8842:2321"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13455:2106":{"id":"2:13455:2106","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13015:3091","str::matches":"1:15916:2027","`DoubleEndedIterator`":"2:8425:120","prim@char":"1:15910:2022"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49605:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13391:56197":{"id":"2:13391:56197","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47437:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23096:3249":{"id":"2:23096:3249","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23733:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23087:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[53,42],"end":[53,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"shouty_kebab::ToShoutyKebabCase","name":"ToShoutyKebabCase","id":"0:64:1599","glob":false}},"2:13399:2662":{"id":"2:13399:2662","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15916:2027","crate::ops::Index":"2:3558:2766","str::slice_mut_unchecked":"1:15916:2027"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:2613":{"id":"5:6085:2613","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3506:132":{"id":"2:3506:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:181","2:3509:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:147:1608":{"id":"0:147:1608","crate_id":0,"name":"AsTitleCase","span":{"filename":"src/title.rs","begin":[39,0],"end":[39,45]},"visibility":"public","docs":"This wrapper performs a title case conversion in [`fmt::Display`].\n\n## Example:\n\n```\nuse heck::AsTitleCase;\n\nlet sentence = \"We have always lived in slums and holes in the wall.\";\nassert_eq!(format!(\"{}\", AsTitleCase(sentence)), \"We Have Always Lived In Slums And Holes In The Wall\");\n```","links":{"`fmt::Display`":"2:10276:119"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3147:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:150:1533"],"impls":[]}},"2:13409:59640":{"id":"2:13409:59640","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49665:3467","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13404:1646":{"id":"2:13404:1646","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15910:2022"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49377:3454","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1594":{"id":"0:18:1594","crate_id":0,"name":"AsKebabCase","span":{"filename":"src/kebab.rs","begin":[38,0],"end":[38,45]},"visibility":"public","docs":"This wrapper performs a kebab case conversion in [`fmt::Display`].\n\n## Example:\n\n```\nuse heck::AsKebabCase;\n\nlet sentence = \"We are going to inherit the earth.\";\nassert_eq!(format!(\"{}\", AsKebabCase(sentence)), \"we-are-going-to-inherit-the-earth\");\n```","links":{"`fmt::Display`":"2:10276:119"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3147:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:21:1533"],"impls":[]}},"1:5794:2503":{"id":"1:5794:2503","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5795:55328"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8344:3156":{"id":"2:8344:3156","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8346:2315"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:175:1610":{"id":"0:175:1610","crate_id":0,"name":"AsUpperCamelCase","span":{"filename":"src/upper_camel.rs","begin":[52,0],"end":[52,50]},"visibility":"public","docs":"This wrapper performs a upper camel case conversion in [`fmt::Display`].\n\n## Example:\n\n```\nuse heck::AsUpperCamelCase;\n\nlet sentence = \"We are not in the least afraid of ruins.\";\nassert_eq!(format!(\"{}\", AsUpperCamelCase(sentence)), \"WeAreNotInTheLeastAfraidOfRuins\");\n```","links":{"`fmt::Display`":"2:10276:119"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3147:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:178:1533"],"impls":[]}},"2:13410:8140":{"id":"2:13410:8140","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49693:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13469:59649":{"id":"2:13469:59649","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:60284":{"id":"5:6088:60284","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[60,22],"end":[60,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"upper_camel::AsUpperCamelCase","name":"AsPascalCase","id":"0:175:1610","glob":false}}},"paths":{"1:13482:12195":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:3362:2698":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6807:4194":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:47547:39445":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:3839:4598":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6923:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:11453:2716":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:12005:54448":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:13477:5384":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:8808:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13119:5302":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:13854:33432":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:5029:5584":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4438:2633":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9600:60607":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:14030:3024":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:5736:4044":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:51224:3273":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13942:5529":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1655:2760":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:6644:4191":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:5561:4036":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11408:2569":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:6491:4186":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:47564:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:8254:2764":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"15:0:1998":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2991:4316":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:5766:4048":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:9860:4648":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:6852:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6691:4192":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:23733:3038":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:49804:3096":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"8:0:1992":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4306:6368":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47910:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:3091:4365":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:1011:2693":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10788:46924":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"9:1056:3873":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:823:4648":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"6:5159:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:51173:3285":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:0:1991":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:53367:7071":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:8930:2977":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:9961:46749":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:591:6007":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13532:5402":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:51612:3266":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6085:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2794:4061":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:6870:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2968:4305":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:48525:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:53495:7079":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6176:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:47742:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:7122:14592":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12610:5116":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6731:4340":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:8151:2270":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13306:5339":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:9005:46737":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13054:5265":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:46554:3069":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:9238:2857":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:4890:5580":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6391:4184":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:51864:7021":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:2843:4302":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5400:6621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:13700:2786":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:3710:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5228:6525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:51086:3260":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6152:4132":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:0:2000":{"crate_id":17,"path":["object"],"kind":"module"},"17:11277:4868":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3228:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:11111:2608":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5360:4023":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:5788:4598":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:46369:3620":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:53457:7077":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7158:4198":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4262:6345":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:1908:41173":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:7444:4598":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:5658:2579":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13356:5356":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:8978:2808":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"12:761:2746":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11226:7143":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:46226:2539":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5421:4026":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12480:5095":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:22495:2248":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:52989:3284":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:181:3952":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:11504:2726":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:46601:6979":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:10800:2510":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:50180:3556":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:13331:5348":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:53358:7070":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:49569:3463":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12208:5035":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13377:5360":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12095:5017":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:15003:2675":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:857:4498":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:599:6012":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14000:5539":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:14554:55016":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:24594:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:14715:7438":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"12:2025:2696":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:50133:3484":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6269:4182":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:3392:4319":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:46295:3623":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:7797:2782":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:48561:2347":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:3894:3783":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:48774:2726":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:9144:2817":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:9729:60605":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9574:4398":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11045:46751":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:4350:5564":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:903:2848":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:8097:3654":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:3862:6178":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:1236:46813":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11001:47002":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:10229:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6072:4016":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:6700:6727":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:24458:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:744:60627":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:12671:2883":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:6357:4183":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12142:5025":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:1528:2755":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10279:4380":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:699:2843":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46428:3536":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13465:5383":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"9:157:3830":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"7:0:1472":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11597:2693":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:3743:4463":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13963:5532":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:5875:4607":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:786:4648":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:4823:5578":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4359:2913":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10975:47004":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"12:1180:3945":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:4331:6380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:11952:2779":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4066:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46734:3063":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:3085:3184":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7894:4168":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:7446:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:8381:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:48792:7001":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:15929:2038":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"18:712:2248":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10675:12190":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:57638:7088":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:11640:4926":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:49505:3431":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11588:4918":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:24065:3342":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:3604:4725":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10912:47017":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11349:2941":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13609:5421":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:849:4497":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13488:5388":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:667:4507":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:1623:2757":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:46662:3058":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:15931:2040":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"12:2331:2667":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:46362:3619":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:1091:4598":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:6764:2593":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:569:5995":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:11435:14593":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5407:4025":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12408:5087":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12598:5114":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:5082:3379":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:6611:58627":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12343:5057":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:51708:3255":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6176:4178":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3562:3303":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:9236:2810":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:13245:39482":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:10864:4849":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:4641:5572":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:9065:46739":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13192:5314":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10095:4474":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"15:230:3966":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:48440:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3486:2614":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10489:4408":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:8353:6860":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:4955:5582":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:13045:3095":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6569:4336":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:1463:2748":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13497:5391":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:2889:4322":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:9296:4798":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:11333:3429":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:11587:2729":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10673:46952":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:1644:2748":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:2314:4444":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:2401:12185":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:3997:6265":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7928:3029":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10377:4443":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:3918:6216":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:24080:6879":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13348:5353":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3317:2888":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:10988:47003":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:24798:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"9:963:3878":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13733:5467":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6106:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:49279:3442":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13062:5267":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10435:46854":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:10855:2621":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:49898:3104":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:50293:7006":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:4643:4603":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4387:6408":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5312:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12010:5003":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:739:60630":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8644:2955":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"12:1159:3944":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:49220:3438":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:1533:6039":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:3345:3169":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:10609:2854":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:23901:3503":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:7291:54442":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:51317:3250":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5295:45158":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:1584:6067":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6166:4177":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:10288:2331":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9933:46748":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:6204:2947":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:56303:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15921:2030":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"9:603:44883":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:14869:4657":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:3473:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13788:5486":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:432:2216":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9440:4802":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11378:4389":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:13743:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:5746:2497":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:47487:2746":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:12231:2677":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:52735:3296":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4359:2270":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:8390:2215":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:48753:3131":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:32258:3527":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:8857:2668":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:15245:2553":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12118:5023":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6864:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:4733:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:10795:2883":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:6442:2567":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:15267:2928":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8032:2872":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:49387:2609":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:6870:3071":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:10552:2702":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:896:4501":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:605:6015":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13884:5512":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46563:3050":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:50117:3482":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10468:4404":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10420:4438":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8844:54446":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:11416:3434":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7250:4206":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3258:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:14520:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:15041:2788":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:5965:3001":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:22952:3236":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:15140:2664":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9551:4429":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:3714:5558":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:15910:2022":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:11614:2732":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"12:877:2695":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:10911:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11026:46750":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"12:1253:2760":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11794:4962":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12182:5032":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:14040:3492":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:11295:3428":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:11167:2550":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:12507:5098":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:46949:6986":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:1215:3756":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:51150:3281":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:12733:3460":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:6221:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10224:46815":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12741:5138":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:13948:2777":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:23424:3237":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:4501:6455":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5386:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:48491:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4511:6460":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:563:5992":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:1596:6075":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:51581:3262":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1690:6144":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:24628:2875":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:15660:4658":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13685:5466":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:8112:3776":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:46545:3066":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11186:4865":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:53404:7074":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:8382:3656":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:11388:3432":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:7260:54442":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:23729:2517":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:3951:2695":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:15914:2025":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"9:749:3815":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:1736:6163":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:49310:3445":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:6910:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:50121:3481":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7549:4141":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:69:3702":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:15415:3975":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"12:1667:3958":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10502:4812":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:53393:7073":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:46316:3617":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:45933:3528":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:11124:2611":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"16:4995:5583":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:1457:2759":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:6672:3663":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:3194:2884":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9245:4387":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:45973:2530":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:8194:2270":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:49819:3099":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3159:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:3345:2899":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:11331:2544":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:13573:2745":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:9740:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11294:2932":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:14160:2628":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:10950:47028":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:2330:3758":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:22563:57969":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:6464:2564":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:1075:3881":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1729:2942":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:47495:2270":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:3118:4318":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7236:4205":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11079:2605":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1665:6125":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:3488:2695":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:6488:3068":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:14544:2603":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:4688:2330":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:6868:2571":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:4902:3372":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:51945:3295":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12275:5044":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13520:5399":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:49401:2611":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:4436:2632":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:6954:3642":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:2437:12195":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:5837:3650":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:8359:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:10426:4649":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:5996:4174":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11382:2584":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"14:189:7430":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:14719:2582":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:48745:6996":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:12067:2833":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:22893:2560":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3333:3164":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3701:2622":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:4704:5574":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4371:6402":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1602:6077":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10253:4442":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6413:3963":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12053:2830":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:46713:3067":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:6881:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:53319:3256":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6605:4147":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11544:2728":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:5732:2499":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:1194:11201":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:49551:3462":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:994:3775":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11137:2544":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:50378:2527":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3382:2704":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:4304:5563":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:5595:4038":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1156:11199":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8493:2832":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6028:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:51462:3286":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11939:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:24832:3506":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:15876:57650":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6100:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:7733:3074":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"10:0:1994":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6768:4343":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:4045:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13772:5482":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12494:5097":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:1674:2751":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:720:4706":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10696:3765":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:1153:11197":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4401:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:4946:2356":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:47784:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"9:234:3838":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:9264:4796":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3404:3144":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:10637:11195":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5130:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13590:5416":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:12807:3425":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6087:4130":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:4734:5575":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46703:3062":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:49833:3102":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4395:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11970:4995":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:3503:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10943:2624":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:7668:2775":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7786:4143":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4112:6319":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:22836:3300":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10403:4406":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13386:5361":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:8294:2872":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:10353:4445":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10584:4469":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:8271:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7185:4200":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5210:6513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:46410:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11847:4976":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:1472:2758":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:12696:3457":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10807:2511":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13780:5485":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:5011:2358":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:3497:2213":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:4032:2529":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:4101:6314":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7980:4630":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:48464:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:49684:3469":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:51255:3261":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:2948:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:24662:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"12:937:2753":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:11933:2777":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:294:60609":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:11885:3447":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12725:5136":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:24181:3574":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4052:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13912:5521":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:24560:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6964:3540":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:3287:4313":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10028:46798":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"9:686:3811":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:2178:6862":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:10278:2326":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13598:5417":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:12045:2693":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:3250:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:23830:3502":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:13853:54951":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:5935:2998":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3323:2681":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6101:4128":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11604:4919":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:10236:4400":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:13040:3094":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:24730:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:24196:3520":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:3084:2517":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5652:2581":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12155:5028":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4706:2604":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:48784:7000":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4459:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12116:2836":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6780:4193":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10814:4466":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9065:2964":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6136:4171":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11197:2714":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"12:925:2749":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"13:232:5864":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4145:6337":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:48078:3546":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:7512:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:3370:2696":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:51534:3274":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:47658:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:11357:2930":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:49202:3436":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:11222:3426":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:46633:3070":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10061:46814":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:10576:55393":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"13:0:1990":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1676:6133":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:1635:2747":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:5415:2593":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46644:3057":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:45726:3047":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5191:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12946:5175":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11750:4945":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1617:6089":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13272:5336":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:46285:3622":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:49709:2539":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6636:4149":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:7835:3043":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9633:4645":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:3370:3133":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7856:4211":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5359:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7932:2871":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"9:27:3862":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:14484:7169":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:3200:2601":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"12:976:2756":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:6185:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:49700:3471":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:6554:4188":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46915:6983":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:49718:3472":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:46744:3064":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12771:5143":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:7373:2270":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:1486:2695":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:10407:4439":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:22508:57938":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7406:4136":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:0:1324":{"crate_id":1,"path":["std"],"kind":"module"},"2:3392:3138":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6858:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:32118:3569":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:7024:4350":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:2553:3762":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:1311:4481":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9528:2609":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:46940:2638":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:50346:3491":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13933:5527":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:5528:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:8479:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:510:46733":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:3353:2682":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:32293:2673":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9186:4395":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4241:6344":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10938:47027":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:48737:2765":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:5973:3003":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:2907:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:584:6004":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:47952:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:14157:2632":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:5975:4173":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13163:5307":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2492:3089":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7843:4210":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:47994:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:3951:6240":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6087:2938":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:24174:6892":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6577:4189":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46624:3056":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:1547:6044":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:3957:6242":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:14235:2854":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13760:5479":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2793:2524":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:8860:3213":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:4713:2607":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:5255:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"13:120:45054":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5379:2929":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:3881:6188":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1760:6172":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:6690:2497":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3335:2894":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:15909:2021":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:10962:47005":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:10276:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:1505:2752":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5563:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:50010:7301":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:5855:4051":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7392:4138":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:50301:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:23048:16447":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"12:2045:2699":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11343:3002":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4347:6389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:49292:3443":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:2945:4327":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12582:5110":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:7682:2776":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:7257:4598":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:12087:2834":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:24526:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12568:5108":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13564:5410":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:3759:2693":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:48221:2334":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6682:4146":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:46415:3535":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13394:5363":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:15305:2929":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:8902:46735":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:6200:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:6475:2694":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4494:6452":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:9593:4644":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:9626:54952":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:53347:7069":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:48200:2325":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:22710:3299":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:3150:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:12100:2835":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:15924:2033":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:46:5875":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4425:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:4506:5569":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:3892:6196":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46008:2357":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:1021:2872":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46053:3324":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:48762:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"14:194:45082":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:4448:5567":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:47700:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6718:4339":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2062:2593":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"18:152:53064":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:23098:3236":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:5960:4056":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:5314:4796":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"9:996:3879":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:6644:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:4157:4470":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:10424:58661":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:51336:7011":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"12:2303:5869":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12028:5004":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13041:5258":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10827:4467":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5167:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:24696:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:11726:4943":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:299:60614":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13746:5473":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:6562:2575":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6366:3964":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:47624:2270":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46922:2811":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:50167:2683":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:15915:2026":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4133:6328":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5231:5585":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6636:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46333:2539":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:12132:2837":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:3262:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:5717:4043":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3319:2889":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:8289:3729":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:48207:2326":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7174:4199":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4095:6311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:8377:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2938:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"0:0:1667":{"crate_id":0,"path":["heck"],"kind":"module"},"17:10656:4816":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:5346:4131":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12247:5040":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1161:11200":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"7:85:44711":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5505:4033":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:3172:4308":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13370:5358":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11981:4998":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11289:2931":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:1235:3757":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12262:5043":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:3945:6239":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:11363:2950":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4300:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:37593:2248":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:14091:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:10282:2333":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3259:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:5379:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:6415:3054":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:50360:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11809:4968":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:5724:2498":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8486:2831":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5221:6521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:5536:3663":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8385:2872":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:7226:4204":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:46672:3059":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"15:248:3967":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13898:5514":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:3647:2615":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4183:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10117:4476":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:5986:3004":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:1419:2693":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:5957:3000":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6214:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:8450:2214":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10041:46799":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11994:55018":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:4043:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"12:853:2748":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:525:5967":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6614:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5273:4064":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10591:2870":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:6792:2583":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11990:7165":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:49240:3440":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11714:4940":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11603:2731":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:681:4871":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4358:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10458:4758":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:1527:6036":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"14:250:5819":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45887:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"12:930:2752":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:10272:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:48988:3629":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10477:4403":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1136:2531":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:49997:3109":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:10280:2325":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:53131:3288":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:50113:3480":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3416:3132":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:3241:4311":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6999:4195":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:9886:46747":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:47616:2746":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:8141:58146":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:15908:2020":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:12772:3464":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:8849:4428":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"12:2013:2694":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6812:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:23041:2517":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"18:866:4499":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:52024:3283":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4419:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8913:2811":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11434:4876":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:56329:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7937:54947":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"12:774:2270":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8198:4630":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:46254:3356":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11100:4434":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:9088:46740":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12456:5092":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:766:4715":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10623:46951":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10304:4383":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:51760:7018":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13865:5507":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1622:6091":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4449:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7420:4153":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:12467:5093":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5969:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:14469:2585":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:11539:4907":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:2166:2694":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:2777:3761":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:46308:3472":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5987:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12982:5206":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13429:5369":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7295:4150":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:51808:7019":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:4604:2593":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:1744:6167":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6591:4190":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:2733:4018":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10200:46812":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:5790:2502":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12168:4821":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:11091:2693":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:12181:2818":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:5189:2360":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:49359:3302":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:1618:2270":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:6620:4334":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:136:53063":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:885:4500":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:23087:2517":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10149:46747":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:9068:2798":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:11191:2551":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:9342:2559":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:15930:2039":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:5389:3614":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"9:1020:3880":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:5522:4034":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:5632:4039":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10571:46948":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:47470:1620":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11406:4873":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2276:3191":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:1522:6034":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13205:5319":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4272:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6424:4185":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:3500:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1554:6047":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:88:39804":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10887:4850":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12287:5045":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10926:47026":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:9745:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11932:4984":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"12:1688:3959":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11678:4930":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6208:4179":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:3522:4721":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:1637:2758":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4227:6343":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"12:2005:2693":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:22799:3298":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:11140:2611":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6110:4170":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:8304:3536":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7620:2772":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:23623:2561":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:49451:3458":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:6005:6716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:5166:2246":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11822:4972":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:3260:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:2253:3186":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:7337:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:897:2847":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:5488:4032":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4203:6341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:6688:3664":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13296:5338":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:3064:4364":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:3329:2693":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1607:2746":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11269:7149":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"15:269:3971":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:51683:3254":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:3328:3162":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:9237:2809":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"12:112:60582":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"12:469:60579":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:11374:3431":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:10376:7442":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:5436:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:2512:4440":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:4599:4601":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:45994:3029":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11254:4430":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12061:2270":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:4242:4598":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:46960:6988":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:6239:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:5146:2359":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:10290:2332":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:52342:3270":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:13091:3098":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6464:4145":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3793:3199":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:12171:2793":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3291:2212":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:53442:7076":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:3333:2893":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7738:4208":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:23972:6869":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:24492:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10529:4813":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9659:60616":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7119:4066":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:5780:2501":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:49925:3105":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2163:2270":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"12:1118:2758":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:1653:2749":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:49469:3459":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"14:231:3658":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:14127:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11118:2609":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:24052:3341":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5282:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:3981:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:6795:2567":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"12:968:2755":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:1663:2750":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:14847:4655":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:8159:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11164:2546":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"12:2323:5872":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11337:4391":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:50125:3485":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:7378:4137":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:10902:2517":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4013:6270":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:8188:2270":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:610:6017":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10160:4809":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:2310:3792":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:6887:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:46532:2522":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:47826:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:542:4067":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:49962:3106":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8415:3782":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:11260:3427":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:49675:3468":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11358:4390":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:5608:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11015:47029":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:14956:55020":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:10839:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:4649:2602":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:5015:3373":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:3408:3146":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:10507:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3318:2679":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:47608:2693":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11967:2780":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:3387:2705":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"9:469:44814":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:7800:2784":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5371:6608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"19:117:4699":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:13819:5493":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:24128:39235":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:23994:3346":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:9951:3411":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1723:6160":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4005:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:15935:2044":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11118:46752":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:3041:4307":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:7647:2278":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:52528:3276":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12632:5127":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13547:5406":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"14:56:4891":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:3341:3720":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5753:4047":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11738:4944":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:12334:7446":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:5472:4031":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:15916:2027":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"12:1651:3957":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6893:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4325:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9368:4800":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6014:4175":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:14154:2630":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:2754:4060":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:12191:2675":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"12:1200:3946":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:49655:2612":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5998:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4399:2631":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:790:4492":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11519:4906":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:923:3774":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:3488:4315":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9769:60621":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:2200:4600":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:4443:2693":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:15326:2936":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:5185:6508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:6964:2512":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:2866:4303":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:774:4704":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11499:4896":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:11058:2639":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:5815:4050":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:8335:3731":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:8344:3156":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:531:5970":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13282:5337":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:4477:5568":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:49266:3441":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11767:4953":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:22899:2562":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11082:4396":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4431:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7804:4142":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:15096:2656":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5420:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7216:4203":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3412:3148":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"12:2009:2270":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5953:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12685:5131":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6252:4181":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:1572:6058":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:32307:58296":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"6:5469:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9689:60618":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4475:2628":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:51384:3294":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:610:4503":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4060:6292":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3739:3206":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"12:2315:60584":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:4386:5565":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:4365:2915":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:15380:7184":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46270:3358":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4281:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13258:5331":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:5330:4797":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:1658:6121":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:8121:2694":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:2018:2695":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12521:5101":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:4699:4603":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:2543:4401":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:1497:2750":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:1717:6157":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6032:4065":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:3524:2619":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:15112:2657":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13986:5536":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:2816:4321":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:3613:2620":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3040:6856":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:7737:2778":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:53378:7072":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:11402:3433":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10801:46923":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"12:840:2747":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11246:54447":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:10790:2586":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:4535:5570":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:9638:54948":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:7467:4134":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:14489:7171":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:14863:4656":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11665:4929":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4127:6326":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:56316:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4478:6447":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:169:53065":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"12:377:3951":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:12664:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"12:866:2694":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:10701:2522":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:48458:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:3715:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11555:4911":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13098:5297":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:24088:6880":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4364:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9971:60608":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:7212:2694":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4439:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:5833:3648":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:13240:7437":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:52102:3290":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5292:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7477:4154":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12552:5107":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:9034:46738":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:6942:2572":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:7634:2773":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:5863:2995":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:11067:2603":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"12:2309:5870":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:4866:3371":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:25202:3362":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:4417:5566":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:49193:3435":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12234:5038":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4572:2638":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:3978:6252":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13627:5424":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:45864:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12073:5016":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:4852:5579":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:5889:4610":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:47633:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46241:3355":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:754:60626":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:10692:7438":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:15928:2037":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:10652:11198":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:3972:6249":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:24144:39244":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12756:5142":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:48984:3628":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:9358:3092":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:3268:2241":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:56277:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9839:4407":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:22763:3232":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:3264:4312":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11962:4993":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4517:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"7:38:44704":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10365:4871":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:8695:2958":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7195:4201":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:46653:3072":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:6864:2513":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11696:4939":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4523:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:8137:59226":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13240:5323":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11616:4922":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:46523:3065":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:9133:46741":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"12:0:1996":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:14983:7179":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:53534:7080":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:9179:54446":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4410:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:13034:3090":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:13875:2778":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:8370:3655":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:3039:60529":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"12:892:3936":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:49344:3547":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:24106:39243":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:5740:2500":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:650:4502":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:4790:5577":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:5503:2936":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10821:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:3727:3048":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:11161:2545":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:10557:3130":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13978:5533":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6126:4176":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11947:4988":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:49987:3108":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:9719:46744":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7205:4202":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:32459:58297":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:15922:2031":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13453:5377":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:6702:6729":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"12:1100:2757":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10071:4480":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:5802:2505":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:0:2001":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:537:5972":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:7571:4129":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:429:3949":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:46232:6968":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:11918:3448":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:4764:3088":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2912:4304":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:38750:2525":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:15033:7180":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:3772:5559":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:8340:3157":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:6704:6731":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:7111:4612":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:543:5975":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:8425:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:463:60583":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:2751:2523":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:22540:57968":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7264:4148":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:157:39870":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:1511:2753":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:53068:3268":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:8929:46736":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:6257:3707":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12712:5135":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2399:12184":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:11458:4890":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6068:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:1486:2760":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"9:927:44808":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:3336:2697":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:1195:60472":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:12018:4626":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:49665:3467":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12373:5076":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:14:1660":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:616:6020":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:51635:3269":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:13728:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:11835:4973":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:1939:2695":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"18:660:4506":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:4230:5562":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9943:60619":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:15933:2042":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:11194:2552":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"6:519:5964":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:22812:2517":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:5459:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:4515:3743":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:6155:6786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:4477:2629":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:9799:46746":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:1700:6150":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11779:4956":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:5561:11203":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:50129:3483":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:4265:2640":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"18:782:4704":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:3990:6261":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:9759:46745":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:8321:3730":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:8106:2270":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:11101:2522":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:46339:3618":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:10218:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:15923:2032":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:2598:7439":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:6124:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:4614:5571":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10266:4441":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10448:4405":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:14964:2676":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:820:4495":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:10451:4651":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:56342:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6021:4301":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4164:6338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9210:46742":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"12:396:3950":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:32359:58295":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:46681:3060":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:12462:3638":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:49523:3432":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:13778:58025":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:22561:57971":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:5945:6683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:1442:2270":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:15389:55394":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:46693:3061":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:9809:60606":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:51431:3282":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:51278:3265":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:3756:3198":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4362:2914":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:45802:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12051:5007":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:3905:6206":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2187:2698":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"12:1144:2759":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:607:46734":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:12211:2676":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:2773:4328":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5707:4041":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:12917:5155":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46615:3055":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10081:4380":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:4762:5576":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:47479:2693":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:10938:2804":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"11:54:3934":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"9:809:2726":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13402:5365":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:2192:2699":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:1694:3754":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3558:2766":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:14494:2510":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:3629:3529":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:1045:2578":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:704:4704":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9849:60617":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:12486:3597":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1540:6042":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7146:4197":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:46724:2608":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:5092:2357":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:15934:2043":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10001:46797":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:620:4703":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"12:2032:2697":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:3939:5561":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10844:4407":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:8167:3647":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:9732:2923":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10331:4407":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:46573:3051":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:8864:3242":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2381:2820":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:15404:3975":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9404:4801":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:3195:4309":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:5790:4049":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7042:4351":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7870:4139":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:53338:7068":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5407:6623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10558:46947":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1534:2756":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:22889:2517":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:3429:4062":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:801:4493":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10599:46949":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:3163:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:632:6030":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:0:1999":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:3357:3173":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:5548:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:10863:2623":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10611:46950":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:3147:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13318:5342":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:13501:54946":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4377:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:3339:3159":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:52311:3267":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"9:900:5926":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:624:6025":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:6324:2948":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:2181:2697":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:7654:2774":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:3623:4628":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:4306:2746":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:3320:4366":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:1432:2746":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4293:6364":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3197:2885":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:5376:2928":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:4008:46925":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:11131:2612":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:4922:5581":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:45754:3247":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:3540:3246":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2170:2695":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:1630:6096":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:51119:3293":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:50969:7007":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:2175:2696":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:511:5959":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"12:784:2750":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4193:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:14930:2779":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:374:3728":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:5927:4054":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:46931:6984":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11199:4867":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:45966:3207":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:49976:3107":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13172:5308":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5414:6624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:32299:3559":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:11304:46753":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:15927:2036":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10516:4409":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:3038:1775":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:3698:3530":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"12:1235:3947":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12795:5153":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:47538:3542":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:50337:3490":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11628:4923":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11231:4432":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7453:4133":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4255:2949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4317:6374":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:10219:2330":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:46445:3537":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:51840:7020":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:50109:3477":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:10128:4477":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13574:5413":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11147:4863":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6518:4187":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:47437:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5241:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:10658:2707":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5269:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"14:244:5817":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11338:2999":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6051:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13924:5523":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:13837:2776":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:6899:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10635:4814":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11386:6716":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1492:2749":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12156:2963":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:5137:3380":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5580:4037":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:51063:3272":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:3506:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:46583:3052":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10211:46811":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:15932:2041":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:2159:2693":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:15913:2024":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:49211:3437":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:8157:2812":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"9:692:3813":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"18:811:4494":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:8651:2957":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7514:4152":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:1079:2536":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:2218:3723":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:50137:3478":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4697:55509":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7823:4144":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"12:2039:2698":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:53241:3271":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4341:6386":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4046:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7279:4352":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:10847:2906":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:24764:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:51297:7010":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:53472:7078":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:4397:2630":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:7771:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:1522:2754":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3375:3721":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:55906:3034":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10179:4811":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:3256:2240":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:547:4045":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:38813:2244":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:46592:3053":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:52071:3287":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:837:3090":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:3398:3141":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:5020:3374":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11527:2727":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"12:747:2693":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:3255:1871":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:2484:46843":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6744:4341":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:10284:2334":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13582:5414":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9280:4797":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:3349:2680":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:37569:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8743:2967":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:12673:4653":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:13025:3092":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11993:5000":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:3365:4059":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:15920:2029":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4033:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:48577:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12195:5033":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12659:5129":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:49605:3465":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:49693:3470":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:14943:2780":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5274:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:7840:4618":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:2262:3759":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13620:5422":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:49301:3444":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"9:41:3863":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:48473:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:10565:2844":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11915:4978":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:15917:2028":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:24027:6874":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:15926:2035":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"18:829:4496":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:15146:2665":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:51192:7009":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:12954:2736":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:11159:4864":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12327:5052":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:57617:7087":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:5347:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:7815:4612":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46001:3030":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:4047:2528":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:3549:5557":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:49230:3439":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3997:2806":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:10564:2517":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:52878:3264":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:3218:4310":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:3377:2703":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:15911:2023":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7342:4165":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:47504:3540":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5522:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:51660:3251":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12699:5134":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:15881:11202":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:1708:6151":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:45818:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:45843:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5672:4040":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:9649:46743":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:22542:57966":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13221:5322":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:1563:6052":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:3048:60470":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:13336:2943":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:644:4505":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:48036:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:8954:4397":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6238:4135":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:45910:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:28013:3241":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:5433:4027":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:4671:5573":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5456:4028":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:49320:3446":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:12186:2819":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:52377:3252":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3365:3177":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:3278:2243":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:8241:2667":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"12:1762:4596":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:50990:7008":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5384:4024":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:47556:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"9:722:3814":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:11482:4891":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:1476:2694":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:8129:3777":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12537:5103":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:9466:7441":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10933:2803":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:49781:3093":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:9765:4646":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:4651:2593":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:12385:5078":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10543:4853":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:56290:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8393:2726":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:11283:2930":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13554:5407":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"12:354:5865":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13842:5506":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12307:5051":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6091:6744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:11115:2746":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"9:0:1993":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:9162:4431":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"18:636:4704":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12040:5006":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11328:5143":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:10286:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7884:4140":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3361:3175":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:3966:6247":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:46493:4620":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6219:4180":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:51015:3292":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:52264:3263":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"12:949:2754":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:12756:3461":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:49142:3430":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:3970:4598":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3506:4314":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:49371:3453":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4023:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:694:4508":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:49850:3103":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4721:3180":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:578:6001":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:7633:3708":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:1843:4598":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:15127:2658":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:1441:2757":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:3772:2746":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:22523:57938":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:3882:2623":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5978:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4991:2542":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"14:0:1997":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:7905:3243":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12783:5146":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:51038:3280":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13506:5392":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:3800:5560":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:4083:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:14537:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"12:812:2751":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13637:5429":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:50283:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:11183:3425":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"14:11:7430":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:23429:16466":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:1646:2759":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:5794:2503":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:53419:7075":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46355:3471":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:46503:12809":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:9332:4388":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9770:4647":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:3868:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:52185:3275":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:1501:2751":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:3044:60471":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:49419:3428":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:8437:2695":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:12442:5090":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12645:5128":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:1450:2747":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:10668:2761":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"11:0:1995":{"crate_id":11,"path":["adler"],"kind":"module"},"5:8454:3703":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7333:4151":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:729:60629":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:3721:3049":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:13819:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8137:2872":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:12221:5036":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:49623:3466":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:3338:4058":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:8084:2637":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:46376:3621":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4215:6342":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12176:2969":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:24011:6871":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:50141:3479":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:48214:2333":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6949:4347":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:15892:55019":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:3145:4317":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:9896:60613":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9717:2922":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:5582:3244":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"14:216:45087":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:10317:4386":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:48503:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4073:6298":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1597:2693":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10106:4475":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4040:6282":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:10269:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"14:47:7430":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46395:3360":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:4709:3179":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:53194:3253":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:23096:3249":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12431:5088":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:7611:3707":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"9:776:3860":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:50145:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:47868:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:4631:2518":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:9956:3412":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11051:2637":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:12012:7166":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:24209:3519":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:14732:2781":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7761:4209":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:161:39871":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2460:7446":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:3018:4306":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7073:4196":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10586:2852":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:4215:2694":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:2850:3185":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:2902:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:670:40202":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:15925:2034":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:50390:2526":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7303:4207":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:2462:12201":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:6866:2570":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"12:160:3948":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12671:5130":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5428:6629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3421:3152":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4470:6445":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:3396:2699":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:14021:4654":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:8579:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:23635:57942":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:6935:6853":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:51485:3289":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5197:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13799:5490":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:14201:2689":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:13015:3091":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:10140:4407":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:56264:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11653:4928":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13540:5405":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4120:6324":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:14507:7177":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:10517:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13810:5491":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:53280:3291":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11572:4913":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13446:5376":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9476:4803":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13180:5309":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11982:2781":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13154:5303":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:49377:3454":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:13924:58023":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:10052:46800":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:2267:3190":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}