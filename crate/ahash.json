{"root":"0:0:2499","crate_version":"0.8.11","includes_private":false,"index":{"b:2:2775-0:1286:2395":{"id":"b:2:2775-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:27226"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1483:651":{"id":"0:1483:651","crate_id":0,"name":"deref","span":{"filename":"src/hash_set.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3538:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:2920":{"id":"0:172:2920","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[463,4],"end":[465,5]},"visibility":"default","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:11008:899","`Hasher`":"2:11015:168","`Hash`":"2:11007:164"},"attrs":["#[cfg(feature = \"specialize\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1373":{"id":"0:1373","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[298,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1377:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1576:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13970:30578":{"id":"2:13970:30578","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1286:2395":{"id":"0:1286:2395","crate_id":0,"name":"AHasher","span":{"filename":"src/fallback_hash.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A `Hasher` for hashing an arbitrary stream of bytes.\n\nInstances of [`AHasher`] represent state that is updated while hashing data.\n\nEach method updates the internal state based on the new data provided. Once\nall of the data has been provided, the resulting hash can be obtained by calling\n`finish()`\n\n[Clone] is also provided in case you wish to calculate hashes for two different items that\nstart with the same data.\n","links":{"`AHasher`":"0:1286:2395","Clone":"2:2792:114"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3338:15230-0:1286:2395","a:2:42921:8346-0:1286:2395","a:2:42920:8347-0:1286:2395","a:2:33119:8187-0:1286:2395","a:2:3303:260-0:1286:2395","a:2:33060:248-0:1286:2395","b:2:3081-0:1286:2395","b:2:3946-0:1286:2395","b:2:2772-0:1286:2395","b:2:3087-0:1286:2395","b:2:2775-0:1286:2395","b:2:3077-0:1286:2395","b:2:2804-0:1286:2395","b:2:3092-0:1286:2395","b:5:784-0:1286:2395","0:1293","0:252","0:1291","0:65"]}}},"0:1487:653":{"id":"0:1487:653","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_set.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3538:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13954:31041":{"id":"2:13954:31041","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13953:31040"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:1621:2406":{"id":"a:2:3303:260-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2804-0:1557:2398":{"id":"b:2:2804-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:8579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2806:27230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2806:27230":{"id":"2:2806:27230","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1412:184":{"id":"0:1412:184","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[369,4],"end":[369,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"b:2:3087-0:1557:2398":{"id":"b:2:3087-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1294:494":{"id":"0:1294:494","crate_id":0,"name":"clone","span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:2410":{"id":"0:128:2410","crate_id":0,"name":"random_state","span":{"filename":"src/random_state.rs","begin":[1,0],"end":[528,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:145:2838","0:1617:2862","0:1621:2406"],"is_stripped":false}}},"0:1505":{"id":"0:1505","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[170,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"2:35047:8491","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1508:210","0:1509:430"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashSetExt","id":"0:238:2420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1492:167","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:250:1208","0:251:2417"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3948:1865":{"id":"2:3948:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40544:2818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1320:857":{"id":"0:1320:857","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashMap","id":"1:769:165","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1495":{"id":"0:1495","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[106,0],"end":[136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:34874:8490","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1498:210","0:1499:427"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1378":{"id":"0:1378","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[309,0],"end":[315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1472:1208":{"id":"0:1472:1208","crate_id":0,"name":"new","span":{"filename":"src/hash_set.rs","begin":[52,4],"end":[54,5]},"visibility":"public","docs":"This crates a hashset using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1529:982":{"id":"0:1529:982","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[261,4],"end":[263,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8448:176","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13962:35327":{"id":"2:13962:35327","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:45094:11634","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1291":{"id":"0:1291","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1292:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13934:35323":{"id":"2:13934:35323","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13932:35322"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:2417":{"id":"0:251:2417","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[195,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14061:14677":{"id":"2:14061:14677","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5153:14677"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45138:11436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14017:35332":{"id":"2:14017:35332","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13618:8243","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::match_indices":"2:14014:35331"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44998:11630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1428":{"id":"0:1428","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[395,0],"end":[405,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve","extend_one_unchecked"],"trait":{"name":"Extend","id":"2:8457:8192","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1433:8452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1407":{"id":"0:1407","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[368,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1412:184","0:1413:8268","0:1414:982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3946-0:1286:2395":{"id":"b:2:3946-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3090:149":{"id":"2:3090:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:71:2712":{"id":"0:71:2712","crate_id":0,"name":"write_usize","span":{"filename":"src/fallback_hash.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"32\",\ntarget_pointer_width = \"16\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2499":{"id":"0:0:2499","crate_id":0,"name":"ahash","span":{"filename":"src/lib.rs","begin":[1,0],"end":[396,1]},"visibility":"public","docs":"AHash is a high performance keyed hash function.\n\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key.\nAHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can\ninduce a collision.\n\n# How aHash works\n\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function.\nWhen it is not, aHash falls back on a slightly slower alternative algorithm.\n\nBecause aHash does not have a fixed standard for its output, it is able to improve over time.\nBut this also means that different computers or computers using different versions of ahash may observe different\nhash values for the same input.\n# Basic Usage\nAHash provides an implementation of the [Hasher] trait.\nTo construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n### Randomness\n\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS.\nIt is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n\n### If randomess is not available\n\n[AHasher::default()] can be used to hash using fixed keys. This works with\n[BuildHasherDefault](std::hash::BuildHasherDefault). For example:\n\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\n\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n # m.insert(12, 34);\n```\nIt is also possible to instantiate [RandomState] directly:\n\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\n\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n # m.insert(1, 2);\n```\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\n\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\nThere are several constructors for [RandomState] with different ways to supply seeds.\n\n# Convenience wrappers\n\nFor convenience, both new-type wrappers and type aliases are provided.\n\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\n\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\nThis avoids the need to type \"RandomState\". (For convenience `From`, `Into`, and `Deref` are provided).\n\n# Aliases\n\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` ,\nthe type aliases [HashMap], [HashSet] are provided.\n\n```\nuse ahash::{HashMap, HashMapExt};\n\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\nNote the import of [HashMapExt]. This is needed for the constructor.","links":{"HashMapExt":"0:235:2414","std::hash::BuildHasherDefault":"2:11055:2474","AHasher::default()":"0:253:60","RandomState":"0:1621:2406","HashMap":"0:1552:165","HashSet":"0:1555:167","Hasher":"2:11015:168"},"attrs":["#![deny(clippy::correctness, clippy::complexity, clippy::perf)]","#![allow(clippy::pedantic, clippy::cast_lossless, clippy::unreadable_literal)]","#![feature(min_specialization)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:2410","0:1295-0:1286:2395","0:1550-0:1557:2398","0:1551-0:1568:2399","0:1552:165","0:1555:167","0:231-0:1621:2406","0:235:2414","0:238:2420"],"is_stripped":false}}},"0:1535:982":{"id":"0:1535:982","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[269,4],"end":[271,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8448:176","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:2420":{"id":"0:238:2420","crate_id":0,"name":"HashSetExt","span":{"filename":"src/lib.rs","begin":[165,0],"end":[170,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashSet type aliases.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:239:1208","0:240:2417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:247"]}}},"0:1458":{"id":"0:1458","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[19,0],"end":[23,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1492:167","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1460:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3338:15230-0:1557:2398":{"id":"a:2:3338:15230-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3338:15230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:15230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5730:36040":{"id":"5:5730:36040","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2417":{"id":"0:246:2417","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13973:8789":{"id":"2:13973:8789","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1397:860":{"id":"0:1397:860","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_map.rs","begin":[353,4],"end":[357,5]},"visibility":"default","docs":"This crates a hashmap from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14037:31053":{"id":"2:14037:31053","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13999:31049":{"id":"2:13999:31049","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12486:490","str::splitn":"2:13996:31047","self::pattern":"2:13618:8243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44952:11479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":"Constructs a new [AHasher] with fixed keys.\nIf `std` is enabled these will be generated upon first invocation.\nOtherwise if the `compile-time-rng`feature is enabled these will be generated at compile time.\nIf neither of these features are available, hardcoded constants will be used.\n\nBecause the values are fixed, different hashers will all hash elements the same way.\nThis could make hash values predictable, if DOS attacks are a concern. If this behaviour is\nnot required, it may be preferable to use [RandomState] instead.\n\n# Examples\n\n```\nuse ahash::AHasher;\nuse std::hash::Hasher;\n\nlet mut hasher_1 = AHasher::default();\nlet mut hasher_2 = AHasher::default();\n\nhasher_1.write_u32(1234);\nhasher_2.write_u32(1234);\n\nassert_eq!(hasher_1.finish(), hasher_2.finish());\n```","links":{"RandomState":"0:1621:2406","AHasher":"0:1286:2395"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1509:430":{"id":"0:1509:430","crate_id":0,"name":"bitxor","span":{"filename":"src/hash_set.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1328":{"id":"0:1328","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[47,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:769:165","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1331:8381"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1621:2406":{"id":"0:1621:2406","crate_id":0,"name":"RandomState","span":{"filename":"src/random_state.rs","begin":[220,0],"end":[225,1]},"visibility":"public","docs":"Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create\n[AHasher]s in order to hash the keys of the map. See `build_hasher` below.\n\n[build_hasher]: ahash::\n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap\n\nThere are multiple constructors each is documented in more detail below:\n\n| Constructor   | Dynamically random? | Seed |\n|---------------|---------------------|------|\n|`new`          | Each instance unique|_[RandomSource]_|\n|`generate_with`| Each instance unique|`u64` x 4 + [RandomSource]|\n|`with_seed`    | Fixed per process   |`u64` + static random number|\n|`with_seeds`   | Fixed               |`u64` x 4|\n","links":{"RandomSource":"0:145:2838","AHasher":"0:1286:2395","std::hash::Hasher":"2:11015:168","std::collections::HashMap":"1:769:165"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:2:3338:15230-0:1621:2406","a:2:42921:8346-0:1621:2406","a:2:42920:8347-0:1621:2406","a:2:33119:8187-0:1621:2406","a:2:3303:260-0:1621:2406","a:2:33060:248-0:1621:2406","b:2:3081-0:1621:2406","b:2:3946-0:1621:2406","b:2:2772-0:1621:2406","b:2:3087-0:1621:2406","b:2:2775-0:1621:2406","b:2:3077-0:1621:2406","b:2:2804-0:1621:2406","b:2:3092-0:1621:2406","b:5:784-0:1621:2406","0:152","0:1626","0:167","0:169"]}}},"0:1547":{"id":"0:1547","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[300,0],"end":[306,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1621:2406"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1549:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1426:8452":{"id":"0:1426:8452","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[390,4],"end":[392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1550-0:1557:2398":{"id":"0:1550-0:1557:2398","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,8],"end":[126,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_map::AHashMap","name":"AHashMap","id":"0:1557:2398","glob":false}}},"2:3083:857":{"id":"2:3083:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1508:210":{"id":"0:1508:210","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[175,4],"end":[175,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:235:2414":{"id":"0:235:2414","crate_id":0,"name":"HashMapExt","span":{"filename":"src/lib.rs","begin":[155,0],"end":[160,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashMap type alias.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:236:1208","0:237:2417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:241"]}}},"0:240:2417":{"id":"0:240:2417","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[169,4],"end":[169,46]},"visibility":"default","docs":"Constructs a new HashSet with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:245:1208":{"id":"0:245:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1484":{"id":"0:1484","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3551:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1487:653"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1514:1782":{"id":"0:1514:1782","crate_id":0,"name":"sub","span":{"filename":"src/hash_set.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13945:31013":{"id":"2:13945:31013","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13951:2637":{"id":"2:13951:2637","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13953:31040","str::split_at_mut":"2:13952:31037"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2493":{"id":"0:163:2493","crate_id":0,"name":"with_seeds","span":{"filename":"src/random_state.rs","begin":[308,4],"end":[315,5]},"visibility":"public","docs":"Allows for explicitly setting the seeds to used.\nAll `RandomState`s created with the same set of keys key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nNote: If DOS resistance is desired one of these should be a decent quality random number.\nIf 4 high quality random number are not cheaply available this method is robust against 0s being passed for\none or more of the parameters or the same value being passed for more than one parameter.\nIt is recommended to pass numbers in order from highest to lowest quality (if there is any difference).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1387:210":{"id":"0:1387:210","crate_id":0,"name":"Output","span":{"filename":"src/hash_map.rs","begin":[323,4],"end":[323,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"0:1332":{"id":"0:1332","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[53,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1335:1208","0:1336:2417"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1530":{"id":"0:1530","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[266,0],"end":[272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1533:184","0:1534:8268","0:1535:982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1498:210":{"id":"0:1498:210","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[111,4],"end":[111,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:14059:35344":{"id":"2:14059:35344","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5152:35344"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45129:11558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725":{"id":"5:5725","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5726:36039","5:5727:8824","5:5730:36040","5:5733:36041","5:5741:36042","5:5742:36043","5:5743:8642","5:5744:30432","5:5745:30433"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3080:8381":{"id":"2:3080:8381","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3946-0:1557:2398":{"id":"b:2:3946-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1568:2399":{"id":"0:1568:2399","crate_id":0,"name":"AHashSet","span":{"filename":"src/hash_set.rs","begin":[17,0],"end":[17,55]},"visibility":"public","docs":"A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"std::collections::HashSet":"1:1492:167","crate::RandomState":"0:1621:2406"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1470","0:1474","a:2:3338:15230-0:1568:2399","a:2:42921:8346-0:1568:2399","a:2:42920:8347-0:1568:2399","a:2:33119:8187-0:1568:2399","a:2:3303:260-0:1568:2399","a:2:33060:248-0:1568:2399","b:2:3081-0:1568:2399","b:2:3946-0:1568:2399","b:2:2772-0:1568:2399","b:2:3087-0:1568:2399","b:2:2775-0:1568:2399","b:2:3077-0:1568:2399","b:2:2804-0:1568:2399","b:2:3092-0:1568:2399","b:5:784-0:1568:2399","0:1458","0:1515","0:1530","0:1505","0:1536","0:1541","0:1500","0:1461","0:1547","0:1492","0:1519","0:1510","0:1495","0:1488","0:1523","0:1484","0:1479","0:1573","0:1467"]}}},"a:2:42920:8347-0:1621:2406":{"id":"a:2:42920:8347-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:8347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3946-0:1568:2399":{"id":"b:2:3946-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13941:8394":{"id":"2:13941:8394","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13950:35326":{"id":"2:13950:35326","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12492:1765","crate::ops::IndexMut":"2:3608:8262","str::slice_unchecked":"2:13949:35325"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1549:60":{"id":"0:1549:60","crate_id":0,"name":"default","span":{"filename":"src/hash_set.rs","begin":[303,4],"end":[305,5]},"visibility":"default","docs":"Creates an empty `AHashSet<T, S>` with the `Default` value for the hasher.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:1208":{"id":"0:236:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[157,4],"end":[157,21]},"visibility":"default","docs":"Constructs a new HashMap","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1388:966":{"id":"0:1388:966","crate_id":0,"name":"index","span":{"filename":"src/hash_map.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `HashMap`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13961:27669":{"id":"2:13961:27669","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:45084:11633","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1621:2406":{"id":"b:5:784-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:8595","5:787:8482","5:788:8812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3077-0:1286:2395":{"id":"b:2:3077-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:8381"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3338:15230-0:1286:2395":{"id":"a:2:3338:15230-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:15230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[127,0],"end":[200,1]},"visibility":"default","docs":"Provides [Hasher] methods to hash all of the primitive types.\n\n[Hasher]: core::hash::Hasher","links":{"core::hash::Hasher":"2:11015:168"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i16","write_isize","write_u128","write_u16","write_i32","write_str","write_length_prefix","write_usize","write_u32","write_i8","write_i64","write_i128","write_u64","write_u8"],"trait":{"name":"Hasher","id":"2:11015:168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2707","0:67:2708","0:68:2709","0:69:2710","0:70:2711","0:71:2712","0:72:2714","0:73:2465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3087-0:1286:2395":{"id":"b:2:3087-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1363:651":{"id":"0:1363:651","crate_id":0,"name":"deref","span":{"filename":"src/hash_map.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3538:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:1568:2399":{"id":"b:5:784-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:786:8595","5:787:8482","5:788:8812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:33119:8187-0:1557:2398":{"id":"a:2:33119:8187-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13953:31040":{"id":"2:13953:31040","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13954:31041"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:1286:2395":{"id":"b:2:2772-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3063"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13964:2790":{"id":"2:13964:2790","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1555:167":{"id":"0:1555:167","crate_id":0,"name":"HashSet","span":{"filename":"src/lib.rs","begin":[135,8],"end":[135,79]},"visibility":"public","docs":"Type alias for [HashSet]<K, ahash::RandomState>","links":{"HashSet":"0:1555:167"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1492:167","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:1404:184":{"id":"0:1404:184","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[361,4],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"5:5733:36041":{"id":"5:5733:36041","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33060:248-0:1286:2395":{"id":"a:2:33060:248-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2772-0:1568:2399":{"id":"b:2:2772-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2774:3063"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13956:11493":{"id":"2:13956:11493","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44800:8238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14051:30430":{"id":"2:14051:30430","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14005:31052":{"id":"2:14005:31052","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1317":{"id":"0:1317","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[23,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:769:165","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1320:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42920:8347-0:1568:2399":{"id":"a:2:42920:8347-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42920:8347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42920:8347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:8347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2775-0:1621:2406":{"id":"b:2:2775-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:27226"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13932:35322":{"id":"2:13932:35322","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13977:8751":{"id":"2:13977:8751","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14020:35333":{"id":"2:14020:35333","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1474":{"id":"0:1474","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[63,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1477:2424","0:1478:2425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[383,0],"end":[466,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_one"],"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:170:168","0:171:2456","0:172:2920"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1347:8394":{"id":"0:1347:8394","crate_id":0,"name":"get","span":{"filename":"src/hash_map.rs","begin":[102,4],"end":[108,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{"`Eq`":"2:2859:146","`Hash`":"2:11007:164"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1354:8434":{"id":"0:1354:8434","crate_id":0,"name":"into_keys","span":{"filename":"src/hash_map.rs","begin":[216,4],"end":[218,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```\n\n# Performance\n\nIn the current implementation, iterating over keys takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoKeys","id":"1:960:8366","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1478:2425":{"id":"0:1478:2425","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_set.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14024:35335":{"id":"2:14024:35335","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1469:8381":{"id":"0:1469:8381","crate_id":0,"name":"into","span":{"filename":"src/hash_set.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashSet","id":"1:1492:167","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14022:35334":{"id":"2:14022:35334","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1523":{"id":"0:1523","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[258,0],"end":[264,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1527:184","0:1528:8268","0:1529:982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1527:184":{"id":"0:1527:184","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[259,4],"end":[259,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"a:2:42921:8346-0:1286:2395":{"id":"a:2:42921:8346-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:170:168":{"id":"0:170:168","crate_id":0,"name":"Hasher","span":{"filename":"src/random_state.rs","begin":[384,4],"end":[384,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1513:210":{"id":"0:1513:210","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[207,4],"end":[207,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1473:2417":{"id":"0:1473:2417","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_set.rs","begin":[58,4],"end":[60,5]},"visibility":"public","docs":"This crates a hashset with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1491:722":{"id":"0:1491:722","crate_id":0,"name":"eq","span":{"filename":"src/hash_set.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13952:31037":{"id":"2:13952:31037","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13951:2637","str::split_at_mut_checked":"2:13954:31041"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1552:165":{"id":"0:1552:165","crate_id":0,"name":"HashMap","span":{"filename":"src/lib.rs","begin":[132,8],"end":[132,85]},"visibility":"public","docs":"[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap\nType alias for [HashMap]<K, V, ahash::RandomState>","links":{"std::collections::HashMap":"1:769:165"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:769:165","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:14043:35341":{"id":"2:14043:35341","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1465:857":{"id":"0:1465:857","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashSet;\n\nlet set1 = AHashSet::from([1, 2, 3, 4]);\nlet set2: AHashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1479":{"id":"0:1479","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3538:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1482:262","0:1483:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42920:8347-0:1286:2395":{"id":"a:2:42920:8347-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:8347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1414:982":{"id":"0:1414:982","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8448:176","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14049:35343":{"id":"2:14049:35343","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13579:148","`FromStr`":"2:13578:8241"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13578:8241","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13578:8241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2777:27226":{"id":"2:2777:27226","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1482:262":{"id":"0:1482:262","crate_id":0,"name":"Target","span":{"filename":"src/hash_set.rs","begin":[77,4],"end":[77,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"1:1492:167","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1389":{"id":"0:1389","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[336,0],"end":[345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1393:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3303:260-0:1568:2399":{"id":"a:2:3303:260-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3092-0:1568:2399":{"id":"b:2:3092-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1510":{"id":"0:1510","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[202,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3381:8492","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1513:210","0:1514:1782"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:14011:35330":{"id":"2:14011:35330","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13618:8243","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::matches":"2:14008:3072"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:45052:11632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:1568:2399":{"id":"b:2:3081-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1433:8452":{"id":"0:1433:8452","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13930:8752":{"id":"2:13930:8752","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1208":{"id":"0:155:1208","crate_id":0,"name":"new","span":{"filename":"src/random_state.rs","begin":[239,4],"end":[243,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` using random keys.\n\nEach instance will have a unique set of keys derived from [RandomSource].\n","links":{"RandomSource":"0:145:2838"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13929:1024":{"id":"2:13929:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12486:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1295-0:1286:2395":{"id":"0:1295-0:1286:2395","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,8],"end":[117,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::fallback_hash::AHasher","name":"AHasher","id":"0:1286:2395","glob":false}}},"2:14014:35331":{"id":"2:14014:35331","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13618:8243","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::rmatch_indices":"2:14017:35332"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44980:11629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1515":{"id":"0:1515","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[234,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1518:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13958:2479":{"id":"2:13958:2479","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44816:9189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:1557:2398":{"id":"b:2:3077-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3080:8381"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:237:2417":{"id":"0:237:2417","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[159,4],"end":[159,46]},"visibility":"default","docs":"Constructs a new HashMap with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:239:1208":{"id":"0:239:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[167,4],"end":[167,21]},"visibility":"default","docs":"Constructs a new HashSet","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:66:2707":{"id":"0:66:2707","crate_id":0,"name":"write_u8","span":{"filename":"src/fallback_hash.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14002:31051":{"id":"2:14002:31051","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1406:982":{"id":"0:1406:982","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[363,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8448:176","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1563":{"id":"0:1563","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1567:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1362:262":{"id":"0:1362:262","crate_id":0,"name":"Target","span":{"filename":"src/hash_map.rs","begin":[279,4],"end":[279,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashMap","id":"1:769:165","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:2774:3063":{"id":"2:2774:3063","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1438:60":{"id":"0:1438:60","crate_id":0,"name":"default","span":{"filename":"src/hash_map.rs","begin":[413,4],"end":[415,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1353:2470":{"id":"0:1353:2470","crate_id":0,"name":"insert","span":{"filename":"src/hash_map.rs","begin":[185,4],"end":[187,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`] is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [module-level\ndocumentation] for more.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{"`None`":"2:42829:202"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13993:35329":{"id":"2:13993:35329","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13618:8243","str::split":"2:13981:27668","prim@char":"1:12486:490","str::split_terminator":"2:13990:35328"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44898:11628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:1621:2406":{"id":"b:2:3081-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1394":{"id":"0:1394","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[347,0],"end":[358,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:8437:157","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1397:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:827":{"id":"0:153:827","crate_id":0,"name":"fmt","span":{"filename":"src/random_state.rs","begin":[228,4],"end":[230,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1335:1208":{"id":"0:1335:1208","crate_id":0,"name":"new","span":{"filename":"src/hash_map.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:36039":{"id":"5:5726:36039","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2817","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2817","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2899":{"id":"0:162:2899","crate_id":0,"name":"with_seed","span":{"filename":"src/random_state.rs","begin":[294,4],"end":[297,5]},"visibility":"public","docs":"Build a `RandomState` from a single key. The provided key does not need to be of high quality,\nbut all `RandomState`s created from the same key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nThis allows for explicitly setting the seed to be used.\n\nNote: This method does not require the provided seed to be strong.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2804-0:1286:2395":{"id":"b:2:2804-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:8579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:27230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[227,0],"end":[231,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3092-0:1557:2398":{"id":"b:2:3092-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1435":{"id":"0:1435","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[411,0],"end":[416,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1621:2406"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1438:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:171:2456":{"id":"0:171:2456","crate_id":0,"name":"build_hasher","span":{"filename":"src/random_state.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":"Constructs a new [AHasher] with keys based on this [RandomState] object.\nThis means that two different [RandomState]s will will generate\n[AHasher]s that will return different hashcodes, but [Hasher]s created from the same [BuildHasher]\nwill generate the same hashes for the same input data.\n\n # Examples\n```\n        use ahash::{AHasher, RandomState};\n        use std::hash::{Hasher, BuildHasher};\n    \n        let build_hasher = RandomState::new();\n        let mut hasher_1 = build_hasher.build_hasher();\n        let mut hasher_2 = build_hasher.build_hasher();\n    \n        hasher_1.write_u32(1234);\n        hasher_2.write_u32(1234);\n    \n        assert_eq!(hasher_1.finish(), hasher_2.finish());\n    \n        let other_build_hasher = RandomState::new();\n        let mut different_hasher = other_build_hasher.build_hasher();\n        different_hasher.write_u32(1234);\n        assert_ne!(different_hasher.finish(), hasher_1.finish());\n```\n    \n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap","links":{"RandomState":"0:1621:2406","AHasher":"0:1286:2395","std::hash::BuildHasher":"2:11050:2411","std::hash::Hasher":"2:11015:168"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1355:8442":{"id":"0:1355:8442","crate_id":0,"name":"into_values","span":{"filename":"src/hash_map.rs","begin":[247,4],"end":[249,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```\n\n# Performance\n\nIn the current implementation, iterating over values takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoValues","id":"1:964:8367","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1337":{"id":"0:1337","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[67,0],"end":[78,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1341:2424","0:1342:2425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:2711":{"id":"0:70:2711","crate_id":0,"name":"write_u128","span":{"filename":"src/fallback_hash.rs","begin":[149,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:2849":{"id":"0:146:2849","crate_id":0,"name":"gen_hasher_seed","span":{"filename":"src/random_state.rs","begin":[133,4],"end":[133,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1504:425":{"id":"0:1504:425","crate_id":0,"name":"bitand","span":{"filename":"src/hash_set.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![2, 3, 4].into_iter().collect();\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3946-0:1621:2406":{"id":"b:2:3946-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13938:35324":{"id":"2:13938:35324","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2710":{"id":"0:69:2710","crate_id":0,"name":"write_u64","span":{"filename":"src/fallback_hash.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:788:8812":{"id":"5:788:8812","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1545:8452":{"id":"0:1545:8452","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[291,4],"end":[293,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:1286:2395":{"id":"b:2:3081-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14053:30434":{"id":"2:14053:30434","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250:1208":{"id":"0:250:1208","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[191,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3338:15230-0:1621:2406":{"id":"a:2:3338:15230-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:15230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[89,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1491:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13981:27668":{"id":"2:13981:27668","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13618:8243","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::split_whitespace":"2:13959:32981","str::rsplit":"2:13987:31045"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44830:11471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1405:8268":{"id":"0:1405:8268","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[362,4],"end":[362,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:882:8454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"a:2:33060:248-0:1557:2398":{"id":"a:2:33060:248-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:33060:248-0:1568:2399":{"id":"a:2:33060:248-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1536":{"id":"0:1536","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[274,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve","extend_one_unchecked"],"trait":{"name":"Extend","id":"2:8457:8192","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1539:8452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1534:8268":{"id":"0:1534:8268","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[268,4],"end":[268,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:1624:8268","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[233,0],"end":[364,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1208","0:156:2888","0:162:2899","0:163:2493","0:164:2920"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1331:8381":{"id":"0:1331:8381","crate_id":0,"name":"into","span":{"filename":"src/hash_map.rs","begin":[48,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashMap","id":"1:769:165","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1415":{"id":"0:1415","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[376,0],"end":[382,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1419:184","0:1420:8268","0:1421:982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1470":{"id":"0:1470","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[49,0],"end":[61,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1472:1208","0:1473:2417"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42921:8346-0:1568:2399":{"id":"a:2:42921:8346-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1567:494":{"id":"0:1567:494","crate_id":0,"name":"clone","span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13960:32910":{"id":"2:13960:32910","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13959:32981"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45113:11636","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13928":{"id":"2:13928","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13929:1024","2:13930:8752","2:13931:35321","2:13932:35322","2:13934:35323","2:13937:2735","2:13938:35324","2:13939:350","2:13940:31015","2:13941:8394","2:13943:8406","2:13945:31013","2:13947:31014","2:13949:35325","2:13950:35326","2:13951:2637","2:13952:31037","2:13953:31040","2:13954:31041","2:13956:11493","2:13957:11645","2:13958:2479","2:13959:32981","2:13960:32910","2:13961:27669","2:13962:35327","2:13963:32970","2:13964:2790","2:13967:30576","2:13970:30578","2:13973:8789","2:13977:8751","2:13981:27668","2:13984:31043","2:13987:31045","2:13990:35328","2:13993:35329","2:13996:31047","2:13999:31049","2:14002:31051","2:14005:31052","2:14008:3072","2:14011:35330","2:14014:35331","2:14017:35332","2:14020:35333","2:14022:35334","2:14024:35335","2:14026:35336","2:14027:35337","2:14028:35338","2:14031:35339","2:14034:27269","2:14037:31053","2:14040:35340","2:14043:35341","2:14046:35342","2:14049:35343","2:14051:30430","2:14052:30948","2:14053:30434","2:14054:30435","2:14055:30436","2:14056:30951","2:14057:30952","2:14058:30953","2:14059:35344","2:14061:14677","2:14062:35345"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:784-0:1286:2395":{"id":"b:5:784-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:8595","5:787:8482","5:788:8812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13949:35325":{"id":"2:13949:35325","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12492:1765","str::slice_mut_unchecked":"2:13950:35326","crate::ops::Index":"2:40375:8261"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5744:30432":{"id":"5:5744:30432","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:14054:30435"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1626":{"id":"0:1626","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1627:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13937:2735":{"id":"2:13937:2735","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:13140:15031"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2465":{"id":"0:73:2465","crate_id":0,"name":"finish","span":{"filename":"src/fallback_hash.rs","begin":[196,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14057:30952":{"id":"2:14057:30952","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:39649"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:8824":{"id":"5:5727:8824","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1421:982":{"id":"0:1421:982","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[379,4],"end":[381,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8448:176","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1382":{"id":"0:1382","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[317,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:40375:8261","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1387:210","0:1388:966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13984:31043":{"id":"2:13984:31043","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13408:11473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[29,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1326:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2804-0:1568:2399":{"id":"b:2:2804-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:8579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2806:27230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,0],"end":[184,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashMapExt","id":"0:235:2414","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashMap","id":"1:769:165","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:245:1208","0:246:2417"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3338:15230-0:1568:2399":{"id":"a:2:3338:15230-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3338:15230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:15230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1422":{"id":"0:1422","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[384,0],"end":[393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve","extend_one_unchecked"],"trait":{"name":"Extend","id":"2:8457:8192","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1426:8452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:14056:30951":{"id":"2:14056:30951","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:39649"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13996:31047":{"id":"2:13996:31047","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243","str::rsplitn":"2:13999:31049"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44934:11478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:36042":{"id":"5:5741:36042","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:1621:2406":{"id":"b:2:3092-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2772-0:1557:2398":{"id":"b:2:2772-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2774:3063"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[221,0],"end":[249,1]},"visibility":"default","docs":"Provides a default [Hasher] with fixed keys.\nThis is typically used in conjunction with [BuildHasherDefault] to create\n[AHasher]s in order to hash the keys of the map.\n\nGenerally it is preferable to use [RandomState] instead, so that different\nhashmaps will have different keys. However if fixed keys are desirable this\nmay be used instead.\n\n# Example\n```\nuse std::hash::BuildHasherDefault;\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, BuildHasherDefault<AHasher>> = HashMap::default();\nmap.insert(12, 34);\n```\n\n[BuildHasherDefault]: std::hash::BuildHasherDefault\n[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap","links":{"std::hash::BuildHasherDefault":"2:11055:2474","AHasher":"0:1286:2395","RandomState":"0:1621:2406","std::hash::Hasher":"2:11015:168"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:2709":{"id":"0:68:2709","crate_id":0,"name":"write_u32","span":{"filename":"src/fallback_hash.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1336:2417":{"id":"0:1336:2417","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_map.rs","begin":[62,4],"end":[64,5]},"visibility":"public","docs":"This crates a hashmap with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1492":{"id":"0:1492","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[99,0],"end":[104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1292:827":{"id":"0:1292:827","crate_id":0,"name":"fmt","span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:8595":{"id":"5:786:8595","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1528:8268":{"id":"0:1528:8268","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[260,4],"end":[260,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:1620:8454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:1460:857":{"id":"0:1460:857","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashSet","id":"1:1492:167","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1617:2862":{"id":"0:1617:2862","crate_id":0,"name":"set_random_source","span":{"filename":"src/random_state.rs","begin":[191,12],"end":[193,13]},"visibility":"public","docs":"Provides an optional way to manually supply a source of randomness for Hasher keys.\n\nThe provided [RandomSource] will be used to be used as a source of randomness by [RandomState] to generate new states.\nIf this method is not invoked the standard source of randomness is used as described in the Readme.\n\nThe source of randomness can only be set once, and must be set before the first RandomState is created.\nIf the source has already been specified `Err` is returned with a `bool` indicating if the set failed because\nmethod was previously invoked (true) or if the default source is already being used (false).","links":{"RandomSource":"0:145:2838","RandomState":"0:1621:2406"},"attrs":["#[cfg(not(all(target_arch = \"arm\", target_os = \"none\")))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"impl_trait":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl RandomSource + Send + Sync + 'static","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2838","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33119:8187-0:1621:2406":{"id":"a:2:33119:8187-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[376,0],"end":[381,1]},"visibility":"default","docs":"Creates an instance of RandomState using keys obtained from the random number generator.\nEach instance created in this way will have a unique set of keys. (But the resulting instance\ncan be used to create many hashers each or which will have the same keys.)\n\nThis is the same as [RandomState::new()]\n\nNOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState::new()":"0:155:1208","RandomState":"0:1621:2406"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:784-0:1557:2398":{"id":"b:5:784-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:786:8595","5:787:8482","5:788:8812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13947:31014":{"id":"2:13947:31014","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:14052:30948":{"id":"2:14052:30948","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40728:15082","Self::is_ascii":"2:14051:30430"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40728:15082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:1568:2399":{"id":"b:2:2775-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2777:27226"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5742:36043":{"id":"5:5742:36043","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2817","`String`":"5:7809:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2817","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1499:427":{"id":"0:1499:427","crate_id":0,"name":"bitor","span":{"filename":"src/hash_set.rs","begin":[133,4],"end":[135,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1461":{"id":"0:1461","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[25,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1465:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5743:8642":{"id":"5:5743:8642","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1521:860":{"id":"0:1521:860","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_set.rs","begin":[251,4],"end":[255,5]},"visibility":"default","docs":"This crates a hashset from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1208"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13931:35321":{"id":"2:13931:35321","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1541":{"id":"0:1541","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[285,0],"end":[294,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3298:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve","extend_one_unchecked"],"trait":{"name":"Extend","id":"2:8457:8192","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1545:8452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:164:2920":{"id":"0:164:2920","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[357,4],"end":[363,5]},"visibility":"public","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:11008:899","`Hasher`":"2:11015:168","`Hash`":"2:11007:164"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14034:27269":{"id":"2:14034:27269","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14040:35340":{"id":"2:14040:35340","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:1568:2399":{"id":"b:2:3077-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3080:8381"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1419:184":{"id":"0:1419:184","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[377,4],"end":[377,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"2:14028:35338":{"id":"2:14028:35338","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13644:15028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33119:8187-0:1286:2395":{"id":"a:2:33119:8187-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3087-0:1621:2406":{"id":"b:2:3087-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1576:494":{"id":"0:1576:494","crate_id":0,"name":"clone","span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:60":{"id":"0:168:60","crate_id":0,"name":"default","span":{"filename":"src/random_state.rs","begin":[378,4],"end":[380,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:1286:2395":{"id":"b:2:3092-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1293":{"id":"0:1293","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1294:494"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13990:35328":{"id":"2:13990:35328","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13618:8243","str::split":"2:13981:27668","prim@char":"1:12486:490","`DoubleEndedIterator`":"2:8516:133","str::rsplit_terminator":"2:13993:35329"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44880:11627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1518:827":{"id":"0:1518:827","crate_id":0,"name":"fmt","span":{"filename":"src/hash_set.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3096:1850":{"id":"2:3096:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:1557:2398":{"id":"b:2:3081-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:2714":{"id":"0:72:2714","crate_id":0,"name":"write","span":{"filename":"src/fallback_hash.rs","begin":[171,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[allow(clippy::collapsible_if)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1627:494":{"id":"0:1627:494","crate_id":0,"name":"clone","span":{"filename":"src/random_state.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:2708":{"id":"0:67:2708","crate_id":0,"name":"write_u16","span":{"filename":"src/fallback_hash.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5745:30433":{"id":"5:5745:30433","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:14055:30436"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:787:8482":{"id":"5:787:8482","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14027:35337":{"id":"2:14027:35337","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1342:2425":{"id":"0:1342:2425","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_map.rs","begin":[75,4],"end":[77,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1351:8406":{"id":"0:1351:8406","crate_id":0,"name":"get_mut","span":{"filename":"src/hash_map.rs","begin":[154,4],"end":[160,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n```","links":{"`Eq`":"2:2859:146","`Hash`":"2:11007:164"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1358":{"id":"0:1358","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[278,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3538:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1362:262","0:1363:651"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13963:32970":{"id":"2:13963:32970","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45122:11492","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14031:35339":{"id":"2:14031:35339","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1557:2398":{"id":"0:1557:2398","crate_id":0,"name":"AHashMap","span":{"filename":"src/hash_map.rs","begin":[21,0],"end":[21,68]},"visibility":"public","docs":"A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"crate::RandomState":"0:1621:2406","std::collections::HashMap":"1:769:165"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1332","0:1337","0:1343","a:2:3338:15230-0:1557:2398","a:2:42921:8346-0:1557:2398","a:2:33119:8187-0:1557:2398","a:2:3303:260-0:1557:2398","a:2:33060:248-0:1557:2398","b:2:3081-0:1557:2398","b:2:3946-0:1557:2398","b:2:2772-0:1557:2398","b:2:3087-0:1557:2398","b:2:2775-0:1557:2398","b:2:3077-0:1557:2398","b:2:2804-0:1557:2398","b:2:3092-0:1557:2398","b:5:784-0:1557:2398","0:1378","0:1369","0:1321","0:1358","0:1563","0:1328","0:1407","0:1422","0:1317","0:1428","0:1389","0:1364","0:1382","0:1399","0:1394","0:1373","0:1435","0:1415"]}}},"0:1368:653":{"id":"0:1368:653","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_map.rs","begin":[286,4],"end":[288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3538:127","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1539:8452":{"id":"0:1539:8452","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2804-0:1621:2406":{"id":"b:2:2804-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2802:8579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2806:27230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1533:184":{"id":"0:1533:184","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[267,4],"end":[267,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2772-0:1621:2406":{"id":"b:2:2772-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3063"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3095:149":{"id":"2:3095:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32984:9018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:3303:260-0:1557:2398":{"id":"a:2:3303:260-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14026:35336":{"id":"2:14026:35336","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1420:8268":{"id":"0:1420:8268","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[378,4],"end":[378,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:905:8268","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"2:3091:1852":{"id":"2:3091:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13987:31045":{"id":"2:13987:31045","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13618:8243","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::split":"2:13981:27668"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44848:11476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13957:11645":{"id":"2:13957:11645","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12486:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44806:11625","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:1286:2395":{"id":"a:2:3303:260-0:1286:2395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2395","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1467":{"id":"0:1467","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[43,0],"end":[47,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1492:167","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1469:8381"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1356:8447":{"id":"0:1356:8447","crate_id":0,"name":"remove","span":{"filename":"src/hash_map.rs","begin":[269,4],"end":[275,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n```","links":{"`Eq`":"2:2859:146","`Hash`":"2:11007:164"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2888":{"id":"0:156:2888","crate_id":0,"name":"generate_with","span":{"filename":"src/random_state.rs","begin":[255,4],"end":[259,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` based on the provided seeds, but in such a way\nthat each time it is called the resulting state will be different and of high quality.\nThis allows fixed constant or poor quality seeds to be provided without the problem of different\n`BuildHasher`s being identical or weak.\n\nThis is done via permuting the provided values with the value of a static counter and memory address.\n(This makes this method somewhat more expensive than `with_seeds` below which does not do this).\n\nThe provided values (k0-k3) do not need to be of high quality but they should not all be the same value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13939:350":{"id":"2:13939:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13940:31015","`u8`":"1:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13943:8406":{"id":"2:13943:8406","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14046:35342":{"id":"2:14046:35342","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:15029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1364":{"id":"0:1364","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[285,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3551:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1368:653"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1343":{"id":"0:1343","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[80,0],"end":[276,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1347:8394","0:1349:8401","0:1351:8406","0:1353:2470","0:1354:8434","0:1355:8442","0:1356:8447"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:231-0:1621:2406":{"id":"0:231-0:1621:2406","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::random_state::RandomState","name":"RandomState","id":"0:1621:2406","glob":false}}},"a:2:42921:8346-0:1621:2406":{"id":"a:2:42921:8346-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13940:31015":{"id":"2:13940:31015","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12505:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1349:8401":{"id":"0:1349:8401","crate_id":0,"name":"get_key_value","span":{"filename":"src/hash_map.rs","begin":[127,4],"end":[133,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{"`Eq`":"2:2859:146","`Hash`":"2:11007:164"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1399":{"id":"0:1399","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[360,0],"end":[366,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1404:184","0:1405:8268","0:1406:982"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:145:2838":{"id":"0:145:2838","crate_id":0,"name":"RandomSource","span":{"filename":"src/random_state.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"A supplier of Randomness used for different hashers.\nSee [set_random_source].\n\nIf [set_random_source] aHash will default to the best available source of randomness.\nIn order this is:\n1. OS provided random number generator (available if the `runtime-rng` flag is enabled which it is by default) - This should be very strong.\n2. Strong compile time random numbers used to permute a static \"counter\". (available if `compile-time-rng` is enabled.\n__Enabling this is recommended if `runtime-rng` is not possible__)\n3. A static counter that adds the memory address of each [RandomState] created permuted with fixed constants.\n(Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled.\n(Rust enables ASLR by default)","links":{"set_random_source":"0:1617:2862","RandomState":"0:1621:2406"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:146:2849"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:1341:2424":{"id":"0:1341:2424","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_map.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:1568:2399":{"id":"b:2:3087-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1519":{"id":"0:1519","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[244,0],"end":[256,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:8437:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1521:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13967:30576":{"id":"2:13967:30576","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12486:490","self::pattern":"2:13618:8243"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14055:30436":{"id":"2:14055:30436","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14058:30953":{"id":"2:14058:30953","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:39649"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42921:8346-0:1557:2398":{"id":"a:2:42921:8346-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:8346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14062:35345":{"id":"2:14062:35345","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5150:35345"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45147:11557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1551-0:1568:2399":{"id":"0:1551-0:1568:2399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,8],"end":[127,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_set::AHashSet","name":"AHashSet","id":"0:1568:2399","glob":false}}},"0:1369":{"id":"0:1369","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[291,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42920:8347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42920:8347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:8347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1503:210":{"id":"0:1503:210","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[143,4],"end":[143,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"b:2:3077-0:1621:2406":{"id":"b:2:3077-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:8381"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13959:32981":{"id":"2:13959:32981","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13960:32910"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45104:11635","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33060:248-0:1621:2406":{"id":"a:2:33060:248-0:1621:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:14054:30435":{"id":"2:14054:30435","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1326:857":{"id":"0:1326:857","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashMap;\n\nlet map1 = AHashMap::from([(1, 2), (3, 4)]);\nlet map2: AHashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1413:8268":{"id":"0:1413:8268","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[370,4],"end":[370,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:895:8455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"b:2:2775-0:1557:2398":{"id":"b:2:2775-0:1557:2398","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2777:27226"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14008:3072":{"id":"2:14008:3072","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13618:8243","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12486:490","str::rmatches":"2:14011:35330"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:45034:11631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1477:2424":{"id":"0:1477:2424","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_set.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1393:827":{"id":"0:1393:827","crate_id":0,"name":"fmt","span":{"filename":"src/hash_map.rs","begin":[342,4],"end":[344,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1500":{"id":"0:1500","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[138,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:11050:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3129:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"2:34701:8489","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1503:210","0:1504:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1377:722":{"id":"0:1377:722","crate_id":0,"name":"eq","span":{"filename":"src/hash_map.rs","begin":[304,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:2398","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:33119:8187-0:1568:2399":{"id":"a:2:33119:8187-0:1568:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:8187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2399","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"24:522:12421":{"crate_id":24,"path":["libc","unix","hostent"],"kind":"struct"},"6:6666:13148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11508:11367":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"24:8329:13419":{"crate_id":24,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:7773:11422":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:13854:9211":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:5593:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:6606:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:558:12441":{"crate_id":24,"path":["libc","unix","sigval"],"kind":"struct"},"1:4019:11846":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:6437:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:2816:13461":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6658:9272":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4997:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:2366:11315":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:3308:10795":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:538:12430":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:34422:8700":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"24:7562:13367":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:5363:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:15286:10313":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:33062:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8902:8454":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11926:9854":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:41619:8663":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:685:8455":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13515:22586":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:3403:8581":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"24:5024:12737":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:2227:9672":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11337:13561":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:4492:13556":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:299:13437":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"9:422:21500":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:33026:11545":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:47141:11710":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:212:8592":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:1625:12545":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:12754:15024":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:7578:11999":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:949:8265":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6269:10880":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"22:216:9147":{"crate_id":22,"path":["once_cell","sync","Lazy"],"kind":"struct"},"1:8044:11899":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:1500:12464":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"0:1621:2406":{"crate_id":0,"path":["ahash","random_state","RandomState"],"kind":"struct"},"5:7612:8268":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:3707:8454":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:42082:8649":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10977:36459":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:2148:8614":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:5286:11857":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44166:3107":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5341:12838":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15981:10560":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:41252:11558":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:10400:11821":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"24:569:12446":{"crate_id":24,"path":["libc","unix","tms"],"kind":"struct"},"1:7186:14888":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:2684:10807":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:7463:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:11015:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"11:698:8268":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:2566:8236":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:8931:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:48054:8174":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:8298:11161":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:44715:11617":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:3078:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"22:124:9147":{"crate_id":22,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"9:445:21498":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:23371:14973":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:5622:11858":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6599:13121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:96:26766":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:1657:12568":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6042:10822":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:47975:11785":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:16264:10653":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13427:10003":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:10572:8617":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:3917:11845":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:42033:8637":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:2440:8226":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:12453:9552":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:7838:27288":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:11553:9825":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15777:10507":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"24:5043:12747":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:2467:9230":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11386:22595":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:12505:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:1220:9670":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:3866:11393":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6822:22511":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:7386:9302":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:3570:13556":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3576:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:6410:8662":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:5324:12834":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:13140:15031":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8090:14681":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1494:12461":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:23727:13467":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12605:9167":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:895:8455":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8511:9545":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:3621:11842":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5586:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14872:10260":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13306:10000":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:1898:15192":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:5223:15068":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:14312:10160":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:14859:10259":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13554:10012":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"14:214:11303":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:1632:12549":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:22902:34541":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:4300:13556":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"24:1583:12514":{"crate_id":24,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"24:7315:13248":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:8267:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:2620:10804":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:14574:11508":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:3503:9676":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:5636:11862":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1648:9059":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:16218:10639":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43665:8628":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8520:11843":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"20:561:36654":{"crate_id":20,"path":["zerocopy","sealed","ByteSliceSealed"],"kind":"trait"},"17:10115:22569":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15602:10477":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:43157:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12347:9899":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:23159:14977":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:41461:11573":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"24:1674:12575":{"crate_id":24,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5282:10857":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12711:9949":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8023:14754":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5224:12789":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:5810:13197":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:9336:27259":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:5150:12766":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10549:9163":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:12501:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:10713:29816":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:44636:11610":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13547:9206":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:8214:11907":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11630:9829":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:45104:11635":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"10:44:9326":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:13055:9171":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:11971:9856":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:45562:13548":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:12511:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:12493:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3344:15232":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:45034:11631":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:16377:10679":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15573:10469":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:45554:13546":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:3520:8584":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11515:9822":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13266:22584":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"24:1666:12574":{"crate_id":24,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4212:14804":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13635:10019":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3603:11961":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:46831:11681":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:491:9624":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:7628:9363":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:14845:10258":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3817:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14933:10270":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:34355:8702":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:34874:8490":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:5530:35161":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:2522:14751":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"24:7340:13266":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"20:370:3122":{"crate_id":20,"path":["zerocopy","Ref"],"kind":"struct"},"24:5050:12749":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12149:9874":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5036:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"24:5018:12734":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:22590:14891":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:1853:2397":{"crate_id":1,"path":["std","collections","hash_set"],"kind":"module"},"2:45558:13547":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4944:14817":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5482:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:3914:11844":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:14652:10211":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2555:2978":{"crate_id":1,"path":["std","io"],"kind":"module"},"24:6707:13165":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:13610:10018":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:44747:11620":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:1674:13856":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:9410:9548":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:484:12396":{"crate_id":24,"path":["libc","unix","timespec"],"kind":"struct"},"24:5365:12844":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:6418:13022":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4334:14824":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:23758:14797":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:8318:13418":{"crate_id":24,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:45566:13549":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:43918:13541":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10516:22582":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:1893:8265":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:34489:8699":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"22:294:8732":{"crate_id":22,"path":["once_cell","race","OnceRef"],"kind":"struct"},"24:5569:12940":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:6130:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:5300:12827":{"crate_id":24,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5288:12822":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5186:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11653:9830":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:507:9625":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:5689:10864":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14917:10269":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"24:4828:12630":{"crate_id":24,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:7826:27290":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"16:3110:10829":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:12073:30203":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:5999:11874":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:46884:11688":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40375:8261":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:7391:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:12437:12030":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"24:4841:12640":{"crate_id":24,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7058:10978":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:23937:11541":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5387:12854":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"22:333:2833":{"crate_id":22,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"2:44406:13542":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"16:7223:11016":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"15:288:21600":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:2173:11394":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:43148:8268":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8707:11851":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:5145:13556":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4805:12612":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"24:6472:13048":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:43255:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11984:11845":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11355:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:4934:3122":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:523:12421":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13222:22583":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:14507:10190":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:16701:10761":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15997:10563":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:42649:9514":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:12077:11476":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:10432:9372":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:39082:8708":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:42911:8343":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:2880:10816":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6837:9292":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:1589:12516":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:42951:8587":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:8448:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:42755:11595":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:7907:8266":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:3297:8454":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:5264:12808":{"crate_id":24,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:14393:10173":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8637:13554":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:8528:11202":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:2497:14743":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:41259:15074":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:1667:12574":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:42871:8268":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12699:9948":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:1624:8268":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:9473:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:2266:11395":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:1086:8612":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12550:9937":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:14346:10167":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4234:14808":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5682:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:9169:9525":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"24:1702:12588":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11157:29818":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12920:9969":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:5976:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:5449:10862":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:123:9323":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:517:12418":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14547:10198":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:1109:8614":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:15753:10503":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13983:10078":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15689:10484":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:2208:15255":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:12018:9860":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:4873:10844":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:8014:9306":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:4114:14799":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11163:9167":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:11098:9526":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:48034:8172":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12992:9976":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14560:10199":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:14599:10204":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7797:11425":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:41202:11554":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:7108:8664":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"14:220:11305":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"11:2380:8454":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:4816:14803":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:8483:11198":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2748:10810":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:2368:9355":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11503:9821":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"24:4791:12603":{"crate_id":24,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:5408:33263":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"24:5427:12875":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:41510:8660":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:45084:11633":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:46966:11693":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:2755:11830":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5325:12834":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:6520:13071":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:903:9663":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"24:4815:12620":{"crate_id":24,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:23286:14982":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:8457:8192":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:6506:13070":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13205:9992":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:960:8366":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"24:8352:13425":{"crate_id":24,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:41816:8682":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:42055:8643":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"24:5216:12788":{"crate_id":24,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12028:9861":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"24:1506:12467":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:40555:11549":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12860:9966":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1889:8265":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8591:11960":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:8978:33051":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:1849:2396":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"2:10427:33047":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:3338:9057":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:531:9626":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:47461:11740":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9460:11887":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:12673:9943":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:43140:8455":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5622:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:16297:10660":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"10:36:13448":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"24:4996:12721":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3088:13455":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5019:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:6408:29828":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:9613:8345":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:396:36416":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:835:8607":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:15586:10474":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:631:14676":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:2545:13444":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11114:9803":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:47173:11712":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5117:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:3308:3138":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:45094:11634":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40507:8596":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:8289:11912":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"24:6776:13183":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:3309:35230":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"21:0:2393":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"1:4312:29739":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:43072:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"17:14220:10125":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2332:9788":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:769:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"12:0:2967":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:735:26775":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:5035:12742":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:43132:8454":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6731:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:7969:11142":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6381:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:726:11384":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:10966:13557":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:7578:11417":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8268:2406":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:4582:11438":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:366:1835":{"crate_id":20,"path":["zerocopy","transmute"],"kind":"macro"},"1:12502:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:41298:11560":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:1492:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:3783:8714":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10938:36457":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:8255:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:5185:12769":{"crate_id":24,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4120:14798":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:4120:10834":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13095:9985":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:43092:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:1627:8226":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:3381:8492":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12749:9952":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"18:80:26765":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:12512:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:8165:9313":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12163:9875":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:1636:11390":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"24:5006:12728":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7883:9253":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:43292:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:3695:10832":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:16798:10786":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:24389:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:1513:12469":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:12184:11480":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4829:12630":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:5126:12764":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:2466:8265":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:45839:11669":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:3308:28124":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4150:14800":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3772:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40487:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:6716:11880":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:11066:11865":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:4372:8454":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:16642:10748":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"24:6543:13084":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:4703:14830":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:7119:13465":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:14963:10276":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15036:10292":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:12507:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:40429:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:6526:13072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:44998:11630":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:44221:9517":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:23329:14754":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15812:10513":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:6830:11881":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:15876:10530":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:12170:11479":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:3762:8712":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:23343:14972":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:2704:10808":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:3567:8188":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6882:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:4860:11440":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:4570:11437":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:667:9669":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7731:8342":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:44880:11627":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:11816:9539":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8662:11966":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:3330:9059":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7542:11061":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13921:10070":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6389:10895":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12044:9866":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:44952:11479":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:8290:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1539:8455":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7192:22514":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:47289:11718":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:45849:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:9764:29744":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:5060:10849":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:46799:11679":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12798:22712":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:479:12393":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:10734:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:3587:10831":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:6823:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15315:10333":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:2796:10812":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14902:10265":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"6:7577:13376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:35047:8491":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2209:14738":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:8151:9312":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6419:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12280:9889":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5249:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:16632:10747":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:3579:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"14:165:21581":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:516:12418":{"crate_id":24,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4942:14816":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3406:8582":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:23593:9379":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:4929:10846":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:15410:10416":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:9211:11991":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:381:11805":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:12497:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:7765:11092":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11283:11989":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:26789:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:1653:9060":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:4135:8226":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4792:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:545:12433":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:43891:13534":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:12156:11478":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:913:8604":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:664:11811":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5348:10859":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:14299:10158":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:42807:11465":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:23700:32969":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:8626:11212":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4842:12640":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5366:12844":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"9:328:13449":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"10:0:2965":{"crate_id":10,"path":["adler"],"kind":"module"},"20:562:3127":{"crate_id":20,"path":["zerocopy","ByteSlice"],"kind":"trait"},"1:10976:11908":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:9594:11822":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:15919:10545":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:43960:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:43479:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:4946:12699":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4875:12664":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:39137:8709":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"20:87:3154":{"crate_id":20,"path":["zerocopy","util","ptr","Ptr"],"kind":"struct"},"17:2378:22643":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2215:11429":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11081:28363":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:12204:9879":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:8934:8652":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:7832:8228":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:45122:11492":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"15:0:2969":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:11921:29736":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:45235:11638":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:7548:8268":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:14284:10154":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:1870:11819":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:10806:8626":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10729:9188":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2029:13556":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:1985:11824":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8209:9734":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:6748:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:6813:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:1580:11311":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:11302:9375":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:6640:10936":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:6716:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:7980:8633":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:47349:11736":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:6598:13121":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"0:145:2838":{"crate_id":0,"path":["ahash","random_state","RandomSource"],"kind":"trait"},"5:6717:8226":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:23616:11511":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:44980:11629":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:16209:10637":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:7785:11424":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:45393:11650":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:15973:10559":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:0:2971":{"crate_id":17,"path":["object"],"kind":"module"},"6:1684:12581":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11998:9858":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:12005:11846":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14127:10119":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:43027:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"2:42589:11459":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1250:35142":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12762:9953":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:683:11814":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14692:10215":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15010:10290":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6449:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"20:325:3119":{"crate_id":20,"path":["zerocopy","FromBytes"],"kind":"trait"},"2:2802:8579":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6890:9295":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:3497:14778":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5282:12819":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:13331:11489":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:11339:33070":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"24:6822:13199":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12983:22714":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:2495:21572":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:7909:9669":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10630:9185":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6188:10877":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:14260:11500":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"24:7447:13301":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"24:6658:13147":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:15963:10556":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"24:7576:13376":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"7:79:21492":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:4936:12693":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:12510:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13592:10015":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8919:11987":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:5319:12833":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"24:5164:12767":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:47946:11784":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:48063:8175":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11232:22597":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40392:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"20:631:3129":{"crate_id":20,"path":["zerocopy","_CastType"],"kind":"enum"},"24:7547:13360":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14975:10278":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:5317:11857":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9305:11993":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8273:8603":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:15679:10483":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:42074:8647":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:7307:13243":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:5579:15016":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:8585:11208":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:7350:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:726:9158":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:9152:11988":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"23:128:35161":{"crate_id":23,"path":["getrandom","use_file","DropGuard"],"kind":"struct"},"2:40447:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:4975:12710":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:45570:13550":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:2920:10818":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:16084:10612":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8062:9905":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11026:36460":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6368:9240":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:7094:8271":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:1785:35161":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:5255:10856":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:8039:11897":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"14:187:21588":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"24:6637:13135":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10597:9184":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5241:12796":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:11007:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:16026:10570":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13349:9202":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:12004:11474":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:7441:13858":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"24:5254:12802":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12371:9196":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4964:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6123:10823":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15496:10461":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4983:10848":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:7486:13317":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:7114:13466":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:23734:11525":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6507:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:43329:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:7554:22516":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14416:10176":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:47798:11780":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:9195:9526":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:11483:33075":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"5:4498:35201":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:7758:8657":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:497:12401":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:16812:10787":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:23838:11532":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:43930:11176":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10778:9786":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:881:14796":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:9225:11868":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:11050:2411":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13781:10053":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:553:12438":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:45052:11632":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12035:9325":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2840:10814":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"24:5056:12751":{"crate_id":24,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:102:13436":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:531:12427":{"crate_id":24,"path":["libc","unix","iovec"],"kind":"struct"},"16:6904:10963":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:22484:9376":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:613:36468":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2816:8736":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"24:4874:12664":{"crate_id":24,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43901:8616":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:3720:8455":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8219:11908":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:6442:13038":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:14773:10250":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:12491:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:4990:3137":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:45329:11649":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:22335:34538":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:7891:8265":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:2014:14718":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:926:8605":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"14:160:11297":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:6492:13059":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:328:13440":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10784:11835":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:12066:9194":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11319:36462":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11527:9824":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1696:12585":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2724:10809":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:42026:11454":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"24:1499:12464":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:45600:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"24:4868:12663":{"crate_id":24,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:42863:8455":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:5204:12781":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7212:11015":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11851:9851":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:40331:8585":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11864:9852":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:46782:11676":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:6901:11885":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:8209:9314":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:6461:13040":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9242:11992":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:15829:10520":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6738:36446":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7919:11130":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6914:10964":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:578:12451":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:10987:12002":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:10487:22581":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:10753:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6443:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7030:10977":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:6219:13556":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:47304:11719":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:23456:11509":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10663:9186":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1551:12492":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:41548:8671":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11025:11843":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11952:9191":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"8:0:2393":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:7822:8227":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:9390:28309":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8104:14682":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4976:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1214:35139":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:1118:8615":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4929:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:5087:12761":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:8031:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:41840:8684":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:33060:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:586:12455":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6205:22508":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:10421:12010":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:7852:27275":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"24:6722:13169":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:4529:13556":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13890:9220":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11457:9817":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:9450:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:6288:13556":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:670:9648":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10793:9790":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"24:4901:12676":{"crate_id":24,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:7585:13379":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:5240:12796":{"crate_id":24,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10564:9183":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6998:10968":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:23562:9378":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:12272:13859":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"24:8307:13414":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11579:9827":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:6440:9532":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:11985:9857":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"24:6901:13225":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:33120:9513":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41244:11436":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:11873:8454":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3296:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:7863:8667":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:44627:11609":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:8179:11148":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:532:12427":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:7864:8668":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"24:6875:13210":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:14460:10184":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:6699:13162":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:4990:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:9726:8234":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:11922:11471":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6749:9287":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"24:6690:13156":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5271:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:5318:12833":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5570:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:45578:13552":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:1624:12545":{"crate_id":24,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2483:14739":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:9509:12001":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:43968:8616":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4921:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13871:9213":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:42767:11847":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12216:9881":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:44934:11478":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:4983:12715":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5127:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:4210:8455":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:7332:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:11013:164":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"16:6173:9264":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12191:9878":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10823:9190":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:23235:14981":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"24:1683:12581":{"crate_id":24,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:33119:8187":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:44789:11624":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:708:8366":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:1656:12568":{"crate_id":24,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11566:9826":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:14807:10253":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:41146:11550":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6758:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:13408:11473":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6781:10951":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11075:36458":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:41365:11564":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:4694:10840":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12962:22713":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:1085:36420":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:1562:12500":{"crate_id":24,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:8399:8655":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:11050:11968":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:1514:12469":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"14:40:10053":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:1711:12592":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:13108:15301":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10803:9189":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:4781:9025":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1933:11823":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:48043:8173":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:9438:11877":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:44203:11604":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:3076:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"24:478:12393":{"crate_id":24,"path":["libc","unix","timeval"],"kind":"struct"},"2:46951:11692":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:6757:13180":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:5304:9361":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:521:26777":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:44213:9516":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:23849:11533":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:14001:10086":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:13692:15035":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12293:9891":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11606:9167":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8281:11911":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:4781:14847":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:45250:11643":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6777:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:12583:9939":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:45129:11558":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15769:10505":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:472:9665":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7075:22513":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:7219:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:581:9384":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7337:11034":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:3944:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:23904:11538":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"16:6111:10876":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13719:10037":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43017:11603":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:22466:14890":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3025:9019":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:38972:8706":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:23376:14971":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:6659:13147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5179:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:5172:10853":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:12499:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:6672:13151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:1564:21577":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:5138:12765":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:5001:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13006:9979":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:44737:11619":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:3351:11835":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:11757:22616":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:7518:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13070:9167":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:47059:11706":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:2246:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:44174:9515":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11842:11891":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:5992:11870":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:1620:8454":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22413:14894":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:8308:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:991:8610":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:46995:11695":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:47528:11743":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11006:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:4810:10842":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:4562:13556":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:48191:8183":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6631:13134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:2148:9544":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"9:390:21499":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:4189:8268":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:2021:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3391:8697":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11034:32846":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:41215:11555":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:8612:9316":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4914:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2499:14744":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12234:9883":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:5223:12789":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5025:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6462:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:1370:8612":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:44576:11608":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14269:10150":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:5628:12969":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"24:4928:12691":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12570:9938":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:8403:8654":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:46846:11682":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:44191:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:1880:8454":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:5634:12972":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:39:8264":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:6534:13077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1643:12557":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11805:9848":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"24:6380:12995":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5417:10861":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11421:9815":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6144:22507":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5462:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:23816:11530":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:14832:10256":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:3660:8625":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:47490:11741":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:43946:32984":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:15549:10467":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:7468:13307":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11320:11889":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:15953:10553":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6411:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:47594:11745":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:15439:10427":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:1605:8366":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13119:9986":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:11878:9167":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:11691:9833":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:1539:12483":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7938:11138":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:3720:9677":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8852:14863":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:5742:11865":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:23115:14976":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:12306:9893":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"18:589:9629":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:9369:9546":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:4902:10845":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1690:12584":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:41538:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:8254:13403":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:809:8265":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:881:8611":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:12198:11481":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:10670:11988":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:40544:2818":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:4920:12689":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:41423:11572":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:7508:29730":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:48017:11787":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12359:9900":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:14531:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41332:11561":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:7430:13296":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:5195:12776":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:10800:8628":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12108:9871":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"11:2533:13442":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"0:1552:165":{"crate_id":0,"path":["ahash","HashMap"],"kind":"type_alias"},"18:0:2972":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1884:8268":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:4636:15051":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:4222:14805":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:3699:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:6392:11507":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:1401:8613":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4342:14825":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:600:11810":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:16750:10776":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:45138:11436":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7539:8263":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:33149:8580":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:47416:11739":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:14483:10189":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:1601:11312":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:23882:11536":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"24:5476:12909":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"9:480:21497":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:546:9243":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:14738:10239":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5295:12824":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:430:36426":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:4594:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:12115:11477":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11432:22596":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"24:552:12438":{"crate_id":24,"path":["libc","unix","linger"],"kind":"struct"},"24:5248:12800":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6790:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:8233:22519":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:14611:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:1230:35156":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"9:355:21513":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:8008:13389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13970:10077":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6713:10941":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10368:22577":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"24:5449:12891":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:16332:10673":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:440:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"23:120:197":{"crate_id":23,"path":["getrandom","use_file","Mutex"],"kind":"struct"},"2:42621:14793":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:33592:8696":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:12498:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6623:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10534:9162":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"24:7517:13343":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12941:9971":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:8249:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11042:32844":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:6565:14984":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4890:12671":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:8636:22521":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:6064:10824":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5727:9162":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:2640:10805":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8837:11981":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"24:5411:1275":{"crate_id":24,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:4912:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:13854:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"24:5356:12840":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"22:0:2500":{"crate_id":22,"path":["once_cell"],"kind":"module"},"2:42920:8347":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:5043:9026":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2435:21646":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:6794:10952":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:8267:11157":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6421:9245":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:22393:34533":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:7414:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3353:11836":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12906:9199":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:41681:8681":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:7604:13382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:8262:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:47623:11746":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:1489:12459":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:3181:11433":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:43403:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:48168:8182":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:7413:13295":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6098:10871":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:1675:12575":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:1530:12477":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7401:36445":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:23779:14754":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:7372:9301":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:15531:10462":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:16036:10575":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:6812:13196":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:5602:12952":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"24:4895:12673":{"crate_id":24,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:9576:8344":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:8585:11958":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12335:9898":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:5649:10863":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11822:12027":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:496:12401":{"crate_id":24,"path":["libc","unix","rusage"],"kind":"struct"},"2:48089:8177":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"24:6563:13100":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:2336:14735":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:8502:8636":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:8261:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:1920:9060":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:31820:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:14375:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:1908:11821":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2649:11829":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"24:5419:12870":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:41519:8661":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"14:7:11297":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6493:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6046:8226":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:14750:10241":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:964:8367":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:42855:8454":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2666:15244":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:14283:8674":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:41413:11566":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:13644:15028":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:3048:21648":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:1931:11822":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:2415:21619":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11539:9171":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:3338:15230":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:14573:10201":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:23915:11539":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:13181:9990":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"20:0:2501":{"crate_id":20,"path":["zerocopy"],"kind":"module"},"6:1569:12502":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:9377:11999":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:387:11807":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:48115:8179":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4881:12666":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"24:544:12433":{"crate_id":24,"path":["libc","unix","winsize"],"kind":"struct"},"17:16198:10636":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:15418:10419":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4178:14803":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:45828:33955":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:7556:11416":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:6630:13134":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11013:12009":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:4830:13291":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:12135:9873":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11752:11604":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"2:41236:11557":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:34556:8701":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:2990:10821":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:42999:11602":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"24:5532:12921":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:15148:10307":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15475:10456":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"22:374:8735":{"crate_id":22,"path":["once_cell","race","OnceBool"],"kind":"struct"},"2:45749:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:4956:10847":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"15:394:21610":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:3043:11834":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:6233:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43672:8629":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2329:11828":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:16179:10631":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14055:10092":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:11294:32847":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:7756:27882":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:10241:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:12458:14683":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9158:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:1002:8454":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:12492:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:889:11385":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15714:10492":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8371:11913":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:14627:10209":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:7919:11895":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:4496:11849":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:44816:9189":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:14586:10202":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:42789:11462":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:43651:8619":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13733:10038":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:7929:33178":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"24:5116:12763":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12485:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:47009:11696":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"0:238:2420":{"crate_id":0,"path":["ahash","HashSetExt"],"kind":"trait"},"2:22364:34535":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:2530:10800":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:6671:13151":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6159:9261":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15836:10521":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:680:9649":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:5479:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:5205:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11385:13562":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"24:4956:12702":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10784:9787":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"0:235:2414":{"crate_id":0,"path":["ahash","HashMapExt"],"kind":"trait"},"17:11958:9855":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:14947:10272":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11465:9818":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"11:854:8609":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:22592:9376":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11065:9802":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:5647:12978":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:7292:35205":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:8437:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:3126:21649":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"20:598:3158":{"crate_id":20,"path":["zerocopy","wrappers","Unalign"],"kind":"struct"},"17:13662:10025":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:8284:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11173:36456":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:10234:404":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"17:12816:9679":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:6765:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:16399:10685":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"7:32:21485":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12976:9974":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:8320:22520":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:4924:13464":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:14084:10103":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:570:12446":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5629:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"0:1555:167":{"crate_id":0,"path":["ahash","HashSet"],"kind":"type_alias"},"1:11142:29810":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:3538:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12486:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12489:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"18:573:9625":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:4415:11848":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:3573:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:41557:8672":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:4913:12685":{"crate_id":24,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12869:10005":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:12508:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:31447:8828":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:8940:8653":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12648:9941":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:45147:11557":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:48100:8178":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"11:1023:8613":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8579:11633":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6573:10930":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"22:368:8734":{"crate_id":22,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"17:11448:9816":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:45635:15341":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:14243:11497":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:5265:12808":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:16832:10076":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:5057:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"9:0:2964":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"24:6715:13168":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:13322:22585":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13570:22587":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15641:10478":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5069:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5533:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:8000:9305":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:14886:10263":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:12496:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:41443:14721":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:47038:11705":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:48074:8176":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:43051:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"1:8566:9189":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13818:10066":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:47120:11709":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5635:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:46899:11689":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"24:5394:12859":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2112:8826":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4869:12663":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11222:9804":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:9781:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:5562:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:8125:11906":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:481:9623":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:42064:8645":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:7814:27261":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"9:53:9327":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"22:361:9146":{"crate_id":22,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"6:1597:12521":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1563:12500":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12776:9954":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3311:30368":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:23747:11526":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:896:10790":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:10097:22568":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:41632:8677":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:23627:32924":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:43440:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:6769:13182":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:564:12443":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:5441:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:14140:10120":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:6564:13100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:8297:9544":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:43553:8186":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:16385:10682":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:6610:13126":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:12104:29822":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:6256:9271":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:22325:9384":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:33151:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12524:9934":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:16187:10632":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:364:14287":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:12683:11482":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"24:1710:12592":{"crate_id":24,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"11:671:8454":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:43985:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8529:14753":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:5871:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10274:22574":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:1577:8604":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:16613:10066":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:41610:8676":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:1631:12549":{"crate_id":24,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6876:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:6495:11866":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:2719:11831":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:8024:11809":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:6531:15543":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:6723:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:44702:8658":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5658:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:8565:11207":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:16714:10767":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"18:635:9641":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8248:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:46913:11690":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:6183:15535":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:41528:8670":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"24:4963:12705":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44006:8618":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:3303:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47251:11716":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:45264:11646":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:16775:10781":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:47091:11708":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:9269:14884":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:47843:11781":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6852:10957":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:8343:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10790:11839":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:3800:35161":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:1695:12585":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:6410:13020":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5541:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4816:12620":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:2256:14662":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11358:22594":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:23021:14754":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5196:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5113:10851":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10246:22573":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8814:11604":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"24:5519:12920":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"14:202:8225":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:7745:11419":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:651:9625":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:5575:15015":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:5640:12975":{"crate_id":24,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12319:9896":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:5044:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1524:8454":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"20:566:3128":{"crate_id":20,"path":["zerocopy","ByteSliceMut"],"kind":"trait"},"2:41391:11565":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5656:11863":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:41642:8678":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:10796:8620":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7807:36447":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:10971:13559":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:968:8607":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:12513:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:16520:10703":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:16555:10733":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:7341:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7259:11028":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8656:11958":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:1586:8605":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:7758:15291":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:1588:12516":{"crate_id":24,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:5460:11443":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:6691:13156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"24:8301:13413":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2660:10806":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5405:12865":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8596:14792":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:8110:14708":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:5068:12760":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"13:110:36428":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:14796:10251":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10696:9187":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:11686:14754":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:7448:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6302:10887":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:31409:3139":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:643:9625":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:5270:12811":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11401:9813":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6462:22510":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:14099:10109":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:5502:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:6533:13077":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"24:0:1029":{"crate_id":24,"path":["libc"],"kind":"module"},"5:3851:9544":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"24:5440:12885":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:7598:35227":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"22:50:13556":{"crate_id":22,"path":["once_cell","imp","Guard"],"kind":"struct"},"16:2950:10819":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:5085:10850":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12225:9882":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:5178:12768":{"crate_id":24,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:905:8268":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:506:9667":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4947:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7959:11141":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12082:9178":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:13639:15029":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3406:11838":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:15540:10466":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:5709:22506":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:4828:13289":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:41497:8669":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:22868:14896":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:583:9668":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:8199:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:0:2963":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:45113:11636":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11163:29821":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:2966:10820":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:14821:10255":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:355:3120":{"crate_id":20,"path":["zerocopy","AsBytes"],"kind":"trait"},"17:15064:10296":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11777:9843":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:1158:8615":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10561:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:47888:11782":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:5198:10854":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7568:8226":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:23860:11534":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:13537:9200":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13491:10007":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9329:11994":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"24:6747:13173":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:5217:12788":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:5131:9684":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:6958:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:44898:11628":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:4164:14801":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:11965:11473":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:15989:10562":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:5878:11866":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"0:128:2410":{"crate_id":0,"path":["ahash","random_state"],"kind":"module"},"17:15557:10468":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13082:9804":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:40295:8717":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:14520:10193":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:3085:8595":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:22379:34530":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:16739:10775":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:4826:13287":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:33037:11546":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:14358:10169":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5007:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"24:6881:13211":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:3141:9688":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6028:9260":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"15:306:21601":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:4575:35201":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"24:4969:12707":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:42942:9046":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:16786:10783":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:44676:11615":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7838:22517":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:16507:10052":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:23197:14978":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:41468:8658":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:7588:11418":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"24:577:12451":{"crate_id":24,"path":["libc","unix","servent"],"kind":"struct"},"17:13169:9989":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:6712:8639":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:23577:9364":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:45281:11647":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6953:10967":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8648:11965":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:42921:8346":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:6543:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:1727:12597":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:39027:8707":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13692:10029":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"24:8030:13400":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5224:10855":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:1488:12459":{"crate_id":24,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:41488:8659":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7563:13367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:538:9151":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46767:11675":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:6789:13190":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:8353:13425":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10843:9164":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4570:11850":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:6584:14985":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:41589:8675":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"24:464:12385":{"crate_id":24,"path":["libc","unix","group"],"kind":"struct"},"17:16145:10619":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12897:9968":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:6611:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:4681:14829":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:8212:8638":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:9254:14885":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:14666:8235":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:4855:11439":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5107:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:985:14689":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13398:9205":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:7469:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14019:10087":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12008:9733":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:23827:11531":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:1636:9057":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5151:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:1888:8226":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:32984:9018":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5428:12875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"24:6739:13172":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:42827:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:6588:10933":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:6808:9290":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:15785:10509":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:41651:8679":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:33061:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:46814:11680":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:5379:10860":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12249:9886":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6942:10966":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:15896:10537":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45876:8591":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:11873:13571":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:4851:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:45441:11659":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:598:36469":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:13578:8241":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:3298:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:2772:10811":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12826:9957":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:5839:8271":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:5676:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:15739:10500":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:8669:8467":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7016:10975":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11592:9774":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11309:9806":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:6651:13146":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15106:10300":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:41376:15291":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3669:29747":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:39716:8710":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44776:8239":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:6919:8686":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:6887:9535":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:13933:10071":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11281:9805":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:44423:11470":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:4702:9369":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4363:14827":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"22:174:9146":{"crate_id":22,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"5:7656:8268":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:8066:22518":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:3411:8583":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:14708:10220":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:9759:11907":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:41339:11562":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"24:7462:13306":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:8105:11147":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:6730:13170":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:8749:8724":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:10406:827":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:44806:11625":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:13370:11491":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40537:8713":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:31462:8616":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:10830:9905":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:14672:10214":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13157:9988":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:47158:11711":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:842:8608":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:5287:12822":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:1872:11820":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:22411:14754":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:10419:12011":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:2437:9675":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:8223:11149":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12487:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:1900:9057":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:997:8611":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:2559:13446":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:42605:11461":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:15939:10551":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:10787:11837":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"11:1907:9058":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6502:21618":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"24:5461:12900":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:3854:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:45756:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"24:5540:12926":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"11:2420:8268":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:45546:13544":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:6448:13039":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:22580:14754":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9318:9528":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:11270:9525":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:23926:11540":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:9433:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:8273:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:473:12390":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7495:11053":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:9219:8268":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5507:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:7159:11002":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:7539:13357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6700:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:41566:11576":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12625:9940":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:8295:13412":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:3688:14771":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:5441:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10167:22571":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:3096:35158":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:2295:9352":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2481:14738":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:11346:33073":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"16:5144:10852":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:22472:14893":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5670:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:1521:12472":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:47190:11713":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:34288:8230":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"13:229:9322":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:3678:14752":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:8598:11211":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:5380:12851":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7168:11003":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5051:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:14612:10206":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:16159:10625":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:4267:10838":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:5550:12932":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:3540:8643":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7716:36450":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6544:13084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"24:4989:12718":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:1642:12557":{"crate_id":24,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8642:14828":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:14400:11502":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:9446:13556":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:4903:14829":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8549:8669":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:3086:35159":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44645:11612":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"24:5348:12839":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:10332:22576":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16008:10567":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:3933:8265":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:11424:13566":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:8376:9542":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5349:12839":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"24:5340:12838":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:8043:36444":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:42567:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:15090:10298":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"11:740:8367":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:44655:11613":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:785:8605":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"24:1538:12483":{"crate_id":24,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:608:9636":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:765:26776":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44419:13543":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"9:236:11604":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11617:9804":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5088:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12851:9965":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:3802:34480":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:5281:12819":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:3376:8229":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:22362:34544":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:6316:29829":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:8572:11471":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:40728:15082":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:10487:13720":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:3608:8262":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3343:35229":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:11828:11890":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"22:82:9146":{"crate_id":22,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"17:14375:10172":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:9182:11989":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"24:1726:12597":{"crate_id":24,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:6071:9527":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:3556:8586":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:46934:11691":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13471:9679":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:4404:10839":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:5648:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:12500:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:6763:35161":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"20:196:36505":{"crate_id":20,"path":["zerocopy","wrappers","update","WriteBackOnDrop"],"kind":"struct"},"1:10996:9543":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:13028:9983":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:2551:36422":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:7361:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1584:12514":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11706:9835":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:1100:8613":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:1855:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:2406:9673":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5450:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:9752:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:6084:10867":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6876:10960":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:10789:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9203:8454":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6984:9297":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:6479:13050":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:2668:15245":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"24:563:12443":{"crate_id":24,"path":["libc","unix","itimerval"],"kind":"struct"},"17:16761:10777":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"24:4804:12612":{"crate_id":24,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:13294:11486":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"24:8248:13402":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:14348:33457":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:5487:12912":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:16132:10613":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8630:11847":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11124:36461":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"24:5481:12911":{"crate_id":24,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9364:9531":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14072:10100":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:12409:22688":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"0:0:2499":{"crate_id":0,"path":["ahash"],"kind":"module"},"1:3449:11840":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:43658:8620":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:16241:10652":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5301:12827":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:31179:14795":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:11699:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:15121:10304":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:16283:10658":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"24:5333:12837":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:7316:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6902:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:22890:9377":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"24:5493:12914":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:23649:11513":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:6239:9266":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:15077:10297":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:7548:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"24:6916:13236":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:7462:11049":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:908:9664":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"9:500:11370":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:14335:10164":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:1529:12477":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8740:8725":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:46980:11694":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:42959:11601":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"24:1520:12472":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10442:22580":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:47917:11783":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:16311:10667":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:5470:12906":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:16494:10038":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:7454:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:14152:10123":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:2301:8612":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:42040:8639":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:7487:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:5229:12792":{"crate_id":24,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:37096:8705":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:8711:11219":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6680:10937":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:16668:10754":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15701:10487":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12886:9967":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:8058:11145":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:5585:12945":{"crate_id":24,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"20:362:3121":{"crate_id":20,"path":["zerocopy","Unaligned"],"kind":"trait"},"11:873:8610":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3789:8716":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:7424:22515":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:1642:9058":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8908:11986":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:939:8226":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:5021:14813":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6521:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:44757:11621":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:15655:10481":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7118:8272":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:8546:11204":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7416:11038":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:0:2970":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:7267:35194":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:6844:8268":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7789:36451":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:698:9156":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7980:10828":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6740:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"11:1049:8614":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:44830:11471":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:9491:11889":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6696:10940":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8766:11978":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:689:9651":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12392:9901":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:4184:10836":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:12504:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5115:14849":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:11902:9853":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10947:12020":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:688:14679":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:2400:8455":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:8302:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:974:8608":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:2794:11833":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11058:11906":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:1339:9671":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:7648:8268":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:317:9663":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:33804:8695":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7305:11030":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11831:9171":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:10735:8625":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:680:11812":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:45774:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"18:563:9153":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:10808:8627":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13909:10067":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:16684:10759":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:7044:9298":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15864:10529":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:8516:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:1105:11309":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6440:22509":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:3014:21647":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:2539:13443":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:754:9662":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:5885:11867":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:16822:10071":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:5688:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:7431:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:23509:11510":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15760:10504":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44800:8238":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:41598:8685":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9455:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"23:0:2034":{"crate_id":23,"path":["getrandom"],"kind":"module"},"17:13958:10076":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:2733:15316":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:45459:11496":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:2585:13458":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:882:8454":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4172:14802":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5813:14868":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:14043:10091":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6917:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:1140:11310":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:22863:14754":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:40407:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:12503:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:48230:8184":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:11867:13570":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:47399:11738":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4844:10843":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:7410:29812":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:8319:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4970:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:47076:11707":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:45744:13553":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:6408:10902":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:155:9238":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:2228:9325":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:2570:10802":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:718:9656":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:8137:9310":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:41691:8666":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2084:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:6436:13035":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12176:9876":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:3461:8703":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:3854:9678":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:5357:12840":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:15431:10426":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:23871:11535":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:2450:10796":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7471:11052":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13014:9981":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:45214:15041":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6770:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:14554:11507":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:7809:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:5196:8720":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:40467:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:985:8609":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:45574:13551":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:6935:35161":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:2137:8613":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10418:22579":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8892:11854":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:4226:14806":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11720:9837":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:6652:13146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12723:9950":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:16595:10056":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:12509:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:45888:11671":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:8342:13423":{"crate_id":24,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11678:9832":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:2349:8614":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:5494:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:35220:8704":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:15:2714":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:41403:9189":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:12260:22687":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:465:12385":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47996:11786":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:15731:10497":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:772:8604":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:3551:3153":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:5681:12991":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:7620:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:12042:11475":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:1595:8606":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:3304:9058":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"24:5592:12947":{"crate_id":24,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12931:9200":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12537:9935":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:8503:11199":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47378:11737":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:5672:11864":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5641:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:6625:10934":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:2121:8612":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1703:12588":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22464:14754":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:5404:12865":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:16171:10628":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:12716:11483":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:12736:9951":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"24:5294:12824":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5477:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:5757:10865":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"24:7331:13260":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:47644:11747":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:7729:9359":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12122:9872":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:2206:15254":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7282:11029":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:47511:11742":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:8260:13404":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15160:10311":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7358:9300":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15621:9221":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:15665:10482":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:45550:13545":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14031:10090":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:576:14667":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:3024:14754":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:41187:32887":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:48138:8180":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:15931:10548":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:5657:12979":{"crate_id":24,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:42049:8641":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:41176:11551":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3364:9060":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:23247:33149":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:4998:11853":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11788:9845":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:2486:10798":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:6296:8673":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"24:5386:12854":{"crate_id":24,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:929:14688":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:559:12441":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:15050:10293":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:706:9652":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"24:5374:12850":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13385:9203":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"24:7349:13267":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45752:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13945:10074":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:33044:3122":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:8296:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5551:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11016:9801":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:2900:10817":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:23665:32964":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:13354:11490":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4896:12673":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"24:6665:13148":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:5012:8221":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11818:9849":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"24:5106:12762":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:472:12390":{"crate_id":24,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11598:29807":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:10218:22572":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:15852:10523":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4984:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:8007:13389":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:8624:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10296:22575":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:5318:10858":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8226:9543":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7508:11056":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:8283:13410":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11733:22615":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:44848:11476":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:1596:12521":{"crate_id":24,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:46752:11672":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:3456:8265":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"15:327:9318":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:33030:8467":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8236:11909":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4957:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:8096:11146":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:14997:10289":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:46867:11687":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:5139:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13361:10002":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:8330:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:44665:11614":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12840:9961":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:113:26767":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:1568:12502":{"crate_id":24,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:12484:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7949:10827":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8559:8682":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:7986:13388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:321:3118":{"crate_id":20,"path":["zerocopy","FromZeroes"],"kind":"trait"},"1:508:29819":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:6680:13153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13757:10052":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:45865:11670":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:7964:29814":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:43366:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:4733:9146":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6708:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:11055:2474":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:16323:10669":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13041:9984":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:47272:11717":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:351:36418":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"18:659:9642":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:10578:29743":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13838:9207":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6638:13135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:3834:10833":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:3987:9701":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"5:2162:11393":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6473:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:585:12455":{"crate_id":24,"path":["libc","unix","protoent"],"kind":"struct"},"6:4937:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5471:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:10293:11592":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:47721:11779":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:5549:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8381:14783":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:1689:12584":{"crate_id":24,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:830:8606":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:41360:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5255:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:45766:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10794:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:6679:13153":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:2820:10813":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12095:9870":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:45807:11664":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12952:9972":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:4056:8226":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:5603:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6843:9294":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:282:35161":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:23023:14892":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:8272:13406":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:8266:13405":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:41140:11436":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:5621:12966":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4350:14826":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"24:6525:13072":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7990:11143":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:5305:9685":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:2403:8589":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:6026:8726":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7907:11129":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:47205:11714":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14405:10175":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:4332:13556":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:7308:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"13:0:2962":{"crate_id":13,"path":["std_detect"],"kind":"module"},"9:176:9341":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10031:22567":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:3441:10830":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:4152:10835":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10394:22578":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11291:36455":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:1064:21576":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1507:12467":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:7586:13379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:6162:9361":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2550:10801":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:11442:12026":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"24:5506:12919":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"24:6764:13181":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:13618:8243":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:6866:22512":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:41225:11556":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11944:11844":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:8028:9307":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:3777:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:5429:15012":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"2:34701:8489":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:13624:8234":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:45428:11655":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:31441:3140":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:4889:12671":{"crate_id":24,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:44182:3106":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8681:11968":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:23893:11537":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:3447:11839":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5375:12850":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:2348:36363":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:10804:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1123:35161":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:15905:10538":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:8013:13391":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"24:7453:13303":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:43218:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:3852:14794":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:798:8226":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:48153:8181":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5488:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"24:6622:13133":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:45582:9375":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:11209:33074":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:11856:11893":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15136:9200":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:43516:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:16656:10752":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:42733:32958":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:42846:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:490:12398":{"crate_id":24,"path":["libc","unix","rlimit"],"kind":"struct"},"2:41667:8680":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22347:34538":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:23685:32959":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"24:8289:13411":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"24:7367:13276":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:2509:14749":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:1005:8612":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:5106:14848":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:2323:8613":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:23300:15244":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:16362:10678":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5520:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"24:7538:13357":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:5675:12988":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:8569:8191":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:15024:10291":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40379:8711":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:12061:9551":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:322:9664":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5420:12870":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:31473:32920":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:9465:11888":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:45407:15042":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:732:2405":{"crate_id":1,"path":["std","collections"],"kind":"module"},"6:5334:12837":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6970:9296":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:33051:11547":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:12506:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:12490:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:4165:35161":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12787:9955":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:1555:8268":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"24:4880:12666":{"crate_id":24,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:1386:8614":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6731:9256":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:4617:8578":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15351:10364":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"24:8198:13401":{"crate_id":24,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:6217:11866":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"24:7603:13382":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:23221:14754":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:13633:9652":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5311:12830":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:4241:10837":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:12087:11894":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14438:10183":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:16019:10568":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12056:9193":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:15844:10522":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"24:537:12430":{"crate_id":24,"path":["libc","unix","pollfd"],"kind":"struct"},"11:0:2966":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:10141:22570":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13193:9991":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:12469:28359":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:623:36471":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:434:36423":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:6833:14880":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:3404:11837":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"24:1550:12492":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:45418:11651":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"18:515:9622":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:41826:8683":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:485:12396":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:3314:30367":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7350:9257":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:22381:34540":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:10792:122":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:6752:9534":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:5742:9163":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:23641:11512":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45815:11666":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:2860:10815":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10928:9800":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"0:1617:2862":{"crate_id":0,"path":["ahash","random_state","set_random_source"],"kind":"function"},"1:5129:14850":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:1493:12461":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:16341:10675":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8685:13276":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:955:8606":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7714:8602":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:2327:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:14114:10115":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:45624:11661":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:44728:11618":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"24:5561:12938":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:7703:8236":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"14:0:2968":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:42880:8342":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4940:14814":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1415:8615":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13290:9753":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:15887:10534":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:8014:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:4981:15058":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:45356:11495":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14533:9907":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:47549:11744":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:5395:12859":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12080:11894":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"14:31:11297":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:9323:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2087:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:5310:12830":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:47222:11715":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:535:14662":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:23249:15244":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:41580:8674":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:4766:10841":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:41347:11563":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6337:10889":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:491:12398":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5381:12851":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:31847:9384":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:3092:35157":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:3889:9693":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:7368:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"24:7985:13388":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"11:1914:9059":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4902:12676":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:10246:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13451:10005":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:14327:10162":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:10798:8619":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13798:10056":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:2506:10799":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:7347:27283":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"17:11475:22597":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:34016:8698":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:297:2817":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4900:14851":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12687:9947":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:7128:8273":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"24:7390:13294":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2590:10803":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:7360:13272":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:13124:11484":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:1631:8265":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:1616:8367":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:15946:10552":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:9357:11998":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5230:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6480:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13145:9987":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:5165:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:5669:12986":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14640:10210":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7521:11059":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:11897:8455":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:16728:10770":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:9284:14886":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:10802:8629":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:8152:8636":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"23:62:149":{"crate_id":23,"path":["getrandom","error","Error"],"kind":"struct"}},"external_crates":{"23":{"name":"getrandom","html_root_url":"https://docs.rs/getrandom/0.2.15/"},"20":{"name":"zerocopy","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"once_cell","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"libc","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}