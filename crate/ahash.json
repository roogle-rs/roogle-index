{"root":"0:0:2108","crate_version":"0.8.11","includes_private":false,"index":{"0:1568:2007":{"id":"0:1568:2007","crate_id":0,"name":"AHashSet","span":{"filename":"src/hash_set.rs","begin":[17,0],"end":[17,55]},"visibility":"public","docs":"A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"std::collections::HashSet":"1:1449:155","crate::RandomState":"0:1621:2014"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1470","0:1474","a:2:41633:7950-0:1568:2007","a:2:31974:236-0:1568:2007","a:2:41632:7951-0:1568:2007","a:2:32031:7793-0:1568:2007","a:2:3133:14955-0:1568:2007","a:2:3098:246-0:1568:2007","b:2:2885-0:1568:2007","b:2:2879-0:1568:2007","b:2:2890-0:1568:2007","b:2:2605-0:1568:2007","b:2:2875-0:1568:2007","b:2:2602-0:1568:2007","b:2:3714-0:1568:2007","b:5:727-0:1568:2007","0:1495","0:1536","0:1479","0:1467","0:1500","0:1492","0:1573","0:1458","0:1523","0:1515","0:1510","0:1530","0:1547","0:1488","0:1541","0:1484","0:1461","0:1519","0:1505"]}}},"2:13119:34874":{"id":"2:13119:34874","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13117:34873"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2879-0:1557:2006":{"id":"b:2:2879-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13184:27898":{"id":"2:13184:27898","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12325:458","str::splitn":"2:13181:27896","self::pattern":"2:12804:7848"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43542:11107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13190:27901":{"id":"2:13190:27901","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:27904":{"id":"2:13222:27904","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1373":{"id":"0:1373","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[298,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1377:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1576:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13123:34875":{"id":"2:13123:34875","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:27885":{"id":"2:13137:27885","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13136:2242","str::split_at_mut_checked":"2:13139:27889"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:34896":{"id":"2:13247:34896","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4891:34896"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43737:11179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1469:7987":{"id":"0:1469:7987","crate_id":0,"name":"into","span":{"filename":"src/hash_set.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashSet","id":"1:1449:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1433:8059":{"id":"0:1433:8059","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1487:619":{"id":"0:1487:619","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_set.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3306:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:1557:2006":{"id":"b:2:2885-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2885-0:1286:2003":{"id":"b:2:2885-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31902:8628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:31974:236-0:1286:2003":{"id":"a:2:31974:236-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1504:396":{"id":"0:1504:396","crate_id":0,"name":"bitand","span":{"filename":"src/hash_set.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![2, 3, 4].into_iter().collect();\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1505":{"id":"0:1505","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[170,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"2:33776:8098","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1508:198","0:1509:401"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashSetExt","id":"0:238:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1449:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:250:1161","0:251:2025"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:2314":{"id":"0:68:2314","crate_id":0,"name":"write_u32","span":{"filename":"src/fallback_hash.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31974:236-0:1568:2007":{"id":"a:2:31974:236-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1412:172":{"id":"0:1412:172","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[369,4],"end":[369,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"2:13142:11266":{"id":"2:13142:11266","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43396:11246","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:1568:2007":{"id":"b:5:727-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:729:8205","5:730:8089","5:731:8420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1499:398":{"id":"0:1499:398","crate_id":0,"name":"bitor","span":{"filename":"src/hash_set.rs","begin":[133,4],"end":[135,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1495":{"id":"0:1495","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[106,0],"end":[136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:33603:8097","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1498:198","0:1499:398"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13238:29099":{"id":"2:13238:29099","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1378":{"id":"0:1378","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[309,0],"end":[315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155:1161":{"id":"0:155:1161","crate_id":0,"name":"new","span":{"filename":"src/random_state.rs","begin":[239,4],"end":[243,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` using random keys.\n\nEach instance will have a unique set of keys derived from [RandomSource].\n","links":{"RandomSource":"0:145:2446"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1627:462":{"id":"0:1627:462","crate_id":0,"name":"clone","span":{"filename":"src/random_state.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1529:940":{"id":"0:1529:940","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[261,4],"end":[263,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8158:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:27894":{"id":"2:13172:27894","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12804:7848","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split":"2:13166:27890"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43438:11104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:34894":{"id":"2:13234:34894","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12765:135","`FromStr`":"2:12764:7845"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12764:7845","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12764:7845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1514:1716":{"id":"0:1514:1716","crate_id":0,"name":"sub","span":{"filename":"src/hash_set.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1291":{"id":"0:1291","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1292:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72:2320":{"id":"0:72:2320","crate_id":0,"name":"write","span":{"filename":"src/fallback_hash.rs","begin":[171,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[allow(clippy::collapsible_if)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3714-0:1557:2006":{"id":"b:2:3714-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2890-0:1568:2007":{"id":"b:2:2890-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1368:619":{"id":"0:1368:619","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_map.rs","begin":[286,4],"end":[288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3306:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2312":{"id":"0:66:2312","crate_id":0,"name":"write_u8","span":{"filename":"src/fallback_hash.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1428":{"id":"0:1428","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[395,0],"end":[405,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3093:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3093:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:8167:7796","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1433:8059"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1407":{"id":"0:1407","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[368,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1412:172","0:1413:7874","0:1414:940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13216:34890":{"id":"2:13216:34890","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:14412":{"id":"2:13246:14412","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4894:14412"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43728:11064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1555:155":{"id":"0:1555:155","crate_id":0,"name":"HashSet","span":{"filename":"src/lib.rs","begin":[135,8],"end":[135,79]},"visibility":"public","docs":"Type alias for [HashSet]<K, ahash::RandomState>","links":{"HashSet":"0:1555:155"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1449:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:1404:172":{"id":"0:1404:172","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[361,4],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"0:245:1161":{"id":"0:245:1161","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13239:29100":{"id":"2:13239:29100","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1458":{"id":"0:1458","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[19,0],"end":[23,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1449:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1460:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13237:29097":{"id":"2:13237:29097","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39459:14811","Self::is_ascii":"2:13236:29096"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39459:14811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:8397":{"id":"2:13158:8397","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:1621:2014":{"id":"b:2:2890-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13166:27890":{"id":"2:13166:27890","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12804:7848","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split_whitespace":"2:13144:32705","str::rsplit":"2:13172:27894"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43420:11099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13117:34873":{"id":"2:13117:34873","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1363:617":{"id":"0:1363:617","crate_id":0,"name":"deref","span":{"filename":"src/hash_map.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3306:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2879-0:1286:2003":{"id":"b:2:2879-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:727-0:1557:2006":{"id":"b:5:727-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:729:8205","5:730:8089","5:731:8420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:153:787":{"id":"0:153:787","crate_id":0,"name":"fmt","span":{"filename":"src/random_state.rs","begin":[228,4],"end":[230,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1567:462":{"id":"0:1567:462","crate_id":0,"name":"clone","span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":"Constructs a new [AHasher] with fixed keys.\nIf `std` is enabled these will be generated upon first invocation.\nOtherwise if the `compile-time-rng`feature is enabled these will be generated at compile time.\nIf neither of these features are available, hardcoded constants will be used.\n\nBecause the values are fixed, different hashers will all hash elements the same way.\nThis could make hash values predictable, if DOS attacks are a concern. If this behaviour is\nnot required, it may be preferable to use [RandomState] instead.\n\n# Examples\n\n```\nuse ahash::AHasher;\nuse std::hash::Hasher;\n\nlet mut hasher_1 = AHasher::default();\nlet mut hasher_2 = AHasher::default();\n\nhasher_1.write_u32(1234);\nhasher_2.write_u32(1234);\n\nassert_eq!(hasher_1.finish(), hasher_2.finish());\n```","links":{"RandomState":"0:1621:2014","AHasher":"0:1286:2003"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1353:2079":{"id":"0:1353:2079","crate_id":0,"name":"insert","span":{"filename":"src/hash_map.rs","begin":[185,4],"end":[187,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`] is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [module-level\ndocumentation] for more.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{"`None`":"2:41540:190"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1328":{"id":"0:1328","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[47,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:726:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1331:7987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3133:14955-0:1568:2007":{"id":"a:2:3133:14955-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3133:14955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:14955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32031:7793-0:1557:2006":{"id":"a:2:32031:7793-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2879-0:1568:2007":{"id":"b:2:2879-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1460:817":{"id":"0:1460:817","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashSet","id":"1:1449:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1547":{"id":"0:1547","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[300,0],"end":[306,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1621:2014"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1549:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13231:34893":{"id":"2:13231:34893","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1484":{"id":"0:1484","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3319:2758","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1487:619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1521:820":{"id":"0:1521:820","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_set.rs","begin":[251,4],"end":[255,5]},"visibility":"default","docs":"This crates a hashset from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1161"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:1286:2003":{"id":"b:5:727-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:8205","5:730:8089","5:731:8420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250:1161":{"id":"0:250:1161","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[191,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1508:198":{"id":"0:1508:198","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[175,4],"end":[175,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1332":{"id":"0:1332","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[53,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1335:1161","0:1336:2025"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1530":{"id":"0:1530","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[266,0],"end":[272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1533:172","0:1534:7874","0:1535:940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1491:685":{"id":"0:1491:685","crate_id":0,"name":"eq","span":{"filename":"src/hash_set.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:1568:2007":{"id":"a:2:3098:246-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2879-0:1621:2014":{"id":"b:2:2879-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13141:11121":{"id":"2:13141:11121","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43390:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1621:2014":{"id":"0:1621:2014","crate_id":0,"name":"RandomState","span":{"filename":"src/random_state.rs","begin":[220,0],"end":[225,1]},"visibility":"public","docs":"Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create\n[AHasher]s in order to hash the keys of the map. See `build_hasher` below.\n\n[build_hasher]: ahash::\n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap\n\nThere are multiple constructors each is documented in more detail below:\n\n| Constructor   | Dynamically random? | Seed |\n|---------------|---------------------|------|\n|`new`          | Each instance unique|_[RandomSource]_|\n|`generate_with`| Each instance unique|`u64` x 4 + [RandomSource]|\n|`with_seed`    | Fixed per process   |`u64` + static random number|\n|`with_seeds`   | Fixed               |`u64` x 4|\n","links":{"RandomSource":"0:145:2446","AHasher":"0:1286:2003","std::hash::Hasher":"2:10463:156","std::collections::HashMap":"1:726:153"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:2:41633:7950-0:1621:2014","a:2:31974:236-0:1621:2014","a:2:41632:7951-0:1621:2014","a:2:32031:7793-0:1621:2014","a:2:3133:14955-0:1621:2014","a:2:3098:246-0:1621:2014","b:2:2885-0:1621:2014","b:2:2879-0:1621:2014","b:2:2890-0:1621:2014","b:2:2605-0:1621:2014","b:2:2875-0:1621:2014","b:2:2602-0:1621:2014","b:2:3714-0:1621:2014","b:5:727-0:1621:2014","0:1626","0:167","0:169","0:152"]}}},"5:5620:35595":{"id":"5:5620:35595","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2425","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2425","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:7950-0:1557:2006":{"id":"a:2:41633:7950-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1549:60":{"id":"0:1549:60","crate_id":0,"name":"default","span":{"filename":"src/hash_set.rs","begin":[303,4],"end":[305,5]},"visibility":"default","docs":"Creates an empty `AHashSet<T, S>` with the `Default` value for the hasher.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1533:172":{"id":"0:1533:172","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[267,4],"end":[267,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1342:2033":{"id":"0:1342:2033","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_map.rs","begin":[75,4],"end":[77,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1406:940":{"id":"0:1406:940","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[363,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8158:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:8205":{"id":"5:729:8205","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:2888:136":{"id":"2:2888:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:1387:198":{"id":"0:1387:198","crate_id":0,"name":"Output","span":{"filename":"src/hash_map.rs","begin":[323,4],"end":[323,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"0:171:2064":{"id":"0:171:2064","crate_id":0,"name":"build_hasher","span":{"filename":"src/random_state.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":"Constructs a new [AHasher] with keys based on this [RandomState] object.\nThis means that two different [RandomState]s will will generate\n[AHasher]s that will return different hashcodes, but [Hasher]s created from the same [BuildHasher]\nwill generate the same hashes for the same input data.\n\n # Examples\n```\n        use ahash::{AHasher, RandomState};\n        use std::hash::{Hasher, BuildHasher};\n    \n        let build_hasher = RandomState::new();\n        let mut hasher_1 = build_hasher.build_hasher();\n        let mut hasher_2 = build_hasher.build_hasher();\n    \n        hasher_1.write_u32(1234);\n        hasher_2.write_u32(1234);\n    \n        assert_eq!(hasher_1.finish(), hasher_2.finish());\n    \n        let other_build_hasher = RandomState::new();\n        let mut different_hasher = other_build_hasher.build_hasher();\n        different_hasher.write_u32(1234);\n        assert_ne!(different_hasher.finish(), hasher_1.finish());\n```\n    \n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap","links":{"RandomState":"0:1621:2014","AHasher":"0:1286:2003","std::hash::BuildHasher":"2:10498:2019","std::hash::Hasher":"2:10463:156"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2102":{"id":"0:163:2102","crate_id":0,"name":"with_seeds","span":{"filename":"src/random_state.rs","begin":[308,4],"end":[315,5]},"visibility":"public","docs":"Allows for explicitly setting the seeds to used.\nAll `RandomState`s created with the same set of keys key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nNote: If DOS resistance is desired one of these should be a decent quality random number.\nIf 4 high quality random number are not cheaply available this method is robust against 0s being passed for\none or more of the parameters or the same value being passed for more than one parameter.\nIt is recommended to pass numbers in order from highest to lowest quality (if there is any difference).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:29104":{"id":"2:13242:29104","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:39909"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:27862":{"id":"2:13125:27862","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[127,0],"end":[200,1]},"visibility":"default","docs":"Provides [Hasher] methods to hash all of the primitive types.\n\n[Hasher]: core::hash::Hasher","links":{"core::hash::Hasher":"2:10463:156"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i16","write_usize","write_u32","write_isize","write_i32","write_u64","write_u8","write_length_prefix","write_i64","write_i8","write_u128","write_u16","write_str","write_i128"],"trait":{"name":"Hasher","id":"2:10463:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2312","0:67:2313","0:68:2314","0:69:2315","0:70:2316","0:71:2317","0:72:2320","0:73:2074"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1351:8012":{"id":"0:1351:8012","crate_id":0,"name":"get_mut","span":{"filename":"src/hash_map.rs","begin":[154,4],"end":[160,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n```","links":{"`Eq`":"2:2657:133","`Hash`":"2:10455:152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1465:817":{"id":"0:1465:817","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashSet;\n\nlet set1 = AHashSet::from([1, 2, 3, 4]);\nlet set2: AHashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1397:820":{"id":"0:1397:820","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_map.rs","begin":[353,4],"end":[357,5]},"visibility":"default","docs":"This crates a hashmap from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1393:787":{"id":"0:1393:787","crate_id":0,"name":"fmt","span":{"filename":"src/hash_map.rs","begin":[342,4],"end":[344,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1335:1161":{"id":"0:1335:1161","crate_id":0,"name":"new","span":{"filename":"src/hash_map.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1419:172":{"id":"0:1419:172","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[377,4],"end":[377,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"2:13113":{"id":"2:13113","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13114:981","2:13115:8360","2:13116:34872","2:13117:34873","2:13119:34874","2:13122:2341","2:13123:34875","2:13124:334","2:13125:27862","2:13126:8000","2:13128:8012","2:13130:27860","2:13132:27861","2:13134:34876","2:13135:34877","2:13136:2242","2:13137:27885","2:13138:27888","2:13139:27889","2:13141:11121","2:13142:11266","2:13143:2088","2:13144:32705","2:13145:32706","2:13146:29838","2:13147:34878","2:13148:32707","2:13149:2397","2:13152:27902","2:13155:27903","2:13158:8397","2:13162:8359","2:13166:27890","2:13169:27892","2:13172:27894","2:13175:34879","2:13178:34880","2:13181:27896","2:13184:27898","2:13187:27900","2:13190:27901","2:13193:2679","2:13196:34881","2:13199:34882","2:13202:34883","2:13205:34884","2:13207:34885","2:13209:34886","2:13211:34887","2:13212:34888","2:13213:34889","2:13216:34890","2:13219:27149","2:13222:27904","2:13225:34891","2:13228:34892","2:13231:34893","2:13234:34894","2:13236:29096","2:13237:29097","2:13238:29099","2:13239:29100","2:13240:29101","2:13241:29103","2:13242:29104","2:13243:29105","2:13244:34895","2:13246:14412","2:13247:34896"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1552:153":{"id":"0:1552:153","crate_id":0,"name":"HashMap","span":{"filename":"src/lib.rs","begin":[132,8],"end":[132,85]},"visibility":"public","docs":"[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap\nType alias for [HashMap]<K, V, ahash::RandomState>","links":{"std::collections::HashMap":"1:726:153"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:726:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2875-0:1557:2006":{"id":"b:2:2875-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2878:7987"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1550-0:1557:2006":{"id":"0:1550-0:1557:2006","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,8],"end":[126,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_map::AHashMap","name":"AHashMap","id":"0:1557:2006","glob":false}}},"2:13212:34888":{"id":"2:13212:34888","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2108":{"id":"0:0:2108","crate_id":0,"name":"ahash","span":{"filename":"src/lib.rs","begin":[1,0],"end":[396,1]},"visibility":"public","docs":"AHash is a high performance keyed hash function.\n\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key.\nAHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can\ninduce a collision.\n\n# How aHash works\n\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function.\nWhen it is not, aHash falls back on a slightly slower alternative algorithm.\n\nBecause aHash does not have a fixed standard for its output, it is able to improve over time.\nBut this also means that different computers or computers using different versions of ahash may observe different\nhash values for the same input.\n# Basic Usage\nAHash provides an implementation of the [Hasher] trait.\nTo construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n### Randomness\n\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS.\nIt is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n\n### If randomess is not available\n\n[AHasher::default()] can be used to hash using fixed keys. This works with\n[BuildHasherDefault](std::hash::BuildHasherDefault). For example:\n\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\n\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n # m.insert(12, 34);\n```\nIt is also possible to instantiate [RandomState] directly:\n\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\n\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n # m.insert(1, 2);\n```\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\n\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\nThere are several constructors for [RandomState] with different ways to supply seeds.\n\n# Convenience wrappers\n\nFor convenience, both new-type wrappers and type aliases are provided.\n\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\n\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\nThis avoids the need to type \"RandomState\". (For convenience `From`, `Into`, and `Deref` are provided).\n\n# Aliases\n\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` ,\nthe type aliases [HashMap], [HashSet] are provided.\n\n```\nuse ahash::{HashMap, HashMapExt};\n\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\nNote the import of [HashMapExt]. This is needed for the constructor.","links":{"HashMapExt":"0:235:2022","std::hash::BuildHasherDefault":"2:10503:2083","AHasher::default()":"0:253:60","RandomState":"0:1621:2014","HashMap":"0:1552:153","HashSet":"0:1555:155","Hasher":"2:10463:156"},"attrs":["#![deny(clippy::correctness, clippy::complexity, clippy::perf)]","#![allow(clippy::pedantic, clippy::cast_lossless, clippy::unreadable_literal)]","#![feature(min_specialization)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:2018","0:1295-0:1286:2003","0:1550-0:1557:2006","0:1551-0:1568:2007","0:1552:153","0:1555:155","0:231-0:1621:2014","0:235:2022","0:238:2028"],"is_stripped":false}}},"2:13196:34881":{"id":"2:13196:34881","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12804:7848","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::matches":"2:13193:2679"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43642:11253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1405:7874":{"id":"0:1405:7874","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[362,4],"end":[362,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:839:8061","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"b:2:2605-0:1621:2014":{"id":"b:2:2605-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:26941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2875-0:1568:2007":{"id":"b:2:2875-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2878:7987"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:156":{"id":"0:170:156","crate_id":0,"name":"Hasher","span":{"filename":"src/random_state.rs","begin":[384,4],"end":[384,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13149:2397":{"id":"2:13149:2397","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1317":{"id":"0:1317","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[23,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:726:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1320:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:251:2025":{"id":"0:251:2025","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[195,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:1557:2006":{"id":"a:2:3098:246-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31974:236-0:1557:2006":{"id":"a:2:31974:236-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2875-0:1286:2003":{"id":"b:2:2875-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:7987"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1474":{"id":"0:1474","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[63,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1477:2032","0:1478:2033"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3714-0:1621:2014":{"id":"b:2:3714-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3716:1797":{"id":"2:3716:1797","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39273:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32031:7793-0:1621:2014":{"id":"a:2:32031:7793-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[383,0],"end":[466,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_one"],"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:170:156","0:171:2064","0:172:2528"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13122:2341":{"id":"2:13122:2341","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12352:14760"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2317":{"id":"0:71:2317","crate_id":0,"name":"write_usize","span":{"filename":"src/fallback_hash.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"32\",\ntarget_pointer_width = \"16\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13115:8360":{"id":"2:13115:8360","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2507":{"id":"0:162:2507","crate_id":0,"name":"with_seed","span":{"filename":"src/random_state.rs","begin":[294,4],"end":[297,5]},"visibility":"public","docs":"Build a `RandomState` from a single key. The provided key does not need to be of high quality,\nbut all `RandomState`s created from the same key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nThis allows for explicitly setting the seed to be used.\n\nNote: This method does not require the provided seed to be strong.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13136:2242":{"id":"2:13136:2242","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13138:27888","str::split_at_mut":"2:13137:27885"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:34882":{"id":"2:13199:34882","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12804:7848","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatch_indices":"2:13202:34883"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43570:11250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13178:34880":{"id":"2:13178:34880","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12804:7848","str::split":"2:13166:27890","prim@char":"1:12325:458","str::split_terminator":"2:13175:34879"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43488:11249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1528:7874":{"id":"0:1528:7874","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[260,4],"end":[260,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:1577:8061","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:237:2025":{"id":"0:237:2025","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[159,4],"end":[159,46]},"visibility":"default","docs":"Constructs a new HashMap with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13236:29096":{"id":"2:13236:29096","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1523":{"id":"0:1523","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[258,0],"end":[264,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1527:172","0:1528:7874","0:1529:940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5621:8252":{"id":"5:5621:8252","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:7950-0:1621:2014":{"id":"a:2:41633:7950-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1557:2006":{"id":"0:1557:2006","crate_id":0,"name":"AHashMap","span":{"filename":"src/hash_map.rs","begin":[21,0],"end":[21,68]},"visibility":"public","docs":"A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"crate::RandomState":"0:1621:2014","std::collections::HashMap":"1:726:153"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1332","0:1337","0:1343","a:2:41633:7950-0:1557:2006","a:2:31974:236-0:1557:2006","a:2:32031:7793-0:1557:2006","a:2:3133:14955-0:1557:2006","a:2:3098:246-0:1557:2006","b:2:2885-0:1557:2006","b:2:2879-0:1557:2006","b:2:2890-0:1557:2006","b:2:2605-0:1557:2006","b:2:2875-0:1557:2006","b:2:2602-0:1557:2006","b:2:3714-0:1557:2006","b:5:727-0:1557:2006","0:1428","0:1415","0:1389","0:1399","0:1435","0:1378","0:1422","0:1407","0:1369","0:1317","0:1364","0:1563","0:1321","0:1328","0:1358","0:1373","0:1394","0:1382"]}}},"2:2878:7987":{"id":"2:2878:7987","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2852:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1326:817":{"id":"0:1326:817","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashMap;\n\nlet map1 = AHashMap::from([(1, 2), (3, 4)]);\nlet map2: AHashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1331:7987":{"id":"0:1331:7987","crate_id":0,"name":"into","span":{"filename":"src/hash_map.rs","begin":[48,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashMap","id":"1:726:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:1621:2014":{"id":"b:5:727-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:8205","5:730:8089","5:731:8420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5622:29151":{"id":"5:5622:29151","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13239:29100"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13139:27889":{"id":"2:13139:27889","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13138:27888"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1479":{"id":"0:1479","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3306:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1482:248","0:1483:617"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5605:8434":{"id":"5:5605:8434","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13241:29103":{"id":"2:13241:29103","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:39909"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1389":{"id":"0:1389","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[336,0],"end":[345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1393:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1510":{"id":"0:1510","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[202,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3149:8099","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1513:198","0:1514:1716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13181:27896":{"id":"2:13181:27896","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848","str::rsplitn":"2:13184:27898"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43524:11106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13114:981":{"id":"2:13114:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:1568:2007":{"id":"b:2:2605-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2607:26941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1513:198":{"id":"0:1513:198","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[207,4],"end":[207,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:13135:34877":{"id":"2:13135:34877","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12331:1699","crate::ops::IndexMut":"2:3374:7867","str::slice_unchecked":"2:13134:34876"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2025":{"id":"0:246:2025","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:7951-0:1568:2007":{"id":"a:2:41632:7951-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41632:7951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41632:7951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:7951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1478:2033":{"id":"0:1478:2033","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_set.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2604:2669":{"id":"2:2604:2669","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1349:8007":{"id":"0:1349:8007","crate_id":0,"name":"get_key_value","span":{"filename":"src/hash_map.rs","begin":[127,4],"end":[133,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{"`Eq`":"2:2657:133","`Hash`":"2:10455:152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13116:34872":{"id":"2:13116:34872","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13126:8000":{"id":"2:13126:8000","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:34889":{"id":"2:13213:34889","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12830:14757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1515":{"id":"0:1515","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[234,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1518:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13144:32705":{"id":"2:13144:32705","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13145:32706"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43694:11256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13148:32707":{"id":"2:13148:32707","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43712:11120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1539:8059":{"id":"0:1539:8059","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2881:817":{"id":"2:2881:817","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1320:817":{"id":"0:1320:817","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashMap","id":"1:726:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1482:248":{"id":"0:1482:248","crate_id":0,"name":"Target","span":{"filename":"src/hash_set.rs","begin":[77,4],"end":[77,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"1:1449:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1534:7874":{"id":"0:1534:7874","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[268,4],"end":[268,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:1581:7874","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:2:2602-0:1621:2014":{"id":"b:2:2602-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2669"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1413:7874":{"id":"0:1413:7874","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[370,4],"end":[370,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:852:8062","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"5:5604:35591":{"id":"5:5604:35591","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2425","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2425","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1421:940":{"id":"0:1421:940","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[379,4],"end":[381,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8158:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1426:8059":{"id":"0:1426:8059","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[390,4],"end":[392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1563":{"id":"0:1563","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1567:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13187:27900":{"id":"2:13187:27900","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2875-0:1621:2014":{"id":"b:2:2875-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:7987"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1438:60":{"id":"0:1438:60","crate_id":0,"name":"default","span":{"filename":"src/hash_map.rs","begin":[413,4],"end":[415,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1483:617":{"id":"0:1483:617","crate_id":0,"name":"deref","span":{"filename":"src/hash_set.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3306:124","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:1161":{"id":"0:239:1161","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[167,4],"end":[167,21]},"visibility":"default","docs":"Constructs a new HashSet","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13134:34876":{"id":"2:13134:34876","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12331:1699","str::slice_mut_unchecked":"2:13135:34877","crate::ops::Index":"2:39104:7866"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:8012":{"id":"2:13128:8012","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1394":{"id":"0:1394","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[347,0],"end":[358,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:8154:144","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1397:820"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13202:34883":{"id":"2:13202:34883","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12804:7848","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::match_indices":"2:13199:34882"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43588:11251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[227,0],"end":[231,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3133:14955-0:1557:2006":{"id":"a:2:3133:14955-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3133:14955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:14955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:172:2528":{"id":"0:172:2528","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[463,4],"end":[465,5]},"visibility":"default","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:10456:857","`Hasher`":"2:10463:156","`Hash`":"2:10455:152"},"attrs":["#[cfg(feature = \"specialize\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1435":{"id":"0:1435","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[411,0],"end":[416,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1621:2014"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1438:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5611:35593":{"id":"5:5611:35593","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1337":{"id":"0:1337","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[67,0],"end":[78,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1341:2032","0:1342:2033"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:2316":{"id":"0:70:2316","crate_id":0,"name":"write_u128","span":{"filename":"src/fallback_hash.rs","begin":[149,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1362:248":{"id":"0:1362:248","crate_id":0,"name":"Target","span":{"filename":"src/hash_map.rs","begin":[279,4],"end":[279,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashMap","id":"1:726:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:238:2028":{"id":"0:238:2028","crate_id":0,"name":"HashSetExt","span":{"filename":"src/lib.rs","begin":[165,0],"end":[170,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashSet type aliases.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:239:1161","0:240:2025"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:247"]}}},"2:13138:27888":{"id":"2:13138:27888","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13139:27889"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:2313":{"id":"0:67:2313","crate_id":0,"name":"write_u16","span":{"filename":"src/fallback_hash.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2074":{"id":"0:73:2074","crate_id":0,"name":"finish","span":{"filename":"src/fallback_hash.rs","begin":[196,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:8359":{"id":"2:13162:8359","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1545:8059":{"id":"0:1545:8059","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[291,4],"end":[293,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[89,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1491:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1295-0:1286:2003":{"id":"0:1295-0:1286:2003","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,8],"end":[117,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::fallback_hash::AHasher","name":"AHasher","id":"0:1286:2003","glob":false}}},"0:1347:8000":{"id":"0:1347:8000","crate_id":0,"name":"get","span":{"filename":"src/hash_map.rs","begin":[102,4],"end":[108,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{"`Eq`":"2:2657:133","`Hash`":"2:10455:152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:29152":{"id":"5:5623:29152","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13240:29101"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1536":{"id":"0:1536","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[274,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:8167:7796","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1539:8059"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[233,0],"end":[364,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1161","0:156:2496","0:162:2507","0:163:2102","0:164:2528"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5619:35594":{"id":"5:5619:35594","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:730:8089":{"id":"5:730:8089","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1415":{"id":"0:1415","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[376,0],"end":[382,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1419:172","0:1420:7874","0:1421:940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1470":{"id":"0:1470","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[49,0],"end":[61,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1472:1161","0:1473:2025"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3133:14955-0:1621:2014":{"id":"a:2:3133:14955-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:14955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3714-0:1286:2003":{"id":"b:2:3714-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:164:2528":{"id":"0:164:2528","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[357,4],"end":[363,5]},"visibility":"public","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:10456:857","`Hasher`":"2:10463:156","`Hash`":"2:10455:152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1527:172":{"id":"0:1527:172","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[259,4],"end":[259,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:1626":{"id":"0:1626","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1627:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3098:246-0:1286:2003":{"id":"a:2:3098:246-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1286:2003":{"id":"0:1286:2003","crate_id":0,"name":"AHasher","span":{"filename":"src/fallback_hash.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A `Hasher` for hashing an arbitrary stream of bytes.\n\nInstances of [`AHasher`] represent state that is updated while hashing data.\n\nEach method updates the internal state based on the new data provided. Once\nall of the data has been provided, the resulting hash can be obtained by calling\n`finish()`\n\n[Clone] is also provided in case you wish to calculate hashes for two different items that\nstart with the same data.\n","links":{"`AHasher`":"0:1286:2003","Clone":"2:2618:112"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41633:7950-0:1286:2003","a:2:31974:236-0:1286:2003","a:2:41632:7951-0:1286:2003","a:2:32031:7793-0:1286:2003","a:2:3133:14955-0:1286:2003","a:2:3098:246-0:1286:2003","b:2:2885-0:1286:2003","b:2:2879-0:1286:2003","b:2:2890-0:1286:2003","b:2:2605-0:1286:2003","b:2:2875-0:1286:2003","b:2:2602-0:1286:2003","b:2:3714-0:1286:2003","b:5:727-0:1286:2003","0:1293","0:1291","0:65","0:252"]}}},"0:1388:924":{"id":"0:1388:924","crate_id":0,"name":"index","span":{"filename":"src/hash_map.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `HashMap`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2889:1784":{"id":"2:2889:1784","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1382":{"id":"0:1382","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[317,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:39104:7866","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1387:198","0:1388:924"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1576:462":{"id":"0:1576:462","crate_id":0,"name":"clone","span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[29,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1326:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,0],"end":[184,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashMapExt","id":"0:235:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashMap","id":"1:726:153","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:245:1161","0:246:2025"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2605-0:1286:2003":{"id":"b:2:2605-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:26941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1354:8041":{"id":"0:1354:8041","crate_id":0,"name":"into_keys","span":{"filename":"src/hash_map.rs","begin":[216,4],"end":[218,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```\n\n# Performance\n\nIn the current implementation, iterating over keys takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoKeys","id":"1:917:7971","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1422":{"id":"0:1422","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[384,0],"end":[393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:8167:7796","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1426:8059"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1617:2470":{"id":"0:1617:2470","crate_id":0,"name":"set_random_source","span":{"filename":"src/random_state.rs","begin":[191,12],"end":[193,13]},"visibility":"public","docs":"Provides an optional way to manually supply a source of randomness for Hasher keys.\n\nThe provided [RandomSource] will be used to be used as a source of randomness by [RandomState] to generate new states.\nIf this method is not invoked the standard source of randomness is used as described in the Readme.\n\nThe source of randomness can only be set once, and must be set before the first RandomState is created.\nIf the source has already been specified `Err` is returned with a `bool` indicating if the set failed because\nmethod was previously invoked (true) or if the default source is already being used (false).","links":{"RandomSource":"0:145:2446","RandomState":"0:1621:2014"},"attrs":["#[cfg(not(all(target_arch = \"arm\", target_os = \"none\")))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"impl_trait":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2446","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl RandomSource + Send + Sync + 'static","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2446","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1551-0:1568:2007":{"id":"0:1551-0:1568:2007","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,8],"end":[127,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_set::AHashSet","name":"AHashSet","id":"0:1568:2007","glob":false}}},"a:2:32031:7793-0:1286:2003":{"id":"a:2:32031:7793-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1473:2025":{"id":"0:1473:2025","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_set.rs","begin":[58,4],"end":[60,5]},"visibility":"public","docs":"This crates a hashset with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:29838":{"id":"2:13146:29838","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43674:11254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:1557:2006":{"id":"b:2:2605-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2607:26941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3714-0:1568:2007":{"id":"b:2:3714-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240:2025":{"id":"0:240:2025","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[169,4],"end":[169,46]},"visibility":"default","docs":"Constructs a new HashSet with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13175:34879":{"id":"2:13175:34879","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12804:7848","str::split":"2:13166:27890","prim@char":"1:12325:458","`DoubleEndedIterator`":"2:8196:129","str::rsplit_terminator":"2:13178:34880"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43470:11248","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:35592":{"id":"5:5608:35592","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[221,0],"end":[249,1]},"visibility":"default","docs":"Provides a default [Hasher] with fixed keys.\nThis is typically used in conjunction with [BuildHasherDefault] to create\n[AHasher]s in order to hash the keys of the map.\n\nGenerally it is preferable to use [RandomState] instead, so that different\nhashmaps will have different keys. However if fixed keys are desirable this\nmay be used instead.\n\n# Example\n```\nuse std::hash::BuildHasherDefault;\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, BuildHasherDefault<AHasher>> = HashMap::default();\nmap.insert(12, 34);\n```\n\n[BuildHasherDefault]: std::hash::BuildHasherDefault\n[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap","links":{"std::hash::BuildHasherDefault":"2:10503:2083","AHasher":"0:1286:2003","RandomState":"0:1621:2014","std::hash::Hasher":"2:10463:156"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1414:940":{"id":"0:1414:940","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8158:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31974:236-0:1621:2014":{"id":"a:2:31974:236-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41633:7950-0:1286:2003":{"id":"a:2:41633:7950-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1492":{"id":"0:1492","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[99,0],"end":[104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3133:14955-0:1286:2003":{"id":"a:2:3133:14955-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:14955","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2602-0:1557:2006":{"id":"b:2:2602-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2604:2669"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1509:401":{"id":"0:1509:401","crate_id":0,"name":"bitxor","span":{"filename":"src/hash_set.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[376,0],"end":[381,1]},"visibility":"default","docs":"Creates an instance of RandomState using keys obtained from the random number generator.\nEach instance created in this way will have a unique set of keys. (But the resulting instance\ncan be used to create many hashers each or which will have the same keys.)\n\nThis is the same as [RandomState::new()]\n\nNOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState::new()":"0:155:1161","RandomState":"0:1621:2014"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13211:34887":{"id":"2:13211:34887","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:34878":{"id":"2:13147:34878","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43684:11255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:2088":{"id":"2:13143:2088","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43406:8799","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1518:787":{"id":"0:1518:787","crate_id":0,"name":"fmt","span":{"filename":"src/hash_set.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1461":{"id":"0:1461","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[25,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1465:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13132:27861":{"id":"2:13132:27861","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1355:8049":{"id":"0:1355:8049","crate_id":0,"name":"into_values","span":{"filename":"src/hash_map.rs","begin":[247,4],"end":[249,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```\n\n# Performance\n\nIn the current implementation, iterating over values takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoValues","id":"1:921:7972","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:27903":{"id":"2:13155:27903","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:27902":{"id":"2:13152:27902","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2496":{"id":"0:156:2496","crate_id":0,"name":"generate_with","span":{"filename":"src/random_state.rs","begin":[255,4],"end":[259,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` based on the provided seeds, but in such a way\nthat each time it is called the resulting state will be different and of high quality.\nThis allows fixed constant or poor quality seeds to be provided without the problem of different\n`BuildHasher`s being identical or weak.\n\nThis is done via permuting the provided values with the value of a static counter and memory address.\n(This makes this method somewhat more expensive than `with_seeds` below which does not do this).\n\nThe provided values (k0-k3) do not need to be of high quality but they should not all be the same value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1336:2025":{"id":"0:1336:2025","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_map.rs","begin":[62,4],"end":[64,5]},"visibility":"public","docs":"This crates a hashmap with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:7950-0:1568:2007":{"id":"a:2:41633:7950-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:7950","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32031:7793-0:1568:2007":{"id":"a:2:32031:7793-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:7793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1541":{"id":"0:1541","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[285,0],"end":[294,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3093:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:8167:7796","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1545:8059"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13145:32706":{"id":"2:13145:32706","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13144:32705"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43703:11257","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2315":{"id":"0:69:2315","crate_id":0,"name":"write_u64","span":{"filename":"src/fallback_hash.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:34891":{"id":"2:13225:34891","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:14758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:34892":{"id":"2:13228:34892","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:35591","5:5605:8434","5:5608:35592","5:5611:35593","5:5619:35594","5:5620:35595","5:5621:8252","5:5622:29151","5:5623:29152"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3098:246-0:1621:2014":{"id":"a:2:3098:246-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2885-0:1621:2014":{"id":"b:2:2885-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168:60":{"id":"0:168:60","crate_id":0,"name":"default","span":{"filename":"src/random_state.rs","begin":[378,4],"end":[380,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:2457":{"id":"0:146:2457","crate_id":0,"name":"gen_hasher_seed","span":{"filename":"src/random_state.rs","begin":[133,4],"end":[133,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1293":{"id":"0:1293","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1294:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2602-0:1286:2003":{"id":"b:2:2602-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2669"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13219:27149":{"id":"2:13219:27149","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:29105":{"id":"2:13243:29105","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:39909"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2607:26941":{"id":"2:2607:26941","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1358":{"id":"0:1358","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[278,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3306:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1362:248","0:1363:617"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1535:940":{"id":"0:1535:940","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[269,4],"end":[271,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8158:164","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1503:198":{"id":"0:1503:198","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[143,4],"end":[143,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:13130:27860":{"id":"2:13130:27860","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:1568:2007":{"id":"b:2:2885-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41632:7951-0:1621:2014":{"id":"a:2:41632:7951-0:1621:2014","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:7951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1467":{"id":"0:1467","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[43,0],"end":[47,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1449:155","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1469:7987"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1292:787":{"id":"0:1292:787","crate_id":0,"name":"fmt","span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1364":{"id":"0:1364","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[285,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3319:2758","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1368:619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1343":{"id":"0:1343","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[80,0],"end":[276,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1347:8000","0:1349:8007","0:1351:8012","0:1353:2079","0:1354:8041","0:1355:8049","0:1356:8054"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1341:2032":{"id":"0:1341:2032","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_map.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:2022":{"id":"0:235:2022","crate_id":0,"name":"HashMapExt","span":{"filename":"src/lib.rs","begin":[155,0],"end":[160,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashMap type alias.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:236:1161","0:237:2025"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:241"]}}},"2:13209:34886":{"id":"2:13209:34886","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:334":{"id":"2:13124:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13125:27862","`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1420:7874":{"id":"0:1420:7874","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[378,4],"end":[378,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:862:7874","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:128:2018":{"id":"0:128:2018","crate_id":0,"name":"random_state","span":{"filename":"src/random_state.rs","begin":[1,0],"end":[528,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:145:2446","0:1617:2470","0:1621:2014"],"is_stripped":false}}},"b:2:2890-0:1557:2006":{"id":"b:2:2890-0:1557:2006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1399":{"id":"0:1399","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[360,0],"end":[366,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8158:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1404:172","0:1405:7874","0:1406:940"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:236:1161":{"id":"0:236:1161","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[157,4],"end":[157,21]},"visibility":"default","docs":"Constructs a new HashMap","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13207:34885":{"id":"2:13207:34885","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1519":{"id":"0:1519","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[244,0],"end":[256,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:8154:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:2014","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1521:820"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:731:8420":{"id":"5:731:8420","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:34884":{"id":"2:13205:34884","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:2679":{"id":"2:13193:2679","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12804:7848","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatches":"2:13196:34881"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43624:11252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1377:685":{"id":"0:1377:685","crate_id":0,"name":"eq","span":{"filename":"src/hash_map.rs","begin":[304,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1294:462":{"id":"0:1294:462","crate_id":0,"name":"clone","span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1356:8054":{"id":"0:1356:8054","crate_id":0,"name":"remove","span":{"filename":"src/hash_map.rs","begin":[269,4],"end":[275,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n```","links":{"`Eq`":"2:2657:133","`Hash`":"2:10455:152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1369":{"id":"0:1369","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[291,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41632:7951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41632:7951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:7951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:2006","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13169:27892":{"id":"2:13169:27892","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:7848"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12620:11101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:7838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:34895":{"id":"2:13244:34895","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4893:34895"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43719:11180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:7951-0:1286:2003":{"id":"a:2:41632:7951-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:7951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:1286:2003":{"id":"b:2:2890-0:1286:2003","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2003","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2602-0:1568:2007":{"id":"b:2:2602-0:1568:2007","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:2068","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2604:2669"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:231-0:1621:2014":{"id":"0:231-0:1621:2014","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::random_state::RandomState","name":"RandomState","id":"0:1621:2014","glob":false}}},"2:13240:29101":{"id":"2:13240:29101","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:2446":{"id":"0:145:2446","crate_id":0,"name":"RandomSource","span":{"filename":"src/random_state.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"A supplier of Randomness used for different hashers.\nSee [set_random_source].\n\nIf [set_random_source] aHash will default to the best available source of randomness.\nIn order this is:\n1. OS provided random number generator (available if the `runtime-rng` flag is enabled which it is by default) - This should be very strong.\n2. Strong compile time random numbers used to permute a static \"counter\". (available if `compile-time-rng` is enabled.\n__Enabling this is recommended if `runtime-rng` is not possible__)\n3. A static counter that adds the memory address of each [RandomState] created permuted with fixed constants.\n(Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled.\n(Rust enables ASLR by default)","links":{"set_random_source":"0:1617:2470","RandomState":"0:1621:2014"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:146:2457"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:1500":{"id":"0:1500","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[138,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10498:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"2:33430:8096","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1503:198","0:1504:396"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1477:2032":{"id":"0:1477:2032","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_set.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1472:1161":{"id":"0:1472:1161","crate_id":0,"name":"new","span":{"filename":"src/hash_set.rs","begin":[52,4],"end":[54,5]},"visibility":"public","docs":"This crates a hashset using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1161"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2894:1782":{"id":"2:2894:1782","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1498:198":{"id":"0:1498:198","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[111,4],"end":[111,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:2007","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}},"paths":{"6:8029:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:8301:10848":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:22109:14622":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8534:11578":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"9:482:21221":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4897:12301":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:39104:7866":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:479:12018":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:5501:12544":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:2859:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"24:5465:12531":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:41632:7951":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:5290:12449":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2808:10451":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:45690:11330":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11743:9513":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"24:1525:12102":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12276:11652":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:7973:11515":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:15778:10306":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:10246:8230":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:22716:32744":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:1490:12086":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:4281:14557":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:765:26490":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:464:12010":{"crate_id":24,"path":["libc","unix","group"],"kind":"struct"},"17:11634:9504":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11102:9459":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:41663:8196":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:12326:1849":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:8294:13037":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:30460:8226":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:10969:27667":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11115:9460":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43292:8267":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13922:9816":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"22:333:2441":{"crate_id":22,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"17:14986:10097":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2528:10438":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:16198:10408":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:6650:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6441:12663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:45608:11326":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:563:8763":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46564:7783":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12887:8811":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13015:8808":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:11040:8061":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10419:8800":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15608:10259":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:11171:11102":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:7472:7874":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"9:392:21223":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:11300:13224":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:4102:14533":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:3329:10463":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5146:12391":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"0:1621:2014":{"crate_id":0,"path":["ahash","random_state","RandomState"],"kind":"struct"},"17:11467:9487":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12107:8777":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"24:6688:12781":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"10:44:8933":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:39936:11178":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3380:11458":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:10931:9150":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:31974:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:15222:10140":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7686:10775":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:32031:7793":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:5457:14745":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:39926:11177":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"11:2443:7830":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11354:9482":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:15410:10190":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:839:8061":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8582:13216":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13674:9754":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4985:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:912:8216":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:1679:12206":{"crate_id":24,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"24:5527:12546":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"0:0:2108":{"crate_id":0,"path":["ahash"],"kind":"module"},"17:15426:10193":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:6784:9142":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:6924:7877":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:8351:13050":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13387:9700":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7823:22243":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:852:8062":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6263:10565":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:3475:10464":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:5526:11478":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:481:9269":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:4468:10474":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:1903:8667":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:3140:14957":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:46705:7790":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:5406:1226":{"crate_id":24,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"20:562:2732":{"crate_id":20,"path":["zerocopy","ByteSlice"],"kind":"trait"},"2:2483:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7582:15011":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5929:8335":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13173:9666":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"24:5564:12565":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:3552:8324":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:42113:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:4863:12288":{"crate_id":24,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:2289:35915":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11898:9532":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12543:9616":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:44397:11287":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:45521:11313":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43366:7843":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:1599:8668":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5677:12616":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"23:128:34743":{"crate_id":23,"path":["getrandom","use_file","DropGuard"],"kind":"struct"},"16:5914:8878":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:3244:30371":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41478:11466":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"11:1883:8061":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:42554:8226":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:40277:11198":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:2569:7840":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:9695:11525":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:3289:11455":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:9396:11507":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:11443:9486":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4427:11468":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:14066:9836":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:7645:7831":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:5846:10509":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:3264:9323":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5557:12563":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:8271:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:2822:14487":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10982:22316":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:12340:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11256:9470":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:538:12055":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6782:22238":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"24:5535:12551":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:485:12021":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:4634:14561":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"20:362:2726":{"crate_id":20,"path":["zerocopy","Unaligned"],"kind":"trait"},"20:196:36141":{"crate_id":20,"path":["zerocopy","wrappers","update","WriteBackOnDrop"],"kind":"struct"},"17:15356:10176":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:8249:7795":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:12348:1888":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:7984:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:43327:11240":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"24:569:12071":{"crate_id":24,"path":["libc","unix","tms"],"kind":"struct"},"17:14271:9883":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:4502:10475":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:7648:10774":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6026:8847":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8314:14514":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13526:9729":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:2140:8223":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8184:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:10461:152":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:22307:14487":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:3305:8670":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13344:8827":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"7:31:21208":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:2338:10429":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"24:6541:12709":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3271:8669":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:14012:9828":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:2199:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"24:6561:12725":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3022:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5102:12387":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:42152:7792":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10317:8797":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:6727:11501":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12297:14419":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10524:9438":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8702:11595":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12043:9566":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2902:21371":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:45874:11340":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:403:9311":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13363:9696":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13412:9705":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12225:9582":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:7857:10786":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:6219:27790":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:1480:8062":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"24:5435:12510":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:545:12058":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:5159:12392":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:680:9295":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43318:11239":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:7295:29817":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:41622:7948":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:3623:8195":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:6774:12808":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:4856:10486":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:6698:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"24:5476:12536":{"crate_id":24,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:11235:11509":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:6446:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:33057:7834":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14147:9847":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:42074:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"22:216:8757":{"crate_id":22,"path":["once_cell","sync","Lazy"],"kind":"struct"},"2:8304:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13814:9799":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:6721:12794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:2394:10432":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:5556:12563":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3571:33285":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:4875:12291":{"crate_id":24,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12127:9572":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:11883:11111":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:8265:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:12352:14760":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15596:10256":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:8006:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:299:13099":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:9131:9133":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:8502:8292":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:3810:10467":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:5623:12594":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"0:235:2022":{"crate_id":0,"path":["ahash","HashMapExt"],"kind":"trait"},"6:8306:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:11209:11103":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:6697:12787":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:4867:14548":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"9:424:21224":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:41566:8061":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4952:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:21479:33916":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"24:478:12018":{"crate_id":24,"path":["libc","unix","timeval"],"kind":"struct"},"6:5244:12425":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:45948:11358":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"23:63:136":{"crate_id":23,"path":["getrandom","error","Error"],"kind":"struct"},"24:4984:12343":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1806:2004":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"5:1465:8061":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11688:9508":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:2694:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4992:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:2768:10449":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7813:10778":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:2936:21372":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:0:2578":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:2536:13104":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10997:11485":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:643:11433":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:21666:14487":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:830:11014":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:39459:14811":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:8200:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:43588:11251":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:43694:11256":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:7480:8266":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:15957:10334":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:3608:14485":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:1502:12092":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1356:8225":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:5217:8968":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:15333:10168":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"24:1509:12094":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12464:22429":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12707:9624":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11593:27646":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"18:589:9275":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1680:12206":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:39286:11171":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13437:9707":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:45629:11327":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12353:9597":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:1496:12089":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:3024:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:10315:11620":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"5:4104:34743":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10399:8799":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:12825:14758":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7841:9315":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:0:2579":{"crate_id":17,"path":["object"],"kind":"module"},"1:2448:14476":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1535:12108":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13046:9644":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"24:7365:12901":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:2234:9322":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:21433:33919":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:10254:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3618:14503":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:1577:8061":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6620:10604":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:6899:12850":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:41736:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8828:11474":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:8316:13043":{"crate_id":24,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11770:11463":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:4152:14536":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:32637:8305":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"24:1698:12213":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:8258:13029":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:1891:7830":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5588:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"11:2542:13105":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:7536:12982":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:875:8220":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10155:8772":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13972:9538":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:6311:27807":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:365:11426":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:3159:8307":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:10902:13221":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"11:430:35952":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3661:8062":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2680:27798":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:9401:11508":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:39898:32730":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:472:12015":{"crate_id":24,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:41838:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:44212:11282":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:8136:10833":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1311:8222":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:5540:11482":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:1517:12097":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6278:8879":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5382:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6560:8903":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:754:9308":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:1830:7871":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:523:12046":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:5064:13218":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:12343:1809":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:40050:11184":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"11:774:8214":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:42250:8229":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3026:8205":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:4923:12316":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"24:8011:13016":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:7978:11517":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7473:8860":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:16259:9700":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:6417:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:3171:8188":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:6880:12836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44154:13212":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:1546:7971":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:43235:11233":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1547:12117":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:689:9297":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:5343:12464":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:14868:10056":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:12332:1787":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:7380:11045":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:6677:12778":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7618:8914":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:700:7874":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13399:9703":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:6798:11505":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:9391:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:10137:22281":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:4718:10481":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:5488:12539":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"24:4823:12255":{"crate_id":24,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11715:9510":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42752:2712":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:15748:10298":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10573:35987":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7590:8912":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"24:5635:12600":{"crate_id":24,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:40751:8249":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:45842:11338":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:14436:9916":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:40087:15011":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12792:9400":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6689:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:15456:10199":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"24:7583:13004":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:532:12052":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:15058:8828":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:23004:11161":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:32061:8186":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:15376:10182":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:4835:787":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:1926:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:4802:10484":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:7575:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:14212:9877":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:43245:11234":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7549:10770":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8844:11603":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:7560:12992":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46392:11402":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7111:10686":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:3245:8668":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43684:11255":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:11323:11106":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:5006:10491":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11730:9512":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:7363:7869":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:5282:12447":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5283:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:10666:11454":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:46031:11361":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:42490:13199":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8304:11531":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:4986:9332":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:3429:14511":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:5676:12616":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:4830:10485":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10661:9440":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:15569:10244":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:5742:10499":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:23026:11163":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:14372:9897":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6342:35980":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:5276:12444":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:5196:11071":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:8838:8061":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:7467:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7321:7947":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:43981:11271":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:7539:10460":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:2423:7874":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:3949:11465":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:3472:8253":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6079:8852":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:8300:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:0:1691":{"crate_id":1,"path":["std"],"kind":"module"},"16:6588:10594":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:9715:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10887:35989":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:4587:10478":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:12339:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:9190:14615":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:9205:14614":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6231:10562":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:5336:12463":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"24:5265:12436":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:21949:14487":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:15023:10104":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6433:8901":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:6681:7874":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11915:22404":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:3103:2743":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12089:9570":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:6656:12772":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5624:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:2927:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:16187:10407":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:42799:9123":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:623:35999":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:2303:21344":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:8188:10840":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:2728:10447":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:16176:10406":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:8788:14593":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:2666:11450":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:43719:11180":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:40402:8275":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:1484:12084":{"crate_id":24,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:5895:11490":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:41360:9121":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:22374:14712":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:4991:12346":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:12810:7838":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:9703:375":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"2:2040:13126":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12621:9618":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:13424:9706":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:12337:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:12336:11112":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"7:0:1878":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:10248:8229":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43737:11179":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:1706:12217":{"crate_id":24,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:6844:13131":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"20:370:2727":{"crate_id":20,"path":["zerocopy","Ref"],"kind":"struct"},"17:14752:9963":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"24:8293:13037":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11252:13223":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:6317:10570":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:7445:12926":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11810:11464":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6456:22236":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8211:8213":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:33175:8310":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:8613:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:40199:8268":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:15582:10250":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:2103:11022":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:3741:34743":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:4335:11066":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:15039:10107":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:1191:35920":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6300:10567":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:6810:12821":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:33116:8312":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:3558:8326":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:10213:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:22868:14487":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:6504:10590":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13594:9749":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:6136:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6478:12675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11610:11646":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:31902:8628":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5515:12545":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"24:5045:12374":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:3925:10470":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:5422:12500":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:5922:7830":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6948:8907":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5400:12490":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12408:8807":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4885:12296":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11853:9530":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8601:11576":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:5645:11485":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:2352:8224":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"11:1910:8668":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12851:8810":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:43995:14771":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:742:7972":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:22993:11160":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:1963:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5436:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:4964:14797":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:7338:13510":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40378:8290":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:7873:8246":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:7306:12868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:5238:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:8685:8334":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:1098:9316":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4824:12255":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:2203:9319":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:44334:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:6471:12673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:5381:12479":{"crate_id":24,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4876:12291":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:3027:34871":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:537:12055":{"crate_id":24,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6629:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:6853:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:7585:8276":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:8587:14559":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12175:9575":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:7402:11046":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:689:2013":{"crate_id":1,"path":["std","collections"],"kind":"module"},"1:9105:9132":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5576:11484":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:46196:11398":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:8492:8278":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:39871:11064":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:5224:12417":{"crate_id":24,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8061:11524":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:3597:9325":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:7305:12868":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"24:8246:13027":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:23478:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:6531:12702":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"24:5101:12387":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:43488:11249":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:6820:12824":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1890:11442":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:10258:8237":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13538:9732":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:9369:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:5949:13218":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"11:837:8217":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"24:6628:12759":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:32032:9120":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5927:10512":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:15720:10289":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"22:0:2109":{"crate_id":22,"path":["once_cell"],"kind":"module"},"16:4940:10489":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:4531:10476":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:40230:8270":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:21954:14626":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:40259:8281":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:5158:32932":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:6714:12793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:4487:8756":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:14575:8808":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8773:11598":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:2526:13120":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:45859:11339":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:3382:11459":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:7466:12932":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10714:9536":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:4821:9331":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:22949:11156":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:43011:11098":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:5670:12613":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:9984:22303":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:40537:8293":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6768:12807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:39955:11064":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"14:214:10932":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11063:9457":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9688:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:40291:8284":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:40760:8251":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:44150:13211":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:4737:2742":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:30841:8991":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:15390:10184":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:1565:12127":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:22971:11158":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:13748:7868":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:33776:8098":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5671:12613":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:5400:8773":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12189:9579":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12342:9593":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:9293:11615":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12508:9611":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:4389:14780":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:6775:12808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6562:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:3284:35938":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:22847:14528":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"14:165:21306":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:351:35946":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:14025:9829":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12724:22306":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:536:14402":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:11405:9485":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4712:14578":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:5029:14579":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:10463:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14529:9925":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22774:32736":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11012:27617":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:40551:8294":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44389:11285":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4080:14531":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:10252:8239":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:10455:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"24:6440:12663":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:925:8217":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5817:8868":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:4239:13218":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:15734:10291":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:581:8991":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11605:8802":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:6849:10655":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:1087:35956":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:5063:12385":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5191:12401":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:6164:13218":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:15368:10179":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:45469:11310":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:42789:11224":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:44134:13207":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:4468:13218":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:5802:22231":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:8305:13039":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12494:9608":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:45352:11297":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:3807:11022":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6976:8909":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:5361:12469":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:10239:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:9394:7838":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:9272:27146":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:42592:8228":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13375:9699":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14489:9920":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14325:9890":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:5013:12359":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:673:8061":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5565:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:8196:13026":{"crate_id":24,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:15400:10187":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:6730:14610":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12516:9613":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:9700:27806":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:6606:10602":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12530:9615":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"24:6649:12771":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"20:321:2723":{"crate_id":20,"path":["zerocopy","FromZeroes"],"kind":"trait"},"17:14111:9841":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14516:9924":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13272:9695":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"24:5629:12597":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:6402:14714":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"24:490:12023":{"crate_id":24,"path":["libc","unix","rlimit"],"kind":"struct"},"24:1546:12117":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:40142:11188":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:5121:12389":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:11676:13231":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:4156:14537":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15301:10160":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:11075:27792":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:12543:11117":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:5250:12427":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6900:12850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11621:8786":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7052:10676":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:7429:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:40114:8799":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:40300:8285":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14449:9917":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:15168:10127":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13509:9721":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:6755:12805":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"18:80:26479":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11647:9505":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:1066:8224":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10897:13219":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:16032:9685":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:43852:11267":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10381:13372":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"24:8299:13038":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"22:294:8341":{"crate_id":22,"path":["once_cell","race","OnceRef"],"kind":"struct"},"2:3144:7833":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:7888:10790":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11574:8932":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:6295:11129":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9671:22283":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:43944:11123":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4979:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:8327:13044":{"crate_id":24,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:3531:8322":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:43379:11245":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:5546:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11877:8804":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:7656:22242":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:15214:10138":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5636:12600":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11583:9500":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:3149:8099":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5472:12534":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:21570:8983":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15822:10313":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:6762:12806":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:15266:10151":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5020:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5643:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"15:327:8925":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9326:27487":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:7338:12891":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:5227:11477":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11841:9529":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:8175:10837":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:21552:14620":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:4915:12314":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:33293:8311":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:943:8061":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3952:7874":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8228:11530":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12362:9598":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:1485:12084":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:2554:35951":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:517:12043":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:12804:7848":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:6914:12861":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:45579:11317":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11051:9455":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:44162:13214":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:45550:11315":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:5409:34743":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8155:11526":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:1639:12182":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"22:174:8756":{"crate_id":22,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"17:12597:9617":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13308:8818":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6047:10527":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46273:11399":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:613:36002":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4424:10473":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:15678:10283":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:8282:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:45536:11314":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12863:9634":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"1:624:11430":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:2708:10446":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:3819:7830":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:948:8220":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7480:7874":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:39121:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:718:9302":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:1075:8225":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5370:12475":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:31975:2068":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5306:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:46471:11405":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:7601:13007":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:1142:10939":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:37701:8316":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:12506:11114":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:22730:11134":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:39060:8193":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:12323:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:8220:11529":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:42807:9124":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1663:12199":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2450:14477":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:22823:11147":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:1691:12210":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"10:0:2573":{"crate_id":10,"path":["adler"],"kind":"module"},"1:7910:27785":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10759:8777":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4916:12314":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"11:2369:10944":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:44410:11290":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:4352:10472":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:5145:12391":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:570:12071":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6098:22233":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"24:6408:12645":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:0:986":{"crate_id":24,"path":["libc"],"kind":"module"},"17:14311:9887":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:4243:31870":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"24:4810:12245":{"crate_id":24,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:5019:12362":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:40172:11195":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:1593:8667":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:21988:33926":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:42264:8238":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11524:9491":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4837:12265":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:9382:13218":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"24:5616:12591":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12671:9621":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:45337:11296":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:4560:10477":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46643:7788":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:8154:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:31940:11167":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:7538:8212":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13235:9682":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:5196:11477":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"14:160:10926":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:40071:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:5642:12603":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"11:687:8062":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:11571:11644":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:4728:14787":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:4757:12912":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:8093:10828":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7168:11616":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43420:11099":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:13693:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15010:10099":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:41316:11089":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:46628:7787":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:4346:11467":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7452:8970":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:41877:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4811:12245":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:7347:12892":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:40309:8295":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:46421:11403":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:6787:12815":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:15190:10133":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:2089:9151":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:4800:12237":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"0:1555:155":{"crate_id":0,"path":["ahash","HashSet"],"kind":"type_alias"},"16:7144:22240":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:6619:11500":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22545:11131":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5466:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:12830:14757":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"20:598:2763":{"crate_id":20,"path":["zerocopy","wrappers","Unalign"],"kind":"struct"},"24:5313:12458":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:860:10423":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:8026:14417":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:5456:12525":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4044:14530":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9755:22280":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13774:9791":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1686:12209":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8460:11462":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:21558:14623":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:46492:11406":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:3033:34867":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:496:12026":{"crate_id":24,"path":["libc","unix","rusage"],"kind":"struct"},"6:7516:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:4683:2727":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11075:8789":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"24:6470:12673":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:6060:15262":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:1577:11019":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:22107:14487":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:5347:10496":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11682:13232":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"20:355:2725":{"crate_id":20,"path":["zerocopy","AsBytes"],"kind":"trait"},"1:8439:8246":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:2989:11453":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7655:7832":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"8:0:1998":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6927:10661":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:43438:11104":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6813:10643":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:2497:14969":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:2846:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:870:14422":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:30445:8438":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:9178:11609":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:3250:32473":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:6542:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"13:110:35958":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:15624:10263":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"24:4941:12324":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:45986:11360":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12328:9589":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5039:12372":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:15760:10300":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7604:8913":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"14:40:9682":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:1829:11439":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:15249:10144":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:10194:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:11089:11099":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8309:9149":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:8622:8263":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:3844:11463":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:9161:11488":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13832:9800":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6665:22237":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:635:9287":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:43642:11253":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6385:10580":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:14977:10096":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:15313:10161":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13553:9738":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13855:9803":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:4976:10490":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:2684:10445":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:41500:11090":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:7397:35979":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11153:9442":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:21450:33913":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:46666:7789":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:2478:10436":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:45646:11328":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:10472:27822":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:9445:11618":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"24:1722:12222":{"crate_id":24,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5489:12539":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:40102:11187":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2115:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:14131:9842":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:11142:8777":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:5831:8871":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6991:35976":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5083:12386":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:3091:8187":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:44029:11280":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:16212:10412":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:4641:10480":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:8073:10827":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:522:12046":{"crate_id":24,"path":["libc","unix","hostent"],"kind":"struct"},"1:8145:9381":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:10878:11630":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:3782:14525":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:22816:13132":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5528:12546":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9807:22288":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:7537:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15197:10135":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11906:11514":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:4609:11068":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:6849:13130":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:5236:12421":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"9:0:2572":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7085:10680":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3337:11456":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:506:14398":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"9:238:11224":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:44142:13209":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10720:35990":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:14356:9896":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12251:9584":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:46538:7781":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2049:11058":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:43542:11107":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:8197:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:5051:12376":{"crate_id":24,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6636:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:6434:12660":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7014:22239":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:13469:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2823:8629":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5160:12392":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:8264:13030":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:23015:11162":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"14:0:2576":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4787:12228":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:1051:8224":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40527:8292":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:22388:14969":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:10907:11526":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"5:6039:8968":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:16121:10390":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:2498:21296":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:5002:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12768:22285":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7497:10757":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11567:9495":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:22419:14487":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:14788:9994":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:123:8930":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:21678:8983":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:5243:12425":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:42517:32938":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:15206:10136":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:22938:11155":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:6706:12790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:4882:10487":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:484:12021":{"crate_id":24,"path":["libc","unix","timespec"],"kind":"struct"},"17:14503:9923":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12929:9635":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:7954:14487":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"23:0:1961":{"crate_id":23,"path":["getrandom"],"kind":"module"},"16:4062:10471":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13497:9720":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"9:178:8948":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42571:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7132:10688":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:6663:12773":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:44419:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:38445:8320":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:43728:11064":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"24:5038:12372":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:5781:11486":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6335:8863":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:473:12015":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4142:14535":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:7094:34786":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"24:5482:12537":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:32823:8308":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:8247:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:7730:7872":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:608:9282":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:5477:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8630:12901":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:5260:12433":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6940:8864":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:8118:10831":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1342:8223":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6120:22234":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:800:7830":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:10920:11637":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:11493:9488":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:5781:10456":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6398:8897":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4942:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:5367:22230":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:41711:8061":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:4149:8062":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12695:9623":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:12213:9581":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10954:22315":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:40775:8255":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:3842:10468":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:8593:11583":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:7359:12897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:7609:11053":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"24:5190:12401":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8172:11527":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"24:531:12052":{"crate_id":24,"path":["libc","unix","iovec"],"kind":"struct"},"6:1503:12092":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:3037:34864":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7714:7871":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"24:6477:12675":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"11:787:8215":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3551:11461":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"15:394:21335":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"24:6728:12795":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:2323:21370":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5134:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11419:8777":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"9:447:21222":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:6490:12684":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:5897:8873":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:39216:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:41633:7950":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:7412:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10950:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"24:6446:12664":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:1581:7874":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:11217:8982":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:39236:8206":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"22:50:13218":{"crate_id":22,"path":["once_cell","imp","Guard"],"kind":"struct"},"5:4269:13218":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2598:11448":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12900:8813":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:5295:12452":{"crate_id":24,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6466:10586":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:4747:14534":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:4784:8636":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3339:11457":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:883:8215":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:2326:8223":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:2506:2586":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:4050:14529":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6788:12815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:9737:22282":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:9374:11497":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:12350:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:15445:10198":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12289:9587":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12388:9599":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:1489:12086":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:45919:11357":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"15:0:2577":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:578:12076":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:22682:8986":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:15931:9667":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:45711:11331":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:542:8850":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"24:6767:12807":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"5:2309:8962":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5014:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10534:35986":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8162:9150":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"11:396:35948":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:43703:11257":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:12347:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:15521:10243":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"14:7:10926":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:5580:12570":{"crate_id":24,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:4246:13218":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10671:35991":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:465:12010":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13738:9783":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:5722:10457":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:538:8761":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:16235:10417":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"24:6378:12620":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:0:2571":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:1942:11443":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:15102:10112":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:5108:8330":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5037:10492":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:710:7971":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:698:8766":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5617:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"24:6879:12836":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:39273:2426":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:4600:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:4890:12298":{"crate_id":24,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1671:12200":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:563:12068":{"crate_id":24,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13146:9658":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6962:8908":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11665:11513":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:31965:11169":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:5560:11483":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10187:11214":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40239:8279":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:553:12063":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:706:9298":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4294:14558":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14475:9919":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:434:35953":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:43712:11120":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14341:9892":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13064:9647":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:560:11429":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1593:12146":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:10895:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:7339:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6494:10589":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:43802:14770":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:2548:13106":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4864:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:2562:13108":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:16269:9705":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:40321:8286":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:1685:12209":{"crate_id":24,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13844:9802":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:1064:34743":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:872:9310":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:9283:7949":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"13:0:2570":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6895:10657":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12454:9604":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:43406:8799":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:10242:119":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:1584:12141":{"crate_id":24,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:40009:11182":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5445:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7355:10719":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:40208:8278":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:12557:8789":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:5385:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11214:9465":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11392:9484":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:9313:11616":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:22927:11154":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"24:5652:12604":{"crate_id":24,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:2355:8837":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43838:11264":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:11132:11101":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:3397:7871":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:7348:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5756:10503":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:1582:10940":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:2572:10440":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:7389:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"11:844:8218":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:21499:14624":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:8472:14486":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:10692:27798":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:1827:11438":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:33430:8096":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10284:8796":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:15151:10122":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6524:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6379:12620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7061:10679":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7741:8919":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:10978:27663":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:6670:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46575:7784":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:7561:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:491:12023":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:256:9309":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6915:12861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:12338:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:15616:10262":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1723:12222":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:44356:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"24:1558:12125":{"crate_id":24,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:4614:10479":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:1812:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"20:366:1767":{"crate_id":20,"path":["zerocopy","transmute"],"kind":"macro"},"1:4823:14582":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6821:12824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11270:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:44170:8982":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10622:35992":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6460:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1865:11440":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13797:9796":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13089:9648":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46518:7779":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:21550:14487":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14284:9885":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:7998:9536":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4971:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"11:1887:7874":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:87:2759":{"crate_id":20,"path":["zerocopy","util","ptr","Ptr"],"kind":"struct"},"14:187:21313":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:6657:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:4604:11067":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:10707:13781":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:13636:11129":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"24:577:12076":{"crate_id":24,"path":["libc","unix","servent"],"kind":"struct"},"17:12076:9569":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:21467:33925":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12584:9442":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:3133:14955":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:32451:8306":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:31944:8074":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:6664:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:37811:8318":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:9876:787":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"17:13753:9787":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:2383:8061":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"24:5375:12476":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:39024:8327":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12318:9326":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:5369:12475":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:2434:14472":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:33949:8314":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"22:374:8344":{"crate_id":22,"path":["once_cell","race","OnceBool"],"kind":"struct"},"1:4863:14545":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"22:124:8757":{"crate_id":22,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"1:10313:11621":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"24:8287:13036":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:2151:8224":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:42768:2711":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:3098:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:7701:8243":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:16079:10379":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14876:10057":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:0:2574":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:15944:9681":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:40793:8259":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:2748:10448":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11747:27198":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12993:22308":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:5713:12822":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"24:7451:12928":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:12582:11119":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:1171:34863":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:45416:11303":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43347:11242":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:726:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:6635:12760":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:4908:12310":{"crate_id":24,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:41332:14524":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:39266:8323":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:5235:12421":{"crate_id":24,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"24:7313:12873":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12824:22307":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7769:10777":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5376:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:41591:7947":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:40152:11194":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:14560:9931":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:3279:8667":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:7460:12931":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:9386:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3319:2758":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5536:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6066:10534":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:42760:9122":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:7650:32898":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:6412:22235":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:10092:22305":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:597:9315":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"0:1617:2470":{"crate_id":0,"path":["ahash","random_state","set_random_source"],"kind":"function"},"1:8539:14523":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:9259:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:42033:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15635:10267":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5046:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13473:9716":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:8196:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:7584:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6811:12821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:6737:12797":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:7597:11051":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7509:10758":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6746:12798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:45504:11312":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:15434:10194":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:1566:21301":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5591:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:8252:13028":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:640:11431":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8575:11466":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12292:9159":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:35825:8315":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4612:14560":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"22:361:8756":{"crate_id":22,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"2:43226:11231":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41671:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:2849:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:516:12043":{"crate_id":24,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"24:1534:12108":{"crate_id":24,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40785:8257":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:10042:8227":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:15324:10165":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:7851:11649":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:7515:12968":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:2757:13123":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:6026:8283":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:45775:11335":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:484:27794":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:12342:1827":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:31976:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:42777:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5052:14581":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11661:9506":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:883:8221":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"24:6459:12665":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9265:11611":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8626:11586":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:30190:14526":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5390:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:9858:22299":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5112:12388":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:2548:10439":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:7553:8966":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7910:22244":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:22433:14702":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:22598:11132":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:328:13102":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:15655:10270":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22245:14707":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:2499:14970":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:2236:8959":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"9:330:13111":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13785:9794":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46318:11400":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:12324:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11755:9516":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11026:22317":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:2114:11023":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"24:4931:12318":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11029:9133":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1726:34743":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:9897:33771":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"24:5218:12414":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"24:5664:12611":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:3792:9151":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:39158:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:1707:12217":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"24:7983:13013":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:43674:11254":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:7372:7874":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:5289:12449":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8040:14418":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12433:8808":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:43266:11236":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13024:22309":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:1971:14452":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:13581:9748":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:43570:11250":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:5389:12484":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4164:14539":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11604:9146":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:44446:8201":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:1588:7871":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12485:22430":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:44006:11272":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:12620:11101":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:1610:8670":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12808:9632":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10915:35988":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:45369:11300":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:22333:33307":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:8206:2014":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:11702:9509":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:46590:7785":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:43305:11238":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:5995:10521":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"15:306:21326":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:521:26491":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:5249:12427":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6874:12835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:43007:13206":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:671:11013":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4743:10482":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:41518:11093":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:8216:10841":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"11:1066:21300":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6447:12664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:3590:8235":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:5902:11494":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12030:9565":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:3872:7871":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12647:9619":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:7392:7830":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:16105:10385":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:261:9310":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:45821:11337":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:566:2733":{"crate_id":20,"path":["zerocopy","ByteSliceMut"],"kind":"trait"},"12:0:2575":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:5716:14598":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:45483:11311":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:8167:7796":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:43217:11230":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:11637:11510":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:44348:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:6409:12645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11086:27787":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:14260:9882":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:12345:1821":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:40124:14455":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:7379:35977":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11764:9517":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:40179:8267":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6738:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:16093:10383":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:295:2425":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5769:10508":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:1160:8225":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3306:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:6140:8271":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1527:8215":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:45565:11316":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:11351:11108":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:1933:8436":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3599:32033":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:2979:11061":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:21465:33921":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:113:26481":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:6435:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11651:11511":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"24:4799:12237":{"crate_id":24,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:5415:10497":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6634:8905":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:8028:13025":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:42271:8239":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5320:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:7436:7874":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"13:229:8929":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:10675:32838":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:12341:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:1496:7874":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5457:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:31951:11168":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:8341:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:14855:10049":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:40076:11186":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11510:9490":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4909:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:44338:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"18:507:9271":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:497:12026":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11899:32254":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:44188:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:1536:8216":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:7546:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:7444:31872":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:10068:22287":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:12764:7845":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:11887:9158":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:21976:8984":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1327:8224":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6491:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6554:7830":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:15418:10191":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:2660:10444":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7485:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:14079:9837":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:1603:10941":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"24:7388:12919":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:513:9314":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:3250:35939":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:1585:12141":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13899:9811":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:1652:12193":{"crate_id":24,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"24:1516:12097":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4944:14544":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11497:27782":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:5038:14580":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:22201:14706":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:12572:8777":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:6615:8249":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44016:11276":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:5075:10493":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:43823:11259":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:45384:11301":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:598:36000":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7098:10683":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:8253:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11166:9462":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:5415:12495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11198:11606":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5774:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:46529:7780":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:4309:8061":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11242:9468":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:5180:12394":{"crate_id":24,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9094:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:359:11424":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:3473:9324":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:6398:11486":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:1896:7871":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5296:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:40766:8253":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11128:9422":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:40343:8287":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:4757:7825":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:14587:9934":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15473:10206":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13959:9820":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:39887:11173":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11016:9453":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3174:8189":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:7314:12873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:8046:14442":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:9305:9153":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"24:1564:12127":{"crate_id":24,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:25878:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:0:2580":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:5665:12611":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"9:357:21237":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12238:9583":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10185:8793":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:906:7871":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:2636:10443":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:7411:12920":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:8158:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:2854:10453":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13211:9681":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:15126:10114":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:643:9271":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:1207:9317":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12949:9326":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9241:11610":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:2026:14979":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:11337:11107":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:2236:8198":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:14599:9941":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:45792:11336":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12969:9637":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:4323:11065":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11313:9476":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:417:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"10:36:13110":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:45661:11329":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:2418:10433":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:10195:8235":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:9902:8979":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13946:9817":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13455:9715":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:10250:8238":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:5259:12433":{"crate_id":24,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:39176:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12349:1397":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8522:11254":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:4970:12335":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:1692:12210":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10294:11440":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:7955:11428":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:832:8216":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8509:8799":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:3712:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:7933:8248":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44435:11291":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:2197:14398":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12336:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:2124:8222":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2599:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5344:12464":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:30814:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:2285:11631":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"24:6745:12798":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:3669:9340":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:3029:9335":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:22321:14711":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4959:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:3899:10469":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:2374:10431":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:6620:12758":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"24:4964:12332":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1559:12125":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10170:8773":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:15769:10304":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14968:10092":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:3238:8061":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:3287:11454":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10018:22284":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:11209:27665":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:1518:8214":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:7545:12985":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:5307:10495":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"24:5399:12490":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:15078:10108":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:45743:11333":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:8660:33770":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3247:32475":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6872:10656":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:21448:33924":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10218:8794":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:6763:34743":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:96:26480":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"20:325:2724":{"crate_id":20,"path":["zerocopy","FromBytes"],"kind":"trait"},"16:6648:10605":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:2702:11449":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:670:9294":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"24:4951:12327":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:13656:11130":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"11:2403:8062":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:1526:12102":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:42500:8226":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46119:11365":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43470:11248":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5686:8867":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:5853:13218":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:6597:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:44047:7839":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13325:8820":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15646:10268":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"24:585:12080":{"crate_id":24,"path":["libc","unix","protoent"],"kind":"struct"},"1:12325:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"0:128:2018":{"crate_id":0,"path":["ahash","random_state"],"kind":"module"},"2:46098:11364":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:218:8202":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:531:9272":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:12320:15019":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2041:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11825:9527":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:22335:14969":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:10960:11462":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:43396:11246":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6729:12795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:2688:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:45322:11293":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:7574:13001":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"22:368:8343":{"crate_id":22,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"17:14723:9943":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"24:8281:13035":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:2469:7871":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:6343:9139":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:7689:27643":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:39913:11176":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:41574:8062":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:4869:12289":{"crate_id":24,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10669:11456":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:15273:10152":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:42992:11228":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"15:288:21325":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11269:22334":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:12264:9585":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:811:7871":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:5329:12462":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:7428:22241":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:3014:21373":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:9254:9135":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:6655:9141":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9938:22302":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:4074:7830":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:5111:12388":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:2207:11024":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:44138:13208":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:39963:11180":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"20:631:2734":{"crate_id":20,"path":["zerocopy","_CastType"],"kind":"enum"},"17:11341:9481":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6609:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:2592:10441":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:43624:11252":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:41466:11217":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6574:8904":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:558:12066":{"crate_id":24,"path":["libc","unix","sigval"],"kind":"struct"},"24:5319:12459":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:22738:11135":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:12344:1815":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:15342:10169":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:14298:9886":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:5001:12353":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:41760:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10251:8795":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10350:8798":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:14386:9899":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:7446:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"20:561:36186":{"crate_id":20,"path":["zerocopy","sealed","ByteSliceSealed"],"kind":"trait"},"6:5122:12389":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:16069:10378":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"24:6518:12696":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11674:9507":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:3179:8190":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:21676:14621":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:14414:9905":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:33603:8097":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4870:12289":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:4958:12330":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:735:26489":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:40392:8291":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:10244:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:12878:14764":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:22466:14701":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:7755:8920":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"14:31:10926":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:30407:2744":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:8317:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:39196:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:1888:11441":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:46081:11363":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41727:7874":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:2998:10462":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14847:10046":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:4502:34753":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:5137:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6678:12778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7266:27804":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:10498:2019":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:5597:12577":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:2044:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:3029:13117":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:39108:8321":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"24:4978:12340":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:41799:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:659:9288":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10997:9451":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5052:12376":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:6120:11486":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:4771:10483":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:12329:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:8270:13031":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9118:11606":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"0:1552:153":{"crate_id":0,"path":["ahash","HashMap"],"kind":"type_alias"},"6:559:12066":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:5173:12393":{"crate_id":24,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:40330:8272":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:726:8768":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:22651:8985":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3502:13218":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:4865:14547":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:6596:12746":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:856:8219":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5863:22232":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:931:8218":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:8012:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:573:9271":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:1449:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11324:9478":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10612:9439":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13485:9719":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6543:10593":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:5717:7877":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3533:11579":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:15:2320":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11865:9531":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:44166:13215":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:46509:7778":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:14402:9903":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6758:10630":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:41719:8062":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5581:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:12819:9298":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:1627:12174":{"crate_id":24,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5483:12537":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:22666:8971":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:5502:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:6621:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46613:7786":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7727:8917":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"11:2304:8222":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:3586:8191":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2432:13128":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5423:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:10941:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:44223:15064":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:4913:10488":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6442:10583":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2289:14469":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:4265:14555":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:9781:22298":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5174:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7570:10461":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10769:35985":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13766:9789":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1628:12174":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:15092:10111":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:7452:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5225:12417":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11367:8789":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:22982:11159":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:6600:34743":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11407:10996":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:1043:8222":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:8117:8265":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:22754:32745":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:150:8845":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4965:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2438:10434":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:7569:11048":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:12330:1665":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:22836:11148":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:9300:9138":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"0:238:2028":{"crate_id":0,"path":["ahash","HashSetExt"],"kind":"trait"},"2:6838:8273":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:8607:11584":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12443:9603":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"20:0:2110":{"crate_id":20,"path":["zerocopy"],"kind":"module"},"6:6505:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:5199:12406":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:11850:11110":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:8155:10836":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"24:7484:12942":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:3335:7794":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9346:9155":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:5974:9134":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:5471:12534":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:1638:12182":{"crate_id":24,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:7358:12897":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:5453:14744":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:45760:11334":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4921:11473":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:40249:8280":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:5351:12465":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:11345:11643":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:44458:11292":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:13606:9752":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:4761:12916":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"24:1495:12089":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:8005:13014":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:12328:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:21421:33919":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:41300:11087":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:40268:8282":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:7602:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:22905:11152":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13252:9685":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12399:9600":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:2741:11452":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7006:10665":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:21411:8991":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4891:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:45401:11302":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:1923:8670":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11557:9494":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:9886:22300":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:7621:11054":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7422:35913":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:37866:8319":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6519:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:280:34743":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:651:9271":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:41444:32733":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:917:7971":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13877:9810":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7306:35981":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:6705:12790":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:12111:13511":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"24:5414:12495":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8150:11525":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:15992:10364":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"14:202:7829":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"9:502:10999":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:7119:34751":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:491:9270":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:13618:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13986:9825":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:10672:11458":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:1580:12139":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"11:1917:8669":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:7366:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:1605:8669":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"24:8340:13048":{"crate_id":24,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:13038:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:6421:14715":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:437:9313":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:21497:14487":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:7891:27796":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:32063:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"24:5305:12455":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14545:9927":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"24:1620:12170":{"crate_id":24,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:5219:12414":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"24:6416:12647":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1557:7972":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5653:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:16050:9695":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"24:4884:12296":{"crate_id":24,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:9427:11509":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:867:9309":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:5788:11487":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13723:9779":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2657:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:46363:11401":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"24:6713:12793":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:43869:11268":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:15383:10183":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:954:8221":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11537:9492":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11547:9380":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:16138:10392":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:12422:9601":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:1850:13218":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:11089:9458":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:12346:1803":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:4456:8976":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:1670:12200":{"crate_id":24,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:1107:10938":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13568:9744":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:591:14411":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"24:1592:12146":{"crate_id":24,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"0:145:2446":{"crate_id":0,"path":["ahash","random_state","RandomSource"],"kind":"trait"},"17:16151:10398":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:9916:22301":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10828:35993":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:3778:10466":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:33234:8309":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:15116:10113":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:3374:7867":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:8350:13050":{"crate_id":24,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:15463:10201":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:12331:1699":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:3847:11464":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:9155:7874":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:14933:10091":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:45969:11359":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:43255:11235":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:1653:12193":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4932:12318":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:2652:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:2618:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:102:13098":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:8259:8074":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:11064:8062":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5453:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10607:27801":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"11:364:13954":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4501:11469":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:870:8214":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7559:10771":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:2037:9318":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"14:220:10934":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5598:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:1676:13508":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:8288:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:10609:15031":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13187:9667":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:40353:8288":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40737:11082":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:1810:2005":{"crate_id":1,"path":["std","collections","hash_set"],"kind":"module"},"2:39136:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11227:9466":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11595:8801":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:7330:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:14038:9831":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:42257:8230":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10439:8774":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:8328:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:12683:9622":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:45437:11308":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:6947:7878":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:729:14527":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:5200:12406":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:10503:2083":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:7461:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:30439:2745":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:11831:11465":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:4786:12228":{"crate_id":24,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2838:10452":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:5360:12469":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2282:11447":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11788:9521":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"24:6720:12794":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:22916:11153":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:5212:12413":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13292:8814":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:4530:8635":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7580:10772":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:6608:12751":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:8226:22245":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:586:12080":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2596:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:7329:12885":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:4836:12265":{"crate_id":24,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11914:11514":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2852:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:8259:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:10564:11605":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10818:9442":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:9527:11441":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:15138:10117":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:3324:8194":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"24:5328:12462":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:40221:8269":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14912:10086":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5064:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11812:9525":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:16165:10401":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"11:2231:8932":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:14994:10098":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:5700:10455":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:41582:7874":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"11:1025:8223":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11799:9522":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14463:9918":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:6504:12695":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6480:8902":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:40043:11183":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10877:9443":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:42545:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6749:10629":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:3093:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:41654:8656":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:22705:11133":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15701:10284":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:7527:7840":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:2280:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:8202:8923":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12201:9580":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14091:9838":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:5352:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:3648:8061":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:30471:32743":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:7799:8921":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11092:27803":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:15814:10310":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:5587:12572":{"crate_id":24,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6532:10592":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:1621:12170":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:862:7874":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1510:12094":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:13442:32581":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:37756:8317":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:16249:10418":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"21:0:1998":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"16:7695:10776":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:4094:14532":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11293:22335":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:5277:12444":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"23:120:185":{"crate_id":23,"path":["getrandom","use_file","Mutex"],"kind":"struct"},"17:11773:9518":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6756:12805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"24:544:12058":{"crate_id":24,"path":["libc","unix","winsize"],"kind":"struct"},"1:921:7972":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:2460:14482":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"18:515:9268":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:15176:10130":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8448:9152":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:9409:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:4108:14534":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:1007:8222":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:11365:11109":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:6763:12806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:9088:11605":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:40744:8247":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:2878:10454":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:4673:13129":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8750:11224":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12335:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:7081:14618":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"24:1579:12139":{"crate_id":24,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11042:9454":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:9710:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:46549:7782":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:3196:10428":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:8121:8264":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:43390:7842":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:11244:11104":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12478:9606":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12308:27618":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5266:12436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:2458:10435":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:5030:12367":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:4347:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:1978:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:3614:10465":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:43337:11241":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:15289:10154":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:6509:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:7528:10767":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:13494:11125":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14177:9866":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:11924:14753":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:41955:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12056:9568":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5181:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:14246:9880":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:39947:11179":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:43917:11270":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5630:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:7586:8277":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:648:14414":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12659:9620":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:22960:11157":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:1699:12213":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4924:12316":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:926:14423":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5385:8772":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:15799:10309":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"24:5211:12413":{"crate_id":24,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2788:10450":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:45728:11332":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:9139:8061":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5031:12367":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:43524:11106":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:3229:8313":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:40362:8289":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:8236:9151":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6160:21343":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"24:5545:12557":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:6649:8296":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:22461:14703":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"7:78:21215":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10989:11524":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:44331:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13116:9654":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:5273:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10044:22304":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10905:9444":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:45454:11309":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:6873:12835":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:46450:11404":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:46060:11362":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:8616:8262":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:16223:10414":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:8515:11099":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12300:22428":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6353:8894":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:22789:32746":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:31958:2727":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:4370:8185":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:43166:11229":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"9:53:8934":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10710:9441":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:3288:8192":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:8528:11576":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:11282:11105":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:39970:14803":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:40058:11185":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:1057:8223":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4759:12914":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:2938:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"24:5082:12386":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2855:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:41278:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"24:5514:12545":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:12566:11118":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"24:6523:12697":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:40:7870":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8855:11604":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:14051:9833":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2843:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"24:5335:12463":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:4273:14556":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:5444:12516":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:9147:11608":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:2175:22362":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6532:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:564:12068":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:41916:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"24:5133:12390":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2612:10442":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:42529:10805":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:4896:12301":{"crate_id":24,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:41557:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9220:14616":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:10885:14487":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11189:9463":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11497:9489":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:1155:35922":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:6957:7879":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"24:7428:12921":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:4438:34753":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4826:14560":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:896:7830":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:2508:10437":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:14189:9868":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5314:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:14235:9878":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8652:11470":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7633:35974":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:6427:8899":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:10256:8236":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:22283:14708":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12150:9573":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5960:10519":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"24:552:12063":{"crate_id":24,"path":["libc","unix","linger"],"kind":"struct"},"17:13999:9826":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:1584:7830":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44146:13210":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:10455:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:39877:11172":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15281:10153":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15836:10316":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5107:10494":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6802:10642":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"22:82:8756":{"crate_id":22,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"24:6669:12776":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12371:9635":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:942:8219":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:1662:12199":{"crate_id":24,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44158:13213":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:7412:11047":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:11185:9132":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12278:9586":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"}},"external_crates":{"23":{"name":"getrandom","html_root_url":"https://docs.rs/getrandom/0.2.12/"},"20":{"name":"zerocopy","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"once_cell","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"libc","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}