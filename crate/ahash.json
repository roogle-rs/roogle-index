{"root":"0:0:1884","crate_version":"0.8.6","includes_private":false,"index":{"2:12437:2173":{"id":"2:12437:2173","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2091":{"id":"0:69:2091","crate_id":0,"name":"write_u64","span":{"filename":"src/fallback_hash.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:27090":{"id":"2:12528:27090","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1513:203":{"id":"0:1513:203","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[207,4],"end":[207,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"5:684:7953":{"id":"5:684:7953","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12414:33756":{"id":"2:12414:33756","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1373":{"id":"0:1373","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[298,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2325:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2325:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1377:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2833:7550-0:1286:1779":{"id":"a:2:2833:7550-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1576:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1508:203":{"id":"0:1508:203","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[175,4],"end":[175,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:238:1804":{"id":"0:238:1804","crate_id":0,"name":"HashSetExt","span":{"filename":"src/lib.rs","begin":[165,0],"end":[170,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashSet type aliases.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:239:1002","0:240:1801"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:247"]}}},"2:12428:27176":{"id":"2:12428:27176","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12427:2018"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12443:27195":{"id":"2:12443:27195","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:1794":{"id":"0:128:1794","crate_id":0,"name":"random_state","span":{"filename":"src/random_state.rs","begin":[1,0],"end":[529,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:145:2222","0:1617:2246","0:1621:1790"],"is_stripped":false}}},"0:1388:823":{"id":"0:1388:823","crate_id":0,"name":"index","span":{"filename":"src/hash_map.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `HashMap`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2571-0:1568:1783":{"id":"b:2:2571-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12423:27156":{"id":"2:12423:27156","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12481:2455":{"id":"2:12481:2455","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12106:7610","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::rmatches":"2:12484:33762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43730:11377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250:1002":{"id":"0:250:1002","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[191,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:33759":{"id":"2:12435:33759","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43790:11380","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2833:7550-0:1557:1782":{"id":"a:2:2833:7550-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12408:33754":{"id":"2:12408:33754","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:15156":{"id":"2:12531:15156","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:15156"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43834:11218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1294:454":{"id":"0:1294:454","crate_id":0,"name":"clone","span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1884":{"id":"0:0:1884","crate_id":0,"name":"ahash","span":{"filename":"src/lib.rs","begin":[1,0],"end":[397,1]},"visibility":"public","docs":"AHash is a high performance keyed hash function.\n\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key.\nAHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can\ninduce a collision.\n\n# How aHash works\n\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function.\nWhen it is not, aHash falls back on a slightly slower alternative algorithm.\n\nBecause aHash does not have a fixed standard for its output, it is able to improve over time.\nBut this also means that different computers or computers using different versions of ahash may observe different\nhash values for the same input.\n# Basic Usage\nAHash provides an implementation of the [Hasher] trait.\nTo construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n### Randomness\n\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS.\nIt is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n\n### If randomess is not available\n\n[AHasher::default()] can be used to hash using fixed keys. This works with\n[BuildHasherDefault](std::hash::BuildHasherDefault). For example:\n\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\n\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n # m.insert(12, 34);\n```\nIt is also possible to instantiate [RandomState] directly:\n\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\n\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n # m.insert(1, 2);\n```\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\n\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\nThere are several constructors for [RandomState] with different ways to supply seeds.\n\n# Convenience wrappers\n\nFor convenience, both new-type wrappers and type aliases are provided.\n\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\n\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\nThis avoids the need to type \"RandomState\". (For convience `From`, `Into`, and `Deref` are provided).\n\n# Aliases\n\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` ,\nthe type aliases [HashMap], [HashSet] are provided.\n\n```\nuse ahash::{HashMap, HashMapExt};\n\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\nNote the import of [HashMapExt]. This is needed for the constructor.","links":{"HashMapExt":"0:235:1798","std::hash::BuildHasherDefault":"2:9795:1859","AHasher::default()":"0:253:60","RandomState":"0:1621:1790","HashMap":"0:1552:149","HashSet":"0:1555:151","Hasher":"2:9755:152"},"attrs":["#![deny(clippy :: correctness, clippy :: complexity, clippy :: perf)]","#![allow(clippy :: pedantic, clippy :: cast_lossless, clippy ::\nunreadable_literal)]","#![feature(min_specialization)]","#![feature(build_hasher_simple_hash_one)]","#![feature(stdsimd)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:1794","0:1295-0:1286:1779","0:1550-0:1557:1782","0:1551-0:1568:1783","0:1552:149","0:1555:151","0:231-0:1621:1790","0:235:1798","0:238:1804"],"is_stripped":false}}},"0:1505":{"id":"0:1505","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[170,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"2:2914:7853","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1508:203","0:1509:397"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2776:242-0:1286:1779":{"id":"a:2:2776:242-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2573:744":{"id":"2:2573:744","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8607:7706-0:1568:1783":{"id":"a:2:8607:7706-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1349:7762":{"id":"0:1349:7762","crate_id":0,"name":"get_key_value","span":{"filename":"src/hash_map.rs","begin":[127,4],"end":[133,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{"`Eq`":"2:2330:130","`Hash`":"2:9747:148"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:1878":{"id":"0:163:1878","crate_id":0,"name":"with_seeds","span":{"filename":"src/random_state.rs","begin":[308,4],"end":[315,5]},"visibility":"public","docs":"Allows for explicitly setting the seeds to used.\nAll `RandomState`s created with the same set of keys key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nNote: If DOS resistance is desired one of these should be a decent quality random number.\nIf 4 high quality random number are not cheaply available this method is robust against 0s being passed for\none or more of the parameters or the same value being passed for more than one parameter.\nIt is recommended to pass numbers in order from highest to lowest quality (if there is any difference).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashSetExt","id":"0:238:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1429:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:250:1002","0:251:1801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12490:33764":{"id":"2:12490:33764","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12106:7610","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::match_indices":"2:12487:33763"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43694:11376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1495":{"id":"0:1495","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[106,0],"end":[136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:2909:7852","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1498:203","0:1499:394"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8606:7707-0:1621:1790":{"id":"a:2:8606:7707-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8606:7707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1351:7767":{"id":"0:1351:7767","crate_id":0,"name":"get_mut","span":{"filename":"src/hash_map.rs","begin":[154,4],"end":[160,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n```","links":{"`Eq`":"2:2330:130","`Hash`":"2:9747:148"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2581:1590":{"id":"2:2581:1590","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:1557:1782":{"id":"b:2:2567-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2570:7742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1378":{"id":"0:1378","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[309,0],"end":[315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1420:7634":{"id":"0:1420:7634","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[378,4],"end":[378,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:863:7634","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:1353:1855":{"id":"0:1353:1855","crate_id":0,"name":"insert","span":{"filename":"src/hash_map.rs","begin":[185,4],"end":[187,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`] is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [module-level\ndocumentation] for more.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{"`None`":"2:41566:196"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2793:252-0:1621:1790":{"id":"a:2:2793:252-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:231-0:1621:1790":{"id":"0:231-0:1621:1790","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::random_state::RandomState","name":"RandomState","id":"0:1621:1790","glob":false}}},"2:12426:33758":{"id":"2:12426:33758","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12073:1506","crate::ops::IndexMut":"2:3077:7599","str::slice_unchecked":"2:12425:33757"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1291":{"id":"0:1291","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1292:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1404:168":{"id":"0:1404:168","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[361,4],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"2:12495:33766":{"id":"2:12495:33766","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1498:203":{"id":"0:1498:203","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[111,4],"end":[111,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:12432:15029":{"id":"2:12432:15029","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12433:15027"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43800:11381","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1428":{"id":"0:1428","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[395,0],"end":[405,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:7489:7556","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1433:7814"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1407":{"id":"0:1407","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[368,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1412:168","0:1413:7634","0:1414:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12407:14796":{"id":"2:12407:14796","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:1286:1779":{"id":"b:2:2577-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12487:33763":{"id":"2:12487:33763","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12106:7610","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::rmatch_indices":"2:12490:33764"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43676:11375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:15028":{"id":"2:12457:15028","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11922:11247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2093":{"id":"0:71:2093","crate_id":0,"name":"write_usize","span":{"filename":"src/fallback_hash.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"32\",\ntarget_pointer_width = \"16\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1545:7814":{"id":"0:1545:7814","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[291,4],"end":[293,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1458":{"id":"0:1458","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[19,0],"end":[23,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1429:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1460:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:246:1801":{"id":"0:246:1801","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1521:747":{"id":"0:1521:747","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_set.rs","begin":[251,4],"end":[255,5]},"visibility":"default","docs":"This crates a hashset from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1002"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12469:27188":{"id":"2:12469:27188","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610","str::rsplitn":"2:12472:27190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43630:11252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1568:1783":{"id":"b:5:682-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:684:7953","5:685:7844","5:686:8162"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12416:341":{"id":"2:12416:341","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:34436":{"id":"5:5535:34436","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2201","`String`":"5:7489:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":"Constructs a new [AHasher] with fixed keys.\nIf `std` is enabled these will be generated upon first invocation.\nOtherwise if the `compile-time-rng`feature is enabled these will be generated at compile time.\nIf neither of these features are available, hardcoded constants will be used.\n\nBecause the values are fixed, different hashers will all hash elements the same way.\nThis could make hash values predictable, if DOS attacks are a concern. If this behaviour is\nnot required, it may be preferable to use [RandomState] instead.\n\n# Examples\n\n```\nuse ahash::AHasher;\nuse std::hash::Hasher;\n\nlet mut hasher_1 = AHasher::default();\nlet mut hasher_2 = AHasher::default();\n\nhasher_1.write_u32(1234);\nhasher_2.write_u32(1234);\n\nassert_eq!(hasher_1.finish(), hasher_2.finish());\n```","links":{"RandomState":"0:1621:1790","AHasher":"0:1286:1779"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1328":{"id":"0:1328","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[47,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:727:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1331:7742"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:685:7844":{"id":"5:685:7844","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1547":{"id":"0:1547","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[300,0],"end":[306,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1621:1790"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1549:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12421:27155":{"id":"2:12421:27155","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:8162":{"id":"5:686:8162","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8607:7706-0:1557:1782":{"id":"a:2:8607:7706-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1484":{"id":"0:1484","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3023:2516","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1487:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1552:149":{"id":"0:1552:149","crate_id":0,"name":"HashMap","span":{"filename":"src/lib.rs","begin":[132,8],"end":[132,85]},"visibility":"public","docs":"[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap\nType alias for [HashMap]<K, V, ahash::RandomState>","links":{"std::collections::HashMap":"1:727:149"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:727:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:1332":{"id":"0:1332","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[53,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1335:1002","0:1336:1801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1530":{"id":"0:1530","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[266,0],"end":[272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1533:168","0:1534:7634","0:1535:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:172:2305":{"id":"0:172:2305","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[464,4],"end":[466,5]},"visibility":"default","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:9748:781","`Hasher`":"2:9755:152","`Hash`":"2:9747:148"},"attrs":["#[cfg(feature = \"specialize\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:1621:1790":{"id":"b:2:3412-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1354:7796":{"id":"0:1354:7796","crate_id":0,"name":"into_keys","span":{"filename":"src/hash_map.rs","begin":[216,4],"end":[218,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```\n\n# Performance\n\nIn the current implementation, iterating over keys takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoKeys","id":"1:918:7726","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1478:1809":{"id":"0:1478:1809","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_set.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2261-0:1568:1783":{"id":"b:2:2261-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2263:2446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2266:26869":{"id":"2:2266:26869","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:1286:1779":{"id":"b:2:2264-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:26869"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:2096":{"id":"0:72:2096","crate_id":0,"name":"write","span":{"filename":"src/fallback_hash.rs","begin":[171,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[allow(clippy :: collapsible_if)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3412-0:1568:1783":{"id":"b:2:3412-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1342:1809":{"id":"0:1342:1809","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_map.rs","begin":[75,4],"end":[77,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12507:14331":{"id":"2:12507:14331","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1426:7814":{"id":"0:1426:7814","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[390,4],"end":[392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1549:60":{"id":"0:1549:60","crate_id":0,"name":"default","span":{"filename":"src/hash_set.rs","begin":[303,4],"end":[305,5]},"visibility":"default","docs":"Creates an empty `AHashSet<T, S>` with the `Default` value for the hasher.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1472:1002":{"id":"0:1472:1002","crate_id":0,"name":"new","span":{"filename":"src/hash_set.rs","begin":[52,4],"end":[54,5]},"visibility":"public","docs":"This crates a hashset using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1002"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12522:33775":{"id":"2:12522:33775","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12067:132","`FromStr`":"2:12066:7607"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12066:7607","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12066:7607","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1482:254":{"id":"0:1482:254","crate_id":0,"name":"Target","span":{"filename":"src/hash_set.rs","begin":[77,4],"end":[77,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"1:1429:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"5:5526:34434":{"id":"5:5526:34434","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1627:454":{"id":"0:1627:454","crate_id":0,"name":"clone","span":{"filename":"src/random_state.rs","begin":[218,9],"end":[218,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1514:1525":{"id":"0:1514:1525","crate_id":0,"name":"sub","span":{"filename":"src/hash_set.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:33773":{"id":"2:12516:33773","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1465:744":{"id":"0:1465:744","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashSet;\n\nlet set1 = AHashSet::from([1, 2, 3, 4]);\nlet set2: AHashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:1621:1790":{"id":"b:2:2264-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2266:26869"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5534:34435":{"id":"5:5534:34435","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[127,0],"end":[200,1]},"visibility":"default","docs":"Provides [Hasher] methods to hash all of the primitive types.\n\n[Hasher]: core::hash::Hasher","links":{"core::hash::Hasher":"2:9755:152"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_usize","write_u32","write_i16","write_i128","write_isize","write_u64","write_u8","write_i32","write_str","write_length_prefix","write_u128","write_u16","write_i8","write_i64"],"trait":{"name":"Hasher","id":"2:9755:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2088","0:67:2089","0:68:2090","0:69:2091","0:70:2092","0:71:2093","0:72:2096","0:73:1850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12419:7767":{"id":"2:12419:7767","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3414:1603":{"id":"2:3414:1603","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39333:2202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2582-0:1557:1782":{"id":"b:2:2582-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2585:133","2:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2582-0:1286:1779":{"id":"b:2:2582-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:164:2305":{"id":"0:164:2305","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[357,4],"end":[363,5]},"visibility":"public","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:9748:781","`Hasher`":"2:9755:152","`Hash`":"2:9747:148"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1527:168":{"id":"0:1527:168","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[259,4],"end":[259,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"b:5:682-0:1621:1790":{"id":"b:5:682-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:7953","5:685:7844","5:686:8162"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12450:8102":{"id":"2:12450:8102","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41566:196","prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12460:27186":{"id":"2:12460:27186","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12106:7610","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::split":"2:12454:27183"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43544:11250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1317":{"id":"0:1317","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[23,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:727:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1320:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1504:392":{"id":"0:1504:392","crate_id":0,"name":"bitand","span":{"filename":"src/hash_set.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![2, 3, 4].into_iter().collect();\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:33777":{"id":"2:12532:33777","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:33777"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43843:11310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:2117":{"id":"2:12413:2117","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11666:15495"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1529:838":{"id":"0:1529:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[261,4],"end":[263,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7480:160","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1567:454":{"id":"0:1567:454","crate_id":0,"name":"clone","span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1474":{"id":"0:1474","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[63,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1477:1808","0:1478:1809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2582-0:1568:1783":{"id":"b:2:2582-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2585:133","2:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[383,0],"end":[467,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_one"],"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:170:152","0:171:1840","0:172:2305"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2567-0:1568:1783":{"id":"b:2:2567-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2570:7742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12431:1864":{"id":"2:12431:1864","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43512:8872","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12475:27192":{"id":"2:12475:27192","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:1621:1790":{"id":"b:2:2567-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:7742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3412-0:1557:1782":{"id":"b:2:3412-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2833:7550-0:1568:1783":{"id":"a:2:2833:7550-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1387:203":{"id":"0:1387:203","crate_id":0,"name":"Output","span":{"filename":"src/hash_map.rs","begin":[323,4],"end":[323,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"0:1286:1779":{"id":"0:1286:1779","crate_id":0,"name":"AHasher","span":{"filename":"src/fallback_hash.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A `Hasher` for hashing an arbitrary stream of bytes.\n\nInstances of [`AHasher`] represent state that is updated while hashing data.\n\nEach method updates the internal state based on the new data provided. Once\nall of the data has been provided, the resulting hash can be obtained by calling\n`finish()`\n\n[Clone] is also provided in case you wish to calculate hashes for two different items that\nstart with the same data.\n","links":{"`AHasher`":"0:1286:1779","Clone":"2:2277:108"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2793:252-0:1286:1779","a:2:2776:242-0:1286:1779","a:2:8606:7707-0:1286:1779","a:2:2833:7550-0:1286:1779","a:2:8607:7706-0:1286:1779","b:2:2571-0:1286:1779","b:2:2577-0:1286:1779","b:2:2582-0:1286:1779","b:2:2261-0:1286:1779","b:2:3412-0:1286:1779","b:2:2264-0:1286:1779","b:2:2567-0:1286:1779","b:5:682-0:1286:1779","0:65","0:1293","0:252","0:1291"]}}},"0:1523":{"id":"0:1523","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[258,0],"end":[264,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1527:168","0:1528:7634","0:1529:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1362:254":{"id":"0:1362:254","crate_id":0,"name":"Target","span":{"filename":"src/hash_map.rs","begin":[279,4],"end":[279,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashMap","id":"1:727:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:12499:33768":{"id":"2:12499:33768","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:33757":{"id":"2:12425:33757","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12073:1506","str::slice_mut_unchecked":"2:12426:33758","crate::ops::Index":"2:3073:7598"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2261-0:1557:1782":{"id":"b:2:2261-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2263:2446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1326:744":{"id":"0:1326:744","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashMap;\n\nlet map1 = AHashMap::from([(1, 2), (3, 4)]);\nlet map2: AHashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2261-0:1286:1779":{"id":"b:2:2261-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:2446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1336:1801":{"id":"0:1336:1801","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_map.rs","begin":[62,4],"end":[64,5]},"visibility":"public","docs":"This crates a hashmap with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1002"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1002":{"id":"0:155:1002","crate_id":0,"name":"new","span":{"filename":"src/random_state.rs","begin":[239,4],"end":[243,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` using random keys.\n\nEach instance will have a unique set of keys derived from [RandomSource].\n","links":{"RandomSource":"0:145:2222"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1479":{"id":"0:1479","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3010:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1482:254","0:1483:595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12436:14716":{"id":"2:12436:14716","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43818:11266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:33772":{"id":"2:12513:33772","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:2018":{"id":"2:12427:2018","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12428:27176"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1389":{"id":"0:1389","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[336,0],"end":[345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1393:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1510":{"id":"0:1510","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[202,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:2850:7854","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1513:203","0:1514:1525"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5537:28321":{"id":"5:5537:28321","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12527:27089"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12446:8140":{"id":"2:12446:8140","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41566:196","prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:27089":{"id":"2:12527:27089","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:152":{"id":"0:170:152","crate_id":0,"name":"Hasher","span":{"filename":"src/random_state.rs","begin":[384,4],"end":[384,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:8606:7707-0:1286:1779":{"id":"a:2:8606:7707-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8606:7707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1528:7634":{"id":"0:1528:7634","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[260,4],"end":[260,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:1557:7816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:236:1002":{"id":"0:236:1002","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[157,4],"end":[157,21]},"visibility":"default","docs":"Constructs a new HashMap","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1413:7634":{"id":"0:1413:7634","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[370,4],"end":[370,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:853:7817","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:156:2273":{"id":"0:156:2273","crate_id":0,"name":"generate_with","span":{"filename":"src/random_state.rs","begin":[255,4],"end":[259,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` based on the provided seeds, but in such a way\nthat each time it is called the resulting state will be different and of high quality.\nThis allows fixed constant or poor quality seeds to be provided without the problem of different\n`BuildHasher`s being identical or weak.\n\nThis is done via permuting the provided values with the value of a static counter and memory address.\n(This makes this method somewhat more expensive than `with_seeds` below which does not do this).\n\nThe provided values (k0-k3) do not need to be of high quality but they should not all be the same value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1483:595":{"id":"0:1483:595","crate_id":0,"name":"deref","span":{"filename":"src/hash_set.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3010:122","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1621:1790":{"id":"0:1621:1790","crate_id":0,"name":"RandomState","span":{"filename":"src/random_state.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create\n[AHasher]s in order to hash the keys of the map. See `build_hasher` below.\n\n[build_hasher]: ahash::\n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap\n\nThere are multiple constructors each is documented in more detail below:\n\n| Constructor   | Dynamically random? | Seed |\n|---------------|---------------------|------|\n|`new`          | Each instance unique|_[RandomSource]_|\n|`generate_with`| Each instance unique|`u64` x 4 + [RandomSource]|\n|`with_seed`    | Fixed per process   |`u64` + static random number|\n|`with_seeds`   | Fixed               |`u64` x 4|\n","links":{"RandomSource":"0:145:2222","AHasher":"0:1286:1779","std::hash::Hasher":"2:9755:152","std::collections::HashMap":"1:727:149"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:2:2793:252-0:1621:1790","a:2:2776:242-0:1621:1790","a:2:8606:7707-0:1621:1790","a:2:2833:7550-0:1621:1790","a:2:8607:7706-0:1621:1790","b:2:2571-0:1621:1790","b:2:2577-0:1621:1790","b:2:2582-0:1621:1790","b:2:2261-0:1621:1790","b:2:3412-0:1621:1790","b:2:2264-0:1621:1790","b:2:2567-0:1621:1790","b:5:682-0:1621:1790","0:167","0:169","0:152","0:1626"]}}},"0:1576:454":{"id":"0:1576:454","crate_id":0,"name":"clone","span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:1557:1782":{"id":"b:2:2577-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2580:133","2:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1515":{"id":"0:1515","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[234,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1518:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:2089":{"id":"0:67:2089","crate_id":0,"name":"write_u16","span":{"filename":"src/fallback_hash.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2284":{"id":"0:162:2284","crate_id":0,"name":"with_seed","span":{"filename":"src/random_state.rs","begin":[294,4],"end":[297,5]},"visibility":"public","docs":"Build a `RandomState` from a single key. The provided key does not need to be of high quality,\nbut all `RandomState`s created from the same key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nThis allows for explicitly setting the seed to be used.\n\nNote: This method does not require the provided seed to be strong.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:15027":{"id":"2:12433:15027","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12432:15029"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43809:11382","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1533:168":{"id":"0:1533:168","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[267,4],"end":[267,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:2585:133":{"id":"2:2585:133","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31991:8350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1503:203":{"id":"0:1503:203","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[143,4],"end":[143,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1563":{"id":"0:1563","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1567:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12454:27183":{"id":"2:12454:27183","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12106:7610","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::split_whitespace":"2:12432:15029","str::rsplit":"2:12460:27186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43526:11245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2088":{"id":"0:66:2088","crate_id":0,"name":"write_u8","span":{"filename":"src/fallback_hash.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1438:60":{"id":"0:1438:60","crate_id":0,"name":"default","span":{"filename":"src/hash_map.rs","begin":[413,4],"end":[415,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1292:718":{"id":"0:1292:718","crate_id":0,"name":"fmt","span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1850":{"id":"0:73:1850","crate_id":0,"name":"finish","span":{"filename":"src/fallback_hash.rs","begin":[196,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1509:397":{"id":"0:1509:397","crate_id":0,"name":"bitxor","span":{"filename":"src/hash_set.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1394":{"id":"0:1394","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[347,0],"end":[358,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:7476:139","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1397:747"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1295-0:1286:1779":{"id":"0:1295-0:1286:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,8],"end":[117,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::fallback_hash::AHasher","name":"AHasher","id":"0:1286:1779","glob":false}}},"0:171:1840":{"id":"0:171:1840","crate_id":0,"name":"build_hasher","span":{"filename":"src/random_state.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":"Constructs a new [AHasher] with keys based on this [RandomState] object.\nThis means that two different [RandomState]s will will generate\n[AHasher]s that will return different hashcodes, but [Hasher]s created from the same [BuildHasher]\nwill generate the same hashes for the same input data.\n\n # Examples\n```\n        use ahash::{AHasher, RandomState};\n        use std::hash::{Hasher, BuildHasher};\n    \n        let build_hasher = RandomState::new();\n        let mut hasher_1 = build_hasher.build_hasher();\n        let mut hasher_2 = build_hasher.build_hasher();\n    \n        hasher_1.write_u32(1234);\n        hasher_2.write_u32(1234);\n    \n        assert_eq!(hasher_1.finish(), hasher_2.finish());\n    \n        let other_build_hasher = RandomState::new();\n        let mut different_hasher = other_build_hasher.build_hasher();\n        different_hasher.write_u32(1234);\n        assert_ne!(different_hasher.finish(), hasher_1.finish());\n```\n    \n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap","links":{"RandomState":"0:1621:1790","AHasher":"0:1286:1779","std::hash::BuildHasher":"2:9790:1795","std::hash::Hasher":"2:9755:152"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1419:168":{"id":"0:1419:168","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[377,4],"end":[377,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"0:1460:744":{"id":"0:1460:744","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashSet","id":"1:1429:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1617:2246":{"id":"0:1617:2246","crate_id":0,"name":"set_random_source","span":{"filename":"src/random_state.rs","begin":[190,12],"end":[192,13]},"visibility":"public","docs":"Provides an optional way to manually supply a source of randomness for Hasher keys.\n\nThe provided [RandomSource] will be used to be used as a source of randomness by [RandomState] to generate new states.\nIf this method is not invoked the standard source of randomness is used as described in the Readme.\n\nThe source of randomness can only be set once, and must be set before the first RandomState is created.\nIf the source has already been specified `Err` is returned with a `bool` indicating if the set failed because\nmethod was previously invoked (true) or if the default source is already being used (false).","links":{"RandomSource":"0:145:2222","RandomState":"0:1621:1790"},"attrs":["#[cfg(not(all(target_arch = \"arm\", target_os = \"none\")))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"impl_trait":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl RandomSource + Send + Sync + 'static","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2570:7742":{"id":"2:2570:7742","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2544:138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1355:7804":{"id":"0:1355:7804","crate_id":0,"name":"into_values","span":{"filename":"src/hash_map.rs","begin":[247,4],"end":[249,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```\n\n# Performance\n\nIn the current implementation, iterating over values takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoValues","id":"1:922:7727","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1397:747":{"id":"0:1397:747","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_map.rs","begin":[353,4],"end":[357,5]},"visibility":"default","docs":"This crates a hashmap from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1002"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1435":{"id":"0:1435","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[411,0],"end":[416,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1621:1790"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1438:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2793:252-0:1286:1779":{"id":"a:2:2793:252-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:145:2222":{"id":"0:145:2222","crate_id":0,"name":"RandomSource","span":{"filename":"src/random_state.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"A supplier of Randomness used for different hashers.\nSee [set_random_source].\n\nIf [set_random_source] aHash will default to the best available source of randomness.\nIn order this is:\n1. OS provided random number generator (available if the `runtime-rng` flag is enabled which it is by default) - This should be very strong.\n2. Strong compile time random numbers used to permute a static \"counter\". (available if `compile-time-rng` is enabled.\n__Enabling this is recommended if `runtime-rng` is not possible__)\n3. A static counter that adds the memory address of each [RandomState] created permuted with fixed constants.\n(Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled.\n(Rust enables ASLR by default)","links":{"set_random_source":"0:1617:2246","RandomState":"0:1621:1790"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:146:2233"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"b:2:2582-0:1621:1790":{"id":"b:2:2582-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:133","2:2586:1588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1337":{"id":"0:1337","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[67,0],"end":[78,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1341:1808","0:1342:1809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8607:7706-0:1286:1779":{"id":"a:2:8607:7706-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:2090":{"id":"0:68:2090","crate_id":0,"name":"write_u32","span":{"filename":"src/fallback_hash.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:1557:1782":{"id":"b:5:682-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:684:7953","5:685:7844","5:686:8162"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1368:597":{"id":"0:1368:597","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_map.rs","begin":[286,4],"end":[288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3010:122","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[226,0],"end":[230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9531:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:718"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12472:27190":{"id":"2:12472:27190","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12067:450","str::splitn":"2:12469:27188","self::pattern":"2:12106:7610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43648:11253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404":{"id":"2:12404","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12405:872","2:12406:8103","2:12407:14796","2:12408:33754","2:12410:33755","2:12413:2117","2:12414:33756","2:12415:342","2:12416:341","2:12417:7755","2:12419:7767","2:12421:27155","2:12423:27156","2:12425:33757","2:12426:33758","2:12427:2018","2:12428:27176","2:12429:11267","2:12430:11391","2:12431:1864","2:12432:15029","2:12433:15027","2:12434:30071","2:12435:33759","2:12436:14716","2:12437:2173","2:12440:27194","2:12443:27195","2:12446:8140","2:12450:8102","2:12454:27183","2:12457:15028","2:12460:27186","2:12463:33760","2:12466:33761","2:12469:27188","2:12472:27190","2:12475:27192","2:12478:27193","2:12481:2455","2:12484:33762","2:12487:33763","2:12490:33764","2:12493:33765","2:12495:33766","2:12497:33767","2:12499:33768","2:12500:33769","2:12501:33770","2:12504:33771","2:12507:14331","2:12510:27196","2:12513:33772","2:12516:33773","2:12519:33774","2:12522:33775","2:12524:27085","2:12525:27086","2:12526:27088","2:12527:27089","2:12528:27090","2:12529:33776","2:12531:15156","2:12532:33777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8606:7707-0:1568:1783":{"id":"a:2:8606:7707-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8606:7707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8606:7707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8606:7707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:146:2233":{"id":"0:146:2233","crate_id":0,"name":"gen_hasher_seed","span":{"filename":"src/random_state.rs","begin":[132,4],"end":[132,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:5536:7996":{"id":"5:5536:7996","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[89,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2325:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1491:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12410:33755":{"id":"2:12410:33755","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12408:33754"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1536":{"id":"0:1536","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[274,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:7489:7556","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1539:7814"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1393:718":{"id":"0:1393:718","crate_id":0,"name":"fmt","span":{"filename":"src/hash_map.rs","begin":[342,4],"end":[344,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2833:7550-0:1621:1790":{"id":"a:2:2833:7550-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2833:7550","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1363:595":{"id":"0:1363:595","crate_id":0,"name":"deref","span":{"filename":"src/hash_map.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3010:122","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1331:7742":{"id":"0:1331:7742","crate_id":0,"name":"into","span":{"filename":"src/hash_map.rs","begin":[48,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashMap","id":"1:727:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[232,0],"end":[364,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1002","0:156:2273","0:162:2284","0:163:1878","0:164:2305"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1415":{"id":"0:1415","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[376,0],"end":[382,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1419:168","0:1420:7634","0:1421:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1470":{"id":"0:1470","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[49,0],"end":[61,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1472:1002","0:1473:1801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2793:252-0:1568:1783":{"id":"a:2:2793:252-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1499:394":{"id":"0:1499:394","crate_id":0,"name":"bitor","span":{"filename":"src/hash_set.rs","begin":[133,4],"end":[135,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12434:30071":{"id":"2:12434:30071","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43780:11379","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1469:7742":{"id":"0:1469:7742","crate_id":0,"name":"into","span":{"filename":"src/hash_set.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashSet","id":"1:1429:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1557:1782":{"id":"0:1557:1782","crate_id":0,"name":"AHashMap","span":{"filename":"src/hash_map.rs","begin":[21,0],"end":[21,68]},"visibility":"public","docs":"A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"crate::RandomState":"0:1621:1790","std::collections::HashMap":"1:727:149"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1332","0:1337","0:1343","a:2:2793:252-0:1557:1782","a:2:2776:242-0:1557:1782","a:2:2833:7550-0:1557:1782","a:2:8607:7706-0:1557:1782","b:2:2571-0:1557:1782","b:2:2577-0:1557:1782","b:2:2582-0:1557:1782","b:2:2261-0:1557:1782","b:2:3412-0:1557:1782","b:2:2264-0:1557:1782","b:2:2567-0:1557:1782","b:5:682-0:1557:1782","0:1394","0:1563","0:1364","0:1407","0:1399","0:1321","0:1382","0:1378","0:1328","0:1369","0:1428","0:1435","0:1422","0:1415","0:1358","0:1373","0:1317","0:1389"]}}},"0:1491:660":{"id":"0:1491:660","crate_id":0,"name":"eq","span":{"filename":"src/hash_set.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1626":{"id":"0:1626","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[218,9],"end":[218,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1627:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5520:8176":{"id":"5:5520:8176","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1341:1808":{"id":"0:1341:1808","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_map.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1347:7755":{"id":"0:1347:7755","crate_id":0,"name":"get","span":{"filename":"src/hash_map.rs","begin":[102,4],"end":[108,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{"`Eq`":"2:2330:130","`Hash`":"2:9747:148"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1473:1801":{"id":"0:1473:1801","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_set.rs","begin":[58,4],"end":[60,5]},"visibility":"public","docs":"This crates a hashset with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1002"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2092":{"id":"0:70:2092","crate_id":0,"name":"write_u128","span":{"filename":"src/fallback_hash.rs","begin":[149,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1405:7634":{"id":"0:1405:7634","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[362,4],"end":[362,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:840:7816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:1406:838":{"id":"0:1406:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[363,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7480:160","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1382":{"id":"0:1382","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[317,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:3073:7598","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1387:203","0:1388:823"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1550-0:1557:1782":{"id":"0:1550-0:1557:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,8],"end":[126,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_map::AHashMap","name":"AHashMap","id":"0:1557:1782","glob":false}}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[29,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1326:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:245:1002":{"id":"0:245:1002","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,0],"end":[184,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashMapExt","id":"0:235:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashMap","id":"1:727:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:245:1002","0:246:1801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2261-0:1621:1790":{"id":"b:2:2261-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:2446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12440:27194":{"id":"2:12440:27194","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1422":{"id":"0:1422","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[384,0],"end":[393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:7489:7556","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1426:7814"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:240:1801":{"id":"0:240:1801","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[169,4],"end":[169,46]},"visibility":"default","docs":"Constructs a new HashSet with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12466:33761":{"id":"2:12466:33761","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12106:7610","str::split":"2:12454:27183","prim@char":"1:12067:450","str::split_terminator":"2:12463:33760"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43594:11374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:33774":{"id":"2:12519:33774","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:34432":{"id":"5:5519:34432","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2201","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:33776":{"id":"2:12529:33776","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:33776"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43825:11311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1555:151":{"id":"0:1555:151","crate_id":0,"name":"HashSet","span":{"filename":"src/lib.rs","begin":[135,8],"end":[135,79]},"visibility":"public","docs":"Type alias for [HashSet]<K, ahash::RandomState>","links":{"HashSet":"0:1555:151"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1429:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[221,0],"end":[249,1]},"visibility":"default","docs":"Provides a default [Hasher] with fixed keys.\nThis is typically used in conjunction with [BuildHasherDefault] to create\n[AHasher]s in order to hash the keys of the map.\n\nGenerally it is preferable to use [RandomState] instead, so that different\nhashmaps will have different keys. However if fixed keys are desirable this\nmay be used instead.\n\n# Example\n```\nuse std::hash::BuildHasherDefault;\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, BuildHasherDefault<AHasher>> = HashMap::default();\nmap.insert(12, 34);\n```\n\n[BuildHasherDefault]: std::hash::BuildHasherDefault\n[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap","links":{"std::hash::BuildHasherDefault":"2:9795:1859","AHasher":"0:1286:1779","RandomState":"0:1621:1790","std::hash::Hasher":"2:9755:152"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[376,0],"end":[381,1]},"visibility":"default","docs":"Creates an instance of RandomState using keys obtained from the random number generator.\nEach instance created in this way will have a unique set of keys. (But the resulting instance\ncan be used to create many hashers each or which will have the same keys.)\n\nThis is the same as [RandomState::new()]\n\nNOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState::new()":"0:155:1002","RandomState":"0:1621:1790"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1492":{"id":"0:1492","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[99,0],"end":[104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2571-0:1557:1782":{"id":"b:2:2571-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8607:7706-0:1621:1790":{"id":"a:2:8607:7706-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8607:7706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12406:8103":{"id":"2:12406:8103","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:11267":{"id":"2:12429:11267","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43496:7604","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:1621:1790":{"id":"b:2:2577-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:133","2:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12501:33770":{"id":"2:12501:33770","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12131:15492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2264-0:1557:1782":{"id":"b:2:2264-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2266:26869"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:153:718":{"id":"0:153:718","crate_id":0,"name":"fmt","span":{"filename":"src/random_state.rs","begin":[227,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1414:838":{"id":"0:1414:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7480:160","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:1002":{"id":"0:239:1002","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[167,4],"end":[167,21]},"visibility":"default","docs":"Constructs a new HashSet","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12463:33760":{"id":"2:12463:33760","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12106:7610","str::split":"2:12454:27183","prim@char":"1:12067:450","`DoubleEndedIterator`":"2:7518:126","str::rsplit_terminator":"2:12466:33761"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43576:11373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1461":{"id":"0:1461","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[25,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1465:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12478:27193":{"id":"2:12478:27193","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12493:33765":{"id":"2:12493:33765","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1539:7814":{"id":"0:1539:7814","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1541":{"id":"0:1541","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[285,0],"end":[294,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:2788:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:7489:7556","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1545:7814"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12524:27085":{"id":"2:12524:27085","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:1801":{"id":"0:251:1801","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[195,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:28322":{"id":"5:5538:28322","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12528:27090"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:27196":{"id":"2:12510:27196","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1477:1808":{"id":"0:1477:1808","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_set.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2577-0:1568:1783":{"id":"b:2:2577-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2547:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2580:133","2:2581:1590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168:60":{"id":"0:168:60","crate_id":0,"name":"default","span":{"filename":"src/random_state.rs","begin":[378,4],"end":[380,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:11391":{"id":"2:12430:11391","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43502:11371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12484:33762":{"id":"2:12484:33762","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12106:7610","`DoubleEndedIterator`":"2:7518:126","prim@char":"1:12067:450","str::matches":"2:12481:2455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43748:11378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12126:15493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2263:2446":{"id":"2:2263:2446","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1293":{"id":"0:1293","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1294:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2571-0:1286:1779":{"id":"b:2:2571-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1433:7814":{"id":"0:1433:7814","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2776:242-0:1568:1783":{"id":"a:2:2776:242-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3412-0:1286:1779":{"id":"b:2:3412-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3410:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3414:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1358":{"id":"0:1358","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[278,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3010:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1362:254","0:1363:595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2580:133":{"id":"2:2580:133","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:1568:1783":{"id":"0:1568:1783","crate_id":0,"name":"AHashSet","span":{"filename":"src/hash_set.rs","begin":[17,0],"end":[17,55]},"visibility":"public","docs":"A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"std::collections::HashSet":"1:1429:151","crate::RandomState":"0:1621:1790"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1470","0:1474","a:2:2793:252-0:1568:1783","a:2:2776:242-0:1568:1783","a:2:8606:7707-0:1568:1783","a:2:2833:7550-0:1568:1783","a:2:8607:7706-0:1568:1783","b:2:2571-0:1568:1783","b:2:2577-0:1568:1783","b:2:2582-0:1568:1783","b:2:2261-0:1568:1783","b:2:3412-0:1568:1783","b:2:2264-0:1568:1783","b:2:2567-0:1568:1783","b:5:682-0:1568:1783","0:1479","0:1488","0:1500","0:1515","0:1505","0:1461","0:1492","0:1541","0:1495","0:1573","0:1519","0:1467","0:1458","0:1510","0:1530","0:1484","0:1547","0:1536","0:1523"]}}},"a:2:2793:252-0:1557:1782":{"id":"a:2:2793:252-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2793:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:682-0:1286:1779":{"id":"b:5:682-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:7953","5:685:7844","5:686:8162"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1421:838":{"id":"0:1421:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[379,4],"end":[381,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7480:160","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:872":{"id":"2:12405:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12067:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1467":{"id":"0:1467","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[43,0],"end":[47,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1429:151","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1469:7742"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1364":{"id":"0:1364","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[285,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3023:2516","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1368:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1343":{"id":"0:1343","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[80,0],"end":[276,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1347:7755","0:1349:7762","0:1351:7767","0:1353:1855","0:1354:7796","0:1355:7804","0:1356:7809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1320:744":{"id":"0:1320:744","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashMap","id":"1:727:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12417:7755":{"id":"2:12417:7755","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1518:718":{"id":"0:1518:718","crate_id":0,"name":"fmt","span":{"filename":"src/hash_set.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9506:137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9487:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:27088":{"id":"2:12526:27088","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2571-0:1621:1790":{"id":"b:2:2571-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2573:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1534:7634":{"id":"0:1534:7634","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[268,4],"end":[268,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:1561:7634","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"2:12504:33771":{"id":"2:12504:33771","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:450","self::pattern":"2:12106:7610"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518":{"id":"5:5518","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5519:34432","5:5520:8176","5:5523:34433","5:5526:34434","5:5534:34435","5:5535:34436","5:5536:7996","5:5537:28321","5:5538:28322"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1399":{"id":"0:1399","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[360,0],"end":[366,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7480:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1404:168","0:1405:7634","0:1406:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1356:7809":{"id":"0:1356:7809","crate_id":0,"name":"remove","span":{"filename":"src/hash_map.rs","begin":[269,4],"end":[275,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n```","links":{"`Eq`":"2:2330:130","`Hash`":"2:9747:148"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2255:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2776:242-0:1557:1782":{"id":"a:2:2776:242-0:1557:1782","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1519":{"id":"0:1519","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[244,0],"end":[256,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:7476:139","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1521:747"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12497:33767":{"id":"2:12497:33767","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:33769":{"id":"2:12500:33769","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1535:838":{"id":"0:1535:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[269,4],"end":[271,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7480:160","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2776:242-0:1621:1790":{"id":"a:2:2776:242-0:1621:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2776:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1377:660":{"id":"0:1377:660","crate_id":0,"name":"eq","span":{"filename":"src/hash_map.rs","begin":[304,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1335:1002":{"id":"0:1335:1002","crate_id":0,"name":"new","span":{"filename":"src/hash_map.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1002"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1369":{"id":"0:1369","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[291,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8606:7707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8606:7707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8606:7707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1782","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:237:1801":{"id":"0:237:1801","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[159,4],"end":[159,46]},"visibility":"default","docs":"Constructs a new HashMap with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:235:1798":{"id":"0:235:1798","crate_id":0,"name":"HashMapExt","span":{"filename":"src/lib.rs","begin":[155,0],"end":[160,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashMap type alias.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:236:1002","0:237:1801"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:241"]}}},"0:1412:168":{"id":"0:1412:168","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[369,4],"end":[369,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"b:2:2264-0:1568:1783":{"id":"b:2:2264-0:1568:1783","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2783:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2258:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2266:26869"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1551-0:1568:1783":{"id":"0:1551-0:1568:1783","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,8],"end":[127,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_set::AHashSet","name":"AHashSet","id":"0:1568:1783","glob":false}}},"2:12415:342":{"id":"2:12415:342","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12416:341","`u8`":"1:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1487:597":{"id":"0:1487:597","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_set.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3010:122","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:27086":{"id":"2:12525:27086","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39520:27096","Self::is_ascii":"2:12524:27085"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39520:27096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1500":{"id":"0:1500","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[138,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2330:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9747:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2277:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:9790:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2618:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"2:2904:7851","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1783","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1503:203","0:1504:392"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2586:1588":{"id":"2:2586:1588","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2551:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5523:34433":{"id":"5:5523:34433","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12111:7600","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2567-0:1286:1779":{"id":"b:2:2567-0:1286:1779","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2544:138","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2541:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:7742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"16:5634:10553":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"24:5072:12357":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2876:7594":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:3915:10524":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7736:10828":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:2133:9283":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9998:9585":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:43512:8872":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12007:8893":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:4848:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:40035:11313":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11389:9774":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:12751:209":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4555:12148":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"24:6058:12527":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:22738:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:44115:11397":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:5079:11557":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:46331:11449":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11137:9746":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4540:12141":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"24:6091:12536":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:853:7817":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4433:12091":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:12089:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:14469:10454":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2830:15678":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:10344:7816":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"24:6612:12603":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:9531:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44125:11401":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"24:1733:11997":{"crate_id":24,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3236:11539":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:481:9438":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:11652:11258":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"24:4630:12163":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:40390:8033":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:1573:8388":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:9372:8851":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:3034:7551":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:43748:11378":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13010:10037":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8031:11601":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:483:9337":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8337:11647":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4734:12191":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:719:9471":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12983:10035":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:534:9338":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:3171:216":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:1058:7970":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:4822:33592":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:562:11837":{"crate_id":24,"path":["libc","unix","linger"],"kind":"struct"},"1:727:149":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9312:11527":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:12846:9997":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10430:9656":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"22:124:8835":{"crate_id":22,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"5:5137:9035":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13868:10277":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6171:211":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:5996:15979":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7862:10841":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2832:10505":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9574:35367":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:7526:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:12084:1612":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14033:10318":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7589:7632":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6901:8983":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8274:15263":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:10009:9330":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:46619:11464":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:14355:10420":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"24:6579:12580":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:4365:9290":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:41318:8763":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1516:215":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6759:12654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:9223:30613":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:4166:9262":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4892:12262":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:4053:10525":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43353:11361":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9058:9077":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:8115:10884":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:22936:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:44265:12924":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11086:9742":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8599:11675":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10929:9729":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:43502:11371":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:22771:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:12033:9094":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6604:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:9536:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11193:11677":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:8041:15255":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:5110:11557":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:1846:7634":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:14163:10351":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7523:10822":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:3125:11536":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"5:7503:7590":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:9197:718":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"16:5588:10509":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10698:9689":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4259:11551":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:118:16059":{"crate_id":24,"path":["libc","unix","FILE"],"kind":"enum"},"1:871:7961":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"13:0:2347":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:10978:11594":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:1525:11065":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8311:11550":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:1817:11526":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:596:11855":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:784:9274":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5079:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:7601:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:45586:11420":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:2909:7852":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5049:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6600:22400":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2223:15211":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:2880:8055":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"24:6834:12704":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4406:12076":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:772:7962":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"24:6632:12609":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:4417:12085":{"crate_id":24,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:12177:15499":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11244:9785":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:6185:12573":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:40783:7997":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"15:306:21490":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4379:12064":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"3:234:231":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:6098:9346":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:9550:7982":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:7309:12740":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"24:7525:12743":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2872:8050":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:5062:12356":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5851:12421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:10991:11565":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:5970:12492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11367:9769":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:12172:9866":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:21816:32656":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:1752:12840":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:2776:242":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:61:16005":{"crate_id":24,"path":["libc","unix","DIR"],"kind":"enum"},"6:6082:12533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11074:9741":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6361:10635":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:1569:11900":{"crate_id":24,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2744:10501":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"11:2487:12822":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:4467:12105":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11951:9835":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:4208:15295":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7128:11687":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:40115:11320":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:9755:152":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2409:2363":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:9650:8854":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"24:4996:12323":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:4196:9262":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"0:1617:2246":{"crate_id":0,"path":["ahash","random_state","set_random_source"],"kind":"function"},"1:7907:11597":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:7670:11514":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8957:15355":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:2368:7589":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:4394:12071":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:11666:15495":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8895:11679":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5866:10573":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:21106:32450":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:6588:12585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:1044:7969":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"7:78:21380":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:7884:22407":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:4076:7817":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:2150:22523":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:5633:7637":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:1781:11525":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:1642:8178":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:21357:15227":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10278:9647":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"24:4393:12071":{"crate_id":24,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:4798:12223":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:14308:10409":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:9711:35365":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7621:22405":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"24:4804:12226":{"crate_id":24,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2925:8058":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9010:9074":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:3519:7589":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:2722:10500":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8205:22408":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:5807:12406":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"11:1145:7972":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:8659:22442":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:40554:8036":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6820:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:12086:1610":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:4319:12020":{"crate_id":24,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:4733:12191":{"crate_id":24,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6171:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:21712:15376":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:2171:15692":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:475:11784":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:11922:11247":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10771:9694":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:2992:7944":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:12088:1608":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:880:9279":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:21227:15370":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:8572:11554":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:7572:12753":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4728:12188":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:7518:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13188:10070":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:4921:10542":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11473:9565":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13567:10206":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:6924:9356":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13922:10290":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4949:12301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:4399:12073":{"crate_id":24,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11872:9816":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:9350:8873":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7462:10809":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:1140:35242":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:4308:12012":{"crate_id":24,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4884:1065":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:41488:11342":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:22837:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:1549:9262":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9660:35360":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:42556:12911":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:3722:9086":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:0:531":{"crate_id":2,"path":["core"],"kind":"module"},"16:6243:10624":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:10627:11252":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"22:294:8084":{"crate_id":22,"path":["once_cell","race","OnceRef"],"kind":"struct"},"5:261:9261":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:943:7966":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7651:10826":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:39184:215":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13202:10073":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:526:11817":{"crate_id":24,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"24:6639:12613":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9505:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:22166:9038":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:5819:12410":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:1703:11985":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5995:8927":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:12068:1628":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6696:10682":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:7025:7987":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:23416:241":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7503:10514":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2798:2513":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3763:11548":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10196:244":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:2907:10508":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:6186:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:1923:7947":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8318:12928":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:2143:11068":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46017:11440":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1570:11900":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:4500:12121":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12208:9871":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2884:8053":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"23:79:133":{"crate_id":23,"path":["getrandom","error","Error"],"kind":"struct"},"6:6622:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1290:7970":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11151:9747":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5814:12409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12071:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2547:263":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:6174:9335":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14460:10450":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6043:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40281:8025":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13274:8883":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:5982:10588":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"24:1663:11968":{"crate_id":24,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:47839:7535":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:9911:9323":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:11407:22466":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:7614:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:4708:12180":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:46465:11452":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9780:9605":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:39294:7954":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:3077:7599":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:42858:11349":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:45520:11417":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:4168:8834":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:1507:11864":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11647:11584":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10478:8877":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7554:8988":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"9:237:11349":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"14:0:2353":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:44257:12922":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:45694:11424":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:0:2356":{"crate_id":17,"path":["object"],"kind":"module"},"16:5384:22394":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6856:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:43405:11364":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:2317:7816":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:3671:9261":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6151:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:9487:231":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"24:4682:12167":{"crate_id":24,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11062:9740":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:207:7951":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:30259:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4501:12121":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"10:36:12824":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12062:9846":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6583:10657":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:10850:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13487:10144":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:7976:32428":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4721:12187":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:21491:9050":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:824:9277":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:13554:10199":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:42116:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11661:9787":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4815:12229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:8765:22457":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1762:1781":{"crate_id":1,"path":["std","collections","hash_set"],"kind":"module"},"5:7436:32237":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4934:12292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"20:179:9265":{"crate_id":20,"path":["zerocopy","wrappers","update","WriteBackOnDrop"],"kind":"struct"},"17:11316:9764":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4968:12309":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40252:8022":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:4436:7584":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6051:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:2238:7969":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:11325:9370":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:12073:1506":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:43947:11389":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:913:7963":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10316:9648":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:4487:12115":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5790:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:4021:11219":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:3234:8065":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:641:11519":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5905:10575":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:6665:9261":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"24:4479:12110":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:1067:7971":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4333:12030":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:2784:7942":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:10436:11247":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"15:394:21499":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:10126:9632":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:3044:7554":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:7776:15183":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4451:12099":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:8926:22462":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6352:8976":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:22295:32238":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10133:11694":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:2618:10496":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:3654:7634":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:43496:7604":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:39948:32239":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:822:7964":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:0:1498":{"crate_id":1,"path":["std"],"kind":"module"},"2:42621:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:4572:12159":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8839:203":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:2450:10489":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7544:10823":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:40192:8010":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:5336:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"24:6789:12680":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12911:10027":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:3232:9492":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2841:15681":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"24:4450:12099":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12024:8895":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4066:15275":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7566:11719":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14478:10456":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12711:9978":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:1537:11877":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:4350:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:2568:9341":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11687:22469":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:39520:27096":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:9921:9617":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:918:7726":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:12702:159":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4474:12107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:8239:7829":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:46065:11441":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:2894:9343":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:39153:8064":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4346:12040":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10603:9674":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:22258:32232":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:1585:8390":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7041:10732":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:45734:11426":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:6914:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7828:10837":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:46825:11467":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5752:12366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"24:1603:11921":{"crate_id":24,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:3289:7943":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14156:10349":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:1429:151":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:5844:12419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:4547:12146":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:4473:12107":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10383:9652":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:7322:7634":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:3332:7631":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:45540:11418":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:288:2493":{"crate_id":20,"path":["zerocopy","FromZeroes"],"kind":"trait"},"2:10475:11248":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8582:7816":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:41958:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4320:12020":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:515:9437":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:6454:7993":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:40304:8027":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:12066:7607":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43809:11382":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:595:11855":{"crate_id":24,"path":["libc","unix","protoent"],"kind":"struct"},"9:330:12825":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:1738:15701":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:652:9440":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10672:9684":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7391:22404":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:40761:7991":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:10114:11526":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:1484:7963":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:8716:7600":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14346:10418":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:40000:11310":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14042:10319":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:40374:8032":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:1413:7816":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:21707:15368":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:13897:10285":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3274:11540":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:43526:11245":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:10359:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:22218:32235":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2931:8059":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5743:10563":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:7600:12759":{"crate_id":24,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:41640:7634":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12685:9975":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4709:12180":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:6212:12843":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"24:6170:12562":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:40754:11233":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:10366:9650":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:7255:7992":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:41752:7816":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2499:8351":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"24:5877:12441":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:11887:11265":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:7406:30218":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:5019:12331":{"crate_id":24,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6811:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42316:7974":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:482:11789":{"crate_id":24,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6687:10681":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:41709:231":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:1051:21465":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:3219:35236":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"24:4610:12161":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:4883:1065":{"crate_id":24,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:41760:7817":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"24:4744:12195":{"crate_id":24,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:2321:10483":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:12111:7600":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10023:9603":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:7885:11595":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:14056:10326":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10370:9651":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10570:11538":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11742:9794":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8909:11567":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4753:12199":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:40272:8024":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4561:12150":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4425:12089":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:4462:10528":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:4846:12242":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:11213:9049":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8941:15356":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4774:10537":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:44464:212":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12543:9952":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"24:6001:12505":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:43694:11376":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:7452:11085":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12252:9888":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11306:8883":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11535:8885":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:6726:12640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:6826:7639":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:6741:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11098:9743":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:868:7968":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2866:8051":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:4344:10526":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:7689:11585":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7492:10818":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:42829:9060":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13966:10301":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10800:12939":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4400:12073":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:4004:7589":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6792:10707":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4978:12315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:7310:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2596:10495":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8588:11674":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:7195:7990":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:12090:1668":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:636:9456":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7067:10738":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"0:238:1804":{"crate_id":0,"path":["ahash","HashSetExt"],"kind":"trait"},"2:3038:7552":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9328:8872":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1558:11892":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:44549:7950":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:5443:11563":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"14:187:21477":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:817:7963":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:10869:29452":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:10397:9653":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:6703:12633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4461:12102":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:47497:11499":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47859:7537":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8250:11245":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:1869:8389":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:44053:11269":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14173:10356":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:2968:34752":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:7531:12744":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:4943:15322":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10139:22495":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:8367:12613":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:8825:22459":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6030:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:14316:10412":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:1444:7634":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:12724:32602":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:39208:217":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4511:12128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:599:35370":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13693:10248":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11507:22468":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:15:2096":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12422:9929":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6204:8954":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"14:40:9832":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:2172:9030":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:44245:12919":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:4948:12301":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10036:9625":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12513:9949":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:5474:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:3315:11543":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:43594:11374":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:1635:633":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:13876:10280":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:1632:11945":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11272:9761":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1521:11869":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9701:9603":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:7669:15227":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"11:483:149":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:504:9483":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10561:9670":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"18:538:8838":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"24:4510:12128":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:9207:8869":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:47575:11500":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3475:11545":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12373:9904":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"0:1552:149":{"crate_id":0,"path":["ahash","HashMap"],"kind":"type_alias"},"17:10628:9678":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:2892:8054":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:45765:11427":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8833:11676":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:21056:15227":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:12081:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:8195:10892":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:5596:12534":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:4557:10531":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12473:9941":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:6638:9354":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:1664:11968":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"24:7286:12729":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8440:11666":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"24:6702:12633":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:40322:8038":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2845:7593":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:45835:11430":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:22044:11273":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13113:10055":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10440:9657":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:2463:12834":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46141:11443":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:1304:7972":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:4641:10534":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:10009:11339":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:4137:9043":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:3797:10521":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:41624:7816":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:22150:9051":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:7571:7555":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:44104:15506":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:4378:12064":{"crate_id":24,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10962:9731":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9277:8871":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3583:7816":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:11187:11257":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:6190:9350":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:3198:29903":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11886:9817":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4296:12003":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:45632:11422":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"24:1590:11914":{"crate_id":24,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:7769:7973":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:8244:8872":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"24:6144:12547":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:41632:7817":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:21297:15227":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11191:9495":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:6100:9262":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:11871:11264":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:483:11789":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:32027:11298":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:7239:11081":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:41692:8377":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"11:389:9269":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:5975:9035":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:5017:10545":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6261:8938":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11351:9767":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"24:5863:12430":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12184:9869":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:1876:8390":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4548:12146":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6037:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:532:2503":{"crate_id":20,"path":["zerocopy","ByteSliceMut"],"kind":"trait"},"18:96:26421":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11269:156":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:9933:9619":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4960:12304":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3315:10517":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:44281:9049":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:9141:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:547:11829":{"crate_id":24,"path":["libc","unix","pollfd"],"kind":"struct"},"5:3802:7631":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"20:337:2497":{"crate_id":20,"path":["zerocopy","Ref"],"kind":"struct"},"18:582:9057":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:364:11513":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6376:22399":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:1596:11916":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7342:35357":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:21094:15369":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:48035:7547":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:6386:10638":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1579:8389":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:9994:9326":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:13802:10262":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:6797:7637":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:21379:9050":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:6571:15351":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:4774:12210":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:4463:8358":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6458:11574":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10285:13069":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:13949:10294":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13632:10241":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:7162:32022":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:629:11062":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"10:44:9006":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:7555:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"24:5843:12419":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4631:12163":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13259:10081":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"0:145:2222":{"crate_id":0,"path":["ahash","random_state","RandomSource"],"kind":"trait"},"6:6059:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:5661:10562":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:46209:11446":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:1826:183":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:46362:11450":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"9:450:21387":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:3261:8069":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40082:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6968:22402":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:7389:7960":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:7567:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11124:9745":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10494:8863":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"24:4953:12303":{"crate_id":24,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:40355:8030":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10097:9629":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5435:10551":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12997:10036":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:22357:15267":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:4835:10539":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:2428:10488":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:3206:8390":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"22:50:9262":{"crate_id":22,"path":["once_cell","imp","Guard"],"kind":"struct"},"16:6915:8984":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:40365:8031":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:10393:11245":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"24:1690:11981":{"crate_id":24,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"24:7292:12731":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:8608:7705":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:11215:9754":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:42661:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"24:4912:12277":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:49859:15378":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:3441:9493":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:39250:219":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:3032:10516":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4913:12277":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:42612:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:4862:10540":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6226:10621":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:6685:12632":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:1545:11883":{"crate_id":24,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12123:9856":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11815:9804":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:7573:7631":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:14536:10466":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10738:9693":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11348:11716":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:681:9464":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:8050:10878":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4745:12195":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4643:12164":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11761:9797":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7015:10731":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12737:9981":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3201:29790":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:2501:11533":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13890:10283":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4468:12105":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:47958:7544":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11226:9758":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:4008:15271":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:14083:10333":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:4752:12199":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:40414:8018":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14378:10433":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:39228:220":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:44249:12920":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:863:7634":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:8794:22458":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2644:10497":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4934:15321":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:7405:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:47848:7536":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11719:22470":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44520:175":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:4828:12233":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:587:11850":{"crate_id":24,"path":["libc","unix","servent"],"kind":"struct"},"2:9546:211":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:4288:11222":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:4899:12267":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:32038:11299":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:14324:10413":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43932:11384":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11488:9372":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:707:9467":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40023:15536":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"24:4967:12309":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:7261:9281":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7102:22403":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:3596:7817":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5030:12336":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:5963:10581":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:22241:11277":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:2574:10494":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:3041:7553":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2897:8056":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5935:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4792:12221":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:2888:8052":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6720:12638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:1672:1155":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:47920:7542":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7436:8935":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:44090:11396":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:5627:8014":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:22606:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"0:235:1798":{"crate_id":0,"path":["ahash","HashMapExt"],"kind":"trait"},"1:4016:15272":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12765:9986":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:22870:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:6222:9078":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:45610:11421":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:1635:9271":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12437:9933":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:2964:12831":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43576:11373":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:3655:9507":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:1501:11861":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13792:10261":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11173:22589":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10916:9727":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:4211:8357":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:45995:11439":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:8072:10879":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:39964:11307":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:7715:9365":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5798:8948":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8422:8078":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:41841:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:4977:12315":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:7560:12751":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2498:15227":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:42876:9062":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:8263:11647":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6531:10654":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6742:10694":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"24:1702:11985":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:6725:12640":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2361:199":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:693:7634":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:119:16059":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"24:1717:11992":{"crate_id":24,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7513:10821":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:2472:10490":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12074:9849":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:39927:11303":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:5944:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11023:9734":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:10513:11249":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:4295:12003":{"crate_id":24,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:2961:7953":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:8713:22456":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"24:4988:12321":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:12999:7628":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13816:10263":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"24:554:11832":{"crate_id":24,"path":["libc","unix","winsize"],"kind":"struct"},"1:9201:11690":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:6456:10644":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:840:7816":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46187:11445":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:7606:9359":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13851:10272":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4759:12201":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:40243:8013":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7534:10515":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5056:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:8594:22444":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:3737:11067":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:41682:7704":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6849:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:6910:8020":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:1986:201":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:10982:11045":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:580:11845":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:3214:8388":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11851:9376":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"11:1092:10988":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"14:215:10982":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5897:12443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10420:9545":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13244:10077":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12111:9855":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:1561:7634":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7782:10829":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:10193:11695":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:4689:12168":{"crate_id":24,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13778:10258":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:1778:7631":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13215:10074":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:501:11797":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5915:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46111:11442":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:766:26431":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:434:9482":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:40016:11311":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:3600:10519":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:43424:11366":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:6277:9351":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:6494:9080":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:1649:11957":{"crate_id":24,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:7937:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:40129:15198":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"21:0:1773":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"1:8996:11681":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:7478:9295":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13085:10049":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:5789:12393":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7897:9085":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"9:52:9007":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:40049:15537":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:4283:11221":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:8686:22455":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:1568:7631":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"20:292:2494":{"crate_id":20,"path":["zerocopy","FromBytes"],"kind":"trait"},"17:13981:10303":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:39106:7945":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:6621:12604":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:7053:9357":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"22:216:8835":{"crate_id":22,"path":["once_cell","sync","Lazy"],"kind":"struct"},"24:1513:11867":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10186:9638":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"24:5832:12411":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:4527:10530":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:8174:7990":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:9747:148":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"24:5981:12497":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12810:9991":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:47637:11501":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:40792:7999":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:7554:12750":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"24:1638:11949":{"crate_id":24,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8036:9084":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:4497:15297":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40008:11218":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:4986:10544":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"9:426:21389":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:9752:9604":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:22182:9052":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11547:9784":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:10641:11253":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"15:288:21489":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7920:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11381:9772":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:10265:9646":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:358:11512":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:3326:7946":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5322:10549":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10588:9672":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:4488:12115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2504:10491":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:4384:12066":{"crate_id":24,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3514:7980":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:4837:12236":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:30203:2514":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:6467:7589":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:7566:12752":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4769:12207":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9102:8866":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:21365:15365":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:44300:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:5999:9351":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:4309:12012":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6721:22401":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:660:9457":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:3049:21537":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:9790:1795":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10980:8854":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"19:0:1096":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:10830:9085":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4823:12232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4385:12066":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40262:8023":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9790:35366":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:20905:32865":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:42639:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:43253:11354":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:46589:11463":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4418:12085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:43910:15505":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:9051:11686":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10726:9692":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:20903:32863":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7708:8995":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5528:11565":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:2368:14333":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13758:8903":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"20:560:2520":{"crate_id":20,"path":["zerocopy","wrappers","Unalign"],"kind":"struct"},"1:1590:8391":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:731:7727":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11910:9831":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:44138:11405":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4838:12236":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7597:35353":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:5830:10566":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4731:15297":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6485:8978":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4655:12165":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"24:474:11784":{"crate_id":24,"path":["libc","unix","group"],"kind":"struct"},"11:1072:35338":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9896:22478":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:4411:11552":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9512:11595":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:5833:12411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:21489:15371":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:32045:2497":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"24:4852:12243":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:6385:180":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10292:8854":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:46889:11469":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:6325:225":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12945:10030":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:9548:7981":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11417:12942":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"22:374:8087":{"crate_id":22,"path":["once_cell","race","OnceBool"],"kind":"struct"},"17:12136:9857":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"24:6719:12638":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:39168:218":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:4987:9262":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10520:9667":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:6734:12643":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:6150:12548":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:40404:8034":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1604:11921":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:5896:12443":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:8879:9071":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:10818:11710":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:8269:11649":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:6206:8016":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:9024:371":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"1:4665:12626":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:4801:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:796:7631":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:40234:8012":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2339:8912":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43322:11358":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:25818:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:9184:11689":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3195:29202":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:1505:7727":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4653:15273":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7293:215":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:4891:12262":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:9218:32430":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:21194:15375":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13055:10046":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:7287:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11281:8882":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"14:160:10977":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:46284:11448":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12671:9699":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:6640:12613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:759:7961":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10376:30320":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10714:9691":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7090:10740":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14401:10434":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3234:11538":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:30237:2515":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:46385:11451":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:3276:11541":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6041:22398":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:4667:12628":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:2670:11089":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:12066:999":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:2359:10485":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:6009:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1525:21466":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:1275:7971":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:4768:15283":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:43843:11310":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9985:9623":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:3523:30284":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5994:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:6983:9308":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:2670:10498":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:7476:139":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:45716:11425":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14335:10417":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:41777:200":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10112:9630":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:588:11850":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:678:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7694:8993":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:5993:12504":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5363:10550":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:11154:11256":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:3180:8389":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"20:329:2496":{"crate_id":20,"path":["zerocopy","Unaligned"],"kind":"trait"},"17:2178:9488":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9852:22477":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12790:9988":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:9106:9090":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:22324:12844":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:9003:22465":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:12944:147":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:680:7817":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"24:1911:17406":{"crate_id":24,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12598:9961":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:5421:9262":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"7:0:1658":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11250:12941":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:1475:7962":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:42584:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12698:9976":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7251:7589":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:43961:11392":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:614:35371":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:1709:11988":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:5084:12362":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:7590:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:5904:12448":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"24:5078:12359":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2836:7941":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10750:8879":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:9488:7980":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:3764:10520":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"24:6810:12694":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:558:11515":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"0:0:1884":{"crate_id":0,"path":["ahash"],"kind":"module"},"2:43414:11365":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:11228:15489":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:9538:7975":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:955:7968":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"12:0:2352":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:1673:11974":{"crate_id":24,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:1862:8388":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:638:11517":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:5569:8026":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:505:9283":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:30331:32244":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:6568:11575":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12830:9992":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:1882:8391":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:40333:8029":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:3698:15265":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10646:9680":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10197:9640":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6268:35358":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:2209:9491":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"23:138:180":{"crate_id":23,"path":["getrandom","use_file","Mutex"],"kind":"struct"},"5:5860:7589":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:10616:9675":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12959:10032":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13723:10254":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"24:4432:12091":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:9506:137":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:40221:8021":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6883:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:4942:12298":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:7625:9361":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9137:8867":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"24:5751:12366":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7489:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:4728:15323":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:4236:7816":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2173:15693":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:2548:10493":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:6587:12585":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7961:9086":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"20:529:2502":{"crate_id":20,"path":["zerocopy","ByteSlice"],"kind":"trait"},"17:13286:10084":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4022:15273":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:9051:22443":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6844:10709":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"11:2467:12819":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6960:10717":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5049:10546":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:755:9477":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:563:11837":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:536:8925":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10059:9626":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10165:22496":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:582:9484":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14448:10448":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:1681:11975":{"crate_id":24,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:40768:7993":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:6662:12631":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13914:10288":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:47039:11470":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:5612:10511":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:2161:634":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12724:9979":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:30807:200":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7613:10825":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:21463:15362":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:6855:12716":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:4395:9262":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6893:8939":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:43061:11353":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:4949:10543":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:2783:1844":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:7589:12758":{"crate_id":24,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:21108:15692":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:3565:9494":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:42821:2485":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:2864:10506":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:1576:11902":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3888:10523":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:5813:12409":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12225:9879":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:2935:8060":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11024:9071":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10840:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"24:4522:12134":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:7271:35240":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"24:4758:12201":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14068:10329":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:40212:8011":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11573:8886":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:45854:11431":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:22969:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:2058:7969":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5905:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4989:12321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:7694:11587":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"24:5914:12455":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:9028:29293":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:2037:9086":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:39333:2202":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:5371:15481":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4529:12137":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5982:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"14:31:10977":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:7265:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8329:11654":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"22:0:1885":{"crate_id":22,"path":["once_cell"],"kind":"module"},"2:45872:11432":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:4539:12141":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:42194:7549":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:1734:11997":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"7:31:21373":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:30273:32243":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:11423:12943":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13135:10066":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:4849:15282":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2394:15223":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:12120:9467":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3570:177":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:45564:11419":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:9131:181":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:7953:11600":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:727:8845":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"18:0:2357":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:7561:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:11636:15741":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8490:11349":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:1541:10990":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2787:249":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"24:7264:12728":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2786:250":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41501:11550":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:7532:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10788:22565":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:8978:22464":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:5808:9072":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:4372:12063":{"crate_id":24,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7285:7634":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:7743:15161":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:47943:7543":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:6083:21507":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:5375:15482":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11295:9762":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9521:9600":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47879:7539":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5760:22396":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:40568:8037":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11390:11581":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:666:7816":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:11654:11584":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:5969:12492":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47868:7538":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6425:10642":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14499:10459":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47973:7545":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:11848:11263":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:357:9267":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:568:11840":{"crate_id":24,"path":["libc","unix","sigval"],"kind":"struct"},"1:9021:11682":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2793:252":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:4179:15292":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"11:2286:7971":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:6189:10619":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4847:12242":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:44277:12927":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:22233:11276":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2219:9309":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13024:10040":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:1983:202":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:7768:8997":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:922:7727":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11071:9367":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:2850:7854":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:12079:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:40290:11324":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:1779:11524":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:488:11792":{"crate_id":24,"path":["libc","unix","timeval"],"kind":"struct"},"1:926:7964":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:39978:11308":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:9959:9621":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9912:9615":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6633:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5013:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:39988:11309":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:4727:12188":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:609:9451":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4157:32021":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"20:0:1886":{"crate_id":20,"path":["zerocopy"],"kind":"module"},"17:11111:9744":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:1528:11872":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6415:10641":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:12074:1593":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:5012:12328":{"crate_id":24,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14090:10334":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:6882:12722":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:21359:15363":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1710:11988":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:1764:657":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:4362:2497":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:2216:11532":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:8345:11655":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:39326:8066":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:736:26430":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:43630:11252":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:8895:22461":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6753:10695":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"14:7:10977":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:4187:15293":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8389:11553":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:4417:10527":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:4745:10536":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"15:327:9001":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"22:174:8834":{"crate_id":22,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"24:1500:11861":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:43076:12918":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:1075:9485":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"9:177:9021":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"23:0:1736":{"crate_id":23,"path":["getrandom"],"kind":"module"},"5:3185:35241":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:14134:10344":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:5712:8943":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:45817:11429":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:4663:12624":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:20920:32868":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:44446:224":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4070:15276":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13676:10246":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:5850:12421":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:39067:8070":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"20:333:1575":{"crate_id":20,"path":["zerocopy","transmute"],"kind":"macro"},"5:7514:7591":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:41997:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:9544:7984":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2604:11534":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:495:11795":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:5816:8953":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:949:7967":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:1674:9261":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7582:8990":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:5853:9073":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14145:10348":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12496:9946":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:2074:7970":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10012:8854":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:1631:11945":{"crate_id":24,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:22804:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:400:9480":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7054:10735":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10447:8709":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43392:11363":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7284:7703":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:9233:12933":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:6735:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2904:7851":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:5268:207":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:9607:9602":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:14296:10406":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10575:9671":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"0:128:1794":{"crate_id":0,"path":["ahash","random_state"],"kind":"module"},"1:6015:225":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"24:4405:12076":{"crate_id":24,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:2406:10487":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:8953:22463":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9564:9601":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:500:11797":{"crate_id":24,"path":["libc","unix","rlimit"],"kind":"struct"},"17:13228:10075":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:44537:11415":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:590:9444":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:20890:32658":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:6944:35352":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12621:9966":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:21280:15366":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:7544:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"14:202:7588":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:7422:11082":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8851:9070":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:8281:10899":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:22206:11275":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6879:10713":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:5696:22395":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:1495:11859":{"crate_id":24,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:21313:15361":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:45965:11438":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:8097:10882":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:43978:11393":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:907:7631":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:13989:10304":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"24:6029:12518":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:1557:7816":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:43379:8010":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:6686:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"23:146:9261":{"crate_id":23,"path":["getrandom","use_file","DropGuard"],"kind":"struct"},"5:7231:7634":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:699:8843":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:2914:7853":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:40087:11319":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:42330:7983":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:31991:8350":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:41919:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:1575:11902":{"crate_id":24,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14001:10310":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:40777:7995":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5782:12391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"14:221:10984":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11845:9808":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:43730:11377":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:7555:9484":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13174:10069":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:9071:11687":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6613:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8887:7816":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:10227:9644":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"24:4591:12160":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13667:10242":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:21241:15692":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13906:10286":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11639:9495":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12305:9902":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4859:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3760:11547":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:2855:8049":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:527:11817":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4853:12243":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"24:5934:12471":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:7945:11599":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11342:9081":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6279:8969":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:42596:10856":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:1687:151":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:7480:160":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"24:494:11795":{"crate_id":24,"path":["libc","unix","timespec"],"kind":"struct"},"6:6663:12631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2929:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"22:82:8834":{"crate_id":22,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"2:7443:8007":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10685:9687":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:6580:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"24:4866:12251":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5648:10557":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:46779:11466":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"24:4493:12118":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:43313:11356":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:40544:8035":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:573:11842":{"crate_id":24,"path":["libc","unix","itimerval"],"kind":"struct"},"2:22639:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:2012:9487":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:8134:10887":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:4761:718":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:10468:11676":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5403:8849":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10468:8876":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:7935:8005":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:324:12816":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:9753:148":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:14420:10439":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:41295:165":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"18:690:9466":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:10135:11693":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"18:624:35369":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4786:12218":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7474:10810":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:1010:7970":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:14118:10341":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:47245:11497":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:3232:10482":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:12049:29457":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6499:8979":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:1912:17406":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:4497:10529":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6818:10708":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2351:7634":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:14013:10311":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:47699:11502":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:3461:10518":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:574:9440":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:43818:11266":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:521:26432":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13685:10247":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13611:10236":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:40342:8015":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2644:11535":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5020:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:12070:1116":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:22279:32230":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:42323:7975":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:6050:12524":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12086:9850":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4669:12166":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:3073:7598":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:10805:11596":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:261:9479":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:41352:15264":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:9823:22476":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11405:11583":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:2245:9033":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11628:9093":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10616:9365":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:41802:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7465:11087":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:7538:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:9015:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6835:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41615:168":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9085:29460":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:4620:12162":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8237:8035":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10507:9666":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:2367:206":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11617:9785":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"8:0:1773":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12576:9960":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10084:9628":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:3255:8067":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10661:9683":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:22331:11289":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:22097:11274":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:7792:11594":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5939:8922":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2933:21535":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:2927:231":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:12126:15493":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11088:9369":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"24:4345:12040":{"crate_id":24,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:9136:239":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:4889:10541":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6332:8972":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:11006:29462":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:123:16060":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12465:9939":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:5409:11558":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:113:26422":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:14434:10441":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1104:35244":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:5781:11572":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"24:1696:11984":{"crate_id":24,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13838:10267":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:12083:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:42868:9061":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:548:148":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:9488:35361":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:9540:7974":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"11:423:35337":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:5327:9261":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4867:12251":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12067:450":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"11:344:35332":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:7579:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11511:11547":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"0:1555:151":{"crate_id":0,"path":["ahash","HashSet"],"kind":"type_alias"},"16:7360:35355":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"20:528:35411":{"crate_id":20,"path":["zerocopy","sealed","ByteSliceSealed"],"kind":"trait"},"2:12907:9335":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:6028:8039":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14514:10460":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:40172:11321":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:4770:15285":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:531:9441":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4573:12159":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13575:10207":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:6816:7638":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2696:10499":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7677:215":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"24:4933:12292":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:21482:15227":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8928:11680":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:8903:7634":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"10:0:2350":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13298:10091":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:44273:12926":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"11:298:12813":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2943:8062":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4700:12175":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:7489:7556":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:12072:1474":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:4597:15314":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:12065:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:11811:11260":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"24:5891:12442":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3401:7997":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:2394:7631":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"24:4785:12218":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:42075:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8194:11546":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:43834:11218":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:2303:10994":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:654:16416":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12452:9937":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:6758:12654":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3958:15269":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3313:11542":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"9:357:21402":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:416:179":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:10586:11251":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11261:9760":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:12131:15492":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:21926:15227":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:43342:11360":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:39921:11218":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:44158:7601":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:12689:143":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:589:15155":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13101:10053":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:992:7969":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:6958:9305":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:7764:1790":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9945:8874":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:3539:15244":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4775:12210":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4621:12162":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:41465:32242":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12098:9853":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:9886:9614":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2544:138":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:1494:7726":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:4613:10533":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43648:11253":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47821:11505":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:860:7967":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:14522:10463":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:574:11842":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6545:10656":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11000:9733":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:1127:10989":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:8606:7707":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:841:7966":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7792:22406":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:542:11826":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:12106:7610":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:14076:10332":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:47996:7546":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"24:6740:12644":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:3240:8391":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:5774:11569":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4954:12303":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4877:12257":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"24:6022:12517":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4997:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7439:8008":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:12082:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:569:11840":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:22903:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:7939:8006":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:4460:12102":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:1931:703":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:3830:10522":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:4068:7940":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3244:259":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:1557:11892":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9867:9612":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"9:486:21386":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:687:1789":{"crate_id":1,"path":["std","collections"],"kind":"module"},"5:1120:34950":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:3358:15252":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:7537:12745":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:32052:11300":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:1674:11974":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:10511:9364":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:9517:9363":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"11:1842:7816":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8227:8021":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:40810:8003":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11572:11549":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:30835:9057":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5892:12442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:2085:7971":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:4654:12165":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"24:4720:12187":{"crate_id":24,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:7573:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:21804:8765":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:1718:11992":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1682:11975":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:4416:2512":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:22672:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:4034:9261":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:8167:10891":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:2962:34949":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12484:9944":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4805:12226":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:41649:7703":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"24:4814:12229":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2526:10492":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"13:226:9005":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:0:2355":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:4033:11220":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:10655:11254":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:4699:12175":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:579:11845":{"crate_id":24,"path":["libc","unix","tms"],"kind":"struct"},"2:41543:11240":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:5156:208":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6401:8977":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:2423:21461":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:6513:9261":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4373:12063":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:5790:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41880:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:506:11800":{"crate_id":24,"path":["libc","unix","rusage"],"kind":"struct"},"2:39272:221":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:3249:140":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:21058:15367":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"20:80:9434":{"crate_id":20,"path":["zerocopy","util","ptr","Ptr"],"kind":"struct"},"1:7890:11596":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:1842:11528":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:4943:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:884:7962":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:1428:7817":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:5660:9351":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4772:15286":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2325:205":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5808:12406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:47783:11504":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13826:10264":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:276:2201":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11235:9759":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"13:110:35339":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:42846:152":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:14024:10315":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:533:11820":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:7477:12741":{"crate_id":24,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:29988:15266":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:7624:12765":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11082:9368":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:8181:8999":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13973:10302":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:10795:12937":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"11:427:35334":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7293:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:43484:11370":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:122:16060":{"crate_id":24,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4056:15274":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"24:4668:12166":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12080:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4922:12283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:9795:1859":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:7758:15162":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5878:12441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"22:333:2217":{"crate_id":22,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"17:12658:9970":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:45919:11433":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:8865:11677":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:3065:9502":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"24:4921:12283":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"24:4440:12093":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8146:11639":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:11375:11580":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"0:1621:1790":{"crate_id":0,"path":["ahash","random_state","RandomState"],"kind":"struct"},"24:4560:12150":{"crate_id":24,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12043:8902":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:41524:11238":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:35:7630":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:30243:8180":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44337:15781":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"24:5781:12391":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2384:15218":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:7932:7592":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:2939:8061":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:646:15158":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2551:262":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6017:22397":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"24:6081:12533":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11788:9798":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:41335:8769":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:3173:7816":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:5459:11564":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:4279:226":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:4848:222":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:1466:7961":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4992:8074":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:43825:11311":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11201:9750":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:4078:15277":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:4352:9313":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1650:11957":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:4554:12148":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12934:10028":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:39936:11304":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44253:12921":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6467:10645":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"9:393:21388":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1514:11867":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:40068:11318":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:6848:12713":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:6008:12506":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:1761:8782":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2366:12842":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:4339:8705":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:1562:10991":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"24:6042:12522":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1496:11859":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:3865:11549":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7330:7634":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5574:8942":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:14100:10337":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:829:7965":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"11:2461:12818":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:39347:11302":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10456:9662":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:6624:13296":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:2382:15217":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:7627:173":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"15:0:2354":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:1697:11984":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:4407:9314":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:43080:11244":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:10669:11255":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:122:8620":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2766:10502":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:7578:12754":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42036:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8206:15226":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10878:29463":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:1850:7589":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:6864:12719":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:671:9463":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:11179:9070":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:4640:15531":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11327:9765":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:8154:10888":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12876:10016":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10240:8874":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10949:9730":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:14126:10343":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:9031:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11358:22591":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:42155:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13422:10093":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:897:7816":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1840:11527":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:7222:7629":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6092:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:491:9439":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:45664:11423":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:3023:2516":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44261:12923":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:43676:11375":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4806:10538":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:21458:15227":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:40162:9315":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46163:11444":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10573:11540":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10410:9654":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:2969:21536":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10214:9643":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6002:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:5727:8946":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10637:9679":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:4332:12030":{"crate_id":24,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:44026:11395":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7269:35356":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:593:2504":{"crate_id":20,"path":["zerocopy","_CastType"],"kind":"enum"},"2:9542:7983":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:3429:9262":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:14110:10340":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:12332:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4480:12110":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:44456:232":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:5599:15339":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:9146:156":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5820:12410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12267:9894":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"18:644:9440":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:1536:11877":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4441:12093":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:4428:9290":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:21928:15364":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1259:7969":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:6586:7634":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:9617:35364":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:3949:9262":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:6974:32278":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"20:322:2495":{"crate_id":20,"path":["zerocopy","AsBytes"],"kind":"trait"},"1:8257:11379":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:42337:7984":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"9:507:11048":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:1895:11529":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11586:8888":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:9455:35363":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12154:9865":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:1076:7972":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"24:4959:12304":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14221:10393":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:12896:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11971:9845":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:9242:8870":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13148:10067":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:9165:11579":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"24:4642:12164":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12293:9899":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7318:10771":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:62:16005":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"11:785:7589":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:20862:9057":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:32139:9058":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6346:8974":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:7377:7602":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4829:12233":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:43544:11250":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:10186:15227":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44499:11410":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:12016:11722":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:5423:11562":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:10368:7817":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13451:10113":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:4494:12118":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"9:0:2349":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:2260:7970":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:44562:11416":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:22345:11290":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"14:165:21470":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21150:15374":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9972:9622":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12645:9967":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1691:11981":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"24:7519:12742":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4799:12223":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:43800:11381":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11490:9782":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10340:9649":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"24:1595:11916":{"crate_id":24,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:6334:15452":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"24:7543:12746":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:6217:9321":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:3274:32655":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:41701:210":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:20922:32866":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:40802:8001":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:6865:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:2541:157":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:44269:12925":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:6145:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12237:9882":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:3994:15270":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:7520:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5073:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6929:8985":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:1184:9486":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:12087:1611":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:12092:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11640:30603":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:6156:10616":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:2473:12820":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7568:8989":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12085:1609":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:4900:12267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2380:10486":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:2334:7817":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:507:11800":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:47745:11503":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:12078:692":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:40042:11314":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10903:9726":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:6513:10646":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"24:532:11820":{"crate_id":24,"path":["libc","unix","hostent"],"kind":"struct"},"1:11232:11579":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:13040:10042":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8973:15357":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:4519:15298":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:8848:22460":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7722:8996":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"24:6036:12519":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5653:225":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5673:10510":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"24:5029:12336":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:2284:21508":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:7301:9037":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11205:29455":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13546:10196":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:43780:11379":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:5048:12350":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"3:0:475":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:2788:10503":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:2305:21534":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:932:7965":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:5509:9262":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:3964:15268":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:0:2351":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:2972:34753":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:9036:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4826:9344":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:9762:35359":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:46855:11468":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:4528:12137":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:32031:7829":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:9223:9046":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4592:12160":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12196:9870":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6023:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12280:9898":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"24:6819:12697":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:1036:7971":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:8183:9087":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5063:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:43790:11380":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:5121:10548":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:489:11792":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12554:9953":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:4822:12232":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1639:11949":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11337:22590":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:256:9478":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:6603:12597":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9172:8868":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6569:8981":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4683:12167":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:8607:7706":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:897:7589":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"24:4768:12207":{"crate_id":24,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2810:10504":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:149:8920":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9063:9088":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:42837:2484":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:44507:11412":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:1013:9261":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"24:0:877":{"crate_id":24,"path":["libc"],"kind":"module"},"11:1855:7631":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11934:9832":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:8363:11657":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:43434:11367":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8323:15296":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:5667:11566":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:7011:29603":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:30437:32231":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11991:8889":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:4719:10535":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:12038:15163":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:2051:11067":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:14282:10400":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7006:10728":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12750:9983":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:9086:8850":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:4858:12246":{"crate_id":24,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:43304:11355":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:1546:11883":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13162:10068":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11448:22467":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:41564:198":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"11:2494:7602":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:45795:11428":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10534:9668":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11048:9736":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"11:2479:35331":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2948:8063":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:9534:116":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:6839:15359":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4611:12161":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:1924:15194":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"11:703:7726":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:22705:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:4690:12168":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:0:2348":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6560:8980":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"24:1520:11869":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:507:9440":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:2860:8048":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5088:10547":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"22:368:8086":{"crate_id":22,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"1:622:11516":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"24:1527:11872":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2833:7550":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:3457:11650":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:2692:12837":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3532:15225":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5864:12430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6318:10634":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13071:10047":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:12091:1215":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:7478:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10547:9669":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6790:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10576:11542":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:44325:11407":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"22:361:8834":{"crate_id":22,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"2:43332:11359":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:101:12812":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:47905:7541":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:41381:9059":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"24:4424:12089":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12778:9987":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"24:1506:11864":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12888:10018":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:40313:8028":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:20875:32658":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:11551:11548":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:46543:11462":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8513:11669":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:41768:7634":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4523:12134":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:7613:12763":{"crate_id":24,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9070:8849":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:40099:32237":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:47387:11498":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5085:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12970:10033":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1564:7589":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:564:8840":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46233:11447":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:10860:11546":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:1760:1780":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"1:12077:690":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:653:16416":{"crate_id":24,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:13710:10249":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:80:26420":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9531:35362":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:5419:8850":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:555:11832":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:2225:35312":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"24:4791:12221":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9445:9599":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:4:1079":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13739:10257":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:2881:10507":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:7623:12765":{"crate_id":24,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:46701:11465":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:47894:7540":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:12776:11271":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7880:8781":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:6809:8009":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"24:5055:12353":{"crate_id":24,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:2919:8057":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:2582:9326":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:2165:8709":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:1591:11914":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11710:8883":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10776:11704":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:4195:15294":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8530:15334":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:541:11826":{"crate_id":24,"path":["libc","unix","iovec"],"kind":"struct"},"17:11162:9748":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:548:11829":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12531:9950":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:4585:10532":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:6672:238":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:42566:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:10548:11250":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:43470:7605":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7660:10827":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:4876:12257":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:7796:11298":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:14269:10394":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:9977:9325":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"}},"external_crates":{"23":{"name":"getrandom","html_root_url":"https://docs.rs/getrandom/0.2.10/"},"20":{"name":"zerocopy","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"once_cell","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"libc","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}