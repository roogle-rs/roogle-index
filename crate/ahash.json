{"root":"0:0:1908","crate_version":"0.8.6","includes_private":false,"index":{"0:162:2307":{"id":"0:162:2307","crate_id":0,"name":"with_seed","span":{"filename":"src/random_state.rs","begin":[294,4],"end":[297,5]},"visibility":"public","docs":"Build a `RandomState` from a single key. The provided key does not need to be of high quality,\nbut all `RandomState`s created from the same key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nThis allows for explicitly setting the seed to be used.\n\nNote: This method does not require the provided seed to be strong.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:35049":{"id":"2:12910:35049","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12860:30422":{"id":"2:12860:30422","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638","str::rsplitn":"2:12863:30424"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44007:11405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1373":{"id":"0:1373","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[298,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1377:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1573":{"id":"0:1573","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1576:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12814:30390":{"id":"2:12814:30390","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1514:1552":{"id":"0:1514:1552","crate_id":0,"name":"sub","span":{"filename":"src/hash_set.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2722-0:1621:1814":{"id":"b:2:2722-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:7775"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239:1035":{"id":"0:239:1035","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[167,4],"end":[167,21]},"visibility":"default","docs":"Constructs a new HashSet","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12827:14913":{"id":"2:12827:14913","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44195:11419","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2112":{"id":"0:66:2112","crate_id":0,"name":"write_u8","span":{"filename":"src/fallback_hash.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8978:7739-0:1286:1803":{"id":"a:2:8978:7739-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12866:30426":{"id":"2:12866:30426","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8977:7740-0:1568:1807":{"id":"a:2:8977:7740-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8977:7740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8977:7740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8977:7740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:171:1864":{"id":"0:171:1864","crate_id":0,"name":"build_hasher","span":{"filename":"src/random_state.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":"Constructs a new [AHasher] with keys based on this [RandomState] object.\nThis means that two different [RandomState]s will will generate\n[AHasher]s that will return different hashcodes, but [Hasher]s created from the same [BuildHasher]\nwill generate the same hashes for the same input data.\n\n # Examples\n```\n        use ahash::{AHasher, RandomState};\n        use std::hash::{Hasher, BuildHasher};\n    \n        let build_hasher = RandomState::new();\n        let mut hasher_1 = build_hasher.build_hasher();\n        let mut hasher_2 = build_hasher.build_hasher();\n    \n        hasher_1.write_u32(1234);\n        hasher_2.write_u32(1234);\n    \n        assert_eq!(hasher_1.finish(), hasher_2.finish());\n    \n        let other_build_hasher = RandomState::new();\n        let mut different_hasher = other_build_hasher.build_hasher();\n        different_hasher.write_u32(1234);\n        assert_ne!(different_hasher.finish(), hasher_1.finish());\n```\n    \n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap","links":{"RandomState":"0:1621:1814","AHasher":"0:1286:1803","std::hash::BuildHasher":"2:10186:1819","std::hash::Hasher":"2:10151:153"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12808:7788":{"id":"2:12808:7788","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42007:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1326:743":{"id":"0:1326:743","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashMap;\n\nlet map1 = AHashMap::from([(1, 2), (3, 4)]);\nlet map2: AHashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1294:454":{"id":"0:1294:454","crate_id":0,"name":"clone","span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1557:1806":{"id":"0:1557:1806","crate_id":0,"name":"AHashMap","span":{"filename":"src/hash_map.rs","begin":[21,0],"end":[21,68]},"visibility":"public","docs":"A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"crate::RandomState":"0:1621:1814","std::collections::HashMap":"1:723:150"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1332","0:1337","0:1343","a:2:2988:7581-0:1557:1806","a:2:8978:7739-0:1557:1806","a:2:2948:253-0:1557:1806","a:2:2931:243-0:1557:1806","b:2:2422-0:1557:1806","b:2:2419-0:1557:1806","b:2:2722-0:1557:1806","b:2:2726-0:1557:1806","b:2:2737-0:1557:1806","b:2:3565-0:1557:1806","b:2:2732-0:1557:1806","b:5:687-0:1557:1806","0:1317","0:1422","0:1378","0:1321","0:1369","0:1407","0:1399","0:1394","0:1328","0:1389","0:1563","0:1364","0:1358","0:1382","0:1373","0:1428","0:1435","0:1415"]}}},"0:1505":{"id":"0:1505","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[170,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"2:3069:7886","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1508:205","0:1509:397"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1413:7662":{"id":"0:1413:7662","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[370,4],"end":[370,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:849:7850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:1362:255":{"id":"0:1362:255","crate_id":0,"name":"Target","span":{"filename":"src/hash_map.rs","begin":[279,4],"end":[279,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashSetExt","id":"0:238:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:250:1035","0:251:1825"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1351:7800":{"id":"0:1351:7800","crate_id":0,"name":"get_mut","span":{"filename":"src/hash_map.rs","begin":[154,4],"end":[160,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n```","links":{"`Eq`":"2:2487:131","`Hash`":"2:10143:149"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2117":{"id":"0:71:2117","crate_id":0,"name":"write_usize","span":{"filename":"src/fallback_hash.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"32\",\ntarget_pointer_width = \"16\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8978:7739-0:1621:1814":{"id":"a:2:8978:7739-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1478:1833":{"id":"0:1478:1833","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_set.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1495":{"id":"0:1495","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[106,0],"end":[136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:3064:7885","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1498:205","0:1499:394"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1378":{"id":"0:1378","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[309,0],"end":[315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12878:35038":{"id":"2:12878:35038","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12492:7638","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::rmatch_indices":"2:12881:35039"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44053:11528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:7581-0:1568:1807":{"id":"a:2:2988:7581-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8978:7739-0:1568:1807":{"id":"a:2:8978:7739-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1291":{"id":"0:1291","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1292:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1349:7795":{"id":"0:1349:7795","crate_id":0,"name":"get_key_value","span":{"filename":"src/hash_map.rs","begin":[127,4],"end":[133,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{"`Eq`":"2:2487:131","`Hash`":"2:10143:149"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1387:205":{"id":"0:1387:205","crate_id":0,"name":"Output","span":{"filename":"src/hash_map.rs","begin":[323,4],"end":[323,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"0:1428":{"id":"0:1428","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[395,0],"end":[405,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:2943:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:2943:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"2:7855:7584","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1433:7847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1407":{"id":"0:1407","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[368,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1412:170","0:1413:7662","0:1414:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12901:30428":{"id":"2:12901:30428","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:1035":{"id":"0:245:1035","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:339":{"id":"2:12806:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12807:30391","`u8`":"1:12049:1639"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1469:7775":{"id":"0:1469:7775","crate_id":0,"name":"into","span":{"filename":"src/hash_set.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1458":{"id":"0:1458","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[19,0],"end":[23,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1460:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:251:1825":{"id":"0:251:1825","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[195,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:8034":{"id":"5:5553:8034","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:7987":{"id":"5:689:7987","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:164:2328":{"id":"0:164:2328","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[357,4],"end":[363,5]},"visibility":"public","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:10144:780","`Hasher`":"2:10151:153","`Hash`":"2:10143:149"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1336:1825":{"id":"0:1336:1825","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_map.rs","begin":[62,4],"end":[64,5]},"visibility":"public","docs":"This crates a hashmap with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1621:1814":{"id":"0:1621:1814","crate_id":0,"name":"RandomState","span":{"filename":"src/random_state.rs","begin":[219,0],"end":[224,1]},"visibility":"public","docs":"Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create\n[AHasher]s in order to hash the keys of the map. See `build_hasher` below.\n\n[build_hasher]: ahash::\n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap\n\nThere are multiple constructors each is documented in more detail below:\n\n| Constructor   | Dynamically random? | Seed |\n|---------------|---------------------|------|\n|`new`          | Each instance unique|_[RandomSource]_|\n|`generate_with`| Each instance unique|`u64` x 4 + [RandomSource]|\n|`with_seed`    | Fixed per process   |`u64` + static random number|\n|`with_seeds`   | Fixed               |`u64` x 4|\n","links":{"RandomSource":"0:145:2246","AHasher":"0:1286:1803","std::hash::Hasher":"2:10151:153","std::collections::HashMap":"1:723:150"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:2:2988:7581-0:1621:1814","a:2:8978:7739-0:1621:1814","a:2:2948:253-0:1621:1814","a:2:8977:7740-0:1621:1814","a:2:2931:243-0:1621:1814","b:2:2422-0:1621:1814","b:2:2419-0:1621:1814","b:2:2722-0:1621:1814","b:2:2726-0:1621:1814","b:2:2737-0:1621:1814","b:2:3565-0:1621:1814","b:2:2732-0:1621:1814","b:5:687-0:1621:1814","0:1626","0:167","0:152","0:169"]}}},"2:12818:2042":{"id":"2:12818:2042","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12819:30410"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:30281":{"id":"2:12915:30281","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2722-0:1557:1806":{"id":"b:2:2722-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2725:7775"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240:1825":{"id":"0:240:1825","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[169,4],"end":[169,46]},"visibility":"default","docs":"Constructs a new HashSet with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12890:35043":{"id":"2:12890:35043","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":"Constructs a new [AHasher] with fixed keys.\nIf `std` is enabled these will be generated upon first invocation.\nOtherwise if the `compile-time-rng`feature is enabled these will be generated at compile time.\nIf neither of these features are available, hardcoded constants will be used.\n\nBecause the values are fixed, different hashers will all hash elements the same way.\nThis could make hash values predictable, if DOS attacks are a concern. If this behaviour is\nnot required, it may be preferable to use [RandomState] instead.\n\n# Examples\n\n```\nuse ahash::AHasher;\nuse std::hash::Hasher;\n\nlet mut hasher_1 = AHasher::default();\nlet mut hasher_2 = AHasher::default();\n\nhasher_1.write_u32(1234);\nhasher_2.write_u32(1234);\n\nassert_eq!(hasher_1.finish(), hasher_2.finish());\n```","links":{"RandomState":"0:1621:1814","AHasher":"0:1286:1803"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:7877":{"id":"5:690:7877","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:1557:1806":{"id":"b:2:2732-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2422-0:1557:1806":{"id":"b:2:2422-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2424:27750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1328":{"id":"0:1328","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[47,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1331:7775"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:2113":{"id":"0:67:2113","crate_id":0,"name":"write_u16","span":{"filename":"src/fallback_hash.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:1568:1807":{"id":"b:2:2422-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2424:27750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1518:716":{"id":"0:1518:716","crate_id":0,"name":"fmt","span":{"filename":"src/hash_set.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9902:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9883:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1460:743":{"id":"0:1460:743","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1547":{"id":"0:1547","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[300,0],"end":[306,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1621:1814"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1549:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1908":{"id":"0:0:1908","crate_id":0,"name":"ahash","span":{"filename":"src/lib.rs","begin":[1,0],"end":[397,1]},"visibility":"public","docs":"AHash is a high performance keyed hash function.\n\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key.\nAHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can\ninduce a collision.\n\n# How aHash works\n\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function.\nWhen it is not, aHash falls back on a slightly slower alternative algorithm.\n\nBecause aHash does not have a fixed standard for its output, it is able to improve over time.\nBut this also means that different computers or computers using different versions of ahash may observe different\nhash values for the same input.\n# Basic Usage\nAHash provides an implementation of the [Hasher] trait.\nTo construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n### Randomness\n\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS.\nIt is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n\n### If randomess is not available\n\n[AHasher::default()] can be used to hash using fixed keys. This works with\n[BuildHasherDefault](std::hash::BuildHasherDefault). For example:\n\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\n\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n # m.insert(12, 34);\n```\nIt is also possible to instantiate [RandomState] directly:\n\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\n\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n # m.insert(1, 2);\n```\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\n\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\nThere are several constructors for [RandomState] with different ways to supply seeds.\n\n# Convenience wrappers\n\nFor convenience, both new-type wrappers and type aliases are provided.\n\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\n\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\nThis avoids the need to type \"RandomState\". (For convience `From`, `Into`, and `Deref` are provided).\n\n# Aliases\n\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` ,\nthe type aliases [HashMap], [HashSet] are provided.\n\n```\nuse ahash::{HashMap, HashMapExt};\n\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\nNote the import of [HashMapExt]. This is needed for the constructor.","links":{"HashMapExt":"0:235:1822","std::hash::BuildHasherDefault":"2:10191:1883","AHasher::default()":"0:253:60","RandomState":"0:1621:1814","HashMap":"0:1552:150","HashSet":"0:1555:152","Hasher":"2:10151:153"},"attrs":["#![deny(clippy::correctness, clippy::complexity, clippy::perf)]","#![allow(clippy::pedantic, clippy::cast_lossless, clippy::unreadable_literal)]","#![feature(min_specialization)]","#![feature(build_hasher_simple_hash_one)]","#![feature(stdsimd)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:1818","0:1295-0:1286:1803","0:1550-0:1557:1806","0:1551-0:1568:1807","0:1552:150","0:1555:152","0:231-0:1621:1814","0:235:1822","0:238:1828"],"is_stripped":false}}},"0:1484":{"id":"0:1484","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3177:2546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1487:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1482:255":{"id":"0:1482:255","crate_id":0,"name":"Target","span":{"filename":"src/hash_set.rs","begin":[77,4],"end":[77,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1286:1803":{"id":"0:1286:1803","crate_id":0,"name":"AHasher","span":{"filename":"src/fallback_hash.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A `Hasher` for hashing an arbitrary stream of bytes.\n\nInstances of [`AHasher`] represent state that is updated while hashing data.\n\nEach method updates the internal state based on the new data provided. Once\nall of the data has been provided, the resulting hash can be obtained by calling\n`finish()`\n\n[Clone] is also provided in case you wish to calculate hashes for two different items that\nstart with the same data.\n","links":{"`AHasher`":"0:1286:1803","Clone":"2:2435:110"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2988:7581-0:1286:1803","a:2:8978:7739-0:1286:1803","a:2:2948:253-0:1286:1803","a:2:8977:7740-0:1286:1803","a:2:2931:243-0:1286:1803","b:2:2422-0:1286:1803","b:2:2419-0:1286:1803","b:2:2722-0:1286:1803","b:2:2726-0:1286:1803","b:2:2737-0:1286:1803","b:2:3565-0:1286:1803","b:2:2732-0:1286:1803","b:5:687-0:1286:1803","0:1293","0:1291","0:252","0:65"]}}},"0:1420:7662":{"id":"0:1420:7662","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[378,4],"end":[378,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:859:7662","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:250:1035":{"id":"0:250:1035","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[191,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12798:14995":{"id":"2:12798:14995","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:30284":{"id":"2:12917:30284","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1332":{"id":"0:1332","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[53,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1335:1035","0:1336:1825"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1530":{"id":"0:1530","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[266,0],"end":[272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1533:170","0:1534:7662","0:1535:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12807:30391":{"id":"2:12807:30391","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1639"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:30285":{"id":"2:12918:30285","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231-0:1621:1814":{"id":"0:231-0:1621:1814","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::random_state::RandomState","name":"RandomState","id":"0:1621:1814","glob":false}}},"0:1503:205":{"id":"0:1503:205","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[143,4],"end":[143,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:12907:35048":{"id":"2:12907:35048","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:253-0:1557:1806":{"id":"a:2:2948:253-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1549:60":{"id":"0:1549:60","crate_id":0,"name":"default","span":{"filename":"src/hash_set.rs","begin":[303,4],"end":[305,5]},"visibility":"default","docs":"Creates an empty `AHashSet<T, S>` with the `Default` value for the hasher.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:1902":{"id":"0:163:1902","crate_id":0,"name":"with_seeds","span":{"filename":"src/random_state.rs","begin":[308,4],"end":[315,5]},"visibility":"public","docs":"Allows for explicitly setting the seeds to used.\nAll `RandomState`s created with the same set of keys key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nNote: If DOS resistance is desired one of these should be a decent quality random number.\nIf 4 high quality random number are not cheaply available this method is robust against 0s being passed for\none or more of the parameters or the same value being passed for more than one parameter.\nIt is recommended to pass numbers in order from highest to lowest quality (if there is any difference).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1335:1035":{"id":"0:1335:1035","crate_id":0,"name":"new","span":{"filename":"src/hash_map.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2114":{"id":"0:68:2114","crate_id":0,"name":"write_u32","span":{"filename":"src/fallback_hash.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:15227":{"id":"2:12824:15227","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12823:15229"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44186:11535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12891:35044":{"id":"2:12891:35044","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:35037":{"id":"2:12875:35037","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12492:7638","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::matches":"2:12872:2479"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44125:11531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:1621:1814":{"id":"b:2:2419-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:2469"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1627:454":{"id":"0:1627:454","crate_id":0,"name":"clone","span":{"filename":"src/random_state.rs","begin":[218,9],"end":[218,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:30290":{"id":"2:12922:30290","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37411"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12795":{"id":"2:12795","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12796:872","2:12797:8142","2:12798:14995","2:12799:35029","2:12801:35030","2:12804:2141","2:12805:35031","2:12806:339","2:12807:30391","2:12808:7788","2:12810:7800","2:12812:30389","2:12814:30390","2:12816:35032","2:12817:35033","2:12818:2042","2:12819:30410","2:12820:11420","2:12821:11544","2:12822:1888","2:12823:15229","2:12824:15227","2:12825:32603","2:12826:35034","2:12827:14913","2:12828:2197","2:12831:29941","2:12834:29943","2:12837:8179","2:12841:8141","2:12845:30417","2:12848:15228","2:12851:30420","2:12854:35035","2:12857:35036","2:12860:30422","2:12863:30424","2:12866:30426","2:12869:30427","2:12872:2479","2:12875:35037","2:12878:35038","2:12881:35039","2:12884:35040","2:12886:35041","2:12888:35042","2:12890:35043","2:12891:35044","2:12892:35045","2:12895:35046","2:12898:14522","2:12901:30428","2:12904:35047","2:12907:35048","2:12910:35049","2:12913:35050","2:12915:30281","2:12916:30282","2:12917:30284","2:12918:30285","2:12919:30286","2:12920:30288","2:12921:30289","2:12922:30290","2:12923:35051","2:12925:15358","2:12926:35052"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1347:7788":{"id":"0:1347:7788","crate_id":0,"name":"get","span":{"filename":"src/hash_map.rs","begin":[102,4],"end":[108,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{"`Eq`":"2:2487:131","`Hash`":"2:10143:149"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:1557:1806":{"id":"b:5:687-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:689:7987","5:690:7877","5:691:8202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2931:243-0:1557:1806":{"id":"a:2:2931:243-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12796:872":{"id":"2:12796:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:11544":{"id":"2:12821:11544","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43879:11524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[127,0],"end":[200,1]},"visibility":"default","docs":"Provides [Hasher] methods to hash all of the primitive types.\n\n[Hasher]: core::hash::Hasher","links":{"core::hash::Hasher":"2:10151:153"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u8","write_i32","write_str","write_length_prefix","write_u128","write_u16","write_i8","write_i64","write_usize","write_u32","write_i16","write_i128","write_isize","write_u64"],"trait":{"name":"Hasher","id":"2:10151:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2112","0:67:2113","0:68:2114","0:69:2115","0:70:2116","0:71:2117","0:72:2120","0:73:1874"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12921:30289":{"id":"2:12921:30289","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37411"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:153":{"id":"0:170:153","crate_id":0,"name":"Hasher","span":{"filename":"src/random_state.rs","begin":[384,4],"end":[384,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12904:35047":{"id":"2:12904:35047","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12820:11420":{"id":"2:12820:11420","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43873:7632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2722-0:1286:1803":{"id":"b:2:2722-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2725:7775"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:1874":{"id":"0:73:1874","crate_id":0,"name":"finish","span":{"filename":"src/fallback_hash.rs","begin":[196,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:30288":{"id":"2:12920:30288","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:37411"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8978:7739-0:1557:1806":{"id":"a:2:8978:7739-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8978:7739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2741:1615":{"id":"2:2741:1615","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42150:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:30424":{"id":"2:12863:30424","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:450","str::splitn":"2:12860:30422","self::pattern":"2:12492:7638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44025:11406","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8977:7740-0:1621:1814":{"id":"a:2:8977:7740-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8977:7740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:2115":{"id":"0:69:2115","crate_id":0,"name":"write_u64","span":{"filename":"src/fallback_hash.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1317":{"id":"0:1317","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[23,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1320:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1355:7837":{"id":"0:1355:7837","crate_id":0,"name":"into_values","span":{"filename":"src/hash_map.rs","begin":[247,4],"end":[249,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```\n\n# Performance\n\nIn the current implementation, iterating over values takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoValues","id":"1:918:7760","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1433:7847":{"id":"0:1433:7847","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1426:7847":{"id":"0:1426:7847","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[390,4],"end":[392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1504:392":{"id":"0:1504:392","crate_id":0,"name":"bitand","span":{"filename":"src/hash_set.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![2, 3, 4].into_iter().collect();\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1412:170":{"id":"0:1412:170","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[369,4],"end":[369,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"0:1567:454":{"id":"0:1567:454","crate_id":0,"name":"clone","span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1474":{"id":"0:1474","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[63,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1477:1832","0:1478:1833"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1388:822":{"id":"0:1388:822","crate_id":0,"name":"index","span":{"filename":"src/hash_map.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `HashMap`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1528:7662":{"id":"0:1528:7662","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[260,4],"end":[260,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:1534:7849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"a:2:2931:243-0:1568:1807":{"id":"a:2:2931:243-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1529:838":{"id":"0:1529:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[261,4],"end":[263,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7846:162","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:2246":{"id":"0:145:2246","crate_id":0,"name":"RandomSource","span":{"filename":"src/random_state.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"A supplier of Randomness used for different hashers.\nSee [set_random_source].\n\nIf [set_random_source] aHash will default to the best available source of randomness.\nIn order this is:\n1. OS provided random number generator (available if the `runtime-rng` flag is enabled which it is by default) - This should be very strong.\n2. Strong compile time random numbers used to permute a static \"counter\". (available if `compile-time-rng` is enabled.\n__Enabling this is recommended if `runtime-rng` is not possible__)\n3. A static counter that adds the memory address of each [RandomState] created permuted with fixed constants.\n(Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled.\n(Rust enables ASLR by default)","links":{"set_random_source":"0:1617:2270","RandomState":"0:1621:1814"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:146:2257"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[383,0],"end":[467,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_one"],"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:170:153","0:171:1864","0:172:2328"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:128:1818":{"id":"0:128:1818","crate_id":0,"name":"random_state","span":{"filename":"src/random_state.rs","begin":[1,0],"end":[529,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:145:2246","0:1617:2270","0:1621:1814"],"is_stripped":false}}},"0:153:716":{"id":"0:153:716","crate_id":0,"name":"fmt","span":{"filename":"src/random_state.rs","begin":[227,4],"end":[229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9902:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9883:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:1035":{"id":"0:236:1035","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[157,4],"end":[157,21]},"visibility":"default","docs":"Constructs a new HashMap","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:235:1822":{"id":"0:235:1822","crate_id":0,"name":"HashMapExt","span":{"filename":"src/lib.rs","begin":[155,0],"end":[160,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashMap type alias.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:236:1035","0:237:1825"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:241"]}}},"2:12799:35029":{"id":"2:12799:35029","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3567:1630":{"id":"2:3567:1630","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39767:2226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3565-0:1557:1806":{"id":"b:2:3565-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2736:1617":{"id":"2:2736:1617","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42150:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3565-0:1568:1807":{"id":"b:2:3565-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2931:243-0:1621:1814":{"id":"a:2:2931:243-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12828:2197":{"id":"2:12828:2197","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:35052":{"id":"2:12926:35052","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4726:35052"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44220:11462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:35051":{"id":"2:12923:35051","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4728:35051"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44202:11463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1473:1825":{"id":"0:1473:1825","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_set.rs","begin":[58,4],"end":[60,5]},"visibility":"public","docs":"This crates a hashset with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1523":{"id":"0:1523","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[258,0],"end":[264,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1527:170","0:1528:7662","0:1529:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5552:35725":{"id":"5:5552:35725","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2225","`String`":"5:7534:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3565-0:1621:1814":{"id":"b:2:3565-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5537:8216":{"id":"5:5537:8216","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:7581-0:1286:1803":{"id":"a:2:2988:7581-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12823:15229":{"id":"2:12823:15229","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12824:15227"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44177:11534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:35046":{"id":"2:12895:35046","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1404:170":{"id":"0:1404:170","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[361,4],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"2:12884:35040":{"id":"2:12884:35040","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1479":{"id":"0:1479","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3164:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1482:255","0:1483:595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12797:8142":{"id":"2:12797:8142","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1389":{"id":"0:1389","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[336,0],"end":[345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1393:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2732-0:1568:1807":{"id":"b:2:2732-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1510":{"id":"0:1510","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[202,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3005:7887","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1513:205","0:1514:1552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5543:35723":{"id":"5:5543:35723","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12810:7800":{"id":"2:12810:7800","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42007:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:15358":{"id":"2:12925:15358","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4729:15358"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44211:11369","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:30282":{"id":"2:12916:30282","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39954:30292","Self::is_ascii":"2:12915:30281"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39954:30292","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1550-0:1557:1806":{"id":"0:1550-0:1557:1806","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,8],"end":[126,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_map::AHashMap","name":"AHashMap","id":"0:1557:1806","glob":false}}},"b:2:2726-0:1568:1807":{"id":"b:2:2726-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1483:595":{"id":"0:1483:595","crate_id":0,"name":"deref","span":{"filename":"src/hash_set.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3164:123","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:253-0:1568:1807":{"id":"a:2:2948:253-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1576:454":{"id":"0:1576:454","crate_id":0,"name":"clone","span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2740:134":{"id":"2:2740:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32427:8390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1515":{"id":"0:1515","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[234,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1518:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12892:35045":{"id":"2:12892:35045","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12517:15697","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1465:743":{"id":"0:1465:743","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashSet;\n\nlet set1 = AHashSet::from([1, 2, 3, 4]);\nlet set2: AHashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1521:746":{"id":"0:1521:746","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_set.rs","begin":[251,4],"end":[255,5]},"visibility":"default","docs":"This crates a hashset from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1035"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2988:7581-0:1621:1814":{"id":"a:2:2988:7581-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1320:743":{"id":"0:1320:743","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1563":{"id":"0:1563","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1567:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1341:1832":{"id":"0:1341:1832","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_map.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:1621:1814":{"id":"b:2:2422-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:27750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1438:60":{"id":"0:1438:60","crate_id":0,"name":"default","span":{"filename":"src/hash_map.rs","begin":[413,4],"end":[415,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:30286":{"id":"2:12919:30286","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1533:170":{"id":"0:1533:170","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[267,4],"end":[267,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1509:397":{"id":"0:1509:397","crate_id":0,"name":"bitxor","span":{"filename":"src/hash_set.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1394":{"id":"0:1394","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[347,0],"end":[358,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:7842:142","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1397:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155:1035":{"id":"0:155:1035","crate_id":0,"name":"new","span":{"filename":"src/random_state.rs","begin":[239,4],"end":[243,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` using random keys.\n\nEach instance will have a unique set of keys derived from [RandomSource].\n","links":{"RandomSource":"0:145:2246"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:30389":{"id":"2:12812:30389","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10581:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1568:1807":{"id":"0:1568:1807","crate_id":0,"name":"AHashSet","span":{"filename":"src/hash_set.rs","begin":[17,0],"end":[17,55]},"visibility":"public","docs":"A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"std::collections::HashSet":"1:1406:152","crate::RandomState":"0:1621:1814"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1470","0:1474","a:2:2988:7581-0:1568:1807","a:2:8978:7739-0:1568:1807","a:2:2948:253-0:1568:1807","a:2:8977:7740-0:1568:1807","a:2:2931:243-0:1568:1807","b:2:2422-0:1568:1807","b:2:2419-0:1568:1807","b:2:2722-0:1568:1807","b:2:2726-0:1568:1807","b:2:2737-0:1568:1807","b:2:3565-0:1568:1807","b:2:2732-0:1568:1807","b:5:687-0:1568:1807","0:1510","0:1458","0:1536","0:1488","0:1530","0:1515","0:1492","0:1467","0:1500","0:1519","0:1573","0:1523","0:1547","0:1461","0:1479","0:1541","0:1505","0:1484","0:1495"]}}},"b:2:2722-0:1568:1807":{"id":"b:2:2722-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2725:7775"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1331:7775":{"id":"0:1331:7775","crate_id":0,"name":"into","span":{"filename":"src/hash_map.rs","begin":[48,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[226,0],"end":[230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9927:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:716"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1435":{"id":"0:1435","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[411,0],"end":[416,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1621:1814"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1438:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1337":{"id":"0:1337","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[67,0],"end":[78,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1341:1832","0:1342:1833"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2931:243-0:1286:1803":{"id":"a:2:2931:243-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:72:2120":{"id":"0:72:2120","crate_id":0,"name":"write","span":{"filename":"src/fallback_hash.rs","begin":[171,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[allow(clippy::collapsible_if)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:35036":{"id":"2:12857:35036","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12492:7638","str::split":"2:12845:30417","prim@char":"1:12032:450","str::split_terminator":"2:12854:35035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43971:11527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1368:597":{"id":"0:1368:597","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_map.rs","begin":[286,4],"end":[288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3164:123","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1419:170":{"id":"0:1419:170","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[377,4],"end":[377,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"b:5:687-0:1621:1814":{"id":"b:5:687-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:7987","5:690:7877","5:691:8202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:237:1825":{"id":"0:237:1825","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[159,4],"end":[159,46]},"visibility":"default","docs":"Constructs a new HashMap with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:5:687-0:1286:1803":{"id":"b:5:687-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:7987","5:690:7877","5:691:8202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1393:716":{"id":"0:1393:716","crate_id":0,"name":"fmt","span":{"filename":"src/hash_map.rs","begin":[342,4],"end":[344,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9902:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9883:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1534:7662":{"id":"0:1534:7662","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[268,4],"end":[268,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:1538:7662","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[89,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2482:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1491:660"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2737-0:1568:1807":{"id":"b:2:2737-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2737-0:1286:1803":{"id":"b:2:2737-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2988:7581-0:1557:1806":{"id":"a:2:2988:7581-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2988:7581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:691:8202":{"id":"5:691:8202","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1477:1832":{"id":"0:1477:1832","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_set.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1536":{"id":"0:1536","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[274,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"2:7855:7584","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1539:7847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12898:14522":{"id":"2:12898:14522","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1354:7829":{"id":"0:1354:7829","crate_id":0,"name":"into_keys","span":{"filename":"src/hash_map.rs","begin":[216,4],"end":[218,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```\n\n# Performance\n\nIn the current implementation, iterating over keys takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoKeys","id":"1:914:7759","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1363:595":{"id":"0:1363:595","crate_id":0,"name":"deref","span":{"filename":"src/hash_map.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3164:123","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1472:1035":{"id":"0:1472:1035","crate_id":0,"name":"new","span":{"filename":"src/hash_set.rs","begin":[52,4],"end":[54,5]},"visibility":"public","docs":"This crates a hashset using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1415":{"id":"0:1415","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[376,0],"end":[382,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1419:170","0:1420:7662","0:1421:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1470":{"id":"0:1470","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[49,0],"end":[61,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1472:1035","0:1473:1825"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8977:7740-0:1286:1803":{"id":"a:2:8977:7740-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8977:7740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1499:394":{"id":"0:1499:394","crate_id":0,"name":"bitor","span":{"filename":"src/hash_set.rs","begin":[133,4],"end":[135,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[232,0],"end":[364,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1035","0:156:2296","0:162:2307","0:163:1902","0:164:2328"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2737-0:1621:1814":{"id":"b:2:2737-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1295-0:1286:1803":{"id":"0:1295-0:1286:1803","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,8],"end":[117,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::fallback_hash::AHasher","name":"AHasher","id":"0:1286:1803","glob":false}}},"0:1552:150":{"id":"0:1552:150","crate_id":0,"name":"HashMap","span":{"filename":"src/lib.rs","begin":[132,8],"end":[132,85]},"visibility":"public","docs":"[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap\nType alias for [HashMap]<K, V, ahash::RandomState>","links":{"std::collections::HashMap":"1:723:150"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"2:12872:2479":{"id":"2:12872:2479","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12492:7638","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::rmatches":"2:12875:35037"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44107:11530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1491:660":{"id":"0:1491:660","crate_id":0,"name":"eq","span":{"filename":"src/hash_set.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1626":{"id":"0:1626","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[218,9],"end":[218,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1627:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1551-0:1568:1807":{"id":"0:1551-0:1568:1807","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,8],"end":[127,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_set::AHashSet","name":"AHashSet","id":"0:1568:1807","glob":false}}},"b:5:687-0:1568:1807":{"id":"b:5:687-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:689:7987","5:690:7877","5:691:8202"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1406:838":{"id":"0:1406:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[363,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7846:162","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:253-0:1286:1803":{"id":"a:2:2948:253-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2421:2469":{"id":"2:2421:2469","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1382":{"id":"0:1382","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[317,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:3227:7626","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1387:205","0:1388:822"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[29,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1326:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,0],"end":[184,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashMapExt","id":"0:235:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashMap","id":"1:723:150","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:245:1035","0:246:1825"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12805:35031":{"id":"2:12805:35031","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:8141":{"id":"2:12841:8141","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42007:197","prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:1557:1806":{"id":"b:2:2726-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1422":{"id":"0:1422","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[384,0],"end":[393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"2:7855:7584","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1426:7847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1513:205":{"id":"0:1513:205","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[207,4],"end":[207,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1508:205":{"id":"0:1508:205","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[175,4],"end":[175,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:12817:35033":{"id":"2:12817:35033","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1534","crate::ops::IndexMut":"2:3231:7627","str::slice_unchecked":"2:12816:35032"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[221,0],"end":[249,1]},"visibility":"default","docs":"Provides a default [Hasher] with fixed keys.\nThis is typically used in conjunction with [BuildHasherDefault] to create\n[AHasher]s in order to hash the keys of the map.\n\nGenerally it is preferable to use [RandomState] instead, so that different\nhashmaps will have different keys. However if fixed keys are desirable this\nmay be used instead.\n\n# Example\n```\nuse std::hash::BuildHasherDefault;\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, BuildHasherDefault<AHasher>> = HashMap::default();\nmap.insert(12, 34);\n```\n\n[BuildHasherDefault]: std::hash::BuildHasherDefault\n[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap","links":{"std::hash::BuildHasherDefault":"2:10191:1883","AHasher":"0:1286:1803","RandomState":"0:1621:1814","std::hash::Hasher":"2:10151:153"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2424:27750":{"id":"2:2424:27750","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[376,0],"end":[381,1]},"visibility":"default","docs":"Creates an instance of RandomState using keys obtained from the random number generator.\nEach instance created in this way will have a unique set of keys. (But the resulting instance\ncan be used to create many hashers each or which will have the same keys.)\n\nThis is the same as [RandomState::new()]\n\nNOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState::new()":"0:155:1035","RandomState":"0:1621:1814"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1492":{"id":"0:1492","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[99,0],"end":[104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5554:31530":{"id":"5:5554:31530","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12918:30285"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1545:7847":{"id":"0:1545:7847","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[291,4],"end":[293,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12851:30420":{"id":"2:12851:30420","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12492:7638","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::split":"2:12845:30417"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43921:11403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2116":{"id":"0:70:2116","crate_id":0,"name":"write_u128","span":{"filename":"src/fallback_hash.rs","begin":[149,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1414:838":{"id":"0:1414:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7846:162","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:1568:1807":{"id":"b:2:2419-0:1568:1807","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2421:2469"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1461":{"id":"0:1461","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[25,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1465:743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1539:7847":{"id":"0:1539:7847","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:35724":{"id":"5:5551:35724","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:1621:1814":{"id":"b:2:2726-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1541":{"id":"0:1541","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[285,0],"end":[294,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:2943:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"2:7855:7584","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1545:7847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12913:35050":{"id":"2:12913:35050","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12453:133","`FromStr`":"2:12452:7635"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42150:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12452:7635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12452:7635","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2725:7775":{"id":"2:2725:7775","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2699:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12854:35035":{"id":"2:12854:35035","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12492:7638","str::split":"2:12845:30417","prim@char":"1:12032:450","`DoubleEndedIterator`":"2:7884:127","str::rsplit_terminator":"2:12857:35036"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43953:11526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:30417":{"id":"2:12845:30417","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12492:7638","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::split_whitespace":"2:12823:15229","str::rsplit":"2:12851:30420"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43903:11398","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12801:35030":{"id":"2:12801:35030","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12799:35029"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1555:152":{"id":"0:1555:152","crate_id":0,"name":"HashSet","span":{"filename":"src/lib.rs","begin":[135,8],"end":[135,79]},"visibility":"public","docs":"Type alias for [HashSet]<K, ahash::RandomState>","links":{"HashSet":"0:1555:152"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:35721","5:5537:8216","5:5540:35722","5:5543:35723","5:5551:35724","5:5552:35725","5:5553:8034","5:5554:31530","5:5555:31531"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:238:1828":{"id":"0:238:1828","crate_id":0,"name":"HashSetExt","span":{"filename":"src/lib.rs","begin":[165,0],"end":[170,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashSet type aliases.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:239:1035","0:240:1825"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:247"]}}},"2:12804:2141":{"id":"2:12804:2141","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12047:15700"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:60":{"id":"0:168:60","crate_id":0,"name":"default","span":{"filename":"src/random_state.rs","begin":[378,4],"end":[380,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12831:29941":{"id":"2:12831:29941","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:1286:1803":{"id":"b:2:2726-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2699:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2728:743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1293":{"id":"0:1293","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1294:454"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1405:7662":{"id":"0:1405:7662","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[362,4],"end":[362,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:836:7849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"2:12819:30410":{"id":"2:12819:30410","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12818:2042"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:1286:1803":{"id":"b:2:2732-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1498:205":{"id":"0:1498:205","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[111,4],"end":[111,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1342:1833":{"id":"0:1342:1833","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_map.rs","begin":[75,4],"end":[77,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12848:15228":{"id":"2:12848:15228","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12308:11400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12834:29943":{"id":"2:12834:29943","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1617:2270":{"id":"0:1617:2270","crate_id":0,"name":"set_random_source","span":{"filename":"src/random_state.rs","begin":[190,12],"end":[192,13]},"visibility":"public","docs":"Provides an optional way to manually supply a source of randomness for Hasher keys.\n\nThe provided [RandomSource] will be used to be used as a source of randomness by [RandomState] to generate new states.\nIf this method is not invoked the standard source of randomness is used as described in the Readme.\n\nThe source of randomness can only be set once, and must be set before the first RandomState is created.\nIf the source has already been specified `Err` is returned with a `bool` indicating if the set failed because\nmethod was previously invoked (true) or if the default source is already being used (false).","links":{"RandomSource":"0:145:2246","RandomState":"0:1621:1814"},"attrs":["#[cfg(not(all(target_arch = \"arm\", target_os = \"none\")))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"impl_trait":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}]],"output":{"resolved_path":{"name":"Result","id":"2:42150:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl RandomSource + Send + Sync + 'static","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2931:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:35039":{"id":"2:12881:35039","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12492:7638","`DoubleEndedIterator`":"2:7884:127","prim@char":"1:12032:450","str::match_indices":"2:12878:35038"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44071:11529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:35722":{"id":"5:5540:35722","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7534:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1292:716":{"id":"0:1292:716","crate_id":0,"name":"fmt","span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9902:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9883:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1358":{"id":"0:1358","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[278,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3164:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1362:255","0:1363:595"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1356:7842":{"id":"0:1356:7842","crate_id":0,"name":"remove","span":{"filename":"src/hash_map.rs","begin":[269,4],"end":[275,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n```","links":{"`Eq`":"2:2487:131","`Hash`":"2:10143:149"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12825:32603":{"id":"2:12825:32603","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44157:11532","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2728:743":{"id":"2:2728:743","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1421:838":{"id":"0:1421:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[379,4],"end":[381,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7846:162","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12826:35034":{"id":"2:12826:35034","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44167:11533","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2732-0:1621:1814":{"id":"b:2:2732-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2702:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2735:134","2:2736:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1467":{"id":"0:1467","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[43,0],"end":[47,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1406:152","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1469:7775"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:2296":{"id":"0:156:2296","crate_id":0,"name":"generate_with","span":{"filename":"src/random_state.rs","begin":[255,4],"end":[259,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` based on the provided seeds, but in such a way\nthat each time it is called the resulting state will be different and of high quality.\nThis allows fixed constant or poor quality seeds to be provided without the problem of different\n`BuildHasher`s being identical or weak.\n\nThis is done via permuting the provided values with the value of a static counter and memory address.\n(This makes this method somewhat more expensive than `with_seeds` below which does not do this).\n\nThe provided values (k0-k3) do not need to be of high quality but they should not all be the same value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:253-0:1621:1814":{"id":"a:2:2948:253-0:1621:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2419-0:1286:1803":{"id":"b:2:2419-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2421:2469"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1364":{"id":"0:1364","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[285,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3177:2546","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1368:597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1343":{"id":"0:1343","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[80,0],"end":[276,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1347:7788","0:1349:7795","0:1351:7800","0:1353:1879","0:1354:7829","0:1355:7837","0:1356:7842"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12888:35042":{"id":"2:12888:35042","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:1557:1806":{"id":"b:2:2737-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2696:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2740:134","2:2741:1615"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5555:31531":{"id":"5:5555:31531","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12919:30286"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7534:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:35041":{"id":"2:12886:35041","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2422-0:1286:1803":{"id":"b:2:2422-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2416:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2424:27750"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1399":{"id":"0:1399","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[360,0],"end":[366,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1404:170","0:1405:7662","0:1406:838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1519":{"id":"0:1519","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[244,0],"end":[256,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:7842:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1621:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1521:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:172:2328":{"id":"0:172:2328","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[464,4],"end":[466,5]},"visibility":"default","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:10144:780","`Hasher`":"2:10151:153","`Hash`":"2:10143:149"},"attrs":["#[cfg(feature = \"specialize\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3565-0:1286:1803":{"id":"b:2:3565-0:1286:1803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3563:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3567:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1397:746":{"id":"0:1397:746","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_map.rs","begin":[353,4],"end":[357,5]},"visibility":"default","docs":"This crates a hashmap from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7846:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:1825":{"id":"0:246:1825","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1535:838":{"id":"0:1535:838","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[269,4],"end":[271,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7846:162","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1377:660":{"id":"0:1377:660","crate_id":0,"name":"eq","span":{"filename":"src/hash_map.rs","begin":[304,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1353:1879":{"id":"0:1353:1879","crate_id":0,"name":"insert","span":{"filename":"src/hash_map.rs","begin":[185,4],"end":[187,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`] is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [module-level\ndocumentation] for more.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{"`None`":"2:42007:197"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1369":{"id":"0:1369","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[291,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8977:7740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8977:7740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8977:7740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12822:1888":{"id":"2:12822:1888","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43889:8919","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:8179":{"id":"2:12837:8179","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42007:197","prim@char":"1:12032:450","self::pattern":"2:12492:7638"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1527:170":{"id":"0:1527:170","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[259,4],"end":[259,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"5:5536:35721":{"id":"5:5536:35721","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2225","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2419-0:1557:1806":{"id":"b:2:2419-0:1557:1806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2938:1868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2413:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1557:1806","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2421:2469"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1487:597":{"id":"0:1487:597","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_set.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3164:123","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:2257":{"id":"0:146:2257","crate_id":0,"name":"gen_hasher_seed","span":{"filename":"src/random_state.rs","begin":[132,4],"end":[132,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12816:35032":{"id":"2:12816:35032","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1534","str::slice_mut_unchecked":"2:12817:35033","crate::ops::Index":"2:3227:7626"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1500":{"id":"0:1500","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[138,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2487:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10143:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2435:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10186:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2773:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"2:3059:7884","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1568:1807","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1503:205","0:1504:392"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2735:134":{"id":"2:2735:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2706:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12869:30427":{"id":"2:12869:30427","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42005:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12497:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12512:15698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:46560:11598":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:8205:22686":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12850:9538":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:1903:8428":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11507:8922":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:624:36369":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:14896:10303":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:42073:7850":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:48221:7567":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:3015:8087":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13724:10005":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:4977:33701":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:7376:12842":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:40845:8073":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:40516:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:856:8001":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1591:12061":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40675:8051":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:3227:7626":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:7792:22684":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41942:11699":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:14887:10302":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:939:8001":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43827:11520":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:4585:10683":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:5415:11712":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:5384:22672":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"11:299:13001":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:43293:9108":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:9790:22741":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12396:9814":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:7534:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:44922:7984":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6764:12820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15961:9901":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:11675:9725":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:1662:12121":{"crate_id":24,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:15:2120":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:2359:10636":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3166:29889":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12445:9822":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:12052:9779":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:10894:11402":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4698:12311":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6352:9021":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:43889:8919":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:8180:12938":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6696:10833":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:30767:33382":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:13118:33890":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:6596:13484":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:5435:10702":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:42399:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"0:0:1908":{"crate_id":0,"path":["ahash"],"kind":"module"},"2:47074:11618":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"9:486:21664":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:40476:11466":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:7006:10879":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5992:12616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:8195:11043":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3735:11697":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:15374:10407":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:15671:10506":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8842:9117":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:6649:12705":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:43697:11508":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:13096:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:8292:11802":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2931:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"11:800:7617":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6944:36351":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:9186:32290":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"24:7257:12801":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:44177:11534":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13383:9922":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:3491:32566":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8286:15498":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:7169:8048":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:261:9522":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10315:8920":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:3764:10671":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8476:11817":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:5017:10696":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:1697:12131":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:15943:9891":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:6861:7666":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4860:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:2124:8004":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"10:36:13012":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11998:9140":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4351:12150":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:48408:7578":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46089:11578":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12548:9826":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:14359:10123":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"9:237:11502":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:266:9306":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:9930:117":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:4549:12265":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"0:235:1822":{"crate_id":0,"path":["ahash","HashMapExt"],"kind":"trait"},"24:7352:12831":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:12047:796":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11355:11730":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"24:5432:12459":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:945:8002":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:364:9312":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13948:10037":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:4819:12211":{"crate_id":24,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:7846:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:30681:8220":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:47412:11623":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:7621:8030":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:6070:9391":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12560:9827":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:15480:10450":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:1923:8431":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6583:10808":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15253:10375":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6513:10797":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:46916:11615":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8300:11795":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:533:11968":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:673:7849":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:5083:12311":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:5877:7617":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:1679:12128":{"crate_id":24,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8920:15557":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:1562:8430":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"15:0:2377":{"crate_id":15,"path":["addr2line"],"kind":"module"},"24:6573:12683":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:6560:12679":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:15612:10490":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"24:6338:12567":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12380:9812":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44283:15710":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2472:10641":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:6363:12572":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:40412:11460":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"9:450:21665":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6741:12819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6361:10786":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:4881:12240":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:6484:7617":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:8154:11039":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:4592:7612":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:48194:11658":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:8977:7740":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:6071:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46758:11604":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:22057:15565":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:3031:7622":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:609:9494":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:13170:11424":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13754:10008":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2622:11685":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:5798:8993":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:12563:15704":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:4941:12268":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:44071:11529":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:8220:11532":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:6228:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1718:12139":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"24:5168:12335":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4821:15484":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15507:10462":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:6675:12715":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:4889:10692":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:3278:11691":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:4773:12177":{"crate_id":24,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:7303:12820":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:5971:9396":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:5392:15687":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:5634:10704":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:9164:11838":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:5363:10701":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8006:9130":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:3251:9535":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7269:36353":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:12197:11413":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:1054:8005":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:7884:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3163:29875":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:4381:9335":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:1780:8218":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12103:9786":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12797:8933":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:9943:22727":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4854:12370":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:7561:8028":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:7280:12819":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:483:11937":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13989:10043":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4862:10691":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7306:9326":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5588:10660":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:48212:7566":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:3915:10675":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:3442:7976":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:507:11948":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:43285:9107":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:10076:11677":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:40703:8062":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11932:9771":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7660:10978":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:495:11943":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:8978:7739":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:6811:15561":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:4613:10684":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14057:10053":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"13:226:9050":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10067:8913":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:32474:11451":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"24:5199:12348":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:42243:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:5760:22674":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4922:12398":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:42477:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4603:12293":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7582:9035":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:7316:36168":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6961:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3414:8108":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"0:238:1828":{"crate_id":0,"path":["ahash","HashSetExt"],"kind":"trait"},"17:14385:10125":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:12052:1638":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:5362:12430":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7318:10922":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:6983:32398":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4686:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:4777:716":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:15192:10359":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:9034:11835":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12356:9810":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:1203:9529":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:42150:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:41736:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4388:12177":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:7275:8059":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:40596:9360":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6047:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8190:8060":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"24:6435:12609":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:22251:15429":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:9591:9092":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:10775:9650":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"24:7910:12919":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12930:22749":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:21290:34138":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:46838:11605":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:4969:12284":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:6013:16191":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7722:9041":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11269:8909":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:4219:7973":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4440:12213":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:3753:11218":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4921:10693":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:7643:15429":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:16049:10598":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"24:5515:12491":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"24:7407:12868":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:886:9324":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:22668:33386":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:3195:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:8281:11050":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:12047:15700":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:2536:13006":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6943:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:4182:9307":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10988:9666":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:16004:10589":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13407:9926":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:12723:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:1570:12047":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13448:9938":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12127:9788":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:5406:12453":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"24:1722:12144":{"crate_id":24,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"24:4901:12249":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:7434:7994":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:7041:10883":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:489:11940":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:482:9382":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:7754:11743":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:1758:11675":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:32427:8390":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:9902:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:48346:7576":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1507:12011":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:4641:10685":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6687:10832":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:574:11990":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40606:11473":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"24:4813:12210":{"crate_id":24,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:10792:9131":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:15160:10350":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:903:7659":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3479:7979":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:4835:10690":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:504:9328":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11168:22774":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:11568:11410":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:531:9484":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:7320:12821":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7360:36354":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:1892:13028":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13663:9993":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:30414:15468":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:6059:12658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12009:8897":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"20:562:2531":{"crate_id":20,"path":["zerocopy","ByteSlice"],"kind":"trait"},"2:13391:7656":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:7865:11746":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2413:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:43038:8008":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3510:15446":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44880:11565":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"24:5255:12376":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7828:10988":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5033:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:6787:12750":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8207:8919":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:42983:8008":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:10379:9371":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4764:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:21903:15429":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"24:6381:12582":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:22494:11426":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"22:216:8878":{"crate_id":22,"path":["once_cell","sync","Lazy"],"kind":"struct"},"17:14455:10133":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"20:598:2551":{"crate_id":20,"path":["zerocopy","wrappers","Unalign"],"kind":"struct"},"1:1873:11680":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:48252:7570":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:8281:13116":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:44025:11406":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22807:15469":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2942:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:46368:11592":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:6445:12616":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5121:10699":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:2326:8005":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6792:10858":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3806:7662":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:39662:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:1896:7659":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:16123:10618":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:3324:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:2256:9078":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"24:5263:12379":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:43246:9106":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:1891:7617":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:7604:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"14:160:11128":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:6357:8078":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:7128:11835":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:41202:8029":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10569:36359":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:12048:792":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:4383:11701":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12474:8897":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:2722:10651":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:6524:12665":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4878:12379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:45937:11572":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:7805:8047":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:687:7850":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:2144:9328":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8551:11822":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:12506:9510":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:4529:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:4508:9358":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11701:9729":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:43001:33383":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:1063:8006":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"20:631:2533":{"crate_id":20,"path":["zerocopy","_CastType"],"kind":"enum"},"5:1477:7996":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46606:11600":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:1484:12006":{"crate_id":24,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6107:12679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:12042:690":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:6711:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:12037:1501":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:46962:11616":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:10581:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:7391:8025":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"14:187:21755":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:44531:7629":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:15631:10495":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"24:1620:12092":{"crate_id":24,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"24:5560:12517":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:42065:7849":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:4100:9307":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:43798:11517":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4637:12814":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:4497:10680":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:40521:11471":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:511:9526":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:710:7759":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:2368:15419":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"24:5109:12313":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8326:11805":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:23366:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"9:426:21667":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:569:11988":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:8850:7849":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6086:12667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4724:12313":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6753:10846":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6204:8999":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7901:1814":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:6146:9380":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:6226:10772":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:6553:12678":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8274:11699":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:7250:12797":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5123:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:1576:12049":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7054:10886":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:44638:13112":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"24:4995:12295":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7708:9040":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10785:36360":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:2197:9531":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:11144:9116":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:14413:10129":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"24:5453:12465":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11690:9728":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:44872:11563":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11307:9127":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6485:9023":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:10155:11843":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10051:8893":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:7467:11233":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:40626:11474":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:4491:15500":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13083:9872":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:8814:9116":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10840:29711":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6415:10792":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:507:9483":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:15125:10344":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"23:146:9306":{"crate_id":23,"path":["getrandom","use_file","DropGuard"],"kind":"struct"},"6:5897:12571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6425:10793":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13436:9935":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4738:12314":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12153:9790":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:3397:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:4891:12246":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"0:1552:150":{"crate_id":0,"path":["ahash","HashMap"],"kind":"type_alias"},"24:5130:12315":{"crate_id":24,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:4795:15736":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5082:11706":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4595:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:3323:15454":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8904:15558":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:8072:11030":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3059:7884":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:22781:11442":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:13083:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:1737:1804":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"1:8936:15559":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:7365:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13976:10042":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"24:484:11943":{"crate_id":24,"path":["libc","unix","timespec"],"kind":"struct"},"17:13909:10032":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:5117:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:4824:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2996:15895":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:7639:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:40713:8063":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:1901:8825":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"11:2231:8753":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:6610:9399":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:2031:9530":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:2562:13010":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11743:9736":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5004:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"15:327:9046":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:555:11980":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4808:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:41224:8035":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6666:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:1558:12039":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2988:7581":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:4806:10689":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:3164:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"24:5193:12346":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:357:11663":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:22708:33374":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:47948:11653":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4744:15488":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:10296:9368":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:9883:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:4977:12430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11399:9696":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"10:0:2373":{"crate_id":10,"path":["adler"],"kind":"module"},"16:3655:9552":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:2352:13030":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12091:9785":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:552:11985":{"crate_id":24,"path":["libc","unix","linger"],"kind":"struct"},"2:8347:34015":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:14087:10072":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:8239:12951":{"crate_id":24,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:48267:7571":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:7937:7583":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:42360:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:8186:12939":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:351:36331":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"20:321:2522":{"crate_id":20,"path":["zerocopy","FromZeroes"],"kind":"trait"},"17:12345:9809":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:46338:11591":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6682:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:2973:36150":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13121:9887":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:9934:8012":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44107:11530":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:9940:8021":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:4444:11373":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:472:11937":{"crate_id":24,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:23397:2545":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:563:11985":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:39503:8109":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"14:215:11133":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"24:1670:12122":{"crate_id":24,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:15133:10346":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11395:9695":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1301:8005":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"14:202:7616":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5111:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:10538:11691":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:9884:8017":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12410:9817":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"2:40563:15400":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"22:82:8877":{"crate_id":22,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"24:5400:12451":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:41251:8041":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:9946:8019":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:47228:11621":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:3280:11692":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:23242:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:42090:7736":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:5056:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:14786:10263":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1528:12019":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:5650:7665":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:4914:12254":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12264:9804":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4523:12252":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:42193:7849":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:16062:10604":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"18:719:9514":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:2832:10656":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:5394:12450":{"crate_id":24,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:1007:8004":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"24:5576:12520":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"24:7500:12910":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:11027:9629":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:15087:10336":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:44618:13107":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:3425:11798":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2696:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6913:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:7622:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:4964:8113":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:12234:11416":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:1691:12132":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:42516:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3994:15475":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:7136:29195":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:9404:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4566:12275":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:12046:795":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:2696:10650":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:2975:13019":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:48278:7572":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:1685:12131":{"crate_id":24,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7694:9038":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1913:17619":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:7540:11867":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:39602:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2948:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:2991:7974":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:22:730":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:14921:10305":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:7809:8046":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4742:15487":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:7663:11734":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:7618:7659":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13026:9860":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"8:0:1797":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:0:2380":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:5324:1098":{"crate_id":24,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2911:9388":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:47618:11650":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:13287:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:43772:8049":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:15200:10360":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:1760:11676":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7848:11745":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:5095:12312":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:26244:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:44053:11528":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9968:22745":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4908:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:1505:7759":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:15535:10469":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43746:11514":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:6761:12735":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10242:8918":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:6896:9401":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:5612:10662":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:14399:10126":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:281:2225":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11727:9734":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11459:9701":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13297:9906":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13648:9989":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:774:7996":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:46438:11594":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:0:1526":{"crate_id":1,"path":["std"],"kind":"module"},"11:396:9314":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:582:9103":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11612:11733":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15519:10465":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:10967:11404":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:686:1813":{"crate_id":1,"path":["std","collections"],"kind":"module"},"6:5921:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:7003:9350":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3482:8017":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"11:1887:7662":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:40995:8075":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:8157:12932":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:5673:10661":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:557:11666":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:4774:10688":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:2690:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:42142:7980":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"11:1910:8429":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5885:12567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12335:8928":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:1115:34744":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:6427:12604":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:671:9506":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14485:8928":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:44399:11548":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13202:8934":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:2941:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:47760:11651":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:3049:21815":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:40450:11463":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:13935:10035":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"0:128:1818":{"crate_id":0,"path":["ahash","random_state"],"kind":"module"},"1:4311:8749":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6189:10770":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:8001:11750":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3086:8098":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:903:7849":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:6889:12882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:21273:34145":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:1315:8007":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:1582:11141":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"24:5353:12424":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"24:8095:12929":{"crate_id":24,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:212:7985":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:11008:11405":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:790:9319":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15337:10399":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:7534:10666":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"24:4749:12159":{"crate_id":24,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:5780:9118":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:32488:11452":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:4417:10678":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:43847:7633":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5044:12477":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4719:10686":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:21256:34142":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:10473:9409":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:6842:7665":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"24:5123:12314":{"crate_id":24,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:4956:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5015:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:681:9507":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5068:12484":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:12308:11400":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:5632:9396":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:42973:13099":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:30641:2543":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12701:9838":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:15557:10474":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"24:6422:12603":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:6552:9366":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"24:8169:12934":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12746:8930":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"24:4908:12252":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14156:10086":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:44167:11533":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"22:368:8125":{"crate_id":22,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"1:3201:11688":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40361:11455":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:1160:8007":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5866:10724":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:837:7999":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:3936:15470":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:4951:12275":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:14439:10131":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:4563:9359":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3366:8035":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22188:15650":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:13922:10034":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:48241:7569":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:10929:11403":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:4825:12213":{"crate_id":24,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10925:22757":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13869:10026":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3837:11698":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"24:1652:12115":{"crate_id":24,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:5969:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:39684:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:48072:11655":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:23304:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:43029:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:7338:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8562:11823":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11576:9714":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:5419:8893":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"24:537:11977":{"crate_id":24,"path":["libc","unix","pollfd"],"kind":"struct"},"1:1567:8431":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:3094:8100":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13478:9950":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2825:11240":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:14282:10103":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:7855:7584":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:42005:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:2586:9386":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12077:9781":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"24:7452:12892":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14904:10304":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"24:522:11968":{"crate_id":24,"path":["libc","unix","hostent"],"kind":"struct"},"2:22632:9098":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:8204:12942":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5746:11718":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:7689:9410":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"24:563:11990":{"crate_id":24,"path":["libc","unix","itimerval"],"kind":"struct"},"24:4980:12288":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:5431:11713":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6837:12842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:7645:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14969:8948":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:46484:11595":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:7556:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:5753:11721":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:22616:9084":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:7375:7662":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:32575:9104":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14194:10091":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11619:11733":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:6547:13031":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:1810:1185":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7597:36352":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:32463:11450":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:16016:10591":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:9678:22728":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:2569:7630":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:12584:9829":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:7346:9083":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:7026:9402":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:4:1111":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:9196:13121":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8330:12801":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:44642:13113":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6721:22679":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13765:10009":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:5239:12370":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:15037:10320":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2450:10640":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11197:11728":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"20:362:2525":{"crate_id":20,"path":["zerocopy","Unaligned"],"kind":"trait"},"2:2702:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7284:11232":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:12257:11417":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:46138:11580":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:39728:7988":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:595:9527":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:10338:32056":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11945:9772":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4449:12218":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:44698:11560":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6691:12791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4939:1098":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:41776:8809":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:9938:8020":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4628:12306":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:6609:12697":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:3035:8094":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4647:12307":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:363:11664":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11052:9649":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:42321:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4755:12322":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4461:12223":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6114:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5130:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:435:9525":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:6844:10860":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4847:12368":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12684:9609":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:4934:12265":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4893:12383":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7651:10977":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:43646:11507":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3039:8092":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:15566:10476":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:10986:9117":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13463:9944":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8858:11827":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2784:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:880:7997":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11632:9719":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:48369:7577":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44320:11542":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6898:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"24:4736:12150":{"crate_id":24,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6041:22676":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6169:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5905:10726":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11088:9671":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8545:7849":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:2600:9371":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:1151:34747":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:23335:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2985:15892":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:8403:11814":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:30873:33379":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:8181:9044":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:5541:12508":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:2236:36175":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:1541:7617":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12999:9854":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12324:9807":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:40355:11369":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:4038:15477":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:40684:8052":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5049:10697":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:7657:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:2881:10658":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:4180:15497":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5075:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12921:8928":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11382:13130":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:22547:11427":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:42557:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:1066:21743":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:7330:7662":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:40422:11461":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:867:7996":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:42209:7662":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4543:12262":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:2183:9075":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:3670:15467":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:8249:12953":{"crate_id":24,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:13145:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2331:15905":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"9:0:2372":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:8303:8044":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:44935:11569":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4473:12232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:4293:9089":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:32481:2526":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:3080:8097":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"22:361:8877":{"crate_id":22,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"5:3217:8430":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:5463:12471":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11313:11864":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4789:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:4212:9307":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:62:16217":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"24:7343:12828":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:42201:7850":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:44622:13108":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:621:11667":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:6351:15657":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:538:8881":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"11:2140:8005":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:1909:703":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:9274:11678":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6879:10864":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:2554:36329":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:9936:8011":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"10:44:9051":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:13218:8938":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6279:9014":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:11215:13129":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:10941:9661":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:401:9523":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:16180:9911":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:2644:10648":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:41793:15466":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"15:394:21777":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:2154:11219":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:6282:12527":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10559:9647":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:6426:8031":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"18:564:8883":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6569:9026":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"7:31:21651":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:42218:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2933:21813":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:44488:11550":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:5293:12390":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:2703:13025":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:16170:9906":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"24:5140:12322":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:542:11974":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:12035:1148":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:6162:9395":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:1632:12092":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4800:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"24:4920:12257":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"24:5051:12308":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6499:9024":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:13273:9902":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:10774:11398":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:9021:9123":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:15990:10585":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:2474:13022":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13309:9909":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:3584:9537":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:15003:10317":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:3027:8089":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:660:9500":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12972:9853":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"18:80:26870":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:6531:10805":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1650:12104":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:9731:8009":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:7668:11736":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12029:9778":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:10143:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"24:5232:12368":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:16087:10612":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:43873:7632":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7862:10992":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:690:9509":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2435:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:7768:9042":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6718:12801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:13336:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:1286:8006":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:15117:10342":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1521:12016":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6243:10775":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8973:9120":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:40502:11470":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:1627:12096":{"crate_id":24,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44195:11419":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:23180:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:6798:12826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:3818:7659":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:4434:12211":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:5245:12373":{"crate_id":24,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:6312:12552":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13896:10031":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:43971:11527":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:4344:10677":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:23273:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:45959:11573":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11817:22844":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10974:8909":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:5395:11711":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:9942:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:6666:12713":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:4411:9307":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40722:8064":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11388:13131":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:1676:9316":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43056:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4884:12380":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42438:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:1664:12115":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13254:8947":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:1703:12132":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2088:7981":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:3191:8429":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:44626:13109":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4569:15516":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:8151:12931":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:30709:33385":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12290:9805":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9128:11728":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6100:12678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"9:330:13013":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:1489:12008":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"24:4760:12167":{"crate_id":24,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:11981:11870":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:3343:7659":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:6541:8055":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:2773:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:5388:15686":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:4840:12220":{"crate_id":24,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11755:9737":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:3010:8088":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:951:8003":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:44630:13110":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:4439:11372":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7544:10974":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:5992:9081":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11141:9675":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:0:2374":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:43921:11403":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:5534:12505":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:2542:13007":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:12033:11411":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:39767:2226":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:15212:10366":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:39618:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6318:10785":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:21302:34140":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:6136:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1596:12063":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:44893:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:1917:8430":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12572:9828":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:14221:10093":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14235:10096":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:6465:12632":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4616:12297":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:4151:15494":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"11:430:36333":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:14934:10310":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:44646:13114":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44157:11532":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11800:9739":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:644:9483":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13707:10002":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6929:9030":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:40469:11465":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:7717:15363":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:7230:12791":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:2518:11684":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11779:8924":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:5032:12307":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:496:11948":{"crate_id":24,"path":["libc","unix","rusage"],"kind":"struct"},"17:11307:9692":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7503:10665":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:7736:10979":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:2305:21812":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:4968:12424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4814:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11714:9732":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:3500:15427":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2993:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13633:9985":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:893:7617":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13742:10006":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6456:10795":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:23842:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:1142:11140":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:44710:15994":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2654:8391":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4167:15496":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:7838:8824":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11978:9775":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7568:9034":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:7388:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:11051:9414":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:1674:12121":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:42123:7737":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13684:9997":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:15680:10510":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:475:11932":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3797:10672":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:909:7998":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7510:11238":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:3888:10674":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:10362:9370":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:12255:9803":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:7782:10980":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:22278:33647":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:15279:10385":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:1883:7849":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:15244:10374":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3563:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"11:844:8000":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:6641:12704":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:634:11213":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:2662:11686":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7738:15386":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3064:7885":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:44837:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:15367:10405":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:1682:12122":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:7497:11236":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:45983:11574":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:10831:29714":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:41209:8031":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12953:9850":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12758:9840":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:12492:7638":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6248:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5955:12602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:588:15357":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5696:22673":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7884:22685":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7513:10972":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:46735:11603":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:40533:33378":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11369:9694":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:15980:10584":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:9860:22743":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:9586:34017":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"14:0:2376":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:12053:1635":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"24:6592:12688":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"24:7904:12917":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:41243:8039":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:531:11974":{"crate_id":24,"path":["libc","unix","iovec"],"kind":"struct"},"5:4050:9306":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:1796:11677":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6901:9028":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"15:288:21767":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:9891:22724":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13961:10039":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42747:8020":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:46992:11617":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2699:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2524:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:9927:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8226:11795":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"24:6632:12702":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:3090:8099":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:2383:7849":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:15294:10389":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14765:10255":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:4846:12223":{"crate_id":24,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1495:7998":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13322:9911":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"24:6767:12736":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"0:1621:1814":{"crate_id":0,"path":["ahash","random_state","RandomState"],"kind":"struct"},"1:6466:9126":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:6671:12714":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:6017:22675":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8137:8028":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:5215:12357":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:1495:12011":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:7221:12785":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:1687:9307":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:10726:36364":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:7668:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:43706:11509":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12432:9821":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"18:755:9520":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7474:10961":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"24:7882:12916":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:5650:9307":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"24:5570:12518":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:3052:8095":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:588:11998":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:4928:12262":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10137:8915":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:7616:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6700:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:3460:9536":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:3315:10668":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:928:8000":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:3184:7849":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11485:9707":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:7559:7619":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:6659:12712":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:6376:22677":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8891:11828":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:10578:9410":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:3830:10673":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4610:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:875:8002":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"19:0:1128":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5830:10717":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11958:9774":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"24:4786:12187":{"crate_id":24,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"9:177:9066":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10767:11745":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:7732:15364":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9730:22739":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:43785:11516":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13365:9921":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:5052:12479":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:1773:633":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:11340:11729":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4488:12238":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:707:9510":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:7339:33355":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:5661:10713":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:7371:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12202:22868":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:41965:11391":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10881:22756":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:11045:9413":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:5727:8991":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1496:12006":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:21234:9103":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10432:36361":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4841:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"24:544:11980":{"crate_id":24,"path":["libc","unix","winsize"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:30675:2544":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:2428:10639":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:7702:12953":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10035:8892":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9479:9408":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"24:6374:12580":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:10151:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12596:9830":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5140:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12115:9787":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:6604:7662":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:7915:11748":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:4963:12281":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11065:9670":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:9392:371":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:7599:9406":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:914:7759":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:22409:15646":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:11426:9698":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4870:12376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11412:9697":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:40754:8067":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"24:6624:12701":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"18:590:9487":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:9944:8018":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:12031:1031":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:5185:12342":{"crate_id":24,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"24:1546:12039":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14001:10044":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9918:22744":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:4469:15499":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40763:8077":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:42740:8012":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:2339:8957":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4998:12445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11439:9699":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1545:7659":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:2352:8006":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"22:50:9307":{"crate_id":22,"path":["once_cell","imp","Guard"],"kind":"struct"},"2:41009:8076":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4401:12187":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2618:10647":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4989:12439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:12045:794":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:1604:12068":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6819:12832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"20:366:1602":{"crate_id":20,"path":["zerocopy","transmute"],"kind":"macro"},"2:48232:7568":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:1025:8005":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:9069:9136":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14950:10313":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:44463:11549":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:464:11932":{"crate_id":24,"path":["libc","unix","group"],"kind":"struct"},"2:3192:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:44498:11554":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:16146:10623":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:14296:10105":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44477:15711":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:2403:7850":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14509:10147":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:1072:8007":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12220:9538":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:4324:8877":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:3198:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:699:8886":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6968:22680":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:9971:11492":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4364:12159":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:7481:33378":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:41195:11386":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:10757:13125":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:4020:7617":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:113:26872":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:12273:11418":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46037:11576":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:12512:15698":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:527:11965":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4947:12409":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:7548:7618":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:21627:9096":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:8115:11035":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:43903:11398":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"24:6350:12571":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:4988:12293":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11290:9415":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"24:7239:12792":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"22:0:1909":{"crate_id":22,"path":["once_cell"],"kind":"module"},"2:44305:11537":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:832:7998":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3980:15473":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"9:507:11199":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:3005:7887":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4710:12312":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11001:9667":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4783:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:6686:9306":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4516:12249":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:2574:10645":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:7482:12907":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:2321:10634":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"7:78:21658":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:1536:11216":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2766:10653":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:6871:7667":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"24:577:11998":{"crate_id":24,"path":["libc","unix","servent"],"kind":"struct"},"17:15710:10515":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13419:9927":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:15101:10339":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:7473:12904":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:123:16272":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:7855:9131":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:22055:15429":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2744:10652":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:44334:11545":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:42596:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:22795:11443":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4042:15478":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6467:10796":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11604:9716":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:10968:29708":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:12033:1655":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:1455:7662":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:10471:36365":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15235:10371":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:5004:9307":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6545:10807":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:5287:12389":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:1051:8006":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10940:11743":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:42282:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2319:634":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"22:294:8123":{"crate_id":22,"path":["once_cell","race","OnceRef"],"kind":"struct"},"6:5152:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:12014:29707":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:2548:10644":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:1819:11678":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:43493:13106":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:5568:12722":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13676:9995":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:5582:12523":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:2983:34741":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:5015:11376":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:7906:7995":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:859:7662":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:46208:11583":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11215:9683":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:21945:34133":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:4928:9544":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:10716:9649":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2426:2386":{"crate_id":1,"path":["std","io"],"kind":"module"},"18:766:26881":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:5154:9081":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6868:12868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"22:374:8126":{"crate_id":22,"path":["once_cell","race","OnceBool"],"kind":"struct"},"2:42754:8021":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:1821:11679":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:44186:11535":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:6320:12554":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10813:36366":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:3000:7621":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:9932:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10896:9658":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:14021:10047":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:4435:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13856:10023":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"23:79:134":{"crate_id":23,"path":["getrandom","error","Error"],"kind":"struct"},"17:15432:10449":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:12043:692":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:47262:11622":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6658:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12486:9823":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"24:5553:12514":{"crate_id":24,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:15062:10328":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:102:13000":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11014:9668":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:1743:657":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:5161:12334":{"crate_id":24,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:5571:15541":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:652:9483":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:1592:12068":{"crate_id":24,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:6430:11723":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:42733:8011":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:5403:8892":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10337:8894":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"24:4865:12236":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"24:5445:12460":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:45913:11571":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:4527:10681":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11243:9688":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:1741:1805":{"crate_id":1,"path":["std","collections","hash_set"],"kind":"module"},"24:5383:12445":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"24:6617:12700":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:40731:11477":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:7466:12901":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:12049:1639":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:727:8888":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:7598:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:0:2371":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:10394:9375":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:6539:12667":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:15493:10456":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:6012:12632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:45893:11570":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:1584:12063":{"crate_id":24,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:6708:12724":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13395:9925":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:736:26880":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:16160:10624":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:7067:10889":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:46536:11597":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"20:196:9310":{"crate_id":20,"path":["zerocopy","wrappers","update","WriteBackOnDrop"],"kind":"struct"},"11:2498:21739":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:2938:1868":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:9399:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11593:9139":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:6401:9022":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7621:22683":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8169:15428":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12510:9824":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:4231:11700":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12166:9791":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10950:9662":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12898:22748":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:4444:9335":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"24:8163:12933":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:40:7658":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:40662:8060":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10803:9651":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4455:12220":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5941:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:6601:12694":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:39706:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6346:9019":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:47870:11652":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:1789:7659":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4050:15479":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"13:110:36337":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:481:9481":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11321:8897":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:561:36394":{"crate_id":20,"path":["zerocopy","sealed","ByteSliceSealed"],"kind":"trait"},"5:6530:9306":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:5934:8053":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:3230:36260":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5009:12450":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:654:16628":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:14208:10092":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:32467:7862":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"24:5307:12398":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14145:10084":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"24:7927:12928":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9624:22721":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:40831:8072":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:14698:10200":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15903:10570":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"11:2548:13008":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"20:87:2547":{"crate_id":20,"path":["zerocopy","util","ptr","Ptr"],"kind":"struct"},"18:636:9499":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2504:10642":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:11036:11407":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8232:11797":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:40745:8066":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:2526:10643":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:5209:12354":{"crate_id":24,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15287:10388":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:742:7760":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:922:7999":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:5085:12491":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10532:11687":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:9090:7628":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:7343:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:47152:11619":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:22227:15651":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:15842:9873":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:11226:9685":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10172:8916":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:23149:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10293:8919":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8237:15465":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13056:9864":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:48316:7574":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:3687:9306":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2406:10638":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:21497:15429":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:40653:8050":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7692:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:5474:12477":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:14251:10098":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:10817:11400":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1734:12144":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46657:11601":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:48293:7573":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:41759:8807":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4745:12315":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:22334:15904":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13584:9960":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:2284:21786":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:14122:10083":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13516:9958":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"11:1107:11139":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11563:9713":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:3402:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:7276:7662":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:23087:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:22380:15645":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:4159:15495":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8959:11829":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:21446:15567":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:4518:2526":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:3225:8428":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"20:370:2526":{"crate_id":20,"path":["zerocopy","Ref"],"kind":"struct"},"17:15013:10318":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:40774:8068":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:15527:10468":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"22:174:8877":{"crate_id":22,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"6:6263:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:5269:12380":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:490:11945":{"crate_id":24,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6156:10767":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11991:9776":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:3732:11696":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:40693:8061":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:7367:7662":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3098:8101":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4902:12389":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:11170:29715":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:12017:15955":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8535:11703":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:22143:15649":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:2202:11683":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11767:9738":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11497:8921":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"12:0:2375":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:1698:12135":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:44351:11546":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:15224:10367":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:8796:11824":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:43254:2510":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13097:9873":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44511:11558":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:2062:11218":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10667:36363":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:0:2379":{"crate_id":17,"path":["object"],"kind":"module"},"14:7:11128":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8011:15457":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:46582:11599":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:40:9888":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:8828:11825":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:11022:11406":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:7450:9080":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14822:10292":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:4506:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5104:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:7610:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8146:9133":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4666:12308":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:2443:7617":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:4740:15485":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:41906:33376":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:44426:11422":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:4196:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"11:2469:7659":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:15049:10323":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5867:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:6934:12904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:12050:1636":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:2670:10649":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6386:10789":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:8226:12947":{"crate_id":24,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"24:6512:12658":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7436:8980":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:1706:12139":{"crate_id":24,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"24:6567:12680":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5648:10708":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:12659:22725":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12614:22746":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11536:9711":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:3427:33712":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3387:8104":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:149:8965":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:11294:9691":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:46168:11581":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:44125:11531":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:3177:2546":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:46292:11586":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:10749:7850":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10510:9646":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1546:12030":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7613:10976":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"20:566:2532":{"crate_id":20,"path":["zerocopy","ByteSliceMut"],"kind":"trait"},"16:6560:9025":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:2354:14524":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"24:4858:12232":{"crate_id":24,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:12003:15365":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:4572:2541":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:4184:11371":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:7634:7660":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:787:7997":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"24:5174:12338":{"crate_id":24,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1424:7849":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:700:7662":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11537:11698":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:23056:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:12039:1620":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:3032:10667":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:883:8003":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"15:306:21768":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:521:26882":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:14426:10130":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:7523:9340":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:4949:10694":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:6117:9307":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:10856:11401":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:1131:36140":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:21505:15566":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:14324:10111":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:7358:12832":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12310:8927":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:3607:7850":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:3047:8093":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:580:11993":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:16134:10620":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:40549:11472":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12301:9806":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:4462:10679":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:8215:12946":{"crate_id":24,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10520:36358":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11449:9589":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:96:26871":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:2228:9534":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:14170:10088":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:3069:7886":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:41929:11495":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7342:36355":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:31243:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14373:10124":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11666:9724":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:1509:12016":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:22691:11430":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:46190:11582":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15868:10540":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"24:7197:12768":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:23118:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:16098:10613":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:6249:9396":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11041:8897":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"3:0:477":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:7090:10891":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:119:16271":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:15108:10341":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:23211:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11113:9673":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:44211:11369":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13285:9905":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2969:21814":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:5344:9306":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:3160:32979":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:7529:9527":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:8300:7620":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:2048:9132":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:43715:11511":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:3443:11694":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:15747:10522":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:3021:8090":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"24:6581:12685":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:640:11670":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4578:12281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:1040:8004":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:5322:10700":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"24:478:11940":{"crate_id":24,"path":["libc","unix","timeval"],"kind":"struct"},"16:7391:22682":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:42056:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11476:8753":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"22:124:8878":{"crate_id":22,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"1:4798:9389":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5963:10732":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:22683:11429":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:14041:10048":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:256:9521":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12230:9795":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2864:10657":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:11050:11408":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:7633:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:7993:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:48331:7575":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10657:8897":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:46390:11593":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:9759:22740":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4676:12309":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:46227:11584":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11590:9715":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:5745:9307":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:2706:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:15184:10358":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15079:10333":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6742:10845":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:31271:9103":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14633:10149":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:123:8664":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:43861:11523":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:637:11668":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:43953:11526":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:41218:8033":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5859:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12784:8931":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:4773:9543":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"24:6394:12591":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4584:12284":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11469:9702":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"9:393:21666":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:1579:12061":{"crate_id":24,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11645:9720":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:2907:10659":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14843:10297":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:1516:7760":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:22280:15904":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:10944:11196":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"24:1638:12104":{"crate_id":24,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:10953:11714":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11523:8906":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16076:10607":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"21:0:1797":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"17:15311:10393":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:574:9483":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:4703:15499":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15329:10397":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3199:11687":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12872:9843":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:1902:15396":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:12051:1637":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:43879:11524":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:15345:10400":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:11370:11732":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:1534:7849":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:2370:15420":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4535:12257":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:1537:12024":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12055:1694":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11155:9677":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4914:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:43238:2511":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:40855:8057":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6194:9124":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:10738:11852":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:4915:15524":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"0:145:2246":{"crate_id":0,"path":["ahash","random_state","RandomSource"],"kind":"trait"},"24:8192:12940":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:516:11965":{"crate_id":24,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:16109:10614":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:6120:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:5340:12414":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:5939:8967":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:9651:22738":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:3966:15472":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6083:21785":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14497:10140":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:15301:10390":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11605:32788":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:40398:11459":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5974:12604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6813:12831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:5995:8972":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:533:9383":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:0:532":{"crate_id":2,"path":["core"],"kind":"module"},"2:39542:7978":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:4834:12218":{"crate_id":24,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:47198:11620":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46067:11577":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:4619:8398":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10618:36362":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:15659:10504":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:0:2378":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8866:7662":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6268:36356":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3043:8091":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:21288:34146":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:15546:10473":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"24:5001:12297":{"crate_id":24,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:2972:7987":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:10247:13257":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:4092:7850":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:548:11977":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43725:11512":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:3408:8106":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:12452:7635":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:8200:8074":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:22266:15654":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"24:585:12002":{"crate_id":24,"path":["libc","unix","protoent"],"kind":"struct"},"17:13504:9955":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:4129:29198":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:4906:15523":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6261:8983":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:2518:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:12038:1534":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:10149:149":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:44202:11463":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:569:11993":{"crate_id":24,"path":["libc","unix","tms"],"kind":"struct"},"16:4745:10687":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:21244:34142":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:42635:7580":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4428:12210":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14757:10252":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:15356:10404":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:5381:11707":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5023:12465":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:1501:12008":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"24:5317:12404":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:44220:11462":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13695:10000":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:7842:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:43263:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:10571:15429":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9048:29717":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:44673:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13809:10017":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:48118:11656":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:3672:7617":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:8167:11042":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10608:9648":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:14099:10074":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:4557:10682":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:9147:11837":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8453:11502":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:22365:15429":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:40633:8049":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:15689:10512":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7644:11665":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:536:8970":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8385:8117":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:4367:8397":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:43735:11513":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2209:15413":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"18:491:9482":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"23:0:1760":{"crate_id":23,"path":["getrandom"],"kind":"module"},"17:11617:9717":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:7028:9353":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12387:22870":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7554:9033":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3930:15471":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:8239:7862":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:4625:15475":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"22:333:2241":{"crate_id":22,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"2:44650:13115":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6600:22678":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7284:7736":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"20:0:1910":{"crate_id":20,"path":["zerocopy"],"kind":"module"},"2:43807:11518":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6332:9017":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:1558:12047":{"crate_id":24,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5825:9119":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:22656:11428":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:3738:9132":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:21271:34136":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:7437:12885":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:3103:8102":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:8872:11716":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"0:1617:2270":{"crate_id":0,"path":["ahash","random_state","set_random_source"],"kind":"function"},"17:15267:10382":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:39589:8103":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"20:325:2523":{"crate_id":20,"path":["zerocopy","FromBytes"],"kind":"trait"},"1:11476:11696":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:21616:15429":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:39642:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10822:11695":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:41984:11393":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"23:138:182":{"crate_id":23,"path":["getrandom","use_file","Mutex"],"kind":"struct"},"24:5226:12365":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:21908:15569":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:4986:10695":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7422:7630":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11816:9421":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"11:1566:21744":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:4028:15476":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"14:221:11135":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:7523:10973":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:12180:9792":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"14:31:11128":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:15645:10497":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:501:11945":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12140:9789":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:12056:1244":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2416:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:46514:11596":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:22320:15655":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:48010:11654":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5712:8988":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:3594:7849":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:515:9480":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:42081:7662":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4932:12404":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:48156:11657":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:5639:11715":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:9565:716":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:40815:8071":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:21499:15563":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10852:22755":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:6543:15553":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8308:11803":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:830:9322":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:5088:10698":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2693:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:5146:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4375:12167":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14266:10102":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1538:7662":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:7651:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:5816:8998":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"24:5505:12486":{"crate_id":24,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:21933:8810":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:41822:9105":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:5829:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40783:8054":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:6408:12602":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:6500:12653":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:6159:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:46107:11579":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:1439:7850":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:2169:22802":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9559:22723":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:44910:11568":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7015:10882":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:1556:8429":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:16032:10596":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:11549:9712":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:14346:10122":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:4172:11370":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:21444:15429":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:46005:11575":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:11034:9412":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4556:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7492:10969":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:39760:8105":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:15855:9887":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"24:8145:12930":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:6128:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4053:10676":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:39954:30292":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:7267:7657":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:3074:8096":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"9:357:21680":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:43478:11506":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:6959:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:8134:11038":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"14:165:21748":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10535:11689":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:2482:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:3231:7627":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:4700:15525":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:22600:9097":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10016:22722":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:40370:11456":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4639:12816":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"11:2151:8006":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10962:9664":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6893:8984":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:1024:9306":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:5982:10739":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10186:1819":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1691:12128":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:43078:8010":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:7923:11749":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:849:7850":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3241:11690":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:10095:11842":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:8050:11029":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:12459:8909":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:3988:15474":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3394:9307":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:3065:9547":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4635:12812":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:40796:8069":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:5500:11714":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:42133:8417":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12418:9819":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:3461:10669":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:3251:8431":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:3232:10633":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:3188:7582":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:13298:9380":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:10430:11824":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"13:0:2370":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:40483:15742":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:1534:12030":{"crate_id":24,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13235:8940":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:811:7659":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:2943:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:7679:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"20:355:2524":{"crate_id":20,"path":["zerocopy","AsBytes"],"kind":"trait"},"1:10097:11841":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:2653:15429":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11158:11825":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:7380:32535":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11453:9417":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:11178:9095":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13491:9954":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:15589:10489":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:1502:12014":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8984:11830":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"24:7337:12826":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12273:9841":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:6804:12828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:3239:11689":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13162:9891":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:1878:15913":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:599:36367":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:2205:9354":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:7931:9132":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:5332:12409":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6079:12666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"24:5013:12306":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:2423:7662":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:4955:12414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:9014:11834":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:14778:10262":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"24:5149:12327":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:6344:12570":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4480:12236":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:645:15360":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"24:7205:12773":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12244:9799":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"11:1087:36330":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6915:9029":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4830:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:6960:10868":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:22729:33367":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:5574:8987":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:5419:12458":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:40434:11462":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:6540:11724":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:8991:29352":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:12517:15697":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:9026:9134":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:1685:9306":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:3196:36261":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:3600:10670":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:1094:9528":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"24:1525:12024":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14989:10314":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:43275:11502":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:5743:10714":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40442:11369":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:11194:22775":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:13882:9744":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6818:10859":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:10780:11858":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12536:9825":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12032:450":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12828:9841":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1710:12135":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"24:0:877":{"crate_id":24,"path":["libc"],"kind":"module"},"17:13145:9888":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:43013:11007":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:328:13004":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:2939:7975":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11256:9689":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11345:9693":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:5547:12511":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:11126:9674":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:22774:13032":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"24:5061:12309":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"24:5374:12439":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1639:12096":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:614:36368":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:21625:15564":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:434:36334":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:8352:11702":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6222:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15027:10319":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10422:9645":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8493:15536":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:2979:34740":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:40457:15741":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:10102:8914":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9474:11744":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:14878:10298":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8157:11695":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:44654:9095":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:836:7849":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:1514:12014":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:3146:7977":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:7296:7617":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:12044:797":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"24:5389:12448":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:7843:11744":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:8979:7738":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5928:12582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:1968:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2953:2542":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13347:9913":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:1270:8004":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:2810:10655":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:10762:13127":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"24:6532:12666":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44819:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13334:9912":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7102:22681":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:5051:11706":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2596:10646":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:44829:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"7:0:1684":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7580:9404":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:44007:11405":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:10725:7849":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:11609:15694":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13787:10016":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:15384:10412":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4776:12334":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:22414:15644":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:5821:8065":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:2304:8004":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:43497:11397":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:15321:10396":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15177:10357":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5910:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:4252:7849":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:5299:12393":{"crate_id":24,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2788:10654":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14470:10137":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8213:11398":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:40382:33384":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12366:22869":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:6927:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:39781:11454":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"0:1555:152":{"crate_id":0,"path":["ahash","HashSet"],"kind":"type_alias"},"1:12054:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:44634:13111":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5982:12609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:1486:7997":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:10191:1883":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:40806:8070":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12718:22747":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:21518:9096":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:11535:11409":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"11:1603:11142":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:46245:11585":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:1550:8428":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:41233:8037":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2487:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11516:11697":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6781:12821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:5482:12479":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15725:10516":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:1516:12019":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:2380:15425":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"24:1564:12049":{"crate_id":24,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11657:9723":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:5891:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:8198:12941":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:46704:11602":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:6698:12721":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13182:9901":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10915:9660":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:4873:12238":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"9:52:9052":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:2380:10637":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:5498:12484":{"crate_id":24,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10207:8917":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:22745:33370":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:9813:22742":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:43817:11519":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"24:7428:12882":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:6802:12761":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13832:10022":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:12497:7628":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:8309:8045":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:5278:12383":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:2369:11145":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:12191:9793":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"24:558:11988":{"crate_id":24,"path":["libc","unix","sigval"],"kind":"struct"},"2:2329:15904":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:14662:10169":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14181:10089":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7462:10960":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:15733:10519":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4496:12240":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14312:10109":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:8097:11033":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"24:5071:12310":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:596:12002":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:918:7760":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:30697:8008":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40985:8074":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"}},"external_crates":{"23":{"name":"getrandom","html_root_url":"https://docs.rs/getrandom/0.2.11/"},"20":{"name":"zerocopy","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"once_cell","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"libc","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}