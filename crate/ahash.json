{"root":"0:0:2510","crate_version":"0.8.11","includes_private":false,"index":{"b:2:2784-0:1564:2410":{"id":"b:2:2784-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2786:3076"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1494:211":{"id":"0:1494:211","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[111,4],"end":[111,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"5:5703:35935":{"id":"5:5703:35935","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2829","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2829","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3315:261-0:1564:2410":{"id":"a:2:3315:261-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3089-0:1553:2409":{"id":"b:2:3089-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3092:8394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13744:27830":{"id":"2:13744:27830","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13832:35219":{"id":"2:13832:35219","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13852:14736":{"id":"2:13852:14736","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:14736"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44900:11449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:27869":{"id":"2:13801:27869","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3959-0:1286:2406":{"id":"b:2:3959-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3099-0:1553:2409":{"id":"b:2:3099-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3102:150","2:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1458:860":{"id":"0:1458:860","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[20,4],"end":[22,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashSet","id":"1:1503:168","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1475":{"id":"0:1475","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3551:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1478:263","0:1479:654"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1546-0:1553:2409":{"id":"0:1546-0:1553:2409","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,8],"end":[126,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_map::AHashMap","name":"AHashMap","id":"0:1553:2409","glob":false}}},"0:1563:496":{"id":"0:1563:496","crate_id":0,"name":"clone","span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3093-0:1553:2409":{"id":"b:2:3093-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5720:27597":{"id":"5:5720:27597","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13846:27595"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:784:8825":{"id":"5:784:8825","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231-0:1617:2417":{"id":"0:231-0:1617:2417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::random_state::RandomState","name":"RandomState","id":"0:1617:2417","glob":false}}},"0:1623:496":{"id":"0:1623:496","crate_id":0,"name":"clone","span":{"filename":"src/random_state.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2428":{"id":"0:246:2428","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:780-0:1553:2409":{"id":"b:5:780-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:782:8608","5:783:8495","5:784:8825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:235:2425":{"id":"0:235:2425","crate_id":0,"name":"HashMapExt","span":{"filename":"src/lib.rs","begin":[155,0],"end":[160,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashMap type alias.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:236:1212","0:237:2428"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:241"]}}},"0:71:2724":{"id":"0:71:2724","crate_id":0,"name":"write_usize","span":{"filename":"src/fallback_hash.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[cfg(any(target_pointer_width = \"64\", target_pointer_width = \"32\",\ntarget_pointer_width = \"16\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42688:8360-0:1564:2410":{"id":"a:2:42688:8360-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42688:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42688:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42688:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[187,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashSetExt","id":"0:238:2431","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1503:168","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:250:1212","0:251:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13738:35202":{"id":"2:13738:35202","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13736:35201"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13756:27853":{"id":"2:13756:27853","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13755:2649","str::split_at_mut_checked":"2:13758:27857"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1403:8281":{"id":"0:1403:8281","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[362,4],"end":[362,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:893:8467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"2:13753:35204":{"id":"2:13753:35204","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12605:1770","str::slice_mut_unchecked":"2:13754:35205","crate::ops::Index":"2:40135:8274"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:780-0:1617:2417":{"id":"b:5:780-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:782:8608","5:783:8495","5:784:8825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:2720":{"id":"0:67:2720","crate_id":0,"name":"write_u16","span":{"filename":"src/fallback_hash.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1376":{"id":"0:1376","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[309,0],"end":[315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1504:211":{"id":"0:1504:211","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[175,4],"end":[175,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"2:13822:35217":{"id":"2:13822:35217","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13454:15086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13818:35214":{"id":"2:13818:35214","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3089-0:1617:2417":{"id":"b:2:3089-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3092:8394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2784-0:1553:2409":{"id":"b:2:2784-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2786:3076"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1347:8414":{"id":"0:1347:8414","crate_id":0,"name":"get_key_value","span":{"filename":"src/hash_map.rs","begin":[127,4],"end":[133,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{"`Eq`":"2:2871:147","`Hash`":"2:10864:165"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1499:211":{"id":"0:1499:211","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[143,4],"end":[143,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1523:185":{"id":"0:1523:185","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[259,4],"end":[259,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:1291":{"id":"0:1291","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1292:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1524:8281":{"id":"0:1524:8281","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[260,4],"end":[260,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:1629:8467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"5:5704:8837":{"id":"5:5704:8837","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3108:1855":{"id":"2:3108:1855","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702":{"id":"5:5702","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5703:35935","5:5704:8837","5:5706:35936","5:5708:35937","5:5716:35938","5:5717:35939","5:5718:8655","5:5719:27598","5:5720:27597"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1506":{"id":"0:1506","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[202,0],"end":[232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3394:8505","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1509:211","0:1510:1787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13847:27776":{"id":"2:13847:27776","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:39804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13786:27862":{"id":"2:13786:27862","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13426:8256","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::split":"2:13782:27858"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44610:11489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32861:8200-0:1553:2409":{"id":"a:2:32861:8200-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13760:11506":{"id":"2:13760:11506","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44562:8251","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:1286:2406":{"id":"b:2:2784-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2786:3076"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1356":{"id":"0:1356","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[278,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3551:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1360:263","0:1361:654"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1456":{"id":"0:1456","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[19,0],"end":[23,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1503:168","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1458:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3961:1870":{"id":"2:3961:1870","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40304:2830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13829:27872":{"id":"2:13829:27872","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5708:35937":{"id":"5:5708:35937","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1469:2428":{"id":"0:1469:2428","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_set.rs","begin":[58,4],"end":[60,5]},"visibility":"public","docs":"This crates a hashset with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1212"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:169":{"id":"0:170:169","crate_id":0,"name":"Hasher","span":{"filename":"src/random_state.rs","begin":[384,4],"end":[384,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:253:60":{"id":"0:253:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":"Constructs a new [AHasher] with fixed keys.\nIf `std` is enabled these will be generated upon first invocation.\nOtherwise if the `compile-time-rng`feature is enabled these will be generated at compile time.\nIf neither of these features are available, hardcoded constants will be used.\n\nBecause the values are fixed, different hashers will all hash elements the same way.\nThis could make hash values predictable, if DOS attacks are a concern. If this behaviour is\nnot required, it may be preferable to use [RandomState] instead.\n\n# Examples\n\n```\nuse ahash::AHasher;\nuse std::hash::Hasher;\n\nlet mut hasher_1 = AHasher::default();\nlet mut hasher_2 = AHasher::default();\n\nhasher_1.write_u32(1234);\nhasher_2.write_u32(1234);\n\nassert_eq!(hasher_1.finish(), hasher_2.finish());\n```","links":{"RandomState":"0:1617:2417","AHasher":"0:1286:2406"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3350:15288-0:1553:2409":{"id":"a:2:3350:15288-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3350:15288","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3350:15288","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1572:496":{"id":"0:1572:496","crate_id":0,"name":"clone","span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1617:2417":{"id":"0:1617:2417","crate_id":0,"name":"RandomState","span":{"filename":"src/random_state.rs","begin":[220,0],"end":[225,1]},"visibility":"public","docs":"Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create\n[AHasher]s in order to hash the keys of the map. See `build_hasher` below.\n\n[build_hasher]: ahash::\n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap\n\nThere are multiple constructors each is documented in more detail below:\n\n| Constructor   | Dynamically random? | Seed |\n|---------------|---------------------|------|\n|`new`          | Each instance unique|_[RandomSource]_|\n|`generate_with`| Each instance unique|`u64` x 4 + [RandomSource]|\n|`with_seed`    | Fixed per process   |`u64` + static random number|\n|`with_seeds`   | Fixed               |`u64` x 4|\n","links":{"RandomSource":"0:145:2850","AHasher":"0:1286:2406","std::hash::Hasher":"2:10872:169","std::collections::HashMap":"1:786:166"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:154","a:2:32803:249-0:1617:2417","a:2:3315:261-0:1617:2417","a:2:3350:15288-0:1617:2417","a:2:32861:8200-0:1617:2417","a:2:42688:8360-0:1617:2417","a:2:42689:8359-0:1617:2417","b:2:2784-0:1617:2417","b:2:2787-0:1617:2417","b:2:2816-0:1617:2417","b:2:3089-0:1617:2417","b:2:3093-0:1617:2417","b:2:3099-0:1617:2417","b:2:3104-0:1617:2417","b:2:3959-0:1617:2417","b:5:780-0:1617:2417","0:1622","0:152","0:167","0:169"]}}},"0:1362":{"id":"0:1362","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[285,0],"end":[289,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3564:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1366:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1341":{"id":"0:1341","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[80,0],"end":[276,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1345:8407","0:1347:8414","0:1349:8419","0:1351:2481","0:1352:8447","0:1353:8455","0:1354:8460"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13804:3085":{"id":"2:13804:3085","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13426:8256","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::rmatches":"2:13806:35209"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44796:11644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2510":{"id":"0:0:2510","crate_id":0,"name":"ahash","span":{"filename":"src/lib.rs","begin":[1,0],"end":[396,1]},"visibility":"public","docs":"AHash is a high performance keyed hash function.\n\nIt quickly provides a high quality hash where the result is not predictable without knowing the Key.\nAHash works with `HashMap` to hash keys, but without allowing for the possibility that an malicious user can\ninduce a collision.\n\n# How aHash works\n\nWhen it is available aHash uses the hardware AES instructions to provide a keyed hash function.\nWhen it is not, aHash falls back on a slightly slower alternative algorithm.\n\nBecause aHash does not have a fixed standard for its output, it is able to improve over time.\nBut this also means that different computers or computers using different versions of ahash may observe different\nhash values for the same input.\n# Basic Usage\nAHash provides an implementation of the [Hasher] trait.\nTo construct a HashMap using aHash as its hasher do the following:\n```\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, RandomState> = HashMap::default();\nmap.insert(12, 34);\n```\n\n### Randomness\n\nThe above requires a source of randomness to generate keys for the hashmap. By default this obtained from the OS.\nIt is also possible to have randomness supplied via the `compile-time-rng` flag, or manually.\n\n### If randomess is not available\n\n[AHasher::default()] can be used to hash using fixed keys. This works with\n[BuildHasherDefault](std::hash::BuildHasherDefault). For example:\n\n```\nuse std::hash::BuildHasherDefault;\nuse std::collections::HashMap;\nuse ahash::AHasher;\n\nlet mut m: HashMap<_, _, BuildHasherDefault<AHasher>> = HashMap::default();\n # m.insert(12, 34);\n```\nIt is also possible to instantiate [RandomState] directly:\n\n```\nuse ahash::HashMap;\nuse ahash::RandomState;\n\nlet mut m = HashMap::with_hasher(RandomState::with_seed(42));\n # m.insert(1, 2);\n```\nOr for uses besides a hashhmap:\n```\nuse std::hash::BuildHasher;\nuse ahash::RandomState;\n\nlet hash_builder = RandomState::with_seed(42);\nlet hash = hash_builder.hash_one(\"Some Data\");\n```\nThere are several constructors for [RandomState] with different ways to supply seeds.\n\n# Convenience wrappers\n\nFor convenience, both new-type wrappers and type aliases are provided.\n\nThe new type wrappers are called called `AHashMap` and `AHashSet`.\n```\nuse ahash::AHashMap;\n\nlet mut map: AHashMap<i32, i32> = AHashMap::new();\nmap.insert(12, 34);\n```\nThis avoids the need to type \"RandomState\". (For convenience `From`, `Into`, and `Deref` are provided).\n\n# Aliases\n\nFor even less typing and better interop with existing libraries (such as rayon) which require a `std::collection::HashMap` ,\nthe type aliases [HashMap], [HashSet] are provided.\n\n```\nuse ahash::{HashMap, HashMapExt};\n\nlet mut map: HashMap<i32, i32> = HashMap::new();\nmap.insert(12, 34);\n```\nNote the import of [HashMapExt]. This is needed for the constructor.","links":{"HashMapExt":"0:235:2425","std::hash::BuildHasherDefault":"2:10912:2485","AHasher::default()":"0:253:60","RandomState":"0:1617:2417","HashMap":"0:1548:166","HashSet":"0:1551:168","Hasher":"2:10872:169"},"attrs":["#![deny(clippy::correctness, clippy::complexity, clippy::perf)]","#![allow(clippy::pedantic, clippy::cast_lossless, clippy::unreadable_literal)]","#![feature(min_specialization)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:2421","0:1295-0:1286:2406","0:1546-0:1553:2409","0:1547-0:1564:2410","0:1548:166","0:1551:168","0:231-0:1617:2417","0:235:2425","0:238:2431"],"is_stripped":false}}},"0:1484":{"id":"0:1484","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[89,0],"end":[97,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2866:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1487:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5719:27598":{"id":"5:5719:27598","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13845:27596"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42689:8359-0:1286:2406":{"id":"a:2:42689:8359-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3089-0:1286:2406":{"id":"b:2:3089-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3092:8394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1397":{"id":"0:1397","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[360,0],"end":[366,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1402:185","0:1403:8281","0:1404:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1517:863":{"id":"0:1517:863","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_set.rs","begin":[251,4],"end":[255,5]},"visibility":"default","docs":"This crates a hashset from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1212"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1532":{"id":"0:1532","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[274,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one_unchecked","extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:8328:8205","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1535:8465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42689:8359-0:1564:2410":{"id":"a:2:42689:8359-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:172:2932":{"id":"0:172:2932","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[463,4],"end":[465,5]},"visibility":"default","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:10865:902","`Hasher`":"2:10872:169","`Hash`":"2:10864:165"},"attrs":["#[cfg(feature = \"specialize\")]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1367":{"id":"0:1367","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[291,0],"end":[296,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42688:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42688:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42688:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13762:2490":{"id":"2:13762:2490","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44578:9202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42689:8359-0:1553:2409":{"id":"a:2:42689:8359-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32861:8200-0:1617:2417":{"id":"a:2:32861:8200-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1418:8281":{"id":"0:1418:8281","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[378,4],"end":[378,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:916:8281","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:251:2428":{"id":"0:251:2428","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[195,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1569":{"id":"0:1569","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[16,9],"end":[16,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1572:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13735:35200":{"id":"2:13735:35200","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:32024":{"id":"2:13765:32024","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44846:11646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:35205":{"id":"2:13754:35205","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12605:1770","crate::ops::IndexMut":"2:3621:8275","str::slice_unchecked":"2:13753:35204"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:1617:2417":{"id":"b:2:2784-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2786:3076"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13768:2802":{"id":"2:13768:2802","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3315:261-0:1553:2409":{"id":"a:2:3315:261-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13772:27871":{"id":"2:13772:27871","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13827:27354":{"id":"2:13827:27354","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:35208":{"id":"2:13791:35208","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13426:8256","str::split":"2:13782:27858","prim@char":"1:12599:492","str::split_terminator":"2:13789:35207"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44660:11641","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:780-0:1286:2406":{"id":"b:5:780-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:782:8608","5:783:8495","5:784:8825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1366:656":{"id":"0:1366:656","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_map.rs","begin":[286,4],"end":[288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3551:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[127,0],"end":[200,1]},"visibility":"default","docs":"Provides [Hasher] methods to hash all of the primitive types.\n\n[Hasher]: core::hash::Hasher","links":{"core::hash::Hasher":"2:10872:169"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_u16","write_i16","write_isize","write_usize","write_u32","write_i32","write_length_prefix","write_i64","write_u64","write_u8","write_i8","write_str","write_i128","write_u128"],"trait":{"name":"Hasher","id":"2:10872:169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2719","0:67:2720","0:68:2721","0:69:2722","0:70:2723","0:71:2724","0:72:2726","0:73:2476"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3959-0:1553:2409":{"id":"b:2:3959-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1371":{"id":"0:1371","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[298,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2866:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2866:213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1375:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1537":{"id":"0:1537","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[285,0],"end":[294,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3310:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one_unchecked","extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:8328:8205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1541:8465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1473:2435":{"id":"0:1473:2435","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_set.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1564:2410":{"id":"0:1564:2410","crate_id":0,"name":"AHashSet","span":{"filename":"src/hash_set.rs","begin":[17,0],"end":[17,55]},"visibility":"public","docs":"A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"std::collections::HashSet":"1:1503:168","crate::RandomState":"0:1617:2417"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1466","0:1470","a:2:32803:249-0:1564:2410","a:2:3315:261-0:1564:2410","a:2:3350:15288-0:1564:2410","a:2:32861:8200-0:1564:2410","a:2:42688:8360-0:1564:2410","a:2:42689:8359-0:1564:2410","b:2:2784-0:1564:2410","b:2:2787-0:1564:2410","b:2:2816-0:1564:2410","b:2:3089-0:1564:2410","b:2:3093-0:1564:2410","b:2:3099-0:1564:2410","b:2:3104-0:1564:2410","b:2:3959-0:1564:2410","b:5:780-0:1564:2410","0:1569","0:1456","0:1459","0:1463","0:1475","0:1480","0:1484","0:1488","0:1491","0:1496","0:1501","0:1506","0:1511","0:1515","0:1519","0:1526","0:1532","0:1537","0:1543"]}}},"2:13734:8765":{"id":"2:13734:8765","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13843:27773":{"id":"2:13843:27773","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40488:15140","Self::is_ascii":"2:13842:27599"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40488:15140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:1212":{"id":"0:245:1212","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[177,4],"end":[179,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1474:2436":{"id":"0:1474:2436","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_set.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1334:2428":{"id":"0:1334:2428","crate_id":0,"name":"with_capacity","span":{"filename":"src/hash_map.rs","begin":[62,4],"end":[64,5]},"visibility":"public","docs":"This crates a hashmap with the specified capacity using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1212"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:2504":{"id":"0:163:2504","crate_id":0,"name":"with_seeds","span":{"filename":"src/random_state.rs","begin":[308,4],"end":[315,5]},"visibility":"public","docs":"Allows for explicitly setting the seeds to used.\nAll `RandomState`s created with the same set of keys key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nNote: If DOS resistance is desired one of these should be a decent quality random number.\nIf 4 high quality random number are not cheaply available this method is robust against 0s being passed for\none or more of the parameters or the same value being passed for more than one parameter.\nIt is recommended to pass numbers in order from highest to lowest quality (if there is any difference).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1352:8447":{"id":"0:1352:8447","crate_id":0,"name":"into_keys","span":{"filename":"src/hash_map.rs","begin":[216,4],"end":[218,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```\n\n# Performance\n\nIn the current implementation, iterating over keys takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoKeys","id":"1:971:8379","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1345:8407":{"id":"0:1345:8407","crate_id":0,"name":"get","span":{"filename":"src/hash_map.rs","begin":[102,4],"end":[108,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{"`Eq`":"2:2871:147","`Hash`":"2:10864:165"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13853:35224":{"id":"2:13853:35224","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:35224"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44909:11570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240:2428":{"id":"0:240:2428","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[169,4],"end":[169,46]},"visibility":"default","docs":"Constructs a new HashSet with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13809:35210":{"id":"2:13809:35210","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13426:8256","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::rmatch_indices":"2:13811:35211"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44742:11642","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1317":{"id":"0:1317","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[23,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:786:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1320:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1360:263":{"id":"0:1360:263","crate_id":0,"name":"Target","span":{"filename":"src/hash_map.rs","begin":[279,4],"end":[279,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashMap","id":"1:786:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1361:654":{"id":"0:1361:654","crate_id":0,"name":"deref","span":{"filename":"src/hash_map.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3551:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1412:985":{"id":"0:1412:985","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8319:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[383,0],"end":[466,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_one"],"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:170:169","0:171:2467","0:172:2932"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1510:1787":{"id":"0:1510:1787","crate_id":0,"name":"sub","span":{"filename":"src/hash_set.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1559":{"id":"0:1559","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1563:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2786:3076":{"id":"2:2786:3076","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13837:35221":{"id":"2:13837:35221","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1531:985":{"id":"0:1531:985","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[269,4],"end":[271,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8319:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:29047":{"id":"2:13854:29047","crate_id":2,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"2:13782:27858","`str::find`":"2:13775:8802"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"2:40167:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13741:2747":{"id":"2:13741:2747","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12948:15089"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742:35203":{"id":"2:13742:35203","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1426":{"id":"0:1426","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[395,0],"end":[405,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3310:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3310:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one_unchecked","extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:8328:8205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1431:8465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1405":{"id":"0:1405","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[368,0],"end":[374,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1410:185","0:1411:8281","0:1412:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3089-0:1564:2410":{"id":"b:2:3089-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3092:8394"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3959-0:1564:2410":{"id":"b:2:3959-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3104-0:1286:2406":{"id":"b:2:3104-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3107:150","2:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13733:1027":{"id":"2:13733:1027","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12599:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1292:830":{"id":"0:1292:830","crate_id":0,"name":"fmt","span":{"filename":"src/fallback_hash.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:8407":{"id":"2:13745:8407","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2721":{"id":"0:68:2721","crate_id":0,"name":"write_u32","span":{"filename":"src/fallback_hash.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:27777":{"id":"2:13848:27777","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:39804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1496":{"id":"0:1496","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[138,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"2:34461:8502","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1499:211","0:1500:427"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2789:27281":{"id":"2:2789:27281","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1387":{"id":"0:1387","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[336,0],"end":[345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1391:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3104-0:1617:2417":{"id":"b:2:3104-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3107:150","2:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32803:249-0:1286:2406":{"id":"a:2:32803:249-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1514:830":{"id":"0:1514:830","crate_id":0,"name":"fmt","span":{"filename":"src/hash_set.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:33065":{"id":"2:13764:33065","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13763:33064"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44875:11649","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1483:656":{"id":"0:1483:656","crate_id":0,"name":"deref_mut","span":{"filename":"src/hash_set.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3551:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1463":{"id":"0:1463","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[43,0],"end":[47,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"1:1503:168","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1465:8394"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13849:27778":{"id":"2:13849:27778","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:39804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1530:8281":{"id":"0:1530:8281","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_set.rs","begin":[268,4],"end":[268,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"1:1633:8281","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"2:13825:35218":{"id":"2:13825:35218","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1326":{"id":"0:1326","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[47,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"1:786:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1329:8394"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1526":{"id":"0:1526","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[266,0],"end":[272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1529:185","0:1530:8281","0:1531:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1543":{"id":"0:1543","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[300,0],"end":[306,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1617:2417"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1545:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13743:352":{"id":"2:13743:352","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13744:27830","`u8`":"1:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1529:185":{"id":"0:1529:185","crate_id":0,"name":"Item","span":{"filename":"src/hash_set.rs","begin":[267,4],"end":[267,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1459":{"id":"0:1459","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[25,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1462:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1525:985":{"id":"0:1525:985","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_set.rs","begin":[261,4],"end":[263,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8319:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2787-0:1617:2417":{"id":"b:2:2787-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2789:27281"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1480":{"id":"0:1480","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[83,0],"end":[87,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3564:3166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1483:656"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13763:33064":{"id":"2:13763:33064","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13764:33065"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44866:11648","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:780-0:1564:2410":{"id":"b:5:780-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:782:8608","5:783:8495","5:784:8825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:2900":{"id":"0:156:2900","crate_id":0,"name":"generate_with","span":{"filename":"src/random_state.rs","begin":[255,4],"end":[259,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` based on the provided seeds, but in such a way\nthat each time it is called the resulting state will be different and of high quality.\nThis allows fixed constant or poor quality seeds to be provided without the problem of different\n`BuildHasher`s being identical or weak.\n\nThis is done via permuting the provided values with the value of a static counter and memory address.\n(This makes this method somewhat more expensive than `with_seeds` below which does not do this).\n\nThe provided values (k0-k3) do not need to be of high quality but they should not all be the same value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["k0",{"primitive":"u64"}],["k1",{"primitive":"u64"}],["k2",{"primitive":"u64"}],["k3",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13821:35216":{"id":"2:13821:35216","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1330":{"id":"0:1330","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[53,0],"end":[65,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1333:1212","0:1334:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1515":{"id":"0:1515","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[244,0],"end":[256,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:8308:158","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1517:863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3093-0:1286:2406":{"id":"b:2:3093-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42689:8359-0:1617:2417":{"id":"a:2:42689:8359-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42689:8359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3093-0:1564:2410":{"id":"b:2:3093-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13850:35223":{"id":"2:13850:35223","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:35223"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44891:11571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13770:27870":{"id":"2:13770:27870","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:8764":{"id":"2:13778:8764","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42594:203","prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:35936":{"id":"5:5706:35936","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1402:185":{"id":"0:1402:185","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[361,4],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"5:5716:35938":{"id":"5:5716:35938","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1349:8419":{"id":"0:1349:8419","crate_id":0,"name":"get_mut","span":{"filename":"src/hash_map.rs","begin":[154,4],"end":[160,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n```","links":{"`Eq`":"2:2871:147","`Hash`":"2:10864:165"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1419:985":{"id":"0:1419:985","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[379,4],"end":[381,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8319:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13736:35201":{"id":"2:13736:35201","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2911":{"id":"0:162:2911","crate_id":0,"name":"with_seed","span":{"filename":"src/random_state.rs","begin":[294,4],"end":[297,5]},"visibility":"public","docs":"Build a `RandomState` from a single key. The provided key does not need to be of high quality,\nbut all `RandomState`s created from the same key will produce identical hashers.\n(In contrast to `generate_with` above)\n\nThis allows for explicitly setting the seed to be used.\n\nNote: This method does not require the provided seed to be strong.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["key",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1466":{"id":"0:1466","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[49,0],"end":[61,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1468:1212","0:1469:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155:1212":{"id":"0:155:1212","crate_id":0,"name":"new","span":{"filename":"src/random_state.rs","begin":[239,4],"end":[243,5]},"visibility":"public","docs":"Create a new `RandomState` `BuildHasher` using random keys.\n\nEach instance will have a unique set of keys derived from [RandomSource].\n","links":{"RandomSource":"0:145:2850"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3315:261-0:1617:2417":{"id":"a:2:3315:261-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3102:150":{"id":"2:3102:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:1320:860":{"id":"0:1320:860","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["item",{"resolved_path":{"name":"HashMap","id":"1:786:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:35213":{"id":"2:13816:35213","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:782:8608":{"id":"5:782:8608","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1395:863":{"id":"0:1395:863","crate_id":0,"name":"from_iter","span":{"filename":"src/hash_map.rs","begin":[353,4],"end":[357,5]},"visibility":"default","docs":"This crates a hashmap from the provided iterator using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1212"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1351:2481":{"id":"0:1351:2481","crate_id":0,"name":"insert","span":{"filename":"src/hash_map.rs","begin":[185,4],"end":[187,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`] is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [module-level\ndocumentation] for more.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{"`None`":"2:42594:203"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1487:725":{"id":"0:1487:725","crate_id":0,"name":"eq","span":{"filename":"src/hash_set.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[227,0],"end":[231,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:153:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1295-0:1286:2406":{"id":"0:1295-0:1286:2406","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,8],"end":[117,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::fallback_hash::AHasher","name":"AHasher","id":"0:1286:2406","glob":false}}},"2:3092:8394":{"id":"2:3092:8394","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3066:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2476":{"id":"0:73:2476","crate_id":0,"name":"finish","span":{"filename":"src/fallback_hash.rs","begin":[196,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32803:249-0:1617:2417":{"id":"a:2:32803:249-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1335":{"id":"0:1335","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[67,0],"end":[78,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1339:2435","0:1340:2436"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13799:27868":{"id":"2:13799:27868","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:35222":{"id":"2:13840:35222","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13386:149","`FromStr`":"2:13385:8254"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13385:8254","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13385:8254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2816-0:1553:2409":{"id":"b:2:2816-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2814:8592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2818:27282"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13842:27599":{"id":"2:13842:27599","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1286:2406":{"id":"0:1286:2406","crate_id":0,"name":"AHasher","span":{"filename":"src/fallback_hash.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A `Hasher` for hashing an arbitrary stream of bytes.\n\nInstances of [`AHasher`] represent state that is updated while hashing data.\n\nEach method updates the internal state based on the new data provided. Once\nall of the data has been provided, the resulting hash can be obtained by calling\n`finish()`\n\n[Clone] is also provided in case you wish to calculate hashes for two different items that\nstart with the same data.\n","links":{"`AHasher`":"0:1286:2406","Clone":"2:2804:114"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32803:249-0:1286:2406","a:2:3315:261-0:1286:2406","a:2:3350:15288-0:1286:2406","a:2:32861:8200-0:1286:2406","a:2:42688:8360-0:1286:2406","a:2:42689:8359-0:1286:2406","b:2:2784-0:1286:2406","b:2:2787-0:1286:2406","b:2:2816-0:1286:2406","b:2:3089-0:1286:2406","b:2:3093-0:1286:2406","b:2:3099-0:1286:2406","b:2:3104-0:1286:2406","b:2:3959-0:1286:2406","b:5:780-0:1286:2406","0:1291","0:1293","0:65","0:252"]}}},"0:1339:2435":{"id":"0:1339:2435","crate_id":0,"name":"with_hasher","span":{"filename":"src/hash_map.rs","begin":[71,4],"end":[73,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:35939":{"id":"5:5717:35939","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2829","`String`":"5:7759:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2829","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1325:860":{"id":"0:1325:860","crate_id":0,"name":"from","span":{"filename":"src/hash_map.rs","begin":[42,4],"end":[44,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashMap;\n\nlet map1 = AHashMap::from([(1, 2), (3, 4)]);\nlet map2: AHashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1505:432":{"id":"0:1505:432","crate_id":0,"name":"bitxor","span":{"filename":"src/hash_set.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1468:1212":{"id":"0:1468:1212","crate_id":0,"name":"new","span":{"filename":"src/hash_set.rs","begin":[52,4],"end":[54,5]},"visibility":"public","docs":"This crates a hashset using [RandomState::new].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1212"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2787-0:1286:2406":{"id":"b:2:2787-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2789:27281"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1509:211":{"id":"0:1509:211","crate_id":0,"name":"Output","span":{"filename":"src/hash_set.rs","begin":[207,4],"end":[207,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"b:2:3104-0:1564:2410":{"id":"b:2:3104-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3107:150","2:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[99,0],"end":[104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:783:8495":{"id":"5:783:8495","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3099-0:1564:2410":{"id":"b:2:3099-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3102:150","2:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3350:15288-0:1564:2410":{"id":"a:2:3350:15288-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3350:15288","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3350:15288","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1479:654":{"id":"0:1479:654","crate_id":0,"name":"deref","span":{"filename":"src/hash_set.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3551:128","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3099-0:1286:2406":{"id":"b:2:3099-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3102:150","2:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1501":{"id":"0:1501","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[170,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"2:34807:8504","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1504:211","0:1505:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[233,0],"end":[364,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:155:1212","0:156:2900","0:162:2911","0:163:2504","0:164:2932"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3107:150":{"id":"2:3107:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32727:9031","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13747:8419":{"id":"2:13747:8419","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1470":{"id":"0:1470","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[63,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1473:2435","0:1474:2436"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:236:1212":{"id":"0:236:1212","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[157,4],"end":[157,21]},"visibility":"default","docs":"Constructs a new HashMap","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13789:35207":{"id":"2:13789:35207","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13426:8256","str::split":"2:13782:27858","prim@char":"1:12599:492","`DoubleEndedIterator`":"2:8387:134","str::rsplit_terminator":"2:13791:35208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44642:11640","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1491":{"id":"0:1491","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[106,0],"end":[136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"2:34634:8503","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1494:211","0:1495:429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13835:35220":{"id":"2:13835:35220","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3350:15288-0:1617:2417":{"id":"a:2:3350:15288-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3350:15288","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32803:249-0:1553:2409":{"id":"a:2:32803:249-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:250:1212":{"id":"0:250:1212","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[191,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13820:35215":{"id":"2:13820:35215","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13811:35211":{"id":"2:13811:35211","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13426:8256","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::match_indices":"2:13809:35210"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44760:11643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1436:60":{"id":"0:1436:60","crate_id":0,"name":"default","span":{"filename":"src/hash_map.rs","begin":[413,4],"end":[415,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13844:27600":{"id":"2:13844:27600","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1329:8394":{"id":"0:1329:8394","crate_id":0,"name":"into","span":{"filename":"src/hash_map.rs","begin":[48,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashMap","id":"1:786:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1420":{"id":"0:1420","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[384,0],"end":[393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one_unchecked","extend_one","extend_reserve"],"trait":{"name":"Extend","id":"2:8328:8205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1424:8465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1535:8465":{"id":"0:1535:8465","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1380":{"id":"0:1380","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[317,0],"end":[334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"2:40135:8274","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1385:211","0:1386:969"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2816-0:1617:2417":{"id":"b:2:2816-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2814:8592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2818:27282"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[29,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1325:860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[173,0],"end":[184,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"HashMapExt","id":"0:235:2425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::collections::HashMap","id":"1:786:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:245:1212","0:246:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32861:8200-0:1286:2406":{"id":"a:2:32861:8200-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:146:2861":{"id":"0:146:2861","crate_id":0,"name":"gen_hasher_seed","span":{"filename":"src/random_state.rs","begin":[133,4],"end":[133,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1411:8281":{"id":"0:1411:8281","crate_id":0,"name":"IntoIter","span":{"filename":"src/hash_map.rs","begin":[370,4],"end":[370,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:906:8468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"b:2:2816-0:1564:2410":{"id":"b:2:2816-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2814:8592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2818:27282"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1340:2436":{"id":"0:1340:2436","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/hash_map.rs","begin":[75,4],"end":[77,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[221,0],"end":[249,1]},"visibility":"default","docs":"Provides a default [Hasher] with fixed keys.\nThis is typically used in conjunction with [BuildHasherDefault] to create\n[AHasher]s in order to hash the keys of the map.\n\nGenerally it is preferable to use [RandomState] instead, so that different\nhashmaps will have different keys. However if fixed keys are desirable this\nmay be used instead.\n\n# Example\n```\nuse std::hash::BuildHasherDefault;\nuse ahash::{AHasher, RandomState};\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32, BuildHasherDefault<AHasher>> = HashMap::default();\nmap.insert(12, 34);\n```\n\n[BuildHasherDefault]: std::hash::BuildHasherDefault\n[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap","links":{"std::hash::BuildHasherDefault":"2:10912:2485","AHasher":"0:1286:2406","RandomState":"0:1617:2417","std::hash::Hasher":"2:10872:169"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:253:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1410:185":{"id":"0:1410:185","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[369,4],"end":[369,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[376,0],"end":[381,1]},"visibility":"default","docs":"Creates an instance of RandomState using keys obtained from the random number generator.\nEach instance created in this way will have a unique set of keys. (But the resulting instance\ncan be used to create many hashers each or which will have the same keys.)\n\nThis is the same as [RandomState::new()]\n\nNOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState::new()":"0:155:1212","RandomState":"0:1617:2417"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13794:27864":{"id":"2:13794:27864","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256","str::rsplitn":"2:13796:27866"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44696:11491","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2787-0:1553:2409":{"id":"b:2:2787-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2789:27281"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1354:8460":{"id":"0:1354:8460","crate_id":0,"name":"remove","span":{"filename":"src/hash_map.rs","begin":[269,4],"end":[275,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n```","links":{"`Eq`":"2:2871:147","`Hash`":"2:10864:165"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:2467":{"id":"0:171:2467","crate_id":0,"name":"build_hasher","span":{"filename":"src/random_state.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":"Constructs a new [AHasher] with keys based on this [RandomState] object.\nThis means that two different [RandomState]s will will generate\n[AHasher]s that will return different hashcodes, but [Hasher]s created from the same [BuildHasher]\nwill generate the same hashes for the same input data.\n\n # Examples\n```\n        use ahash::{AHasher, RandomState};\n        use std::hash::{Hasher, BuildHasher};\n    \n        let build_hasher = RandomState::new();\n        let mut hasher_1 = build_hasher.build_hasher();\n        let mut hasher_2 = build_hasher.build_hasher();\n    \n        hasher_1.write_u32(1234);\n        hasher_2.write_u32(1234);\n    \n        assert_eq!(hasher_1.finish(), hasher_2.finish());\n    \n        let other_build_hasher = RandomState::new();\n        let mut different_hasher = other_build_hasher.build_hasher();\n        different_hasher.write_u32(1234);\n        assert_ne!(different_hasher.finish(), hasher_1.finish());\n```\n    \n[Hasher]: std::hash::Hasher\n[BuildHasher]: std::hash::BuildHasher\n[HashMap]: std::collections::HashMap","links":{"RandomState":"0:1617:2417","AHasher":"0:1286:2406","std::hash::BuildHasher":"2:10907:2422","std::hash::Hasher":"2:10872:169"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:27860":{"id":"2:13784:27860","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13215:11486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1294:496":{"id":"0:1294:496","crate_id":0,"name":"clone","span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13749:27828":{"id":"2:13749:27828","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1478:263":{"id":"0:1478:263","crate_id":0,"name":"Target","span":{"filename":"src/hash_set.rs","begin":[77,4],"end":[77,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"1:1503:168","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"a:2:32861:8200-0:1564:2410":{"id":"a:2:32861:8200-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32861:8200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1375:725":{"id":"0:1375:725","crate_id":0,"name":"eq","span":{"filename":"src/hash_map.rs","begin":[304,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1500:427":{"id":"0:1500:427","crate_id":0,"name":"bitand","span":{"filename":"src/hash_set.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![2, 3, 4].into_iter().collect();\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13732":{"id":"2:13732","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13733:1027","2:13734:8765","2:13735:35200","2:13736:35201","2:13738:35202","2:13741:2747","2:13742:35203","2:13743:352","2:13744:27830","2:13745:8407","2:13747:8419","2:13749:27828","2:13751:27829","2:13753:35204","2:13754:35205","2:13755:2649","2:13756:27853","2:13757:27856","2:13758:27857","2:13760:11506","2:13761:11658","2:13762:2490","2:13763:33064","2:13764:33065","2:13765:32024","2:13766:35206","2:13767:33066","2:13768:2802","2:13770:27870","2:13772:27871","2:13775:8802","2:13778:8764","2:13782:27858","2:13784:27860","2:13786:27862","2:13789:35207","2:13791:35208","2:13794:27864","2:13796:27866","2:13799:27868","2:13801:27869","2:13804:3085","2:13806:35209","2:13809:35210","2:13811:35211","2:13814:35212","2:13816:35213","2:13818:35214","2:13820:35215","2:13821:35216","2:13822:35217","2:13825:35218","2:13827:27354","2:13829:27872","2:13832:35219","2:13835:35220","2:13837:35221","2:13840:35222","2:13842:27599","2:13843:27773","2:13844:27600","2:13845:27596","2:13846:27595","2:13847:27776","2:13848:27777","2:13849:27778","2:13850:35223","2:13852:14736","2:13853:35224","2:13854:29047"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13767:33066":{"id":"2:13767:33066","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44884:11505","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:27596":{"id":"2:13845:27596","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1511":{"id":"0:1511","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[234,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"2:10907:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1514:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:168:60":{"id":"0:168:60","crate_id":0,"name":"default","span":{"filename":"src/random_state.rs","begin":[378,4],"end":[380,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3315:261-0:1286:2406":{"id":"a:2:3315:261-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13755:2649":{"id":"2:13755:2649","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13757:27856","str::split_at_mut":"2:13756:27853"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1293":{"id":"0:1293","crate_id":0,"name":null,"span":{"filename":"src/fallback_hash.rs","begin":[22,16],"end":[22,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1294:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3093-0:1617:2417":{"id":"b:2:3093-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3095:860":{"id":"2:3095:860","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1353:8455":{"id":"0:1353:8455","crate_id":0,"name":"into_values","span":{"filename":"src/hash_map.rs","begin":[247,4],"end":[249,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```\n\n# Performance\n\nIn the current implementation, iterating over values takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoValues","id":"1:975:8380","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:830":{"id":"0:153:830","crate_id":0,"name":"fmt","span":{"filename":"src/random_state.rs","begin":[228,4],"end":[230,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42688:8360-0:1286:2406":{"id":"a:2:42688:8360-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42688:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1385:211":{"id":"0:1385:211","crate_id":0,"name":"Output","span":{"filename":"src/hash_map.rs","begin":[323,4],"end":[323,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"a:2:42688:8360-0:1617:2417":{"id":"a:2:42688:8360-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42688:8360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:2722":{"id":"0:69:2722","crate_id":0,"name":"write_u64","span":{"filename":"src/fallback_hash.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1553:2409":{"id":"0:1553:2409","crate_id":0,"name":"AHashMap","span":{"filename":"src/hash_map.rs","begin":[21,0],"end":[21,68]},"visibility":"public","docs":"A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n(Requires the `std` feature to be enabled.)","links":{"crate::RandomState":"0:1617:2417","std::collections::HashMap":"1:786:166"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1330","0:1335","0:1341","a:2:32803:249-0:1553:2409","a:2:3315:261-0:1553:2409","a:2:3350:15288-0:1553:2409","a:2:32861:8200-0:1553:2409","a:2:42689:8359-0:1553:2409","b:2:2784-0:1553:2409","b:2:2787-0:1553:2409","b:2:2816-0:1553:2409","b:2:3089-0:1553:2409","b:2:3093-0:1553:2409","b:2:3099-0:1553:2409","b:2:3104-0:1553:2409","b:2:3959-0:1553:2409","b:5:780-0:1553:2409","0:1559","0:1317","0:1321","0:1326","0:1356","0:1362","0:1367","0:1371","0:1376","0:1380","0:1387","0:1392","0:1397","0:1405","0:1413","0:1420","0:1426","0:1433"]}}},"b:2:3099-0:1617:2417":{"id":"b:2:3099-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3102:150","2:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1613:2874":{"id":"0:1613:2874","crate_id":0,"name":"set_random_source","span":{"filename":"src/random_state.rs","begin":[191,12],"end":[193,13]},"visibility":"public","docs":"Provides an optional way to manually supply a source of randomness for Hasher keys.\n\nThe provided [RandomSource] will be used to be used as a source of randomness by [RandomState] to generate new states.\nIf this method is not invoked the standard source of randomness is used as described in the Readme.\n\nThe source of randomness can only be set once, and must be set before the first RandomState is created.\nIf the source has already been specified `Err` is returned with a `bool` indicating if the set failed because\nmethod was previously invoked (true) or if the default source is already being used (false).","links":{"RandomSource":"0:145:2850","RandomState":"0:1617:2417"},"attrs":["#[cfg(not(all(target_arch = \"arm\", target_os = \"none\")))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["source",{"impl_trait":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}]}]],"output":{"resolved_path":{"name":"Result","id":"2:42860:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl RandomSource + Send + Sync + 'static","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RandomSource","id":"0:145:2850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1392":{"id":"0:1392","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[347,0],"end":[358,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2871:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"2:8308:158","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1395:863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1541:8465":{"id":"0:1541:8465","crate_id":0,"name":"extend","span":{"filename":"src/hash_set.rs","begin":[291,4],"end":[293,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3104-0:1553:2409":{"id":"b:2:3104-0:1553:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3107:150","2:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1545:60":{"id":"0:1545:60","crate_id":0,"name":"default","span":{"filename":"src/hash_set.rs","begin":[303,4],"end":[305,5]},"visibility":"default","docs":"Creates an empty `AHashSet<T, S>` with the `Default` value for the hasher.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1548:166":{"id":"0:1548:166","crate_id":0,"name":"HashMap","span":{"filename":"src/lib.rs","begin":[132,8],"end":[132,85]},"visibility":"public","docs":"[Hasher]: std::hash::Hasher\n[HashMap]: std::collections::HashMap\nType alias for [HashMap]<K, V, ahash::RandomState>","links":{"std::collections::HashMap":"1:786:166"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashMap","id":"1:786:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:1433":{"id":"0:1433","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[411,0],"end":[416,1]},"visibility":"default","docs":"NOTE: For safety this trait impl is only available available if either of the flags `runtime-rng` (on by default) or\n`compile-time-rng` are enabled. This is to prevent weakly keyed maps from being accidentally created. Instead one of\nconstructors for [RandomState] must be used.","links":{"RandomState":"0:1617:2417"},"attrs":["#[cfg(any(feature = \"compile-time-rng\", feature = \"runtime-rng\", feature =\n\"no-rng\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3141:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1436:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:128:2421":{"id":"0:128:2421","crate_id":0,"name":"random_state","span":{"filename":"src/random_state.rs","begin":[1,0],"end":[528,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:145:2850","0:1613:2874","0:1617:2417"],"is_stripped":false}}},"0:145:2850":{"id":"0:145:2850","crate_id":0,"name":"RandomSource","span":{"filename":"src/random_state.rs","begin":[132,0],"end":[134,1]},"visibility":"public","docs":"A supplier of Randomness used for different hashers.\nSee [set_random_source].\n\nIf [set_random_source] aHash will default to the best available source of randomness.\nIn order this is:\n1. OS provided random number generator (available if the `runtime-rng` flag is enabled which it is by default) - This should be very strong.\n2. Strong compile time random numbers used to permute a static \"counter\". (available if `compile-time-rng` is enabled.\n__Enabling this is recommended if `runtime-rng` is not possible__)\n3. A static counter that adds the memory address of each [RandomState] created permuted with fixed constants.\n(Similar to above but with fixed keys) - This is the weakest option. The strength of this heavily depends on whether or not ASLR is enabled.\n(Rust enables ASLR by default)","links":{"set_random_source":"0:1613:2874","RandomState":"0:1617:2417"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:146:2861"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:1465:8394":{"id":"0:1465:8394","crate_id":0,"name":"into","span":{"filename":"src/hash_set.rs","begin":[44,4],"end":[46,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"HashSet","id":"1:1503:168","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2787-0:1564:2410":{"id":"b:2:2787-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2789:27281"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239:1212":{"id":"0:239:1212","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[167,4],"end":[167,21]},"visibility":"default","docs":"Constructs a new HashSet","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13782:27858":{"id":"2:13782:27858","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13426:8256","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::split_whitespace":"2:13763:33064","str::rsplit":"2:13786:27862"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44592:11484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:11658":{"id":"2:13761:11658","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44568:11638","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3103:1857":{"id":"2:3103:1857","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2723":{"id":"0:70:2723","crate_id":0,"name":"write_u128","span":{"filename":"src/fallback_hash.rs","begin":[149,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1424:8465":{"id":"0:1424:8465","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[390,4],"end":[392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1391:830":{"id":"0:1391:830","crate_id":0,"name":"fmt","span":{"filename":"src/hash_map.rs","begin":[342,4],"end":[344,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1386:969":{"id":"0:1386:969","crate_id":0,"name":"index","span":{"filename":"src/hash_map.rs","begin":[331,4],"end":[333,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `HashMap`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13757:27856":{"id":"2:13757:27856","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13758:27857"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1462:860":{"id":"0:1462:860","crate_id":0,"name":"from","span":{"filename":"src/hash_set.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":"# Examples\n\n```\nuse ahash::AHashSet;\n\nlet set1 = AHashSet::from([1, 2, 3, 4]);\nlet set2: AHashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1547-0:1564:2410":{"id":"0:1547-0:1564:2410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,8],"end":[127,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::hash_set::AHashSet","name":"AHashSet","id":"0:1564:2410","glob":false}}},"0:72:2726":{"id":"0:72:2726","crate_id":0,"name":"write","span":{"filename":"src/fallback_hash.rs","begin":[171,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]","#[allow(clippy::collapsible_if)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1404:985":{"id":"0:1404:985","crate_id":0,"name":"into_iter","span":{"filename":"src/hash_map.rs","begin":[363,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8319:177","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1519":{"id":"0:1519","crate_id":0,"name":null,"span":{"filename":"src/hash_set.rs","begin":[258,0],"end":[264,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1523:185","0:1524:8281","0:1525:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3959-0:1617:2417":{"id":"b:2:3959-0:1617:2417","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13796:27866":{"id":"2:13796:27866","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12599:492","str::splitn":"2:13794:27864","self::pattern":"2:13426:8256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44714:11492","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13846:27595":{"id":"2:13846:27595","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1495:429":{"id":"0:1495:429","crate_id":0,"name":"bitor","span":{"filename":"src/hash_set.rs","begin":[133,4],"end":[135,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `AHashSet<T, S>`.\n\n# Examples\n\n```\nuse ahash::AHashSet;\n\nlet a: AHashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: AHashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13806:35209":{"id":"2:13806:35209","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13426:8256","`DoubleEndedIterator`":"2:8387:134","prim@char":"1:12599:492","str::matches":"2:13804:3085"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44814:11645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13449:15087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3350:15288-0:1286:2406":{"id":"a:2:3350:15288-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3350:15288","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1413":{"id":"0:1413","crate_id":0,"name":null,"span":{"filename":"src/hash_map.rs","begin":[376,0],"end":[382,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashMap","id":"0:1553:2409","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:1417:185","0:1418:8281","0:1419:985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1333:1212":{"id":"0:1333:1212","crate_id":0,"name":"new","span":{"filename":"src/hash_map.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"This crates a hashmap using [RandomState::new] which obtains its keys from [RandomSource].\nSee the documentation in [RandomSource] for notes about key strength.","links":{"RandomState::new":"0:155:1212"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2816-0:1286:2406":{"id":"b:2:2816-0:1286:2406","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2814:8592","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHasher","id":"0:1286:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2818:27282"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:164:2932":{"id":"0:164:2932","crate_id":0,"name":"hash_one","span":{"filename":"src/random_state.rs","begin":[357,4],"end":[363,5]},"visibility":"public","docs":"Calculates the hash of a single value. This provides a more convenient (and faster) way to obtain a hash:\nFor example:\n # Examples\n```\n    use std::hash::BuildHasher;\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let hash = hash_builder.hash_one(\"Some Data\");\n```\n    \nThis is similar to:\n # Examples\n```\n    use std::hash::{BuildHasher, Hash, Hasher};\n    use ahash::RandomState;\n\n    let hash_builder = RandomState::new();\n    let mut hasher = hash_builder.build_hasher();\n    \"Some Data\".hash(&mut hasher);\n    let hash = hasher.finish();\n```\n    \n(Note that these two ways to get a hash may not produce the same value for the same data)\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.","links":{"`Hash::hash`":"2:10865:902","`Hasher`":"2:10872:169","`Hash`":"2:10864:165"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["x",{"generic":"T"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"2:10864:165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:8655":{"id":"5:5718:8655","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1622":{"id":"0:1622","crate_id":0,"name":null,"span":{"filename":"src/random_state.rs","begin":[219,9],"end":[219,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1623:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:238:2431":{"id":"0:238:2431","crate_id":0,"name":"HashSetExt","span":{"filename":"src/lib.rs","begin":[165,0],"end":[170,1]},"visibility":"public","docs":"A convenience trait that can be used together with the type aliases defined to\nget access to the `new()` and `with_capacity()` methods for the HashSet type aliases.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:239:1212","0:240:2428"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:247"]}}},"2:13758:27857":{"id":"2:13758:27857","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13757:27856"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2719":{"id":"0:66:2719","crate_id":0,"name":"write_u8","span":{"filename":"src/fallback_hash.rs","begin":[129,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"primitive":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1551:168":{"id":"0:1551:168","crate_id":0,"name":"HashSet","span":{"filename":"src/lib.rs","begin":[135,8],"end":[135,79]},"visibility":"public","docs":"Type alias for [HashSet]<K, ahash::RandomState>","links":{"HashSet":"0:1551:168"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"std::collections::HashSet","id":"1:1503:168","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"resolved_path":{"name":"crate::RandomState","id":"0:1617:2417","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"a:2:32803:249-0:1564:2410":{"id":"a:2:32803:249-0:1564:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AHashSet","id":"0:1564:2410","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2818:27282":{"id":"2:2818:27282","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:2428":{"id":"0:237:2428","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[159,4],"end":[159,46]},"visibility":"default","docs":"Constructs a new HashMap with a given initial capacity","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13766:35206":{"id":"2:13766:35206","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44856:11647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13814:35212":{"id":"2:13814:35212","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:27829":{"id":"2:13751:27829","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:8802":{"id":"2:13775:8802","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42594:203","prim@char":"1:12599:492","self::pattern":"2:13426:8256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13432:8247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1431:8465":{"id":"0:1431:8465","crate_id":0,"name":"extend","span":{"filename":"src/hash_map.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8319:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1417:185":{"id":"0:1417:185","crate_id":0,"name":"Item","span":{"filename":"src/hash_map.rs","begin":[377,4],"end":[377,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}},"paths":{"2:42688:8360":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:8006:13416":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6026:9273":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11385:22652":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"24:5204:12797":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43964:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:23347:11524":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:14974:10291":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:12905:9212":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:3073:271":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:44562:8251":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"24:5556:12956":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:43438:8641":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7027:10990":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7956:11154":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:7612:8281":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:41110:11576":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:4889:12687":{"crate_id":24,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:41829:8658":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:10595:8638":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4990:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:4547:15109":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:22967:15039":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:1621:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:12626:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"11:763:8618":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10515:22639":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:6610:13150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:7782:8241":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15548:10480":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:8236:13420":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:14030:10103":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7347:9270":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:4996:12737":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:881:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:14844:10271":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:8500:11212":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6158:15593":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:6695:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:8605:11646":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43065:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:44521:11634":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"20:0:2512":{"crate_id":20,"path":["zerocopy"],"kind":"module"},"2:40985:11569":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5249:12816":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:12174:9564":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:6601:13149":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:7540:31135":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:45389:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12148:9887":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:1118:11323":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:14651:10224":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:6359:13011":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"24:5056:12767":{"crate_id":24,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5568:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"24:5622:12991":{"crate_id":24,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:4868:12679":{"crate_id":24,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:47181:11732":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:6523:13100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"0:0:2510":{"crate_id":0,"path":["ahash"],"kind":"module"},"17:12951:9985":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6858:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:13161:11503":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44409:11623":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:6877:13241":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2488:14795":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:15350:10377":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:42554:11475":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8617:11973":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:7734:8680":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:11394:13577":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:45543:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"15:327:9331":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:16727:10789":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:5127:15126":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:5348:12855":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:12722:9963":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4896:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:15694:10500":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:7307:13276":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:8237:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"24:1506:12483":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1533:8468":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:7951:11908":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:786:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:45339:13561":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:1657:9072":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:6996:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8546:11856":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:5121:14906":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:1879:11832":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5019:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:46708:11694":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:45547:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"24:6589:13142":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:12592:15082":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"8:0:2404":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"11:1871:8278":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4816:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:7389:13311":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3318:31813":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:6902:34791":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7946:10840":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"24:8303:13435":{"crate_id":24,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:7735:8681":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"14:159:11310":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6806:9303":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:7653:8249":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:41144:15349":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3036:14811":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:45026:11659":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4946:14871":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:2948:10832":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:4900:10858":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:22619:14954":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:981:14748":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:4559:34801":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5217:12804":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:700:11827":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:13289:9766":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40135:8274":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:1518:8467":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:15857:10542":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:15285:10326":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3920:11857":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:11018:13573":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:11464:9831":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"11:423:36539":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:6710:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:4126:14855":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:15682:10497":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14932:10283":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:698:9169":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5482:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:1779:34791":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:4758:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1589:12532":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:6438:22566":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"24:5440:12901":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:6472:13075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8668:14885":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6711:10954":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:6300:8675":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4228:14862":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:3419:8595":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:10096:22625":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:1569:12518":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:22172:14952":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:1881:11833":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"24:7316:13282":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4218:14861":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"22:216:9160":{"crate_id":22,"path":["once_cell","sync","Lazy"],"kind":"struct"},"5:3076:34990":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11318:36579":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:12625:1460":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:9592:8247":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:8260:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13204:10005":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:7233:34849":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15585:10487":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"22:174:9159":{"crate_id":22,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"6:5127:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:42520:11608":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:649:8467":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:5911:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8945:12000":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:2818:10826":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:23657:11553":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:23591:11547":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"11:1878:9070":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:43424:8632":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:23489:14854":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:44846:11646":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:4909:14886":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5142:10865":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11620:11380":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:3985:9714":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:41275:8673":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:3394:8505":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:23018:15040":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:5427:12891":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:10661:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:44909:11570":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"9:168:9354":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"24:7552:13392":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13797:10069":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6623:10947":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:42840:224":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"1:11110:11919":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:4842:10856":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:2433:21703":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:44349:11621":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7398:36562":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"24:1710:12608":{"crate_id":24,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:4467:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:12617:914":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7468:11065":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:3785:268":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:1596:12537":{"crate_id":24,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:10907:2422":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:14182:11515":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:2440:8278":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:4196:8468":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:9413:12014":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7369:9314":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:7984:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8537:9558":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6873:10973":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:15063:10309":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:11857:11487":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:10613:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"9:470:21554":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:32862:9526":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:2838:10827":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:23458:13483":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9341:12008":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5036:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13094:9998":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:13138:11502":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:42592:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:3139:9701":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:5179:12784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5503:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:42991:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:16752:10794":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:7539:11074":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:34634:8503":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:1499:12480":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:5411:1279":{"crate_id":24,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:3308:277":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:22847:15034":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"24:6421:13054":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2126:8839":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13168:10002":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:4841:3135":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:282:34791":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6967:9309":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:13177:11504":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:8387:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:13101:11499":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:155:9251":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:8284:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:5610:12985":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"24:6499:13087":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:2339:9801":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"11:2507:13458":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:5288:12838":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:635:9654":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:9305:14942":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13944:10087":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:906:9677":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:45557:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:12186:27389":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:10030:22624":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:14858:10272":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:5018:12750":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15660:10495":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:6694:10953":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:32780:11559":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:3315:31666":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:6505:13088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5025:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:10417:22636":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:8225:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:44760:11643":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10927:9813":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"20:631:3142":{"crate_id":20,"path":["zerocopy","_CastType"],"kind":"enum"},"2:47977:8191":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"0:238:2431":{"crate_id":0,"path":["ahash","HashSetExt"],"kind":"trait"},"1:5676:11875":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6645:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:23416:32964":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:8176:11161":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:1892:9072":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:2248:14720":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:43674:8629":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:8319:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15147:10320":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:5447:10875":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:1689:12600":{"crate_id":24,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:971:8379":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:44428:11626":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:14996:10302":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7870:27443":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"18:608:9649":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:1703:12604":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:6941:11898":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:2638:10818":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:8623:11225":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11719:9850":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:3815:33950":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:44578:9202":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:5394:12875":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6747:9300":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:593:14726":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:11775:11484":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:2575:13474":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:2253:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"24:7514:13373":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10441:22637":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8766:8738":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"16:5346:10872":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9365:12009":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:564:12459":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:1002:8623":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40906:11563":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12017:9873":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"24:5248:12816":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:10107:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:1652:13872":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:44551:11637":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:15120:10317":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6981:9310":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5271:12827":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:6431:11520":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:893:8467":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6729:9269":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"24:6736:13196":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:6939:10979":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"13:0:2974":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:434:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:12735:9964":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:4950:14874":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:10649:123":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"11:1063:36543":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:5617:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:12118:11859":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:2287:9365":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5224:12805":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13920:10083":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:3586:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10802:9202":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:7708:15349":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12618:1901":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"0:1617:2417":{"crate_id":0,"path":["ahash","random_state","RandomState"],"kind":"struct"},"1:4184:14860":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:16619:10761":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:7679:9372":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:4687:14886":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:7445:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14374:10185":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:344:36535":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:11756:22673":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:2154:11406":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"9:318:13465":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:42785:11616":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"24:516:12434":{"crate_id":24,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"24:5603:12982":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:2540:8249":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:5850:13213":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:10912:2485":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:3404:8710":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:4815:12636":{"crate_id":24,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:2226:9685":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11048:9556":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7459:11062":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:8174:13417":{"crate_id":24,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:3411:11850":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2506:14801":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:10717:12003":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5111:10864":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:5312:33707":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"17:14298:10171":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:4340:14881":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:6522:13100":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:686:8379":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:0:2984":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:40297:8726":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:2469:21629":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:6901:10976":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:1662:9073":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:705:14738":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"13:229:9335":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10842:9177":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:6513:13093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12896:9981":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:41102:11575":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:3695:8467":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8304:8616":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:6911:10977":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5295:12840":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"24:5481:12927":{"crate_id":24,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:45230:11672":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:950:8239":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13040:9997":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:43779:8631":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4875:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41363:8698":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:491:12414":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:12622:1877":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:16012:10581":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:41061:11573":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"24:6427:13055":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:9442:8357":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"5:3294:9071":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12305:9906":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"18:643:9638":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:1674:12591":{"crate_id":24,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9469:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"24:544:12449":{"crate_id":24,"path":["libc","unix","winsize"],"kind":"struct"},"17:15829:10534":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:4897:3150":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:24126:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:45131:11508":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:3719:9690":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"24:6609:13150":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4836:13307":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:9829:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:3456:11853":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2722:10822":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:23108:15029":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:4692:10853":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:15105:10313":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13853:9224":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15932:10564":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:1119:34791":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:10870:165":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"22:82:9159":{"crate_id":22,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"24:5365:12860":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:5178:12784":{"crate_id":24,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:2091:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11094:27422":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1597:12537":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:1599:8379":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:5493:12930":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"11:2340:11328":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:7851:8646":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:14820:10268":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:45343:13562":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:9261:11881":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:5782:11878":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:10095:406":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"2:43139:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11172:36577":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12761:9966":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:16138:10632":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:34807:8504":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2902:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:7800:33878":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:46691:11693":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10367:22634":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:47149:11730":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:2814:8592":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"16:7355:9313":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3075:8608":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:12279:9902":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12569:9951":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9497:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:1702:12604":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:659:9655":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8878:14920":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:570:12462":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:998:8467":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8918:11867":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:3350:15288":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:11102:11981":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:45606:11679":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:8175:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:1898:9073":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:4121:8239":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14139:10133":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:44501:11632":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:2126:8627":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2728:11844":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:41229:11586":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:14083:10116":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13426:10016":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:41181:11579":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"17:12408:22745":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:0:2982":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12975:9987":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"24:5663:13007":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:23624:11550":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:6111:9540":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:3502:9689":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"20:355:3133":{"crate_id":20,"path":["zerocopy","AsBytes"],"kind":"trait"},"2:32804:251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:6397:13038":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5325:12850":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:5345:454":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6360:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:750:8617":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:6512:13093":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:23294:9391":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13450:10018":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12203:9892":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6887:9308":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:11554:12042":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:7473:13874":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"7:78:21549":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:5462:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:6702:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"24:5050:12765":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:6082:10880":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"24:4880:12682":{"crate_id":24,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"24:6857:13227":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:6927:9548":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:6687:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:2360:9368":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:2374:8468":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:0:2983":{"crate_id":17,"path":["object"],"kind":"module"},"5:7258:34853":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:14025:11510":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:4964:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"14:40:10066":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:5415:10874":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11652:9843":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:10872:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:3580:8201":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:44997:11651":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:45367:13568":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1858:2407":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"6:6617:13151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41236:8671":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:14395:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:41095:11574":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:5449:12907":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:8555:14810":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:4151:34791":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:9426:27377":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:787:8278":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:44796:11644":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15966:10572":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13732:10051":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:1640:8278":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:832:8622":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9372:27376":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14506:10203":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:3287:8467":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:14315:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:32893:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"2:42689:8359":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8093:9918":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:8316:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:8315:13439":{"crate_id":24,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:497:12417":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10217:22629":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:316:9676":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:12200:11907":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:45097:11662":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:16077:10625":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:14268:10163":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:6504:13088":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:12037:11493":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:44884:11505":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:9446:9561":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:1549:8281":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12334:9911":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:4808:10855":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:3712:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13118:9999":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:14737:10252":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:15539:10479":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:5240:12812":{"crate_id":24,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:41591:8696":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11420:9828":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14357:10182":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:44400:11622":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:23396:32963":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15724:10510":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12549:9950":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:4937:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5529:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:10608:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:34182:8713":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:41159:11578":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:4316:13572":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:23510:14811":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:6032:11883":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:7759:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6792:10965":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"2:44642:11640":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:6637:13163":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:7524:8239":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:16678:10774":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:6852:13226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:12598:1208":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9218:12004":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:1675:12591":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:31152:3152":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"24:8265:13427":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:10760:27548":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:3551:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:1530:12493":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8592:9202":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:2119:696":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:41293:8683":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10728:9201":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:32727:9031":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:40999:11570":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:9359:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:8585:8695":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"24:6678:13178":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"5:3682:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:6555:15043":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11969:11906":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11377:11902":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:8299:2417":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2484:10811":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:464:12401":{"crate_id":24,"path":["libc","unix","group"],"kind":"struct"},"17:12748:9965":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:8272:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"14:7:11310":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:4906:14908":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3066:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:8562:11220":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10273:22631":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"24:5639:12995":{"crate_id":24,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12582:9952":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13470:9692":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:8326:13441":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9641:11835":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:6406:10915":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3060:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:4871:10857":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14901:10278":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:16320:10688":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:16691:10780":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:14962:10289":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:573:9638":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:1695:12601":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1589:8619":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13360:10015":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"24:6451:13064":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:4831:13480":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4881:12682":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:6800:8699":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:42900:8467":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11138:27385":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:43994:9530":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6419:9258":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:1938:11835":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:5555:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7492:11066":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44610:11489":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:10663:8639":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6096:10884":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"9:345:21570":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:3389:8242":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"20:562:3140":{"crate_id":20,"path":["zerocopy","ByteSlice"],"kind":"trait"},"2:14450:8248":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5319:12849":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3504:14835":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:42679:8356":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"24:5116:12779":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15159:10324":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:22:845":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:212:8605":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11605:9180":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:5406:1007":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:3592:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:23431:32965":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:2803:11846":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:1542:21634":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13265:22641":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:8809:8666":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:5024:12753":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8656:11860":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:46953:11720":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:16633:10765":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:12536:9948":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:96:26823":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:6755:13199":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:2224:14795":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"6:6638:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:1645:9070":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:15674:10496":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11817:9862":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:623:36584":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12007:9746":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:16341:10691":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3858:14851":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:10467:12026":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:44891:11571":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:6534:11879":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"11:2275:8625":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:4528:8591":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13027:9996":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:1992:11837":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:4286:13572":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:16290:10680":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:16230:10665":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:1866:8239":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:9807:11920":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:8206:9327":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:33776:8711":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:11830:9184":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:3085:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13889:9233":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:46915:11718":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22108:34501":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:12602:1352":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:1666:12590":{"crate_id":24,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"9:412:21557":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:1514:12485":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9239:8467":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:485:12412":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11677:9845":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6864:22569":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4240:14865":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12065:9207":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"14:201:8238":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:2323:8627":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:6257:11879":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:3354:9073":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:521:26833":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13546:9219":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:48045:8195":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:515:9635":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"24:5138:12781":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:22225:14948":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:5068:12776":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:8325:13441":{"crate_id":24,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:1568:12518":{"crate_id":24,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:544:9256":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:3853:9691":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43939:3120":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:22891:15035":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:2804:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:8279:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:41284:8674":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5539:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"14:213:11316":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"24:8242:13421":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:925:14747":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:1726:12613":{"crate_id":24,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:7772:8240":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:2230:11442":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2336:11841":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:5280:10870":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"22:368:8747":{"crate_id":22,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"6:8304:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5282:12835":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11442:13578":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1129:8628":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:4927:10859":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:15707:10505":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:47940:8188":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5196:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:4265:10851":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:7283:13259":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13870:9226":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"24:1493:12477":{"crate_id":24,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11997:9871":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:22129:34504":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:680:9662":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:47911:8185":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:6791:13212":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"19:0:1327":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:45371:9388":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:8328:8205":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:4791:12619":{"crate_id":24,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:6650:13167":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:4913:12701":{"crate_id":24,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1494:12477":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5044:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:47367:11754":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:7344:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8240:9747":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:22756:14950":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:47500:11759":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:5740:9176":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6727:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:44866:11648":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11308:9819":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:40936:11564":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14749:10254":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5405:12881":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:34316:8714":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:4804:12628":{"crate_id":24,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12672:9956":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:765:26832":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46828:11705":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:8248:13422":{"crate_id":24,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"20:561:36824":{"crate_id":20,"path":["zerocopy","sealed","ByteSliceSealed"],"kind":"trait"},"6:1643:12573":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5725:9175":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47067:11726":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6835:9305":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:6571:10943":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:42908:8468":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:14572:10214":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:6645:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6578:13137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:45207:11664":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:41211:14778":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:9405:9559":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:44192:13559":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:16574:10069":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:7534:11430":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4348:14882":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:1631:12565":{"crate_id":24,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11957:9868":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:8847:34269":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:3193:11446":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:5557:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:2156:1397":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11357:22651":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:4928:12707":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:563:9166":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:123:9336":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"9:226:11617":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:47018:11723":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:47293:11752":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4914:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5550:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:558:12457":{"crate_id":24,"path":["libc","unix","sigval"],"kind":"struct"},"17:15601:10490":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:26526:283":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:8308:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:40975:11568":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14585:10215":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2866:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11514:9835":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5611:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:894:10803":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:8495:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6590:13142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:6679:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:8243:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:15:2726":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10114:22626":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:12614:921":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"24:4969:12723":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:1885:9071":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:560:13736":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"17:16249:10666":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:538:9164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46997:11722":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:7512:11429":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:7747:11438":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:7539:13383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:12948:15089":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:4767:11453":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:7664:8615":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:45363:13567":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44492:11631":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6486:13086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:2533:13462":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:48030:8194":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:8230:13419":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14639:10223":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:41605:8697":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"24:6768:13206":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:12051:11494":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:3474:8716":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:6355:27538":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:22641:9390":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:16592:10079":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:2918:10831":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:41007:11449":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:5058:10862":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:8295:11174":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:8595:11224":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:7442:27553":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"24:478:12409":{"crate_id":24,"path":["libc","unix","timeval"],"kind":"struct"},"2:42860:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:3790:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:4482:34801":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:598:36582":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5230:12808":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:3046:21705":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11616:9817":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10166:22628":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:41345:8687":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:47426:11757":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:45640:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:43431:8633":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:16172:10644":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12094:9883":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:41133:11577":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:2679:15302":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:40207:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:22142:34507":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:44976:15099":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:14358:11521":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:3310:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:11968:11490":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8402:9555":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:11114:12036":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8407:14840":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11591:9787":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:32891:8593":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:12603:351":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2828:8749":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"24:4983:12731":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12647:9954":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:2258:11408":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:490:12414":{"crate_id":24,"path":["libc","unix","rlimit"],"kind":"struct"},"24:5035:12758":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:44592:11484":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10548:9176":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:3416:8594":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:6536:15042":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:41191:11585":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"12:0:2979":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:3333:34985":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:12554:11496":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:11578:9840":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:47128:11729":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12162:9888":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:473:12406":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:22243:9389":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4792:12619":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:5004:11866":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:2028:813":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3141:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:43758:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7013:10988":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:41262:8682":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11028:11921":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"24:6801:13215":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:8118:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6656:9285":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:47471:11758":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:9278:12007":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:5130:9697":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:553:12454":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:11552:252":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12859:9979":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7383:9315":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:12613:939":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43691:13557":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11447:9829":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:505:9680":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7713:36563":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5151:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:7515:13373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11123:11878":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:7055:10991":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:8271:13428":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13144:10000":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:6869:11894":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:23324:9392":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:44660:11641":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:46790:11703":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"9:49:9340":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:15076:10310":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13081:9817":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:1120:8627":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14546:10211":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6500:13087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5853:14926":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:7996:27560":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:9800:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:8294:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:5450:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:3424:8596":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:48107:8197":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13180:10003":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:5196:10867":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13932:10084":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:4025:11859":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:960:8278":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6335:10902":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:1580:8618":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:1489:12475":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:16499:10716":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:7084:8285":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:12121:9885":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:581:9397":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:23547:11543":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:7554:34878":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:45413:11674":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"24:5310:12846":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:12521:11495":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:4950:9039":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:697:11825":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6841:9307":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:10657:8641":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:14042:10104":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:1244:36388":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8156:11919":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8674:11978":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8711:13292":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8135:14741":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:8220:11162":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:8582:11221":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:23569:11545":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:41313:8684":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:44449:11628":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11986:13587":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:43028:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:12610:766":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10295:22632":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6744:13197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"24:6471:13075":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:16775:10799":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:45248:11509":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:8270:8668":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:1883:8278":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:13215:11486":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8075:11912":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:34115:8715":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:6187:8686":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8267:11922":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8528:8649":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:6688:8239":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:5106:12778":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:2746:10823":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4805:12628":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:47966:8190":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:15430:10439":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6254:9284":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:481:9636":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:32861:8200":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:38787:8720":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:14345:10180":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:5374:12866":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"24:563:12459":{"crate_id":24,"path":["libc","unix","itimerval"],"kind":"struct"},"2:42719:8600":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13982:10091":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:47082:11727":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:7904:11142":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:9512:11901":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:6502:15601":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"17:12224:9895":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:6542:13116":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:4954:10860":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11502:9834":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:3360:11849":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:5556:15074":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:48015:8193":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11340:12004":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12248:9899":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:6678:10950":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:12193:11907":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6366:9253":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3708:8468":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"24:6389:13036":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:46936:11719":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:2094:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:9205:9538":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:2658:10819":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:1338:9684":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:9502:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:23668:11554":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:5135:14907":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:14219:10138":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"20:325:3132":{"crate_id":20,"path":["zerocopy","FromBytes"],"kind":"trait"},"17:15035:10305":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:14946:10285":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5349:12855":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:40189:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:23478:11539":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44856:11647":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:0:1032":{"crate_id":6,"path":["libc"],"kind":"module"},"2:40227:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:7189:22571":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"15:394:21667":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:45656:11683":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:45012:11656":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4997:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13569:22644":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:2656:11842":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:42611:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7786:36564":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3684:14809":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:820:8621":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:6479:9545":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2223:15313":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:45667:8604":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:4063:8239":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:40315:11562":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11970:9869":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:1380:8627":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:6415:13051":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:5170:10866":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:44714:11492":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22652:34512":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:7463:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:1583:12530":{"crate_id":24,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:1008:8624":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:7406:13312":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:43703:11189":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:1624:12561":{"crate_id":24,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11280:9818":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"11:2394:8281":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:1083:11322":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:851:8623":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:5223:12805":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:7841:8278":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:12566:9565":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12318:9909":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8928:8467":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:7504:8281":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7762:11105":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:5651:13002":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:7424:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12940:9984":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:14098:10122":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:43289:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7916:11143":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:6734:34791":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:44696:11491":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:15770:10520":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:12624:1965":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:14311:10173":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:10563:9196":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11351:27423":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:5377:10873":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:7429:13319":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:2377:22700":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:8397:11926":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:5658:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:6751:8652":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:2504:10812":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13718:10050":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:5202:8733":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8293:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:16152:10638":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:11818:11486":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7987:11156":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:6755:11893":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:5386:12870":{"crate_id":24,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:0:2978":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:41375:8689":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22144:34509":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:43947:9528":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"24:4989:12734":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10662:9199":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:4613:9382":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4709:14887":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1610:8380":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"22:50:13572":{"crate_id":22,"path":["once_cell","imp","Guard"],"kind":"struct"},"6:6441:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:9479:8358":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:5696:11876":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:14482:10202":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"24:7343:13292":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40247:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15572:10482":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:6686:13181":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:13454:15086":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:14772:10263":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:45335:13560":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:1529:12493":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:47521:11760":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:5728:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:2988:10834":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:1633:8281":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:3320:3151":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:8283:13430":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5205:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:12612:761":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"24:4946:12715":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:23580:11546":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:13384:9216":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:813:8620":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11941:11903":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:4832:13303":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"24:5567:12961":{"crate_id":24,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:2568:10815":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11327:9538":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"24:6748:13198":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:1503:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:1219:9683":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3413:11851":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:321:9677":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"24:6669:13172":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:3854:11406":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7966:11155":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:9320:14944":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9482:13572":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:12604:1736":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:6543:13116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:1550:12508":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:10433:8630":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:885:11398":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4842:12656":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15417:10432":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:45347:13563":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13514:22643":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:22754:14811":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:651:9638":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:754:9675":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8121:14740":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:749:2416":{"crate_id":1,"path":["std","collections"],"kind":"module"},"24:6458:13066":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:479:12409":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:43733:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6850:10970":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:14831:10269":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:43664:13550":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11538:9184":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4421:11861":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:16611:10760":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:8317:22577":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:1918:15250":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:12698:9961":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:3923:11858":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:16302:10682":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"21:0:2404":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"24:4963:12721":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44196:11483":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"22:374:8748":{"crate_id":22,"path":["once_cell","race","OnceBool"],"kind":"struct"},"2:41791:11467":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:12611:782":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:43741:8629":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:6398:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10976:36573":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"24:6851:13226":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5662:11871":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:8708:11232":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4502:11862":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:32787:3135":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:40947:32986":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12215:9894":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:45535:13569":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:975:8380":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:45359:13566":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:6447:27542":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5057:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:465:12401":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:5069:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:4481:11450":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12043:9879":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:5164:12783":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:481:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13609:10031":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:5287:12838":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40304:2830":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:41798:8650":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12259:22744":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"6:5664:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:4163:8281":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13553:10025":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"24:1520:12488":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:10288:34270":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:2806:13477":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40055:8730":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13005:9992":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:8249:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6769:13206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:42930:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:47992:8192":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:1562:12516":{"crate_id":24,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:8224:13418":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14916:10282":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2742:15374":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:31184:3153":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:13385:8254":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6142:22564":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:16799:10084":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:11955:11904":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:14283:10167":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:2405:9686":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:4318:31134":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:3921:8278":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"3:0:527":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:14392:10186":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:4920:12705":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6606:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:0:585":{"crate_id":2,"path":["core"],"kind":"module"},"2:40152:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2504:14800":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4957:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:10267:830":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"17:12686:9960":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12961:22770":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:8063:22575":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:4405:13572":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:8480:11211":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:16191:10649":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10937:36572":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"22:294:8745":{"crate_id":22,"path":["once_cell","race","OnceRef"],"kind":"struct"},"6:5428:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"18:589:9642":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"14:0:2980":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:23241:11523":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15845:10536":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13969:10090":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14071:10113":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7568:8281":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:4919:8234":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:506:27510":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8257:9556":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15652:10494":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15762:10518":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:6273:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:5112:14905":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:34249:8712":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:42414:9527":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:16645:10767":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:12815:9692":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13591:10028":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:5253:10869":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:7308:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"11:102:13452":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5494:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:8863:11994":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:7584:9376":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:1208:36387":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:43955:3119":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:6616:13151":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7041:9311":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6121:10836":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:22349:14949":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:40962:11567":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11064:9815":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:7444:13323":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:12609:763":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:6428:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44814:11645":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:15009:10303":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12624:9953":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:41814:8654":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5369:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:9400:9544":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8320:11925":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:8278:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"24:8277:13429":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:32769:11558":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:1696:12601":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:6726:13189":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:1097:8625":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:5419:12886":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:3577:13572":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:10646:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11359:9388":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:11039:12017":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:6416:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:15746:10516":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"24:5574:12963":{"crate_id":24,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:523:12437":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12190:9891":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:1136:8628":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:44470:8671":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:5511:12936":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:23372:11525":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6950:10980":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:15495:10474":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6638:10949":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"22:124:9160":{"crate_id":22,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"24:1656:12584":{"crate_id":24,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:5477:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:9474:11890":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"18:113:26824":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:6485:13086":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6719:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:45355:13565":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:14671:10227":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3321:31814":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:41446:8694":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8611:11971":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1409:8628":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:3057:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:7430:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13817:10079":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:41416:8692":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12358:9913":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11431:22653":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:5311:12846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5083:10863":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1364:8625":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:44742:11642":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8733:11864":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5925:11880":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:22614:14811":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:47852:11798":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:6989:8677":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:11980:13586":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:8259:13426":{"crate_id":24,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:23358:32961":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:7576:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:15889:10550":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:8274:8667":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:39476:8723":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:4170:14858":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4970:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13536:9213":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:47894:11800":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8250:11921":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12107:9884":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:3358:11848":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:1488:12475":{"crate_id":24,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8093:11159":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:1001:8626":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:545:12449":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:4762:11452":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12825:9970":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14691:10228":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:9194:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12710:9962":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:2964:10833":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13221:22640":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:40091:8598":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:7562:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:2414:8239":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:6791:9547":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:3569:8599":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"16:3585:10844":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:42620:8467":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:5404:12881":{"crate_id":24,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:12600:1923":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:7788:29781":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"11:1042:21633":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4369:14884":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10999:12035":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:2588:10816":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:22929:15036":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:41015:11571":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11863:9865":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"15:306:21658":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4948:14873":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:14151:10136":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:7523:13376":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:5811:8284":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:2665:697":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"7:0:1955":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:14885:10276":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:996:8622":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:1940:11836":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5316:10871":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46776:11702":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:5292:11870":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:8666:8480":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:7185:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3357:15290":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"24:5380:12867":{"crate_id":24,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:8023:8649":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:11895:11488":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13348:9215":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:23061:14811":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:3621:8275":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:33564:8708":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5441:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12868:10018":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11220:27547":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"24:1642:12573":{"crate_id":24,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:6263:13572":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"10:36:13464":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3867:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11412:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:1651:9071":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:6039:11887":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"24:5657:13004":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:937:8618":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:43719:33056":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:14795:10264":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"0:1551:168":{"crate_id":0,"path":["ahash","HashSet"],"kind":"type_alias"},"1:6066:8739":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11077:11856":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:30922:14852":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:39:8277":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5471:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:7439:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:8230:22576":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:7379:27439":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"5:3258:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"24:5528:12942":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:8007:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14018:10100":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42795:222":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"24:5043:12763":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:14404:10188":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:357:14303":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:47598:11792":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4576:11863":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:41397:8690":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7551:22573":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:4787:14904":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:31216:32973":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:47255:11750":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:3839:9557":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11526:9837":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:5324:12850":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:22223:14811":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:6137:9374":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:4828:12646":{"crate_id":24,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12930:9213":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"24:7462:13333":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:0:1762":{"crate_id":1,"path":["std"],"kind":"module"},"11:2513:13459":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:7421:22572":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:41171:9202":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6749:13198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:8633:22578":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7997:9318":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:42370:11474":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:41581:8695":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46872:11708":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12523:9947":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:4118:10847":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11290:36578":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6756:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:3775:8725":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:23646:11552":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"24:577:12467":{"crate_id":24,"path":["libc","unix","servent"],"kind":"struct"},"17:14054:10105":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"7:31:21542":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:617:11823":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"24:6577:13137":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:12616:933":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:15982:10575":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12615:927":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:1558:11324":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6893:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4984:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12081:9191":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:8055:14811":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12391:9914":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:8025:9320":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11474:22654":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:10837:11848":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:32773:8480":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:11565:9839":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13069:9180":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:46659:11689":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13691:10042":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"20:366:1840":{"crate_id":20,"path":["zerocopy","transmute"],"kind":"macro"},"2:45565:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11804:9861":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5301:12843":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:321:13456":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:45598:11677":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:45424:15399":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7518:11072":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:8102:11160":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:15974:10573":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7880:9266":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14113:10128":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2297:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:578:12467":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6452:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:8688:11979":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"23:0:2042":{"crate_id":23,"path":["getrandom"],"kind":"module"},"2:47931:8187":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14532:9920":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:46886:11709":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:362:3134":{"crate_id":20,"path":["zerocopy","Unaligned"],"kind":"trait"},"2:32794:11560":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:901:9676":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"14:164:21638":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:2413:21676":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"18:531:9639":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:2115:8626":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"24:5470:12922":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6387:10908":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5687:10877":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:507:9638":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:42354:11472":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"24:5487:12928":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"9:380:21556":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6040:10835":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:16311:10686":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:3693:10845":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:34980:8717":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:15805:10526":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5107:12778":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11199:27544":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:7094:8286":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:4356:8467":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:15438:10440":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:4895:12689":{"crate_id":24,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:13658:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:7858:27442":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:13321:22642":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"11:427:36540":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:42332:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"24:522:12437":{"crate_id":24,"path":["libc","unix","hostent"],"kind":"struct"},"2:42710:9059":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:41847:8662":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11214:27546":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5334:12853":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:6020:8239":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"20:87:3167":{"crate_id":20,"path":["zerocopy","util","ptr","Ptr"],"kind":"struct"},"5:5507:34791":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:3802:8729":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13957:10089":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:4356:14883":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:14519:10206":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2529:14808":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"17:12175:9889":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12346:9912":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2221:15312":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:6872:14938":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6062:10837":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11690:9846":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3627:11855":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:23635:11551":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"24:484:12412":{"crate_id":24,"path":["libc","unix","timespec"],"kind":"struct"},"1:535:14720":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:8148:9325":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:1584:12530":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9393:12013":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:3675:31348":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:6644:13164":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5241:12812":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:983:8625":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:1690:12600":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:538:12446":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:12619:1883":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6500:21675":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:3788:34791":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:5270:12827":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:47920:8186":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4921:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"24:6743:13197":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:4:1292":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"24:4874:12680":{"crate_id":24,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9290:14943":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8840:11617":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6659:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3564:3166":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:4150:10848":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:3320:9072":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:12620:1889":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:5007:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1864:722":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:6440:13056":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5395:12875":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:14065:8687":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"24:4956:12718":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11456:9830":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"2:3533:8597":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"13:110:36545":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:13449:15087":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:14338:11520":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5088:12777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:7580:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46857:11707":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"24:5300:12843":{"crate_id":24,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:3124:21706":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:45679:11684":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"24:6658:13169":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:297:2829":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:16019:10583":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:10625:29734":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:6186:10890":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13192:10004":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:9556:12016":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:46968:11721":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8934:11999":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:2528:10813":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:45217:11668":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10783:9800":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:11865:11617":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"24:7493:13359":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:12385:13875":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12057:11857":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:42572:11478":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:22131:34506":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:22339:14811":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1629:8467":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:7334:11047":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:726:9171":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:23103:15031":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:15939:10565":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:552:12454":{"crate_id":24,"path":["libc","unix","linger"],"kind":"struct"},"2:33352:8709":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:2140:9557":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:11194:33718":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"9:435:21555":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:31590:9397":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:2206:9338":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:15638:10491":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:2516:14806":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:5126:13572":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:7284:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5165:12783":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7935:11151":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6602:13149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:613:36583":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6736:36561":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:42819:226":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"24:5281:12835":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"15:288:21657":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:42727:11614":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"17:13756:10065":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:5027:14870":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12786:9968":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:15530:10475":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:924:8617":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:1915:11834":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:5520:12937":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:10840:11850":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:10629:9198":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:706:9665":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:3609:11974":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:4890:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:1588:12532":{"crate_id":24,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"0:1613:2874":{"crate_id":0,"path":["ahash","random_state","set_random_source"],"kind":"function"},"2:10651:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:1683:12597":{"crate_id":24,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"0:1548:166":{"crate_id":0,"path":["ahash","HashMap"],"kind":"type_alias"},"1:4822:14860":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:12606:1860":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:44568:11638":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:7060:8284":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:3444:8278":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:45039:11660":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4888:15116":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:2099:8625":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"0:145:2850":{"crate_id":0,"path":["ahash","random_state","RandomSource"],"kind":"trait"},"1:10885:9918":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:292:13453":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:47405:11756":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:4120:14856":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"24:5318:12849":{"crate_id":24,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:42916:8281":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8682:11971":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:2764:11843":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:23032:15302":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:23309:9377":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7804:36565":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:12932:11497":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:776:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12370:9209":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8070:11910":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"10:0:2977":{"crate_id":10,"path":["adler"],"kind":"module"},"17:14598:10217":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:41123:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12604:9180":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:2436:9688":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:15409:10429":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:1395:8626":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"9:0:2976":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12034:9338":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:10102:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:11539:14811":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"20:196:36802":{"crate_id":20,"path":["zerocopy","wrappers","update","WriteBackOnDrop"],"kind":"struct"},"16:6300:10900":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:22170:14811":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5412:1279":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"15:0:2981":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:47099:11728":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"24:5333:12853":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:32803:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:4178:14859":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:4692:9038":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:16809:10089":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"11:1579:11325":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11705:9848":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10822:9203":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12919:9982":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12797:22769":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11400:9826":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:916:8281":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:735:26831":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:517:12434":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7256:11041":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"0:235:2425":{"crate_id":0,"path":["ahash","HashMapExt"],"kind":"trait"},"5:3078:13471":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:1711:12608":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:48068:8196":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4902:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:11066:33717":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"17:13634:10032":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:42498:32991":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:47276:11751":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:3796:8727":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:16789:10800":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:11201:33719":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:4834:13305":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:9231:9539":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:34048:8243":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2334:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:5552:15073":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:2770:10824":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:2702:10821":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:42767:11615":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:44875:11649":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9507:11900":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:7575:12014":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10342:11605":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:15778:10522":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"23:128:34791":{"crate_id":23,"path":["getrandom","use_file","DropGuard"],"kind":"struct"},"2:43252:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:718:8380":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:12582:27418":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:12034:27556":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:46676:11692":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:12623:996":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:11023:13575":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:12605:1770":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:6802:13215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:47823:11797":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:14459:10197":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5139:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"20:321:3131":{"crate_id":20,"path":["zerocopy","FromZeroes"],"kind":"trait"},"1:648:14735":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:5406:15070":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:2490:14796":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11086:27420":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:13426:8256":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:2794:10825":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"24:1538:12499":{"crate_id":24,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:2448:10809":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:1862:2408":{"crate_id":1,"path":["std","collections","hash_set"],"kind":"module"},"1:9247:12006":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:43445:8642":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1521:12488":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5265:12824":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5521:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:5150:12782":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14871:10273":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:45619:33113":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:13780:10066":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4929:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:15314:10346":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:22981:15302":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:586:12471":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13837:9220":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:22953:14811":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"11:1703:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:12217:27558":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:42648:8355":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10140:22627":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7505:11069":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:14334:10177":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41805:8652":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"10:44:9339":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:22231:14951":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"22:333:2845":{"crate_id":22,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"2:4644:9159":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:7735:11437":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7165:11016":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:6582:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:8134:9323":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:40267:8609":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:8663:13570":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:7524:13376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:491:9637":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10533:9175":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:8775:8737":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:4829:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:4936:12709":{"crate_id":24,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:5304:9698":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:5357:12856":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:4239:10850":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8245:11920":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"18:670:9661":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3694:14828":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:5584:12968":{"crate_id":24,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:44538:8252":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5647:10876":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:15556:10481":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:9183:12002":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"11:1858:8467":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13490:10020":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:6737:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:6586:10946":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:3666:8638":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:10659:8642":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:36856:8718":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:2354:8467":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"24:6630:13162":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:12599:492":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"14:186:21645":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:8162:9326":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:7846:27440":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:23075:15030":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:12027:9874":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:6390:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:4841:12656":{"crate_id":24,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6267:10893":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6995:10981":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"24:8293:13434":{"crate_id":24,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:7224:14946":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8707:11981":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"14:219:11318":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11984:9870":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:6878:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:9354:9541":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:13156:10001":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:15869:10543":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:8440:8204":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:582:9681":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"20:566:3141":{"crate_id":20,"path":["zerocopy","ByteSliceMut"],"kind":"trait"},"6:7326:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:3037:9032":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:45182:11663":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:8011:9319":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11536:13582":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:47675:11793":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:1657:12584":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7728:8355":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:32805:258":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:9520:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:43102:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:10469:12025":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:15880:10547":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:4493:11451":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:3063:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11925:9867":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:7941:9682":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:22118:34501":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:1630:11403":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:13432:8247":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:5281:9374":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:532:12443":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:14326:10175":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:16262:10671":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:2778:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:5229:12808":{"crate_id":24,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15023:10304":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11123:36576":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:5575:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:12023:11492":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:16661:10772":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:4764:10854":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:381:11820":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"24:496:12417":{"crate_id":24,"path":["libc","unix","rusage"],"kind":"struct"},"5:5950:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:12571:14742":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:31563:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:1027:8627":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:23465:11538":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:2040:13572":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:2878:10829":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:10653:8633":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:1513:12485":{"crate_id":24,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:16738:10790":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:46744:11700":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:3152:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:559:12457":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9188:12003":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:5502:12935":{"crate_id":24,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:5186:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44179:13558":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:8312:11924":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:7000:13481":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:8800:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:44511:11633":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:7367:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"9:490:11383":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11162:9180":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6203:22565":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10486:22638":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:8141:14765":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:0:1032":{"crate_id":24,"path":["libc"],"kind":"module"},"2:38732:8719":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:966:8619":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10245:22630":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:2525:36534":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:5117:12779":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11787:9858":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:3083:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:8231:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:47226:11749":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:3454:11852":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:8060:11822":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12885:9980":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:663:8468":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11025:36574":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:22979:34734":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"24:585:12471":{"crate_id":24,"path":["libc","unix","protoent"],"kind":"struct"},"2:47794:11796":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11221:9817":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7302:11043":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:7317:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5630:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:41384:8676":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:808:8619":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:4975:12726":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13661:10038":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1563:12516":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5585:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:3306:10808":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:3012:21704":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:4232:14863":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:985:8621":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:10655:8632":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:47951:8189":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:718:9669":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:6709:13186":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:2340:34881":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:3299:34984":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:5195:12792":{"crate_id":24,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:16473:10051":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"22:0:2511":{"crate_id":22,"path":["once_cell"],"kind":"module"},"16:4981:10861":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:9538:11902":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10860:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:7884:27444":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"5:1224:34987":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41820:8656":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:32894:278":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"16:2898:10830":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"23:120:198":{"crate_id":23,"path":["getrandom","use_file","Mutex"],"kind":"struct"},"17:12233:9896":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"23:62:150":{"crate_id":23,"path":["getrandom","error","Error"],"kind":"struct"},"5:1571:8617":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:45630:11682":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:6779:10964":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:40900:11449":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7209:11028":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:3439:10843":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:689:9664":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:16716:10788":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:6110:13572":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:41331:11589":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:42636:8281":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:41354:8688":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:1507:12483":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:16763:10796":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:23613:11549":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:41322:8685":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7072:22570":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:9812:27543":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:22100:9397":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5512:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"0:128:2421":{"crate_id":0,"path":["ahash","random_state"],"kind":"module"},"6:1684:12597":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40167:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:5623:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:14437:10196":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:5755:10878":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:41022:15132":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:45196:15100":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11015:9814":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:14626:10222":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"20:370:3135":{"crate_id":20,"path":["zerocopy","Ref"],"kind":"struct"},"2:12009:11491":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:23558:11544":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:7407:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:909:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:8609:9329":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:11709:27550":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:7604:8281":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:8543:11217":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:8055:11158":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10393:22635":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:7538:13383":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2618:10817":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:5264:12824":{"crate_id":24,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:5485:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:45540:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:1636:8239":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:23602:11548":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:906:14853":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:10331:22633":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:14126:10132":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:47720:11794":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7723:11435":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:859:8624":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:6995:13482":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:2562:2990":{"crate_id":1,"path":["std","io"],"kind":"module"},"24:5461:12916":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"24:5006:12744":{"crate_id":24,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:41456:8679":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:5216:12804":{"crate_id":24,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:8040:36568":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:1111:8626":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:13502:15093":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:43213:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:472:12406":{"crate_id":24,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:38897:8722":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12775:9967":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:3887:9706":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:7494:13359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2871:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:6109:10889":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:15135:9213":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:7366:13310":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:16378:10698":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8622:14849":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:31190:8841":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12134:9886":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4869:12679":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:46644:11688":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:43176:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6157:9274":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:16001:10580":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:2465:9243":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:15990:10576":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:5918:11879":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:47035:11724":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:7495:8276":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10695:9200":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:14157:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:23380:11526":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11629:9842":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:15620:9234":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:14042:11513":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"24:6718:13188":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:8328:9557":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:7279:11042":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15822:10533":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:7553:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15924:10561":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:722:11397":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:1667:12590":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11113:9816":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:2519:13460":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6792:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:4901:12692":{"crate_id":24,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:1551:12508":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7156:11015":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:41432:8693":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:40139:8724":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8598:11484":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:11337:33720":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:5375:12866":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"24:7336:13288":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6171:9277":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:531:12443":{"crate_id":24,"path":["libc","unix","iovec"],"kind":"struct"},"1:681:11824":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:47873:11799":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:10293:9385":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:4982:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:5087:12777":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:12550:12046":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"24:5476:12925":{"crate_id":24,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:47388:11755":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12850:9978":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:34461:8502":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2858:10828":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:16364:10695":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:16705:10783":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:7220:11029":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:471:9678":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:3108:10842":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:16356:10692":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:10594:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:42532:11860":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:41407:8691":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3050:11847":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2021:14775":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10777:9799":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:42954:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:80:26822":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:7695:11432":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:4182:10849":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:14611:10219":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:598:3171":{"crate_id":20,"path":["zerocopy","wrappers","Unalign"],"kind":"struct"},"2:41253:8672":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"24:5549:12954":{"crate_id":24,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:10596:9197":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:2165:11407":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"24:7961:13404":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:785:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:8792:11991":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:5341:12854":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:12918:15359":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2548:10814":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:2682:10820":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:47338:11753":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:2343:14792":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46811:11704":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:10864:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:5420:12886":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5255:12818":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12839:9974":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:23188:11522":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11951:9204":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:7544:11431":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:16180:10645":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:2297:8626":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:3086:34989":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:1727:12613":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:16534:10746":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:2418:8602":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:16276:10673":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:7561:13395":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13054:9184":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:6670:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:43326:8199":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:7962:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"14:31:11310":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:13443:9665":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:6701:13185":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:8083:8651":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:12597:436":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:1862:8281":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:15474:10469":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12991:9989":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:5712:11877":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6651:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:5126:12780":{"crate_id":24,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4976:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5707:22563":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12055:9206":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:11155:9539":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:4894:830":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:906:8468":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8575:8682":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13013:9994":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:12621:1895":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:3315:261":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:16164:10641":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:1481:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:15732:10513":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:14415:10189":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14559:10212":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2781:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"24:7291:13264":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44418:11625":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6422:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11231:22654":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13397:9218":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:16029:10588":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:10665:8640":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:4513:13572":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:10843:11852":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:6631:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9178:12001":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"17:16211:10652":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43976:11617":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"24:7423:13317":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:14000:10099":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:3069:272":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:40488:15140":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:8266:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:9255:8281":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:5222:10868":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:7579:13398":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43986:9529":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7292:13264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:5616:12988":{"crate_id":24,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"22:361:9159":{"crate_id":22,"path":["once_cell","imp","OnceCell"],"kind":"struct"},"6:5051:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:31205:8629":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:7390:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:7977:10841":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:979:8620":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:8803:8665":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5366:12860":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:11935:12043":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:44481:11630":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6820:22568":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:6237:9279":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11074:36575":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:15837:10535":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42386:14850":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"24:7325:13283":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:3082:34988":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:8264:11170":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5488:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:12292:9904":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5381:12867":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14707:10233":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7835:22574":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1625:12561":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12982:22771":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:16202:10650":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5604:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6460:22567":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3547:8656":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:375:11818":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:10792:9803":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:46723:11695":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:6813:8281":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1500:12480":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:42628:8468":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3328:9070":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11552:9838":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:4402:10852":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:3832:10846":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46629:11685":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6459:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11776:9856":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:16486:10065":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:2681:15303":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:7413:11051":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:11750:8468":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11065:12024":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"24:7438:13322":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:569:12462":{"crate_id":24,"path":["libc","unix","tms"],"kind":"struct"},"17:11850:9864":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:45351:13564":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11877:9180":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"24:5538:12948":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:2908:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"24:7983:13405":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:676:8281":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:47050:11725":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:47166:11731":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:776:8239":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"24:5254:12818":{"crate_id":24,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:389:36537":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:6892:13252":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15946:10566":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:5323:11870":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4947:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:44900:11449":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"24:5629:12994":{"crate_id":24,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11901:9866":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:8525:11215":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:22154:34510":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:13305:10013":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"24:5185:12785":{"crate_id":24,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:47765:11795":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4156:14857":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:38842:8721":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:537:12446":{"crate_id":24,"path":["libc","unix","pollfd"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11929:9552":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:1539:12499":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:5356:12856":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:14806:10266":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:7337:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:7990:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15898:10551":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46843:11706":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:666:9682":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44438:11627":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:15049:10306":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:11726:8467":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:11058:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:14130:34319":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"24:7989:13407":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:7629:8670":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:15912:10558":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:5364:11456":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:15956:10569":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:16125:10626":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:41839:8660":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15089:10311":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:46761:11701":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:1632:12565":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:3589:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:5640:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:10448:11834":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"4:0:2975":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13908:10080":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:12097:11858":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"24:5340:12854":{"crate_id":24,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:4546:13572":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:41303:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15753:10517":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:22351:9389":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5652:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5387:12870":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11732:22672":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:11930:11489":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13208:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:6694:13184":{"crate_id":24,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:7857:8279":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"24:5294:12840":{"crate_id":24,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"}},"external_crates":{"23":{"name":"getrandom","html_root_url":"https://docs.rs/getrandom/0.2.15/"},"20":{"name":"zerocopy","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"once_cell","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"libc","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}