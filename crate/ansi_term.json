{"root":"0:0:1775","crate_version":"0.12.1","includes_private":false,"index":{"b:2:2542-0:200:1787":{"id":"b:2:2542-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:688:2856":{"id":"5:688:2856","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[160,0],"end":[172,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:121:2028"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[12,20],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:232:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:30:668":{"id":"0:30:668","crate_id":0,"name":"fmt","span":{"filename":"src/ansi.rs","begin":[278,4],"end":[281,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241:1937":{"id":"0:241:1937","crate_id":0,"name":"Yellow","span":{"filename":"src/style.rs","begin":[271,4],"end":[271,10]},"visibility":"default","docs":"Colour #3 (foreground code `33`, background code `43`).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2553-0:234:1790":{"id":"b:2:2553-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2248-0:234:1790":{"id":"b:2:2248-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:2276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:303:1606":{"id":"0:303:1606","crate_id":0,"name":"0","span":{"filename":"src/display.rs","begin":[134,5],"end":[134,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}}},"2:12033:26994":{"id":"2:12033:26994","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12064:26056":{"id":"2:12064:26056","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11716:13270","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::split_whitespace":"2:12042:31328","str::rsplit":"2:12070:27028"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43366:3022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[132,9],"end":[132,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:307:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12067:27026":{"id":"2:12067:27026","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11539:6104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[140,9],"end":[140,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:213:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3322:1491":{"id":"2:3322:1491","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39353:6232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3320-0:192:1786":{"id":"b:2:3320-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:185-0:178:1797":{"id":"0:185-0:178:1797","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[269,0],"end":[269,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"util","name":"util","id":"0:178:1797","glob":true}}},"2:12117:25197":{"id":"2:12117:25197","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195":{"id":"0:195","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[121,9],"end":[121,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:196:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:257:1607":{"id":"0:257:1607","crate_id":0,"name":"1","span":{"filename":"src/style.rs","begin":[307,12],"end":[307,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"b:2:3320-0:217:1791":{"id":"b:2:3320-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45:2090":{"id":"0:45:2090","crate_id":0,"name":"italic","span":{"filename":"src/style.rs","begin":[101,4],"end":[103,5]},"visibility":"public","docs":"Returns a `Style` with the italic property set.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new().italic();\nprintln!(\"{}\", style.paint(\"greetings\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-0:200:1787":{"id":"0:38-0:200:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,23],"end":[251,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"ansi::Infix","name":"Infix","id":"0:200:1787","glob":false}}},"0:68:694":{"id":"0:68:694","crate_id":0,"name":"from","span":{"filename":"src/style.rs","begin":[475,4],"end":[477,5]},"visibility":"default","docs":"You can turn a `Colour` into a `Style` with the foreground colour set\nwith the `From` trait.\n\n```\nuse ansi_term::{Style, Colour};\nlet green_foreground = Style::default().fg(Colour::Green);\nassert_eq!(green_foreground, Colour::Green.normal());\nassert_eq!(green_foreground, Colour::Green.into());\nassert_eq!(green_foreground, Style::from(Colour::Green));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["colour",{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[206,0],"end":[213,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"items":["0:135:2031"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2538-0:283:2281":{"id":"b:2:2538-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2541:2303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12035:33969":{"id":"2:12035:33969","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11900:1397","str::slice_mut_unchecked":"2:12036:33970","crate::ops::Index":"2:2981:2609"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:27030":{"id":"2:12079:27030","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270","str::rsplitn":"2:12082:27032"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43470:6481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014":{"id":"2:12014","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12015:811","2:12016:2797","2:12017:33965","2:12018:33966","2:12020:33967","2:12023:2030","2:12024:33968","2:12025:314","2:12026:26995","2:12027:26991","2:12029:26992","2:12031:26993","2:12033:26994","2:12035:33969","2:12036:33970","2:12037:27017","2:12038:27018","2:12039:6493","2:12040:6505","2:12041:6076","2:12042:31328","2:12043:31332","2:12044:26057","2:12045:33971","2:12046:31417","2:12047:27034","2:12050:27035","2:12053:27036","2:12056:2836","2:12060:2796","2:12064:26056","2:12067:27026","2:12070:27028","2:12073:33972","2:12076:33973","2:12079:27030","2:12082:27032","2:12085:33974","2:12088:33975","2:12091:2554","2:12094:33976","2:12097:33977","2:12100:33978","2:12103:33979","2:12105:33980","2:12107:33981","2:12109:33982","2:12110:33983","2:12111:33984","2:12114:33985","2:12117:25197","2:12120:27037","2:12123:33986","2:12126:33987","2:12129:33988","2:12132:33989","2:12134:26811","2:12135:28171","2:12136:26812","2:12137:26808","2:12138:26807","2:12139:33990","2:12141:7861","2:12142:33991"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5402:26809":{"id":"5:5402:26809","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12138:26807"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:200:1787":{"id":"a:2:2701:228-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:254:1950":{"id":"0:254:1950","crate_id":0,"name":"RGB","span":{"filename":"src/style.rs","begin":[307,4],"end":[307,19]},"visibility":"default","docs":"A 24-bit RGB color, as specified by ISO-8613-3.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:256:1606","0:257:1607","0:258:1608"]},"discriminant":null}}},"b:2:2542-0:234:1790":{"id":"b:2:2542-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:200:1787":{"id":"b:2:2548-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8253:8036-0:209:1788":{"id":"a:2:8253:8036-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:8036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:22:1986":{"id":"0:22:1986","crate_id":0,"name":"prefix","span":{"filename":"src/ansi.rs","begin":[166,4],"end":[168,5]},"visibility":"public","docs":"The prefix bytes for this style. These are the bytes that tell the\nterminal to use a different colour or font style.\n\n# Examples\n\n```\nuse ansi_term::{Style, Colour::Blue};\n\nlet style = Style::default().bold();\nassert_eq!(\"\\x1b[1m\",\n           style.prefix().to_string());\n\nlet style = Blue.bold();\nassert_eq!(\"\\x1b[1;34m\",\n           style.prefix().to_string());\n\nlet style = Style::default();\nassert_eq!(\"\",\n           style.prefix().to_string());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:26810":{"id":"5:5401:26810","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12137:26808"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1995":{"id":"0:27:1995","crate_id":0,"name":"infix","span":{"filename":"src/ansi.rs","begin":[254,4],"end":[256,5]},"visibility":"public","docs":"The infix bytes between this colour and `next` colour. These are the bytes\nthat tell the terminal to use the `next` colour, or to do nothing if\nthe two colours are equal.\n\nSee also [`Style::infix`](struct.Style.html#method.infix).\n\n# Examples\n\n```\nuse ansi_term::Colour::{Red, Yellow};\n\nassert_eq!(\"\\x1b[33m\",\n           Red.infix(Yellow).to_string());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["next",{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:299:2310":{"id":"b:2:2542-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12027:26991":{"id":"2:12027:26991","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41405:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:33965":{"id":"2:12017:33965","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:33977":{"id":"2:12097:33977","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11716:13270","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::rmatch_indices":"2:12100:33978"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43516:6484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:26995":{"id":"2:12026:26995","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11911:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:423":{"id":"0:205:423","crate_id":0,"name":"clone","span":{"filename":"src/ansi.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:668":{"id":"0:208:668","crate_id":0,"name":"fmt","span":{"filename":"src/ansi.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:1478":{"id":"2:2552:1478","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41547:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:684-0:217:1791":{"id":"b:5:684-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2284","5:687:2855","5:688:2856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:251:1947":{"id":"0:251:1947","crate_id":0,"name":"Fixed","span":{"filename":"src/style.rs","begin":[304,4],"end":[304,13]},"visibility":"default","docs":"A colour number from 0 to 255, for use in 256-colour terminal\nenvironments.\n\n- Colours 0 to 7 are the `Black` to `White` variants respectively.\n  These colours can usually be changed in the terminal emulator.\n- Colours 8 to 15 are brighter versions of the eight colours above.\n  These can also usually be changed in the terminal emulator, or it\n  could be configured to use the original colours and show the text in\n  bold instead. It varies depending on the program.\n- Colours 16 to 231 contain several palettes of bright colours,\n  arranged in six squares measuring six by six each.\n- Colours 232 to 255 are shades of grey from black to white.\n\nIt might make more sense to look at a [colour chart][cc].\n\n[cc]: https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:253:1606"]},"discriminant":null}}},"0:61:2045":{"id":"0:61:2045","crate_id":0,"name":"underline","span":{"filename":"src/style.rs","begin":[383,4],"end":[385,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\nunderline property set.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::Purple.underline();\nprintln!(\"{}\", style.paint(\"salutations\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:6493":{"id":"2:12039:6493","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11894:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43336:6472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2298":{"id":"0:93:2298","crate_id":0,"name":"ANSIString","span":{"filename":"src/display.rs","begin":[89,0],"end":[89,53]},"visibility":"public","docs":"An ANSI String is a string coupled with the `Style` to display it\nin a terminal.\n\nAlthough not technically a string itself, it can be turned into\none with the `to_string` method.\n\n# Examples\n\n```\nuse ansi_term::ANSIString;\nuse ansi_term::Colour::Red;\n\nlet red_string = Red.paint(\"a red string\");\nprintln!(\"{}\", red_string);\n```\n\n```\nuse ansi_term::ANSIString;\n\nlet plain_string = ANSIString::from(\"a plain string\");\nassert_eq!(&*plain_string, \"a plain string\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]}}}},"2:12091:2554":{"id":"2:12091:2554","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11716:13270","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::matches":"2:12091:2554"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43570:6487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[175,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:126:2028"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2684:220-0:200:1787":{"id":"a:2:2684:220-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8253:8036-0:283:2281":{"id":"a:2:8253:8036-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8253:8036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:8036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12085:33974":{"id":"2:12085:33974","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:2718-0:299:2310":{"id":"a:2:2741:2718-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12043:31332":{"id":"2:12043:31332","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12042:31328"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43649:6491","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:209:1788":{"id":"a:2:2701:228-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155-0:78:1795":{"id":"0:155-0:78:1795","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[261,0],"end":[261,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"display","name":"display","id":"0:78:1795","glob":true}}},"b:2:2538-0:200:1787":{"id":"b:2:2538-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:2303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50:2098":{"id":"0:50:2098","crate_id":0,"name":"strikethrough","span":{"filename":"src/style.rs","begin":[170,4],"end":[172,5]},"visibility":"public","docs":"Returns a `Style` with the strikethrough property set.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new().strikethrough();\nprintln!(\"{}\", style.paint(\"yo\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:1587":{"id":"0:176:1587","crate_id":0,"name":"windows","span":{"filename":"src/windows.rs","begin":[1,0],"end":[61,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":true}}},"0:43:2041":{"id":"0:43:2041","crate_id":0,"name":"bold","span":{"filename":"src/style.rs","begin":[73,4],"end":[75,5]},"visibility":"public","docs":"Returns a `Style` with the bold property set.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new().bold();\nprintln!(\"{}\", style.paint(\"hey\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:217:1791":{"id":"b:2:2542-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8253:8036-0:200:1787":{"id":"a:2:8253:8036-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:8036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:263:423":{"id":"0:263:423","crate_id":0,"name":"clone","span":{"filename":"src/style.rs","begin":[254,20],"end":[254,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:2310":{"id":"0:299:2310","crate_id":0,"name":"ANSIGenericStrings","span":{"filename":"src/display.rs","begin":[133,0],"end":[135,58]},"visibility":"public","docs":"A set of `ANSIGenericString`s collected together, in order to be\nwritten with a minimum of control characters.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":["0:303:1606"]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"impls":["0:145","a:2:2684:220-0:299:2310","a:2:2701:228-0:299:2310","a:2:8254:8035-0:299:2310","a:2:2741:2718-0:299:2310","a:2:8253:8036-0:299:2310","b:2:2548-0:299:2310","b:2:2553-0:299:2310","b:2:3320-0:299:2310","b:2:2542-0:299:2310","b:2:2248-0:299:2310","b:2:2251-0:299:2310","b:2:2538-0:299:2310","b:5:5644-0:299:2310","0:311","0:304","0:308"]}}},"2:12082:27032":{"id":"2:12082:27032","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11894:419","str::splitn":"2:12079:27030","self::pattern":"2:11716:13270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43488:6482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:2284":{"id":"5:686:2284","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12047:27034":{"id":"2:12047:27034","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:423":{"id":"0:92:423","crate_id":0,"name":"clone","span":{"filename":"src/display.rs","begin":[36,4],"end":[41,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:200:1787":{"id":"b:2:2251-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:24229"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2248-0:192:1786":{"id":"b:2:2248-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:2276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:220:1912":{"id":"0:220:1912","crate_id":0,"name":"is_bold","span":{"filename":"src/style.rs","begin":[23,4],"end":[23,21]},"visibility":"public","docs":"Whether this style is bold.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"0:28:2001":{"id":"0:28:2001","crate_id":0,"name":"suffix","span":{"filename":"src/ansi.rs","begin":[271,4],"end":[273,5]},"visibility":"public","docs":"The suffix for this colour as a `Style`. These are the bytes that\ntell the terminal to reset back to its normal colour and font style.\n\nSee also [`Style::suffix`](struct.Style.html#method.suffix).\n\n# Examples\n\n```\nuse ansi_term::Colour::Purple;\n\nassert_eq!(\"\\x1b[0m\",\n           Purple.suffix().to_string());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:34642":{"id":"5:5387:34642","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[95,0],"end":[104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:689:111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:101:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:177-0:176:1587":{"id":"0:177-0:176:1587","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[266,0],"end":[266,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"windows","name":"windows","id":"0:176:1587","glob":true}}},"0:78:1795":{"id":"0:78:1795","crate_id":0,"name":"display","span":{"filename":"src/display.rs","begin":[1,0],"end":[296,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:283:2281","0:93:2298","0:95:2301","0:299:2310","0:112:2313","0:114:2313","0:116:2318","0:118:2318"],"is_stripped":true}}},"0:253:1606":{"id":"0:253:1606","crate_id":0,"name":"0","span":{"filename":"src/style.rs","begin":[304,10],"end":[304,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"b:2:2251-0:234:1790":{"id":"b:2:2251-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:24229"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70-0:234:1790":{"id":"0:70-0:234:1790","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[254,16],"end":[254,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"style::Colour","name":"Colour","id":"0:234:1790","glob":false}}},"2:12111:33984":{"id":"2:12111:33984","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11741:13267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:668":{"id":"0:32:668","crate_id":0,"name":"fmt","span":{"filename":"src/ansi.rs","begin":[286,4],"end":[302,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[463,0],"end":[478,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37-0:192:1786":{"id":"0:37-0:192:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,15],"end":[251,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"ansi::Prefix","name":"Prefix","id":"0:192:1786","glob":false}}},"b:5:684-0:283:2281":{"id":"b:5:684-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:686:2284","5:687:2855","5:688:2856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12135:28171":{"id":"2:12135:28171","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39561:26973","Self::is_ascii":"2:12134:26811"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39561:26973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2248-0:209:1788":{"id":"b:2:2248-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:2276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2741:2718-0:192:1786":{"id":"a:2:2741:2718-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3320-0:200:1787":{"id":"b:2:3320-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256:1606":{"id":"0:256:1606","crate_id":0,"name":"0","span":{"filename":"src/style.rs","begin":[307,8],"end":[307,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"0:62:2092":{"id":"0:62:2092","crate_id":0,"name":"blink","span":{"filename":"src/style.rs","begin":[398,4],"end":[400,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\nblink property set.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::Cyan.blink();\nprintln!(\"{}\", style.paint(\"wazzup\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:1786":{"id":"0:192:1786","crate_id":0,"name":"Prefix","span":{"filename":"src/ansi.rs","begin":[122,0],"end":[122,25]},"visibility":"public","docs":"Like `ANSIString`, but only displays the style prefix.\n\nThis type implements the `Display` trait, meaning it can be written to a\n`std::fmt` formatting without doing any extra allocation, and written to a\nstring with the `.to_string()` method. For examples, see\n[`Style::prefix`](struct.Style.html#method.prefix).","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2684:220-0:192:1786","a:2:2701:228-0:192:1786","a:2:8254:8035-0:192:1786","a:2:2741:2718-0:192:1786","a:2:8253:8036-0:192:1786","b:2:2548-0:192:1786","b:2:2553-0:192:1786","b:2:3320-0:192:1786","b:2:2542-0:192:1786","b:2:2248-0:192:1786","b:2:2251-0:192:1786","b:2:2538-0:192:1786","b:5:5644-0:192:1786","b:5:684-0:192:1786","0:197","0:195","0:29","0:198"]}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[234,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"items":["0:147:2031"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:95:2301":{"id":"0:95:2301","crate_id":0,"name":"ANSIByteString","span":{"filename":"src/display.rs","begin":[93,0],"end":[93,58]},"visibility":"public","docs":"An `ANSIByteString` represents a formatted series of bytes.  Use\n`ANSIByteString` when styling text with an unknown encoding.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]}}}},"a:2:8253:8036-0:299:2310":{"id":"a:2:8253:8036-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:8036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2248-0:200:1787":{"id":"b:2:2248-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:2276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2684:220-0:283:2281":{"id":"a:2:2684:220-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2248-0:217:1791":{"id":"b:2:2248-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:2276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2741:2718-0:283:2281":{"id":"a:2:2741:2718-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2741:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[254,9],"end":[254,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2553-0:283:2281":{"id":"b:2:2553-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12015:811":{"id":"2:12015:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11894:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:694":{"id":"0:101:694","crate_id":0,"name":"from","span":{"filename":"src/display.rs","begin":[98,4],"end":[103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"generic":"I"}]],"output":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:13393":{"id":"5:5384:13393","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2098":{"id":"0:65:2098","crate_id":0,"name":"strikethrough","span":{"filename":"src/style.rs","begin":[443,4],"end":[445,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\nstrikethrough property set.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::Fixed(244).strikethrough();\nprintln!(\"{}\", style.paint(\"yo\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:8036-0:217:1791":{"id":"a:2:8253:8036-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:8036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12025:314":{"id":"2:12025:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12026:26995","`u8`":"1:11911:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:2031":{"id":"0:147:2031","crate_id":0,"name":"write_to","span":{"filename":"src/display.rs","begin":[238,4],"end":[241,5]},"visibility":"public","docs":"Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal\nescape sequences for the associated `Style`s around each set of\nbytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["w",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"W"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2867:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3440:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8254:8035-0:192:1786":{"id":"a:2:8254:8035-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:687:2855":{"id":"5:687:2855","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:2318":{"id":"0:116:2318","crate_id":0,"name":"ANSIByteStrings","span":{"filename":"src/display.rs","begin":[149,0],"end":[149,60]},"visibility":"public","docs":"A set of `ANSIByteString`s collected together, in order to be\nwritten with a minimum of control characters.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]}}}},"2:12042:31328":{"id":"2:12042:31328","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12043:31332"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43640:6490","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:33975":{"id":"2:12088:33975","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2006":{"id":"0:57:2006","crate_id":0,"name":"normal","span":{"filename":"src/style.rs","begin":[323,4],"end":[325,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::Red.normal();\nprintln!(\"{}\", style.paint(\"hi\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2045":{"id":"0:46:2045","crate_id":0,"name":"underline","span":{"filename":"src/style.rs","begin":[115,4],"end":[117,5]},"visibility":"public","docs":"Returns a `Style` with the underline property set.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new().underline();\nprintln!(\"{}\", style.paint(\"salutations\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:209:1788":{"id":"b:2:2251-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:24229"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[306,0],"end":[311,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:35:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:992":{"id":"0:52:992","crate_id":0,"name":"on","span":{"filename":"src/style.rs","begin":[198,4],"end":[200,5]},"visibility":"public","docs":"Returns a `Style` with the background colour property set.\n\n# Examples\n\n```\nuse ansi_term::{Style, Colour};\n\nlet style = Style::new().on(Colour::Blue);\nprintln!(\"{}\", style.paint(\"eyyyy\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["background",{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[254,9],"end":[254,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:183:2387":{"id":"0:183:2387","crate_id":0,"name":"unstyle","span":{"filename":"src/util.rs","begin":[38,0],"end":[46,1]},"visibility":"public","docs":"Return a concatenated copy of `strs` without the formatting, as an allocated `String`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["strs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ANSIStrings","id":"0:112:2313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:2030":{"id":"2:12023:2030","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11283:13271"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:26992":{"id":"2:12029:26992","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41405:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:34643":{"id":"5:5390:34643","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:27037":{"id":"2:12120:27037","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:3045":{"id":"5:5400:3045","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2541:2303":{"id":"2:2541:2303","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2538-0:299:2310":{"id":"b:2:2538-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2541:2303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:26:1986":{"id":"0:26:1986","crate_id":0,"name":"prefix","span":{"filename":"src/ansi.rs","begin":[236,4],"end":[238,5]},"visibility":"public","docs":"The prefix bytes for this colour as a `Style`. These are the bytes\nthat tell the terminal to use a different colour or font style.\n\nSee also [`Style::prefix`](struct.Style.html#method.prefix).\n\n# Examples\n\n```\nuse ansi_term::Colour::Green;\n\nassert_eq!(\"\\x1b[0m\",\n           Green.suffix().to_string());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:2796":{"id":"2:12060:2796","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41405:179","prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:423":{"id":"0:196:423","crate_id":0,"name":"clone","span":{"filename":"src/ansi.rs","begin":[121,9],"end":[121,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72-0:234:1790":{"id":"0:72-0:234:1790","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[257,0],"end":[257,24]},"visibility":"public","docs":"Color is a type alias for `Colour`.","links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"Colour","name":"Color","id":"0:234:1790","glob":false}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[218,0],"end":[244,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:262":{"id":"0:262","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[254,20],"end":[254,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:263:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2548-0:192:1786":{"id":"b:2:2548-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:237:1934":{"id":"0:237:1934","crate_id":0,"name":"Red","span":{"filename":"src/style.rs","begin":[265,4],"end":[265,7]},"visibility":"default","docs":"Colour #1 (foreground code `31`, background code `41`).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12073:33972":{"id":"2:12073:33972","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11716:13270","str::split":"2:12064:26056","prim@char":"1:11894:419","`DoubleEndedIterator`":"2:7244:121","str::rsplit_terminator":"2:12076:33973"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43416:6478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:2028":{"id":"0:126:2028","crate_id":0,"name":"paint","span":{"filename":"src/display.rs","begin":[186,4],"end":[193,5]},"visibility":"public","docs":"Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don‚Äôt have to use `Blue.normal()` just\nto get blue text.\n\n```\nuse ansi_term::Colour::Blue;\nprintln!(\"{}\", Blue.paint(\"da ba dee\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["input",{"generic":"I"}]],"output":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:689:111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:684-0:209:1788":{"id":"b:5:684-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2284","5:687:2855","5:688:2856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:234:1790":{"id":"0:234:1790","crate_id":0,"name":"Colour","span":{"filename":"src/style.rs","begin":[256,0],"end":[308,1]},"visibility":"public","docs":"A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.\n\nThese use the standard numeric sequences.\nSee <http://invisible-island.net/xterm/ctlseqs/ctlseqs.html>","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:235:1932","0:237:1934","0:239:1936","0:241:1937","0:243:1939","0:245:1941","0:247:1943","0:249:1945","0:251:1947","0:254:1950"],"impls":["0:25","0:56","0:125","a:2:2684:220-0:234:1790","a:2:2701:228-0:234:1790","a:2:8254:8035-0:234:1790","a:2:2741:2718-0:234:1790","a:2:8253:8036-0:234:1790","b:2:2548-0:234:1790","b:2:2553-0:234:1790","b:2:3320-0:234:1790","b:2:2542-0:234:1790","b:2:2248-0:234:1790","b:2:2251-0:234:1790","b:2:2538-0:234:1790","b:5:684-0:234:1790","0:67","0:259","0:260","0:265","0:264","0:262"]}}},"0:110:230":{"id":"0:110:230","crate_id":0,"name":"Target","span":{"filename":"src/display.rs","begin":[122,4],"end":[122,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"S"}}}},"b:2:2553-0:299:2310":{"id":"b:2:2553-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3320-0:299:2310":{"id":"b:2:3320-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3322:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39-0:209:1788":{"id":"0:39-0:209:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,30],"end":[251,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"ansi::Suffix","name":"Suffix","id":"0:209:1788","glob":false}}},"0:198":{"id":"0:198","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[121,22],"end":[121,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:199:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8254:8035-0:283:2281":{"id":"a:2:8254:8035-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:258:1608":{"id":"0:258:1608","crate_id":0,"name":"2","span":{"filename":"src/style.rs","begin":[307,16],"end":[307,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"u8"}}},"0:295":{"id":"0:295","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[15,20],"end":[15,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:298:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:314:613":{"id":"0:314:613","crate_id":0,"name":"eq","span":{"filename":"src/display.rs","begin":[132,16],"end":[132,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[121,16],"end":[121,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:181:2378":{"id":"0:181:2378","crate_id":0,"name":"sub_string","span":{"filename":"src/util.rs","begin":[5,0],"end":[35,1]},"visibility":"public","docs":"Return a substring of the given ANSIStrings sequence, while keeping the formatting.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["start",{"primitive":"usize"}],["len",{"primitive":"usize"}],["strs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ANSIStrings","id":"0:112:2313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Vec","id":"5:6695:244","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ANSIString","id":"0:93:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:33981":{"id":"2:12107:33981","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:668":{"id":"0:199:668","crate_id":0,"name":"fmt","span":{"filename":"src/ansi.rs","begin":[121,22],"end":[121,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:33982":{"id":"2:12109:33982","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:1939":{"id":"0:243:1939","crate_id":0,"name":"Blue","span":{"filename":"src/style.rs","begin":[274,4],"end":[274,8]},"visibility":"default","docs":"Colour #4 (foreground code `34`, background code `44`).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:8254:8035-0:209:1788":{"id":"a:2:8254:8035-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:135:2031":{"id":"0:135:2031","crate_id":0,"name":"write_to","span":{"filename":"src/display.rs","begin":[209,4],"end":[212,5]},"visibility":"public","docs":"Write an `ANSIByteString` to an `io::Write`.  This writes the escape\nsequences for the associated `Style` around the bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["w",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"W"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2867:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3440:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[144,0],"end":[218,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:22:1986","0:23:1995","0:24:2001"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48:2094":{"id":"0:48:2094","crate_id":0,"name":"reverse","span":{"filename":"src/style.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Returns a `Style` with the reverse property set.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new().reverse();\nprintln!(\"{}\", style.paint(\"aloha\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:731":{"id":"0:64:731","crate_id":0,"name":"hidden","span":{"filename":"src/style.rs","begin":[428,4],"end":[430,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\nhidden property set.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::White.hidden();\nprintln!(\"{}\", style.paint(\"ahoy\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:200:1787":{"id":"b:2:2553-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12100:33978":{"id":"2:12100:33978","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11716:13270","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::match_indices":"2:12097:33977"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43534:6485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:2389":{"id":"0:184:2389","crate_id":0,"name":"unstyled_len","span":{"filename":"src/util.rs","begin":[49,0],"end":[55,1]},"visibility":"public","docs":"Return the unstyled length of ANSIStrings. This is equaivalent to `unstyle(strs).len()`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["strs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ANSIStrings","id":"0:112:2313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:26812":{"id":"2:12136:26812","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8254:8035-0:217:1791":{"id":"a:2:8254:8035-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[12,9],"end":[12,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[285,0],"end":[303,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:32:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:239:1936":{"id":"0:239:1936","crate_id":0,"name":"Green","span":{"filename":"src/style.rs","begin":[268,4],"end":[268,9]},"visibility":"default","docs":"Colour #2 (foreground code `32`, background code `42`).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2548-0:209:1788":{"id":"b:2:2548-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2250:2276":{"id":"2:2250:2276","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:2718-0:234:1790":{"id":"a:2:2741:2718-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:8254:8035-0:200:1787":{"id":"a:2:8254:8035-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:227:1919":{"id":"0:227:1919","crate_id":0,"name":"is_strikethrough","span":{"filename":"src/style.rs","begin":[44,4],"end":[44,30]},"visibility":"public","docs":"Whether this style is struckthrough.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"0:105:2305":{"id":"0:105:2305","crate_id":0,"name":"style_ref","span":{"filename":"src/display.rs","begin":[110,4],"end":[112,5]},"visibility":"public","docs":"Directly access the style","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[47,0],"end":[216,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:42:939","0:43:2041","0:44:2088","0:45:2090","0:46:2045","0:47:2092","0:48:2094","0:49:731","0:50:2098","0:51:1923","0:52:992","0:53:1905"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5646:1455":{"id":"5:5646:1455","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:992":{"id":"0:66:992","crate_id":0,"name":"on","span":{"filename":"src/style.rs","begin":[458,4],"end":[460,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\nbackground colour property set to the given colour.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::RGB(31, 31, 31).on(Colour::White);\nprintln!(\"{}\", style.paint(\"eyyyy\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["background",{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2307":{"id":"0:106:2307","crate_id":0,"name":"style_ref_mut","span":{"filename":"src/display.rs","begin":[115,4],"end":[117,5]},"visibility":"public","docs":"Directly access the style mutably","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5644-0:209:1788":{"id":"b:5:5644-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12132:33989":{"id":"2:12132:33989","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11677:127","`FromStr`":"2:11676:8047"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41547:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11676:8047","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11676:8047","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:1932":{"id":"0:235:1932","crate_id":0,"name":"Black","span":{"filename":"src/style.rs","begin":[262,4],"end":[262,9]},"visibility":"default","docs":"Colour #0 (foreground code `30`, background code `40`).\n\nThis is not necessarily the background colour, and using it as one may\nrender the text hard to read on terminals with dark backgrounds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[131,16],"end":[131,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2684:220-0:217:1791":{"id":"a:2:2684:220-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24:2001":{"id":"0:24:2001","crate_id":0,"name":"suffix","span":{"filename":"src/ansi.rs","begin":[215,4],"end":[217,5]},"visibility":"public","docs":"The suffix for this style. These are the bytes that tell the terminal\nto reset back to its normal colour and font style.\n\n# Examples\n\n```\nuse ansi_term::{Style, Colour::Green};\n\nlet style = Style::default().bold();\nassert_eq!(\"\\x1b[0m\",\n           style.suffix().to_string());\n\nlet style = Green.normal().bold();\nassert_eq!(\"\\x1b[0m\",\n           style.suffix().to_string());\n\nlet style = Style::default();\nassert_eq!(\"\",\n           style.suffix().to_string());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:1917":{"id":"0:225:1917","crate_id":0,"name":"is_reverse","span":{"filename":"src/style.rs","begin":[38,4],"end":[38,24]},"visibility":"public","docs":"Whether this style has reverse colours.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"0:230:613":{"id":"0:230:613","crate_id":0,"name":"eq","span":{"filename":"src/style.rs","begin":[12,9],"end":[12,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:1943":{"id":"0:247:1943","crate_id":0,"name":"Cyan","span":{"filename":"src/style.rs","begin":[280,4],"end":[280,8]},"visibility":"default","docs":"Colour #6 (foreground code `36`, background code `46`).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:223:1915":{"id":"0:223:1915","crate_id":0,"name":"is_underline","span":{"filename":"src/style.rs","begin":[32,4],"end":[32,26]},"visibility":"public","docs":"Whether this style is underlined.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[106,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:105:2305","0:106:2307"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8254:8035-0:299:2310":{"id":"a:2:8254:8035-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:221:1913":{"id":"0:221:1913","crate_id":0,"name":"is_dimmed","span":{"filename":"src/style.rs","begin":[26,4],"end":[26,23]},"visibility":"public","docs":"Whether this style is dimmed.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"b:2:2251-0:299:2310":{"id":"b:2:2251-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2253:24229"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[15,9],"end":[15,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:294:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2553-0:217:1791":{"id":"b:2:2553-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:114:2313":{"id":"0:114:2313","crate_id":0,"name":"ANSIStrings","span":{"filename":"src/display.rs","begin":[143,0],"end":[145,1]},"visibility":"public","docs":"A function to construct an `ANSIStrings` instance.","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arg",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"resolved_path":{"name":"ANSIString","id":"0:93:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"ANSIStrings","id":"0:112:2313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:283:2281":{"id":"b:2:2542-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[140,16],"end":[140,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12020:33967":{"id":"2:12020:33967","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12018:33966"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:26993":{"id":"2:12031:26993","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:27017":{"id":"2:12037:27017","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12038:27018"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:6076":{"id":"2:12041:6076","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43352:3021","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:33979":{"id":"2:12103:33979","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:33987":{"id":"2:12126:33987","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:33991":{"id":"2:12142:33991","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:33991"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43683:6370","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12050:27035":{"id":"2:12050:27035","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:33970":{"id":"2:12036:33970","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11900:1397","crate::ops::IndexMut":"2:2985:2610","str::slice_unchecked":"2:12035:33969"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:209:1788":{"id":"a:2:2684:220-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2548-0:299:2310":{"id":"b:2:2548-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2553-0:209:1788":{"id":"b:2:2553-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12114:33985":{"id":"2:12114:33985","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3320-0:234:1790":{"id":"b:2:3320-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12110:33983":{"id":"2:12110:33983","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2544:694":{"id":"2:2544:694","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:684-0:200:1787":{"id":"b:5:684-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2284","5:687:2855","5:688:2856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5644-0:299:2310":{"id":"b:5:5644-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[132,16],"end":[132,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2538-0:209:1788":{"id":"b:2:2538-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:2303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2741:2718-0:217:1791":{"id":"a:2:2741:2718-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:283:2281":{"id":"0:283:2281","crate_id":0,"name":"ANSIGenericString","span":{"filename":"src/display.rs","begin":[16,0],"end":[20,1]},"visibility":"public","docs":"An `ANSIGenericString` includes a generic string type and a `Style` to\ndisplay that string.  `ANSIString` and `ANSIByteString` are aliases for\nthis type on `str` and `\\[u8]`, respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:102","0:133","a:2:2684:220-0:283:2281","a:2:2701:228-0:283:2281","a:2:8254:8035-0:283:2281","a:2:2741:2718-0:283:2281","a:2:8253:8036-0:283:2281","b:2:2548-0:283:2281","b:2:2553-0:283:2281","b:2:3320-0:283:2281","b:2:2542-0:283:2281","b:2:2248-0:283:2281","b:2:2251-0:283:2281","b:2:2538-0:283:2281","b:5:5644-0:283:2281","b:5:684-0:283:2281","0:89","0:97","0:107","0:291","0:288","0:295"]}}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[221,0],"end":[274,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:26:1986","0:27:1995","0:28:2001"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[311,0],"end":[461,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:2006","0:58:2041","0:59:2088","0:60:2090","0:61:2045","0:62:2092","0:63:2094","0:64:731","0:65:2098","0:66:992"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1775":{"id":"0:0:1775","crate_id":0,"name":"ansi_term","span":{"filename":"src/lib.rs","begin":[1,0],"end":[271,10]},"visibility":"public","docs":"This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.\n\n\n## Basic usage\n\nThere are three main types in this crate that you need to be\nconcerned with: [`ANSIString`], [`Style`], and [`Colour`].\n\nA `Style` holds stylistic information: foreground and background colours,\nwhether the text should be bold, or blinking, or other properties. The\n[`Colour`] enum represents the available colours. And an [`ANSIString`] is a\nstring paired with a [`Style`].\n\n[`Color`] is also available as an alias to `Colour`.\n\nTo format a string, call the `paint` method on a `Style` or a `Colour`,\npassing in the string you want to format as the argument. For example,\nhere‚Äôs how to get some red text:\n\n```\nuse ansi_term::Colour::Red;\n\nprintln!(\"This is in red: {}\", Red.paint(\"a red string\"));\n```\n\nIt‚Äôs important to note that the `paint` method does *not* actually return a\nstring with the ANSI control characters surrounding it. Instead, it returns\nan [`ANSIString`] value that has a [`Display`] implementation that, when\nformatted, returns the characters. This allows strings to be printed with a\nminimum of [`String`] allocations being performed behind the scenes.\n\nIf you *do* want to get at the escape codes, then you can convert the\n[`ANSIString`] to a string as you would any other `Display` value:\n\n```\nuse ansi_term::Colour::Red;\n\nlet red_string = Red.paint(\"a red string\").to_string();\n```\n\n\n## Bold, underline, background, and other styles\n\nFor anything more complex than plain foreground colour changes, you need to\nconstruct `Style` values themselves, rather than beginning with a `Colour`.\nYou can do this by chaining methods based on a new `Style`, created with\n[`Style::new()`]. Each method creates a new style that has that specific\nproperty set. For example:\n\n```\nuse ansi_term::Style;\n\nprintln!(\"How about some {} and {}?\",\n         Style::new().bold().paint(\"bold\"),\n         Style::new().underline().paint(\"underline\"));\n```\n\nFor brevity, these methods have also been implemented for `Colour` values,\nso you can give your styles a foreground colour without having to begin with\nan empty `Style` value:\n\n```\nuse ansi_term::Colour::{Blue, Yellow};\n\nprintln!(\"Demonstrating {} and {}!\",\n         Blue.bold().paint(\"blue bold\"),\n         Yellow.underline().paint(\"yellow underline\"));\n\nprintln!(\"Yellow on blue: {}\", Yellow.on(Blue).paint(\"wow!\"));\n```\n\nThe complete list of styles you can use are: [`bold`], [`dimmed`], [`italic`],\n[`underline`], [`blink`], [`reverse`], [`hidden`], [`strikethrough`], and [`on`] for\nbackground colours.\n\nIn some cases, you may find it easier to change the foreground on an\nexisting `Style` rather than starting from the appropriate `Colour`.\nYou can do this using the [`fg`] method:\n\n```\nuse ansi_term::Style;\nuse ansi_term::Colour::{Blue, Cyan, Yellow};\n\nprintln!(\"Yellow on blue: {}\", Style::new().on(Blue).fg(Yellow).paint(\"yow!\"));\nprintln!(\"Also yellow on blue: {}\", Cyan.on(Blue).fg(Yellow).paint(\"zow!\"));\n```\n\nYou can turn a `Colour` into a `Style` with the [`normal`] method.\nThis will produce the exact same `ANSIString` as if you just used the\n`paint` method on the `Colour` directly, but it‚Äôs useful in certain cases:\nfor example, you may have a method that returns `Styles`, and need to\nrepresent both the ‚Äúred bold‚Äù and ‚Äúred, but not bold‚Äù styles with values of\nthe same type. The `Style` struct also has a [`Default`] implementation if you\nwant to have a style with *nothing* set.\n\n```\nuse ansi_term::Style;\nuse ansi_term::Colour::Red;\n\nRed.normal().paint(\"yet another red string\");\nStyle::default().paint(\"a completely regular string\");\n```\n\n\n## Extended colours\n\nYou can access the extended range of 256 colours by using the `Colour::Fixed`\nvariant, which takes an argument of the colour number to use. This can be\nincluded wherever you would use a `Colour`:\n\n```\nuse ansi_term::Colour::Fixed;\n\nFixed(134).paint(\"A sort of light purple\");\nFixed(221).on(Fixed(124)).paint(\"Mustard in the ketchup\");\n```\n\nThe first sixteen of these values are the same as the normal and bold\nstandard colour variants. There‚Äôs nothing stopping you from using these as\n`Fixed` colours instead, but there‚Äôs nothing to be gained by doing so\neither.\n\nYou can also access full 24-bit colour by using the `Colour::RGB` variant,\nwhich takes separate `u8` arguments for red, green, and blue:\n\n```\nuse ansi_term::Colour::RGB;\n\nRGB(70, 130, 180).paint(\"Steel blue\");\n```\n\n## Combining successive coloured strings\n\nThe benefit of writing ANSI escape codes to the terminal is that they\n*stack*: you do not need to end every coloured string with a reset code if\nthe text that follows it is of a similar style. For example, if you want to\nhave some blue text followed by some blue bold text, it‚Äôs possible to send\nthe ANSI code for blue, followed by the ANSI code for bold, and finishing\nwith a reset code without having to have an extra one between the two\nstrings.\n\nThis crate can optimise the ANSI codes that get printed in situations like\nthis, making life easier for your terminal renderer. The [`ANSIStrings`]\ntype takes a slice of several [`ANSIString`] values, and will iterate over\neach of them, printing only the codes for the styles that need to be updated\nas part of its formatting routine.\n\nThe following code snippet uses this to enclose a binary number displayed in\nred bold text inside some red, but not bold, brackets:\n\n```\nuse ansi_term::Colour::Red;\nuse ansi_term::{ANSIString, ANSIStrings};\n\nlet some_value = format!(\"{:b}\", 42);\nlet strings: &[ANSIString<'static>] = &[\n    Red.paint(\"[\"),\n    Red.bold().paint(some_value),\n    Red.paint(\"]\"),\n];\n\nprintln!(\"Value: {}\", ANSIStrings(strings));\n```\n\nThere are several things to note here. Firstly, the [`paint`] method can take\n*either* an owned [`String`] or a borrowed [`&str`]. Internally, an [`ANSIString`]\nholds a copy-on-write ([`Cow`]) string value to deal with both owned and\nborrowed strings at the same time. This is used here to display a `String`,\nthe result of the `format!` call, using the same mechanism as some\nstatically-available `&str` slices. Secondly, that the [`ANSIStrings`] value\nworks in the same way as its singular counterpart, with a [`Display`]\nimplementation that only performs the formatting when required.\n\n## Byte strings\n\nThis library also supports formatting `\\[u8]` byte strings; this supports\napplications working with text in an unknown encoding.  [`Style`] and\n[`Colour`] support painting `\\[u8]` values, resulting in an [`ANSIByteString`].\nThis type does not implement [`Display`], as it may not contain UTF-8, but\nit does provide a method [`write_to`] to write the result to any value that\nimplements [`Write`]:\n\n```\nuse ansi_term::Colour::Green;\n\nGreen.paint(\"user data\".as_bytes()).write_to(&mut std::io::stdout()).unwrap();\n```\n\nSimilarly, the type [`ANSIByteStrings`] supports writing a list of\n[`ANSIByteString`] values with minimal escape sequences:\n\n```\nuse ansi_term::Colour::Green;\nuse ansi_term::ANSIByteStrings;\n\nANSIByteStrings(&[\n    Green.paint(\"user data 1\\n\".as_bytes()),\n    Green.bold().paint(\"user data 2\\n\".as_bytes()),\n]).write_to(&mut std::io::stdout()).unwrap();\n```\n\n[`Cow`]: https://doc.rust-lang.org/std/borrow/enum.Cow.html\n[`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html\n[`Default`]: https://doc.rust-lang.org/std/default/trait.Default.html\n[`String`]: https://doc.rust-lang.org/std/string/struct.String.html\n[`&str`]: https://doc.rust-lang.org/std/primitive.str.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html\n[`Style`]: struct.Style.html\n[`Style::new()`]: struct.Style.html#method.new\n[`Color`]: enum.Color.html\n[`Colour`]: enum.Colour.html\n[`ANSIString`]: type.ANSIString.html\n[`ANSIStrings`]: type.ANSIStrings.html\n[`ANSIByteString`]: type.ANSIByteString.html\n[`ANSIByteStrings`]: type.ANSIByteStrings.html\n[`write_to`]: type.ANSIByteString.html#method.write_to\n[`paint`]: type.ANSIByteString.html#method.write_to\n[`normal`]: enum.Colour.html#method.normal\n\n[`bold`]: struct.Style.html#method.bold\n[`dimmed`]: struct.Style.html#method.dimmed\n[`italic`]: struct.Style.html#method.italic\n[`underline`]: struct.Style.html#method.underline\n[`blink`]: struct.Style.html#method.blink\n[`reverse`]: struct.Style.html#method.reverse\n[`hidden`]: struct.Style.html#method.hidden\n[`strikethrough`]: struct.Style.html#method.strikethrough\n[`fg`]: struct.Style.html#method.fg\n[`on`]: struct.Style.html#method.on","links":{},"attrs":["#![crate_name = \"ansi_term\"]","#![crate_type = \"rlib\"]","#![crate_type = \"dylib\"]","#![warn(missing_copy_implementations)]","#![warn(missing_docs)]","#![warn(trivial_casts, trivial_numeric_casts)]","#![warn(unused_extern_crates, unused_qualifications)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:37-0:192:1786","0:38-0:200:1787","0:39-0:209:1788","0:70-0:234:1790","0:71-0:217:1791","0:72-0:234:1790","0:155-0:78:1795","0:177-0:176:1587","0:185-0:178:1797"],"is_stripped":false}}},"2:12040:6505":{"id":"2:12040:6505","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11894:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43342:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:8036-0:192:1786":{"id":"a:2:8253:8036-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:8036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2684:220-0:192:1786":{"id":"a:2:2684:220-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2251-0:217:1791":{"id":"b:2:2251-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:24229"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:217:1791":{"id":"b:2:2548-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:234:1790":{"id":"b:2:2548-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12094:33976":{"id":"2:12094:33976","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11716:13270","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::matches":"2:12091:2554"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43588:6488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[132,16],"end":[132,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:314:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:217:1791":{"id":"0:217:1791","crate_id":0,"name":"Style","span":{"filename":"src/style.rs","begin":[14,0],"end":[45,1]},"visibility":"public","docs":"A style is a collection of properties that can format a string\nusing ANSI escape codes.\n\n# Examples\n\n```\nuse ansi_term::{Style, Colour};\n\nlet style = Style::new().bold().on(Colour::Black);\nprintln!(\"{}\", style.paint(\"Bold on black\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:218:1924","0:219:1921","0:220:1912","0:221:1913","0:222:1914","0:223:1915","0:224:1916","0:225:1917","0:226:1918","0:227:1919"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["0:21","0:41","0:120","a:2:2684:220-0:217:1791","a:2:2701:228-0:217:1791","a:2:8254:8035-0:217:1791","a:2:2741:2718-0:217:1791","a:2:8253:8036-0:217:1791","b:2:2548-0:217:1791","b:2:2553-0:217:1791","b:2:3320-0:217:1791","b:2:2542-0:217:1791","b:2:2248-0:217:1791","b:2:2251-0:217:1791","b:2:2538-0:217:1791","b:5:684-0:217:1791","0:67","0:231","0:54","0:189","0:228","0:233","0:229"]}}},"b:2:2538-0:234:1790":{"id":"b:2:2538-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:2303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12070:27028":{"id":"2:12070:27028","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11716:13270","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::split":"2:12064:26056"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43384:6105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[12,27],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:2088":{"id":"0:59:2088","crate_id":0,"name":"dimmed","span":{"filename":"src/style.rs","begin":[353,4],"end":[355,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\ndimmed property set.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::Yellow.dimmed();\nprintln!(\"{}\", style.paint(\"sup\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2557:1477":{"id":"2:2557:1477","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41547:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2088":{"id":"0:44:2088","crate_id":0,"name":"dimmed","span":{"filename":"src/style.rs","begin":[87,4],"end":[89,5]},"visibility":"public","docs":"Returns a `Style` with the dimmed property set.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new().dimmed();\nprintln!(\"{}\", style.paint(\"sup\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1905":{"id":"0:53:1905","crate_id":0,"name":"is_plain","span":{"filename":"src/style.rs","begin":[213,4],"end":[215,5]},"visibility":"public","docs":"Return true if this `Style` has no actual styles, and can be written\nwithout any control characters.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nassert_eq!(true,  Style::default().is_plain());\nassert_eq!(false, Style::default().bold().is_plain());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:668":{"id":"0:266:668","crate_id":0,"name":"fmt","span":{"filename":"src/style.rs","begin":[254,33],"end":[254,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:2028":{"id":"0:121:2028","crate_id":0,"name":"paint","span":{"filename":"src/display.rs","begin":[164,4],"end":[171,5]},"visibility":"public","docs":"Paints the given text with this colour, returning an ANSI string.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["input",{"generic":"I"}]],"output":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:689:111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:668":{"id":"0:307:668","crate_id":0,"name":"fmt","span":{"filename":"src/display.rs","begin":[132,9],"end":[132,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:33971":{"id":"2:12045:33971","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43630:6489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:31417":{"id":"2:12046:31417","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43658:6492","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:33986":{"id":"2:12123:33986","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:7861":{"id":"2:12141:7861","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:7861"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43674:6362","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:684-0:234:1790":{"id":"b:5:684-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2284","5:687:2855","5:688:2856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12134:26811":{"id":"2:12134:26811","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2094":{"id":"0:63:2094","crate_id":0,"name":"reverse","span":{"filename":"src/style.rs","begin":[413,4],"end":[415,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\nreverse property set.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::Black.reverse();\nprintln!(\"{}\", style.paint(\"aloha\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:2718-0:200:1787":{"id":"a:2:2741:2718-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2701:228-0:234:1790":{"id":"a:2:2701:228-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2701:228-0:192:1786":{"id":"a:2:2701:228-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12044:26057":{"id":"2:12044:26057","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43620:3018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[140,22],"end":[140,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:216:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2538-0:217:1791":{"id":"b:2:2538-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:2303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12024:33968":{"id":"2:12024:33968","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[12,9],"end":[12,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:230:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2542-0:192:1786":{"id":"b:2:2542-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:200:1787":{"id":"0:200:1787","crate_id":0,"name":"Infix","span":{"filename":"src/ansi.rs","begin":[132,0],"end":[132,31]},"visibility":"public","docs":"Like `ANSIString`, but only displays the difference between two\nstyles.\n\nThis type implements the `Display` trait, meaning it can be written to a\n`std::fmt` formatting without doing any extra allocation, and written to a\nstring with the `.to_string()` method. For examples, see\n[`Style::infix`](struct.Style.html#method.infix).","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null,null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2684:220-0:200:1787","a:2:2701:228-0:200:1787","a:2:8254:8035-0:200:1787","a:2:2741:2718-0:200:1787","a:2:8253:8036-0:200:1787","b:2:2548-0:200:1787","b:2:2553-0:200:1787","b:2:3320-0:200:1787","b:2:2542-0:200:1787","b:2:2248-0:200:1787","b:2:2251-0:200:1787","b:2:2538-0:200:1787","b:5:5644-0:200:1787","b:5:684-0:200:1787","0:207","0:204","0:31","0:206"]}}},"a:2:2701:228-0:299:2310":{"id":"a:2:2701:228-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:112:2313":{"id":"0:112:2313","crate_id":0,"name":"ANSIStrings","span":{"filename":"src/display.rs","begin":[139,0],"end":[139,55]},"visibility":"public","docs":"A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]}}}},"0:232:423":{"id":"0:232:423","crate_id":0,"name":"clone","span":{"filename":"src/style.rs","begin":[12,20],"end":[12,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:939":{"id":"0:42:939","crate_id":0,"name":"new","span":{"filename":"src/style.rs","begin":[59,4],"end":[61,5]},"visibility":"public","docs":"Creates a new Style with no properties set.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new();\nprintln!(\"{}\", style.paint(\"hi\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:283:2281":{"id":"b:2:2251-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2253:24229"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:264":{"id":"0:264","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[254,27],"end":[254,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12018:33966":{"id":"2:12018:33966","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:33988":{"id":"2:12129:33988","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2090":{"id":"0:60:2090","crate_id":0,"name":"italic","span":{"filename":"src/style.rs","begin":[368,4],"end":[370,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\nitalic property set.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::Blue.italic();\nprintln!(\"{}\", style.paint(\"greetings\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:613":{"id":"0:294:613","crate_id":0,"name":"eq","span":{"filename":"src/display.rs","begin":[15,9],"end":[15,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:217:1791":{"id":"a:2:2701:228-0:217:1791","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5398:34644":{"id":"5:5398:34644","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[277,0],"end":[282,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:30:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2701:228-0:283:2281":{"id":"a:2:2701:228-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5644-0:192:1786":{"id":"b:5:5644-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12139:33990":{"id":"2:12139:33990","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:33990"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43665:6371","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:26807":{"id":"2:12138:26807","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3320-0:283:2281":{"id":"b:2:3320-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:3322:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/debug.rs","begin":[14,0],"end":[70,1]},"visibility":"default","docs":"Styles have a special `Debug` implementation that only shows the fields that\nare set. Fields that haven‚Äôt been touched aren‚Äôt included in the output.\n\nThis behaviour gets bypassed when using the alternate formatting mode\n`format!(\"{:#?}\")`.\n\n    use ansi_term::Colour::{Red, Blue};\n    assert_eq!(\"Style { fg(Red), on(Blue), bold, italic }\",\n               format!(\"{:?}\", Red.on(Blue).bold().italic()));","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:190:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:35:668":{"id":"0:35:668","crate_id":0,"name":"fmt","span":{"filename":"src/ansi.rs","begin":[307,4],"end":[310,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:1797":{"id":"0:178:1797","crate_id":0,"name":"util","span":{"filename":"src/util.rs","begin":[1,0],"end":[81,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:181:2378","0:183:2387","0:184:2389"],"is_stripped":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:34641","5:5384:13393","5:5387:34642","5:5390:34643","5:5398:34644","5:5399:34645","5:5400:3045","5:5401:26810","5:5402:26809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5399:34645":{"id":"5:5399:34645","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:2721","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2721","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:3073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249:1945":{"id":"0:249:1945","crate_id":0,"name":"White","span":{"filename":"src/style.rs","begin":[286,4],"end":[286,9]},"visibility":"default","docs":"Colour #7 (foreground code `37`, background code `47`).\n\nAs above, this is not necessarily the foreground colour, and may be\nhard to read on terminals with light backgrounds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12076:33973":{"id":"2:12076:33973","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11716:13270","str::split":"2:12064:26056","prim@char":"1:11894:419","str::split_terminator":"2:12073:33972"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43434:6479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2548-0:283:2281":{"id":"b:2:2548-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2551:128","2:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[34,0],"end":[42,1]},"visibility":"default","docs":"Cloning an `ANSIGenericString` will clone its underlying string.\n\n# Examples\n\n```\nuse ansi_term::ANSIString;\n\nlet plain_string = ANSIString::from(\"a plain string\");\nlet clone_string = plain_string.clone();\nassert_eq!(clone_string, plain_string);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:92:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12016:2797":{"id":"2:12016:2797","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190:668":{"id":"0:190:668","crate_id":0,"name":"fmt","span":{"filename":"src/debug.rs","begin":[15,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:1924":{"id":"0:218:1924","crate_id":0,"name":"foreground","span":{"filename":"src/style.rs","begin":[17,4],"end":[17,34]},"visibility":"public","docs":"The style's foreground colour, if it has one.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"2:2253:24229":{"id":"2:2253:24229","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:60":{"id":"0:55:60","crate_id":0,"name":"default","span":{"filename":"src/style.rs","begin":[230,4],"end":[243,5]},"visibility":"default","docs":"Returns a style with *no* properties set. Formatting text using this\nstyle returns the exact same text.\n\n```\nuse ansi_term::Style;\nassert_eq!(None,  Style::default().foreground);\nassert_eq!(None,  Style::default().background);\nassert_eq!(false, Style::default().is_bold);\nassert_eq!(\"txt\", Style::default().paint(\"txt\").to_string());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:2718-0:209:1788":{"id":"a:2:2741:2718-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2551:128":{"id":"2:2551:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:216:668":{"id":"0:216:668","crate_id":0,"name":"fmt","span":{"filename":"src/ansi.rs","begin":[140,22],"end":[140,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:731":{"id":"0:49:731","crate_id":0,"name":"hidden","span":{"filename":"src/style.rs","begin":[156,4],"end":[158,5]},"visibility":"public","docs":"Returns a `Style` with the hidden property set.\n\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new().hidden();\nprintln!(\"{}\", style.paint(\"ahoy\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[15,9],"end":[15,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2251-0:192:1786":{"id":"b:2:2251-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:24229"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3320-0:209:1788":{"id":"b:2:3320-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[131,9],"end":[131,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:205:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5644-0:200:1787":{"id":"b:5:5644-0:200:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2248-0:299:2310":{"id":"b:2:2248-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2250:2276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71-0:217:1791":{"id":"0:71-0:217:1791","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[254,24],"end":[254,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"style::Style","name":"Style","id":"0:217:1791","glob":false}}},"2:12038:27018":{"id":"2:12038:27018","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12037:27017"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2041":{"id":"0:58:2041","crate_id":0,"name":"bold","span":{"filename":"src/style.rs","begin":[338,4],"end":[340,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour set to this colour and the\nbold property set.\n\n# Examples\n\n```\nuse ansi_term::Colour;\n\nlet style = Colour::Green.bold();\nprintln!(\"{}\", style.paint(\"hey\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:2836":{"id":"2:12056:2836","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41405:179","prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:1941":{"id":"0:245:1941","crate_id":0,"name":"Purple","span":{"filename":"src/style.rs","begin":[277,4],"end":[277,10]},"visibility":"default","docs":"Colour #5 (foreground code `35`, background code `45`).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[120,0],"end":[127,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2898:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:110:230","0:111:552"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:226:1918":{"id":"0:226:1918","crate_id":0,"name":"is_hidden","span":{"filename":"src/style.rs","begin":[41,4],"end":[41,23]},"visibility":"public","docs":"Whether this style is hidden.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"0:209:1788":{"id":"0:209:1788","crate_id":0,"name":"Suffix","span":{"filename":"src/ansi.rs","begin":[141,0],"end":[141,25]},"visibility":"public","docs":"Like `ANSIString`, but only displays the style suffix.\n\nThis type implements the `Display` trait, meaning it can be written to a\n`std::fmt` formatting without doing any extra allocation, and written to a\nstring with the `.to_string()` method. For examples, see\n[`Style::suffix`](struct.Style.html#method.suffix).","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2684:220-0:209:1788","a:2:2701:228-0:209:1788","a:2:8254:8035-0:209:1788","a:2:2741:2718-0:209:1788","a:2:8253:8036-0:209:1788","b:2:2548-0:209:1788","b:2:2553-0:209:1788","b:2:3320-0:209:1788","b:2:2542-0:209:1788","b:2:2248-0:209:1788","b:2:2251-0:209:1788","b:2:2538-0:209:1788","b:5:5644-0:209:1788","b:5:684-0:209:1788","0:214","0:215","0:34","0:212"]}}},"b:2:2248-0:283:2281":{"id":"b:2:2248-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["2:2250:2276"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:224:1916":{"id":"0:224:1916","crate_id":0,"name":"is_blink","span":{"filename":"src/style.rs","begin":[35,4],"end":[35,22]},"visibility":"public","docs":"Whether this style is blinking.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"0:219:1921":{"id":"0:219:1921","crate_id":0,"name":"background","span":{"filename":"src/style.rs","begin":[20,4],"end":[20,34]},"visibility":"public","docs":"The style's background colour, if it has one.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:51:1923":{"id":"0:51:1923","crate_id":0,"name":"fg","span":{"filename":"src/style.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Returns a `Style` with the foreground colour property set.\n\n# Examples\n\n```\nuse ansi_term::{Style, Colour};\n\nlet style = Style::new().fg(Colour::Yellow);\nprintln!(\"{}\", style.paint(\"hi\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["foreground",{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:33980":{"id":"2:12105:33980","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:26808":{"id":"2:12137:26808","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:299:2310":{"id":"a:2:2684:220-0:299:2310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"S"},"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericStrings","id":"0:299:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:213:423":{"id":"0:213:423","crate_id":0,"name":"clone","span":{"filename":"src/ansi.rs","begin":[140,9],"end":[140,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:1914":{"id":"0:222:1914","crate_id":0,"name":"is_italic","span":{"filename":"src/style.rs","begin":[29,4],"end":[29,23]},"visibility":"public","docs":"Whether this style is italic.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"0:23:1995":{"id":"0:23:1995","crate_id":0,"name":"infix","span":{"filename":"src/ansi.rs","begin":[191,4],"end":[193,5]},"visibility":"public","docs":"The infix bytes between this style and `next` style. These are the bytes\nthat tell the terminal to change the style to `next`. These may include\na reset followed by the next colour and style, depending on the two styles.\n\n# Examples\n\n```\nuse ansi_term::{Style, Colour::Green};\n\nlet style = Style::default().bold();\nassert_eq!(\"\\x1b[32m\",\n           style.infix(Green.bold()).to_string());\n\nlet style = Green.normal();\nassert_eq!(\"\\x1b[1m\",\n           style.infix(Green.bold()).to_string());\n\nlet style = Style::default();\nassert_eq!(\"\",\n           style.infix(style).to_string());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["next",{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:613":{"id":"0:261:613","crate_id":0,"name":"eq","span":{"filename":"src/style.rs","begin":[254,9],"end":[254,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:552":{"id":"0:111:552","crate_id":0,"name":"deref","span":{"filename":"src/display.rs","begin":[124,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:192:1786":{"id":"b:2:2553-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/style.rs","begin":[254,33],"end":[254,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:266:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:8254:8035-0:234:1790":{"id":"a:2:8254:8035-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:8035","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/ansi.rs","begin":[131,22],"end":[131,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Infix","id":"0:200:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:208:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5644-0:283:2281":{"id":"b:5:5644-0:283:2281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ANSIGenericString","id":"0:283:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["5:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:684-0:192:1786":{"id":"b:5:684-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:686:2284","5:687:2855","5:688:2856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2556:128":{"id":"2:2556:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32032:4967","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2542-0:209:1788":{"id":"b:2:2542-0:209:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Suffix","id":"0:209:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5383:34641":{"id":"5:5383:34641","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:2721","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:3073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:2721","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:3073","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:668":{"id":"0:298:668","crate_id":0,"name":"fmt","span":{"filename":"src/display.rs","begin":[15,20],"end":[15,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12053:27036":{"id":"2:12053:27036","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:13270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:13268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2092":{"id":"0:47:2092","crate_id":0,"name":"blink","span":{"filename":"src/style.rs","begin":[128,4],"end":[130,5]},"visibility":"public","docs":"Returns a `Style` with the blink property set.\n# Examples\n\n```\nuse ansi_term::Style;\n\nlet style = Style::new().blink();\nprintln!(\"{}\", style.paint(\"wazzup\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Style","id":"0:217:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:234:1790":{"id":"a:2:2684:220-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2538-0:192:1786":{"id":"b:2:2538-0:192:1786","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Prefix","id":"0:192:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:2303"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:2318":{"id":"0:118:2318","crate_id":0,"name":"ANSIByteStrings","span":{"filename":"src/display.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"A function to construct an `ANSIByteStrings` instance.","links":{},"attrs":["#[allow(non_snake_case)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arg",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"resolved_path":{"name":"ANSIByteString","id":"0:95:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}}]],"output":{"resolved_path":{"name":"ANSIByteStrings","id":"0:116:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:8036-0:234:1790":{"id":"a:2:8253:8036-0:234:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:8036","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colour","id":"0:234:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"11:119:3205":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:46661:6595":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:7322:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:1242:7104":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:43893:6509":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:42442:4784":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:40092:13340":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:11484:3752":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4505:5397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11258:3714":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:47619:6624":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"12:0:2449":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6904:4667":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:579:5112":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:41760:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6027:5803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:11843:7267":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8240:7228":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:11730:3420":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:13257:4201":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:8147:3021":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6321:7050":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13689:4333":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"15:219:7517":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13121:4169":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13865:4378":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4809:5504":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:43658:6492":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:3514:3246":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:10006:25059":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:8718:3529":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11410:3741":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:8129:7083":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:40735:6417":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6164:4571":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:9034:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:474:5051":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4948:5581":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:6678:13383":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12006:3868":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:47794:6635":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4482:5384":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10491:7006":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9478:6950":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12770:3991":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8248:6698":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:5655:4439":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:3872:4466":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:21128:6114":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:1561:4958":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:2404:4412":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:7650:7865":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6218:7039":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"10:36:4972":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:4145:6091":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8130:3019":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:6085:3303":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10635:3635":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5057:5634":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5024:5614":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:10670:3640":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3208:3043":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:44105:6528":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:40679:6410":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43772:6497":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13453:4254":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:7860:3032":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:1091:7102":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:21730:6118":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"9:52:7520":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12915:4104":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10092:6991":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:9121:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:0:2453":{"crate_id":17,"path":["object"],"kind":"module"},"17:9148:35138":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:547:5096":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9265:6945":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:3163:2616":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"14:165:19186":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5079:5640":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2357:4410":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"14:31:7087":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9721:6965":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:3815:4465":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:3782:7191":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:1540:7107":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:573:5109":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:10708:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:4624:4477":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:10658:6740":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5835:5701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40295:6384":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7543:4451":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22503:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:5764:3316":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:35:3219":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8160:3018":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11897:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6520:4604":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:47809:6636":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:41598:7105":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:4328:7194":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1995:7113":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:9628:3298":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4419:5357":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"14:187:19193":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42667:6453":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:7202:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:2219:6070":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:2933:6938":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3168:3041":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40235:6110":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:7588:7081":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:9146:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11467:26690":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:1667:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:42485:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:936:7877":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:6170:5854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:2832:3311":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5920:4533":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:9876:3477":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:766:24024":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44292:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:9596:3292":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:11736:13268":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:844:4958":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:783:3216":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:154:3201":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:21891:30821":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10840:3663":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13516:4270":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:41212:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:8979:35130":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:4366:3001":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:1785:7178":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10142:20255":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8109:3017":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6307:4434":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:8180:20114":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10626:3634":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:7599:13379":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:5239:13256":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4435:5362":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:5472:3001":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4684:5439":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:8823:3532":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"0:0:1775":{"crate_id":0,"path":["ansi_term"],"kind":"module"},"1:11893:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:8310:20162":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:30372:30809":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:1594:5183":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8790:4958":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10721:3645":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:8416:6711":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2742:4426":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:47832:6637":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8221:6697":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:1634:3217":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:1422:7106":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4615:5432":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:20891:13405":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13399:4240":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:46045:6571":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3925:7968":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"14:215:4901":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:2763:2585":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:10207:7139":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13612:4308":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9138:6943":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:7510:6027":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:8782:6722":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5067:5635":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:6870:7370":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:40051:6362":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5766:5669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12902:4097":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:39979:6364":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:11253:13467":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:9153:2858":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:8156:4455":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6728:4644":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:2906:33602":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:39204:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10698:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:6867:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:7294:6024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5563:3314":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10569:3625":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:25859:6154":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:9772:3559":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:5499:5815":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11243:6759":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:3163:33755":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:42176:2860":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11446:3748":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1535:5144":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:41720:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12388:3940":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:1062:7098":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6575:20106":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:821:7091":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12282:3926":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:2784:2575":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:7509:4449":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3197:2621":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:507:3390":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11879:3848":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"14:202:13284":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12358:3935":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10428:7001":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:783:3226":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:7169:13380":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:1126:7103":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6717:4643":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5630:7012":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10841:7201":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:7462:6025":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:20934:7952":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:10735:3648":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:7022:3234":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:633:7109":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:2161:13405":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:42714:6461":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12536:3968":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:5643:4500":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:9530:3289":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:487:6930":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4379:5334":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"9:0:2446":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:5305:4492":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:7504:6026":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:40085:6374":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6293:4576":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:3300:4460":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:44282:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11502:3760":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:46875:6598":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:638:4958":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:9577:3549":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:707:3420":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:8548:20169":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:4114:7127":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:7271:6012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:9534:6955":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:11488:6483":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:11905:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6327:4578":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:43640:6490":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:40059:6371":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2929:2607":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:494:5062":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:1589:5181":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40315:6387":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:47411:6620":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:7676:6648":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4715:5458":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11355:3733":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4625:5433":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:3266:6940":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43352:3021":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:45400:6545":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13763:4354":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:9596:3551":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:2691:1904":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:40172:7924":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:3975:3246":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4555:5420":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:3210:3044":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9907:3562":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6767:4657":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:1583:2020":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:6332:7208":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:7804:6652":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:41479:2802":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:39991:30796":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:1843:2802":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:5708:4505":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:9498:3547":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:47675:6626":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:7321:3211":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:10428:3039":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:45671:6556":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:1708:5256":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"9:234:6457":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:43930:6510":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5774:5671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12085:3879":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7498:4747":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11009:6720":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:46691:6596":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:40031:6369":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1463:7112":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2470:13344":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:727:3427":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:13233:4196":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6981:7052":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9866:6971":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:46221:6576":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4928:5570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:7827:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:11378:7190":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:43310:6468":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5847:4524":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:1080:7104":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:8858:3533":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:42704:6457":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:47741:6632":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6919:35125":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6804:5980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9523:6954":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13194:4185":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9641:6959":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5976:4395":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:11716:13270":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8491:6718":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:9946:3567":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:2932:2608":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:2060:4692":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10377:3611":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2786:4428":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2546:4418":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12345:3934":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:2805:2596":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10676:6746":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3449:24711":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:3124:2020":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:521:24025":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4549:5418":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6743:5937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3132:25920":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:2387:2277":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:8742:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"18:538:3398":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:20950:8106":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11919:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:10663:6651":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:47081:6617":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:562:5104":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4412:5353":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13791:4363":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13488:4262":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8954:7242":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:4702:4478":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10823:3498":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:506:5067":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:43750:13282":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:1058:33594":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"14:7:7087":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6076:5817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5007:5606":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:681:3414":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:8025:4806":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4663:5436":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:7683:7911":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:7476:7264":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:21928:30785":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1846:7181":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:8573:20170":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:6179:7021":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7317:35127":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:7596:7214":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:22305:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11800:3835":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11993:3865":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:2912:33593":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:867:7097":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4763:5481":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13639:4320":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:43978:6519":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:7478:4448":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:6538:8067":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:1716:3211":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:11337:7189":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10452:7003":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10649:3636":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:5532:6092":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4256:7193":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12646:3989":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6474:4454":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6606:5885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:326:3207":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:9392:3335":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:4326:3279":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:11787:13276":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:530:3306":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:13803:4365":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:1071:7100":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4649:5435":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:3446:4461":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:1859:4961":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12307:3930":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6061:19217":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4394:5341":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:10718:3016":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:13053:4152":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:2847:2601":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:5881:5723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:45755:6559":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:43965:6515":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"13:110:35115":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:11913:1497":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10545:3618":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:8256:20148":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:7465:3675":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13265:4203":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9275:35134":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10527:20280":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:9817:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:11097:6732":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:1662:5236":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10144:7596":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:5104:4491":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:1432:7089":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:42507:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:755:3432":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:5502:8052":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5439:7201":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:97:4951":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3973:7971":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"11:859:7096":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:8360:20163":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:3782:4464":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12522:3967":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"13:226:4950":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:12334:31773":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:7585:6043":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:3585:4462":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:47704:6629":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:8674:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3939:7970":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:6409:3325":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7029:4686":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:41880:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:9087:6734":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:11909:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:6764:3274":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4853:5523":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3615:7963":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:5032:4489":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:7206:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:22404:6151":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:4574:5905":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:7195:30795":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43245:6111":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:39561:26973":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:47684:6627":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10580:3629":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"18:113:24014":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2792:2590":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:1572:3211":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:1034:6932":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4907:5555":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:5485:3260":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:42692:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:43866:6508":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:8389:20164":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:11506:6767":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5966:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7938:7222":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2741:2718":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:9312:6946":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:44161:6535":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:41615:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2830:4430":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9068:35131":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:7266:7123":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"15:0:2451":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2469:7952":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7081:2802":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:7267:2719":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11916:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:47333:6619":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:242:6927":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:42675:6455":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10000:3651":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:2614:3033":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:44343:6538":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10320:7233":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:7020:30559":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:40066:13339":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13292:4207":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:39353:6232":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:10468:3337":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13367:4229":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:11907:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12496:3965":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:3933:7969":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:30314:30810":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12607:3979":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:1048:4692":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7837:4769":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:41463:4958":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:3225:4459":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:5050:5631":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4462:5374":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4096:7990":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:20589:33051":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:40277:6382":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:21964:6146":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:12312:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12563:3972":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2372:7949":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:1733:13416":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:4112:7992":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:9155:2859":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43219:6110":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:5035:3258":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:44335:7164":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:1637:6082":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:5889:5728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6007:5797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3875:7966":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9973:3569":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:1931:653":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:8485:4958":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:1821:6089":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:1701:5253":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3325:3048":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:9104:7246":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:10478:7005":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4495:5390":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:2720:4425":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11770:3826":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13135:4173":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:21957:6143":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:6589:2808":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4753:5475":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:7488:4746":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:47581:6623":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4373:5332":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8097:3016":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:10775:7142":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:5919:5751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5346:4493":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4954:5582":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9917:3563":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:2572:4419":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:2869:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:5886:4527":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10440:7002":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:5570:3315":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:554:7168":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:42040:7135":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"9:352:19116":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7244:35124":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12113:3884":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5954:5772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3935:3001":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12622:3638":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:46023:6570":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:46615:6594":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13812:4369":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:45601:6553":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11876:25366":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4916:5561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:1602:5188":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:676:7864":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:43649:6491":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:5191:3223":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:4845:4483":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4367:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4793:5497":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:45831:6564":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10989:3618":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:10096:7137":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:7211:6074":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:1071:35114":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"9:421:19103":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:2540:3031":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:2922:2605":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1568:5167":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:45690:6557":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:6097:8198":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:7665:7866":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:5370:7199":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8754:6720":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:8142:7086":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11891:3850":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:41530:13460":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4861:5528":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:3374:13302":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:41354:6696":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11163:3687":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:8918:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10937:2023":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8831:6724":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4047:7105":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2319:4402":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1716:5260":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"7:0:1543":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:41389:6439":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:43683:6370":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:8679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40686:6411":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:40496:6408":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10598:3670":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:39228:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:40417:6400":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:7574:6042":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:9989:7105":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:7244:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:2749:2761":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:3677:7189":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4799:5500":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"8:0:2445":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13469:4257":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11391:3740":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:7277:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:10262:6482":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:5594:4440":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:44356:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:41539:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:2211:3275":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8806:2802":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3292:3027":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:5385:7200":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8974:6728":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:7868:3034":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:7528:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13659:4326":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4637:5434":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:7249:6011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5557:4435":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:40457:6404":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:10871:6722":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:6369:6412":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10303:6995":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:20881:8113":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:39970:6363":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:7576:7952":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9228:35132":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:40078:6373":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:7814:6653":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"18:564:3400":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:857:7105":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8899:6727":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:6446:3223":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3881:2351":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6662:4630":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:30244:6157":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:10691:20281":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:3640:3439":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:46120:6573":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:12361:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10828:7218":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:3899:4467":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:9165:2863":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:8521:20168":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:10653:6738":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:361:7167":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43470:6481":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:11721:3801":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6014:5799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:9039:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:4381:3280":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:4681:7983":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:44117:6531":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"11:816:7106":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:43588:6488":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1895:7182":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:123:13786":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11946:3859":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:39367:4740":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:2087:6052":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4789:4481":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:1382:2802":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:1366:7105":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:1732:5265":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:532:5087":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:3749:4463":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:41488:6443":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:4336:2869":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:11911:1499":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:2931:19244":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12576:3973":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11918:1126":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:7030:33759":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"11:652:7105":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:11283:13271":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:863:3231":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:20561:32641":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:43674:6362":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:4046:13238":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:7262:24784":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12194:3895":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:1589:4962":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:1568:3246":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:40333:6390":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:43144:6106":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5402:3527":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4542:5416":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5899:5735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13499:4263":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:11900:1397":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:43232:7161":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12403:3944":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4074:29319":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1413:4960":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41235:6421":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10615:3633":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:1847:3246":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11499:6767":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:1916:6090":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2856:2603":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:42430:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:21799:6120":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2163:13406":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:21978:6147":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:39346:2615":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9886:6973":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:624:35139":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4314:5288":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:4812:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12236:3916":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1680:5243":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:1924:7922":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:13033:4146":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:47715:6630":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7044:2802":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:7557:6037":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4739:5469":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1672:5242":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:7844:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:6842:3328":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:42183:2861":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:49677:8124":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4605:5431":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:40007:6367":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:44173:13507":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:12178:3890":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2827:2597":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4474:5379":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11216:6757":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:6597:3270":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9796:3561":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5876:5722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8343:1786":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10885:3665":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9653:6960":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:1873:4962":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:8255:7132":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11399:7191":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:1556:5159":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:3047:19246":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:3184:4963":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:7514:3331":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11860:7541":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13433:4248":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:9986:3570":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"9:388:19102":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4817:5508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10425:3043":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11641:3794":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"17:8598:20171":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5798:5687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:6043:5808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:55:4797":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"6:1499:5128":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44113:6530":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:45653:6555":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13667:4327":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11573:3774":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7014:3246":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:30478:30823":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:45530:6550":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:46537:6593":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:4137:3001":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:6564:5861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:917:7106":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10402:6996":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9822:6967":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:39188:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12550:3971":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4894:5545":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:47779:6634":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:2470:4415":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1574:5169":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:43998:6521":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:4576:5907":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:9987:7179":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:1404:4959":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:2851:2602":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:5998:20103":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:9157:2860":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:21002:8110":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6248:3246":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:21016:6114":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13721:4348":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:5677:20101":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12959:4135":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7757:4757":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:43172:6109":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4677:5437":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:30284:6158":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11422:3744":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:5908:3001":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:10215:7200":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:9443:6948":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:6999:2802":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:12299:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:43516:6484":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:8254:8035":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7335:35123":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4468:5376":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4943:5579":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:41590:4958":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:3680:7190":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:22569:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"11:359:3209":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:11249:6760":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4388:5339":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6597:5884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:43665:6371":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6066:5814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:6621:7208":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12634:3982":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6022:20104":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:8081:3047":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:6840:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7572:35128":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11585:3777":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:43093:7158":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"13:0:2443":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:46455:6592":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:21815:6124":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"11:60:35110":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4534:5411":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11060:6733":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:922:7089":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:5367:19216":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:4578:5909":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10936:3669":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:3440:2019":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:7622:3337":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6254:4573":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8177:7961":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:3673:3034":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:43366:3022":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:1351:4958":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13316:4216":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:1978:6937":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:393:35109":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:1821:7179":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:8283:20161":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8153:3022":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:3060:3050":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:43274:7163":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:42162:2859":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3753:3211":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:6236:7047":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:7703:7148":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:6535:3203":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:4436:7996":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:3983:7972":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2839:2599":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:975:6931":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:4639:8022":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10967:3670":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:42467:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9933:3565":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"11:399:35111":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:41606:2802":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9028:6941":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:40205:3281":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11193:3691":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:2706:2755":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:6617:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:40376:6396":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12059:3876":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:840:7094":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11914:1498":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:3688:7113":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:888:4960":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:4606:13333":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:4340:5308":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:2642:4422":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"9:325:5009":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:43153:6107":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:47730:6631":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:45853:6565":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:40408:6399":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10363:3336":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11861:3847":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:12609:7886":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"18:515:3393":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:526:5084":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10923:3667":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:6133:7207":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:20994:7952":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3987:7973":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:39270:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:671:6926":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:8931:3535":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12259:3925":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:5354:7198":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:7533:3333":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8736:7233":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12483:3964":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:7551:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:265:3223":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12072:3877":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:11917:1553":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:43182:7160":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:43630:6489":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"16:6201:7036":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:4187:2868":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:12046:3874":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:9299:7136":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:386:6929":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:4679:7981":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:5724:4507":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:1756:6086":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11201:6756":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2796:2589":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:22602:6152":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:1695:5252":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:531:3395":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:6188:3314":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:6725:31418":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:20608:33050":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"14:221:4903":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:6180:3264":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:2916:33592":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:574:3390":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:699:3418":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:7671:6647":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5993:5786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6704:5919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:22272:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:8768:6721":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:8753:3530":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"11:1035:7100":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:9617:6957":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4990:7195":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9068:6733":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4290:5271":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:6485:8065":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:3117:4958":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5978:5784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:4037:4468":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:9190:7180":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6155:5843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3995:7975":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6558:4606":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:4596:4476":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7711:4755":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:8443:20166":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:6772:13375":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:9409:13349":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9545:3521":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11892:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12019:3578":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:1594:4963":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:9044:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13411:4243":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:9163:2862":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11037:20175":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:1866:2020":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6854:4663":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:7539:6034":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6431:4592":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4747:5473":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:39381:2869":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"5:3547:7105":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:0:2452":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:3063:3435":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11901:1481":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:1565:2802":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:8214:4740":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7635:4753":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:1630:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:6670:5913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4400:5344":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6819:5987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:10832:5029":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:6552:3326":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11532:3764":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:20606:33048":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2694:4424":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4903:8027":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:9895:6976":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9488:6951":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40717:3287":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7626:7082":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:9009:6731":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:3775:3223":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"7:79:19094":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5741:20102":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:4005:3223":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10857:20174":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:11151:3341":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11339:3729":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12224:3914":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"11:744:4960":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:8860:8070":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:7797:6651":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:22536:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3355:3001":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:45376:6544":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12419:3945":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:47695:6628":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11653:3797":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11078:6751":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8913:7236":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6990:4682":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:22239:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44093:6525":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:6739:3264":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:2550:3293":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10283:3605":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:11895:1515":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11844:3844":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:757:3246":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6696:20107":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:2204:35108":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40356:6394":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11628:3793":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40125:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:9350:35133":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8270:5894":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:21443:6116":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:2843:2600":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10589:3630":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:2926:2606":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:1919:20213":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2981:2609":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9424:3544":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:4760:7980":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:963:3223":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:959:7097":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7259:6443":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8325:8031":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6774:5963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:39388:6234":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:30876:2771":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7293:4723":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7065:4691":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:21095:7952":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:6833:5996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:3142:6939":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:1947:6934":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11615:3789":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4488:5387":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:45708:6558":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8812:6723":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:9959:3568":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4642:7995":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:20754:8116":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:43254:7162":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:8047:4807":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:9111:2019":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6021:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:43342:6473":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8232:7231":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:6921:3047":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:3142:2614":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:11455:6762":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:8360:7133":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:45422:6546":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:23049:6153":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:0:1389":{"crate_id":1,"path":["std"],"kind":"module"},"16:6868:4665":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13477:4258":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:2905:4433":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:926:7090":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7449:7074":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:828:7877":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10257:6992":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:47657:6625":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:2169:34721":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:11910:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:21571:7952":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:6725:5926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4728:5462":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8214:6696":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:45552:6551":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:32032:4967":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:6795:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6624:5894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:3030:4456":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:4399:3252":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:2426:4413":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4886:5540":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:10334:3554":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:653:14143":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6336:4579":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:12517:3303":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:42402:6445":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6442:4593":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:12554:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13506:4265":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:11428:6475":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:42169:2858":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10080:6990":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:20780:31680":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:7005:6068":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:11942:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:4264:7129":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:2206:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21349:8121":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4769:5484":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4564:7970":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:80:24012":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:21126:8114":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:4818:4482":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4480:4472":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4728:4479":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:2189:6060":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1981:3034":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:21677:6117":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11908:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:9557:3554":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2967:19245":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:9178:6944":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:10057:6104":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5792:5684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:5590:6093":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:2780:2586":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:8140:3020":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11556:3766":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:10688:6652":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:42922:6464":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13419:4246":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:7636:33238":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:2753:2574":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:2764:4427":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:7103:6728":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:665:2802":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6460:4437":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:46198:6575":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:1879:4963":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8966:7244":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:7683:4453":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:211:3221":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:9566:6945":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:3276:3211":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:9965:4958":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3999:7125":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:40255:7151":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:8909:3021":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10798:20173":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:4904:4485":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7529:4450":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:2636:6064":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:562:3675":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"11:305:4955":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1197:4692":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13024:4145":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13145:4174":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11694:3347":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4303:5280":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11041:6532":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12449:3951":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12158:3889":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:6943:20108":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:21874:6131":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:7595:7881":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:5712:3246":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11109:3680":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:3182:33380":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1213:7100":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:9159:2861":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9748:3554":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:9126:26659":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:10416:7000":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:3150:4962":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:3135:25916":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:9049:6732":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:40708:3048":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:21912:30820":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:719:3424":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13169:4176":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11924:3858":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:46725:6597":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2879:4432":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10516:3613":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:8632:20149":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:652:3390":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:4969:4487":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12510:3966":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:45999:6569":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2208:7185":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10761:20172":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:480:3305":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10015:6981":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:2077:3239":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:660:6922":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6035:5805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:41800:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:10125:3573":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:7943:7223":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:8490:20167":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:587:5117":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5043:5628":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:5686:7202":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:2116:6054":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12331:3933":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12433:3947":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10026:6982":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:41269:7962":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:7699:7218":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13777:4356":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:39292:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4871:5534":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"7:32:19087":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:7522:6029":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4786:5495":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11600:3783":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13159:4175":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:10728:25360":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11299:3718":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9670:6963":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2738:2757":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7016:4683":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7467:4743":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:41960:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:1747:6083":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10465:7004":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2812:2593":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:7577:6645":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11865:7867":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:5693:7205":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12293:3928":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:5021:7195":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13324:4217":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:47871:6638":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12980:4140":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:8842:33237":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:7516:6028":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6376:4436":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:8088:3049":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:40130:6379":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:1839:4958":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:2502:4416":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:39248:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:43944:13283":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"15:198:19200":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:7608:6049":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"9:445:19101":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:815:3229":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"9:174:7530":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:1144:7104":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13240:4198":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8798:7235":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:40324:6389":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10104:3571":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2867:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8961:7243":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:5910:3314":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:2822:2595":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:420:3484":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:40286:6383":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:7148:7876":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:9409:20183":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:10056:7249":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:10808:7143":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2985:2610":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:43336:6472":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"11:2192:4964":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:11314:3343":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:10169:6105":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:4207:4958":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:644:3390":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:21344:8111":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:13219:4193":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:2215:3010":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:40021:6368":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10052:6987":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:9414:6101":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:7215:2720":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4327:5298":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:636:3413":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:43955:6511":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6361:4585":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4991:5601":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1512:5134":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4414:7995":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:21455:32645":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:8683:3528":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:20782:13405":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:4872:4484":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8266:7232":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:7060:6069":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4854:8021":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:1637:5217":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11033:25374":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:1630:5213":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11231:7213":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:45801:6563":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"14:0:2450":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5779:4512":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:7181:6071":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:1561:7108":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6129:5828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:20741:8115":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"11:1852:3211":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:2298:19218":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10948:3339":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43434:6479":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:9387:7219":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:5818:3258":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12923:4105":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:40398:6398":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:47756:6633":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:9613:3293":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:8844:8071":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8931:25198":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:10248:6481":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:582:2771":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"11:1524:19181":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6935:7051":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:8651:3526":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:6607:3271":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:62:13731":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8502:6719":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:43264:6112":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:32159:2762":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4427:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1494:5126":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:41341:6437":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:8420:20165":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:930:7091":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:875:4959":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:4437:2871":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:41640:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:491:3389":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:4125:7993":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:43570:6487":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:8256:4825":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:3911:7967":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:6578:3260":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:614:35141":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5571:4438":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4722:5459":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9108:35129":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4567:5429":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"11:2212:4968":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:30848:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11090:3677":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:7787:3076":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:30053:7964":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:8788:3531":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:42458:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:45901:6566":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:20548:2771":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6647:5912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13744:4349":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:731:4959":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:40215:7150":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:40142:30795":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4847:5520":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:30300:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10354:3610":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:2908:6057":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5000:4488":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:2808:4429":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12592:3975":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:11465:6480":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2344:6085":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:4508:8013":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11915:1495":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10316:3608":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:8667:3527":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:43324:6471":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9098:6942":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3079:2613":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:9322:35137":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6819:4659":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:42926:6465":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:44089:6524":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:7859:20113":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1544:5150":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:554:5099":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:21119:7952":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:21990:7965":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:43193:6466":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:5834:13705":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5848:5710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4983:5599":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:41318:30783":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12799:4011":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:47535:6622":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:3234:2622":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:7255:6078":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:535:4393":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:2087:7100":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2378:4411":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:40447:6403":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4694:5446":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8876:8072":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:4410:2763":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:1078:34772":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9696:3547":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4703:5451":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:880:4958":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7338:3266":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12126:3885":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:40482:6407":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:3158:4961":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:20921:8120":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:5797:4516":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12372:3938":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40264:3019":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8166:7228":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:8847:7539":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13211:4190":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:11060:3638":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:39964:6362":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11282:3715":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5736:5644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:41547:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:45468:6548":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13426:4247":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:41252:6423":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:45947:6567":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:4327:4469":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:2076:7098":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13625:4314":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40468:3020":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:10290:7141":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:44085:6523":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:7557:4749":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6890:4445":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:1228:7098":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13879:4381":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:6687:5914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6849:6002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:768:3211":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:22338:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13309:4215":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:40365:6395":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:41920:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13842:4374":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:6367:2802":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:40433:3411":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:488:5059":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:8953:3536":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13443:4251":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:5616:4496":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:39374:7149":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:2151:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:2616:4421":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11220:3699":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:41521:7152":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4841:5518":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:736:24023":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:1443:7090":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"10:44:4973":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:7803:4765":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12894:4094":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:3170:3042":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13249:4199":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7596:20111":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:8195:20150":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13066:4157":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11234:3700":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13678:4332":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:6912:3329":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:11741:13267":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:947:7094":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4445:5368":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:41454:2801":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11520:3761":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11906:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:9151:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"18:0:2454":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:8253:8036":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:7792:7219":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:44121:6532":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:46301:6577":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:20853:8119":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:44097:6526":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:3249:3040":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:867:2802":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8988:24743":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:3622:3223":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:595:5122":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:2905:2284":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:9340:6947":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11434:3745":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:46379:6590":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:6981:2349":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6671:4631":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:2774:2587":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10712:20282":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:6719:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4878:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:9380:20182":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:0:2448":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:11011:3672":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:20816:8118":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:13332:4218":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4517:5403":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:6757:8104":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:7598:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:991:4692":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:21839:6128":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:1612:3223":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11894:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:500:5064":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:1042:34774":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:2963:2619":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:5334:7197":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8292:6699":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:609:1788":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:9512:6953":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5811:4517":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:44101:6527":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:6294:3223":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10954:3340":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:635:7170":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13385:4233":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6506:4602":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:45356:6543":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5986:5785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:4540:4474":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9188:35136":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6544:4442":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11821:3839":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:1009:7098":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:4390:2870":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:6243:35126":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:7852:7221":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:8109:4816":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:119:13785":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:7165:13381":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13344:4224":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:2448:4414":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"15:180:19199":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:8072:4810":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:1050:19180":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:41403:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:4737:3312":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:4732:668":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:20996:8108":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:44373:6541":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10039:6985":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7411:4541":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9380:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"9:502:5032":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:618:7169":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13857:4375":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8433:8046":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10897:3666":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:7437:4742":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:355:7166":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:2817:2594":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13821:4371":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5071:4490":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2862:4431":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10705:3644":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:911:3211":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:638:7172":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:6990:3073":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:45500:6549":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:568:5107":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:501:3239":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:45977:6568":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:10014:3022":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:10276:7140":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:1505:5131":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7743:4441":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9826:6968":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5828:5697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:901:3246":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:22470:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:9839:6969":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:247:6928":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1577:4961":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:5386:3526":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:43534:6485":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"11:675:7089":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:10232:25055":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:2692:2754":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:5320:7196":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:6373:7209":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4823:5509":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6710:5921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:7563:6038":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:4914:3001":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:4568:4475":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:39173:2611":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:4757:4480":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5963:4537":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:481:3388":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:43620:3018":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:9161:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4932:4486":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12098:3881":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3129:24704":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2833:2598":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9853:6970":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:4336:3252":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:40305:6386":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8475:6716":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:44300:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"18:690:3417":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46425:6591":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5073:5637":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2574:3023":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:42907:6463":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:3465:3014":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:21866:6130":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11899:1367":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:541:5093":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46069:6572":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:3247:3039":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3458:3012":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:10634:7257":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:1783:7177":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11969:3864":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:5944:7014":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:40111:6378":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:43787:6503":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3169:2618":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:20576:32641":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:4845:8020":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:5384:3001":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4683:7984":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:590:3401":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13651:4323":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7042:4689":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40043:6370":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:4400:4470":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11069:20176":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5014:5609":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6351:20105":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3648:2802":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:953:7096":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:2911:2604":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5418:4494":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:39126:2620":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:7224:6077":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:11676:8047":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6488:4594":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:10743:7009":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:42683:6456":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"14:160:7087":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:9807:7952":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3383:3009":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:4765:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:2668:4423":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12318:3931":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:11504:6486":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:10134:7138":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:21783:6119":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:2198:4965":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:45631:6554":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11912:1496":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:30278:6080":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:32068:7148":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:643:7863":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11174:7261":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"9:481:19100":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:2477:3030":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:7366:20110":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13461:4255":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:39314:2612":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2360:7943":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13564:4307":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4972:5593":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:9110:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:10068:6989":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:599:35142":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:43416:6478":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11832:3842":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:4167:3001":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:7948:3035":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:43488:6482":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"10:0:2447":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2524:4417":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:11474:6763":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:44385:4971":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:7089:2802":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:11539:6104":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11902:3851":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2346:7939":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11785:3830":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:9453:20184":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:41840:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3401:3011":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6588:5878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11319:3728":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5693:4502":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4780:5492":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:10853:25364":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10555:3620":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11021:6721":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13698:4335":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22371:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:11459:3750":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:3129:33758":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2337:4404":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11372:3735":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6390:4588":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2758:2588":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4510:4473":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:9374:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13041:4147":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10681:3641":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13101:4161":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11136:3681":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:9218:3554":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:5991:6094":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:0:2444":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:44140:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:5235:13255":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6793:4658":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:14:1796":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13356:4225":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:1526:5139":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:40693:6412":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"17:13181:4179":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2594:4420":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:1844:7180":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:11721:7133":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:279:4952":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11168:6752":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:6572:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3386:7124":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:7697:4443":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2744:2759":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:7519:4748":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:41471:7105":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:2800:2591":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:8090:4813":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6400:4589":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:280:2721":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:39087:2623":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:7601:6646":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:40702:6413":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:46167:6574":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5862:5721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4962:5587":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5817:5689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7077:20109":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8924:7238":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:11269:7144":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13376:4232":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:41377:6438":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:22437:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:4176:7192":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:20772:8112":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:4786:32436":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4832:5512":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:482:5056":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12033:3873":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9038:35135":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:8053:3051":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:12835:4042":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:1787:6933":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:21573:8109":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:7767:20112":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:6009:3317":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:8172:7230":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11544:3765":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:7592:7878":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"14:40:3715":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:40158:6380":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:2407:6061":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4523:5406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1648:5225":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:12506:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6876:4444":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6135:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:43801:6506":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10270:6993":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:8170:4818":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40727:6415":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4445:4471":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9683:6964":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:8226:7994":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:9469:6949":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11813:3837":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:2362:7944":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:11898:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:43384:6105":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:43818:6507":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:42722:6462":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:43162:7159":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4455:5371":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6132:4566":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:6101:3321":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:1910:15133":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:47473:6621":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:41298:6430":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2788:2592":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:8393:6457":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41680:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9734:6966":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:1544:3001":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:9366:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"11:703:7090":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:21851:30782":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:1519:5136":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11904:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:42000:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10660:3638":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11471:3751":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:1689:5249":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5804:5688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:42412:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:44398:6542":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:3534:4958":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10422:3041":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:6482:7210":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12138:3886":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13082:4160":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:32072:6223":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:13015:4141":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:7136:6070":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:9628:6958":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:9883:6434":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:21100:8107":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:585:7860":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:7545:6035":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2768:2584":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:4586:5430":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:5719:7206":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:12461:3953":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10505:7007":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:40347:6393":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:45570:6552":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:12386:7146":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:44109:6529":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:45446:6547":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:96:24013":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4937:5576":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:20591:33053":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4104:7991":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7669:4452":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:4011:7126":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:4259:7128":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:47223:6618":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:40385:6397":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}