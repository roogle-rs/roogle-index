{"root":"0:0:1593","crate_version":"0.9.3","includes_private":false,"index":{"2:8376:2555":{"id":"2:8376:2555","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8378:2712","2:8380:2713","2:8381:2714"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2892:173":{"id":"2:2892:173","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2894:593","2:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10503:146":{"id":"2:10503:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10504:640","2:10505:2284","2:10506:53321","2:10507:53322","2:10508:53323","2:10509:53324","2:10510:53325","2:10511:53326","2:10512:53327","2:10513:53328","2:10514:53329","2:10515:53330","2:10516:53331","2:10517:53332","2:10518:53333","2:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5828:10023":{"id":"5:5828:10023","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:339:1841":{"id":"0:339:1841","crate_id":0,"name":"UnparkOneRequeueRest","span":{"filename":"src/parking_lot.rs","begin":[523,4],"end":[523,24]},"visibility":"default","docs":"Unpark one thread and requeue the rest onto the target queue.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13384:55307":{"id":"2:13384:55307","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15862:2206"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5792:9176":{"id":"1:5792:9176","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5793:53184"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4750:9486":{"id":"2:4750:9486","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4751:2715","2:4752:58643","2:4753:2717"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:120:1956":{"id":"0:120:1956","crate_id":0,"name":"acquire_resource","span":{"filename":"src/parking_lot.rs","begin":[1104,4],"end":[1107,5]},"visibility":"public","docs":"Acquire a resource identified by key in the deadlock detector\nNoop if deadlock_detection feature isn't enabled.\n\n# Safety\n\nCall after the resource is acquired","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_key",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"0:316:1586":{"id":"0:316:1586","crate_id":0,"name":"UnparkResult","span":{"filename":"src/parking_lot.rs","begin":[496,0],"end":[514,1]},"visibility":"public","docs":"Result of an unpark operation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":["0:317:1825","0:318:1827","0:319:1830","0:320:1834"],"impls":[]}},"2:9222:2494":{"id":"2:9222:2494","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13361:780":{"id":"2:13361:780","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15856:2201"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13363:59226":{"id":"2:13363:59226","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8850:9602":{"id":"2:8850:9602","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7891:9603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3615:2387":{"id":"2:3615:2387","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3617:57642","2:3618:57643","2:3619:55323"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5788:9175":{"id":"1:5788:9175","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5789:53441"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8843:2385":{"id":"2:8843:2385","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13022:9543":{"id":"2:13022:9543","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13024:2706","2:13025:58242","2:13026:58243"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13016:9542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:112:1581":{"id":"0:112:1581","crate_id":0,"name":"unpark_requeue","span":{"filename":"src/parking_lot.rs","begin":[880,0],"end":[983,1]},"visibility":"public","docs":"Removes all threads from the queue associated with `key_from`, optionally\nunparks the first one and requeues the rest onto the queue associated with\n`key_to`.\n\nThe `validate` function is called while both queues are locked. Its return\nvalue will determine which operation is performed, or whether the operation\nshould be aborted. See `RequeueOp` for details about the different possible\nreturn values.\n\nThe `callback` function is also called while both queues are locked. It is\npassed the `RequeueOp` returned by `validate` and an `UnparkResult`\nindicating whether a thread was unparked and whether there are threads still\nparked in the new queue. This `UnparkResult` value is also returned by\n`unpark_requeue`.\n\nThe `callback` function should return an `UnparkToken` value which will be\npassed to the thread that is unparked. If no thread is unparked then the\nreturned value is ignored.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.\n\nThe `validate` and `callback` functions are called while the queue is locked\nand must not panic or call into any function in `parking_lot`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key_from",{"kind":"primitive","inner":"usize"}],["key_to",{"kind":"primitive","inner":"usize"}],["validate",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"RequeueOp","id":"0:336:1585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["callback",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"RequeueOp","id":"0:336:1585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl FnOnce() -> RequeueOp","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"RequeueOp","id":"0:336:1585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl FnOnce(RequeueOp, UnparkResult) -> UnparkToken","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"RequeueOp","id":"0:336:1585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:3339:2400":{"id":"2:3339:2400","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3153:216":{"id":"2:3153:216","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:127","2:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8411:120":{"id":"2:8411:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8412:2706","2:8413:2707","2:8414:2708","2:8415:2709","2:8419:2710","2:8422:2711"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5744:9173":{"id":"1:5744:9173","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5745:8520","1:5746:53441","1:5747:8892","1:5748:53442","1:5749:8496","1:5750:8497","1:5751:53443","1:5752:1283","1:5753:53444","1:5754:53445","1:5755:53446","1:5756:53447","1:5757:53448","1:5758:53449","1:5759:53450","1:5760:53451"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13375:10879":{"id":"2:13375:10879","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300:1818":{"id":"0:300:1818","crate_id":0,"name":"Invalid","span":{"filename":"src/parking_lot.rs","begin":[476,4],"end":[476,11]},"visibility":"default","docs":"The validation callback returned false.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3382:9521":{"id":"2:3382:9521","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:171","2:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12936:9303":{"id":"2:12936:9303","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12937:126","2:12938:53950"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13007:9539":{"id":"2:13007:9539","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13009:9542","2:13010:58434","2:13011:58435","2:13012:58436","2:13013:58438","2:13014:58437","2:13015:58439"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13440:59236":{"id":"2:13440:59236","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15862:2206","`DoubleEndedIterator`":"2:8411:120","prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49542:9853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3367:9229":{"id":"2:3367:9229","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:171","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6688:9173":{"id":"1:6688:9173","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6689:53218","1:6690:8812","1:6691:8813","1:6692:8815","1:6693:8814","1:6694:8816","1:6695:8817","1:6696:8819","1:6697:8473","1:6698:8822","1:6699:8823","1:6700:8824","1:6701:8825","1:6702:8826","1:6703:8827","1:6704:8820","1:6705:8821"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13371:293":{"id":"2:13371:293","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15873:2215","str::as_mut_ptr":"1:15862:2206"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13383:55306":{"id":"2:13383:55306","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15862:2206"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13453:59241":{"id":"2:13453:59241","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:393:1518":{"id":"0:393:1518","crate_id":0,"name":"0","span":{"filename":"src/parking_lot.rs","begin":[554,21],"end":[554,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"2:8846:2842":{"id":"2:8846:2842","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:343:1845":{"id":"0:343:1845","crate_id":0,"name":"UnparkOne","span":{"filename":"src/parking_lot.rs","begin":[529,4],"end":[529,13]},"visibility":"default","docs":"Unpark one thread and leave the rest parked. No requeuing is done.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:123:1572":{"id":"0:123:1572","crate_id":0,"name":"spinwait","span":{"filename":"src/spinwait.rs","begin":[8,0],"end":[74,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:406:1590"],"is_stripped":true}},"2:3347:9509":{"id":"2:3347:9509","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10276:2864":{"id":"2:10276:2864","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:361:1852":{"id":"0:361:1852","crate_id":0,"name":"Skip","span":{"filename":"src/parking_lot.rs","begin":[542,4],"end":[542,8]},"visibility":"default","docs":"Don't unpark the thread and continue scanning the list of parked threads.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3779:9515":{"id":"2:3779:9515","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6864:9073":{"id":"1:6864:9073","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6865:53071"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8363:136":{"id":"2:8363:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13475:59248":{"id":"2:13475:59248","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:359:1850":{"id":"0:359:1850","crate_id":0,"name":"Unpark","span":{"filename":"src/parking_lot.rs","begin":[539,4],"end":[539,10]},"visibility":"default","docs":"Unpark the thread and continue scanning the list of parked threads.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,14],"end":[64,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::ParkResult","name":"ParkResult","id":"0:296:1583","glob":false}},"2:13710:138":{"id":"2:13710:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13711:171","2:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6790:9067":{"id":"1:6790:9067","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:53275","1:6792:57604"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2837:97":{"id":"2:2837:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2839:2271"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:12444:10005":{"id":"2:12444:10005","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12445:2715","2:12446:58717"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5778:9174":{"id":"1:5778:9174","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5779:57574","1:5780:57575","1:5781:57576","1:5782:57577"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6086:59887":{"id":"5:6086:59887","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13392:36908":{"id":"2:13392:36908","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49612:9857","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13406:2711":{"id":"2:13406:2711","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47356:166","self::pattern":"2:12997:9540","prim@char":"1:15856:2201"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10897:203":{"id":"2:10897:203","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10899:171","2:10900:1787","2:10901:10879","2:10902:55286","2:10903:55287","2:10904:740","2:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10888:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13390:10353":{"id":"2:13390:10353","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49574:9131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:1587":{"id":"0:376:1587","crate_id":0,"name":"UnparkToken","span":{"filename":"src/parking_lot.rs","begin":[550,0],"end":[550,34]},"visibility":"public","docs":"A value which is passed from an unparker to a parked thread.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:378:1518"],"impls":[]}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,28],"end":[62,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::park","name":"park","id":"0:103:1577","glob":false}},"2:3308:1705":{"id":"2:3308:1705","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:171","2:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3486:130":{"id":"2:3486:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13469:59246":{"id":"2:13469:59246","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8565:157":{"id":"2:8565:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8566:2715","2:8567:909","2:8568:2716","2:8571:2717","2:8572:484","2:8574:2718","2:8577:2719","2:8578:2720","2:8579:2721","2:8580:2722","2:8582:2723","2:8584:2724","2:8585:2725","2:8587:828","2:8590:2031","2:8597:1946","2:8599:2726","2:8602:2013","2:8603:2727","2:8604:2728","2:8606:2729","2:8608:2730","2:8611:1287","2:8612:1985","2:8613:1890","2:8617:2731","2:8620:2732","2:8621:2733","2:8622:2734","2:8624:2735","2:8625:2009","2:8627:2736","2:8630:2737","2:8632:2738","2:8642:2739","2:8657:2740","2:8659:2741","2:8663:2742","2:8672:2743","2:8675:2744","2:8677:2745","2:8680:265","2:8687:283","2:8694:2746","2:8701:2747","2:8710:2748","2:8720:1001","2:8727:1989","2:8734:2697","2:8735:2695","2:8736:2699","2:8748:2698","2:8755:2014","2:8767:2696","2:8774:2749","2:8775:2750","2:8780:2751","2:8783:2015","2:8786:2007","2:8787:2752","2:8789:2753","2:8791:404","2:8794:2754","2:8797:984","2:8800:2755","2:8803:593","2:8806:2756","2:8809:894","2:8811:813","2:8813:779","2:8815:701","2:8817:684","2:8819:2757","2:8820:2758","2:8828:2759"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13382:59230":{"id":"2:13382:59230","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15862:2206","crate::ops::IndexMut":"2:3548:9593","str::slice_unchecked":"1:15862:2206"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3707:9489":{"id":"2:3707:9489","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3709:54600"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22812:9183":{"id":"2:22812:9183","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22802:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2938:174":{"id":"2:2938:174","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2940:984","2:2941:813","2:2942:779","2:2943:701","2:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:101:1589":{"id":"0:101:1589","crate_id":0,"name":"DEFAULT_UNPARK_TOKEN","span":{"filename":"src/parking_lot.rs","begin":[557,0],"end":[557,61]},"visibility":"public","docs":"A default unpark token to use.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"1:6440:9069":{"id":"1:6440:9069","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6441:8496","1:6442:8497","1:6443:13219","1:6444:53861","1:6446:53865","1:6448:53862","1:6449:53863","1:6451:53864"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6102:52918":{"id":"5:6102:52918","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15862:2206"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13016:9542":{"id":"2:13016:9542","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13018:9562","2:13019:909","2:13020:58671","2:13021:58672"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13385:9876":{"id":"2:13385:9876","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15856:2201"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49290:9840","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3967:68":{"id":"2:3967:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13449:59239":{"id":"2:13449:59239","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13413:36780":{"id":"2:13413:36780","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12789:9812","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3249:206":{"id":"2:3249:206","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13362:2079":{"id":"2:13362:2079","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:131":{"id":"2:3489:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13486:9191":{"id":"2:13486:9191","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15856:2201"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49628:9192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10255:109":{"id":"2:10255:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13463:19544":{"id":"2:13463:19544","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2928:167":{"id":"2:2928:167","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2929:404","2:2930:2697","2:2931:2695","2:2932:2703"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:341:1843":{"id":"0:341:1843","crate_id":0,"name":"RequeueAll","span":{"filename":"src/parking_lot.rs","begin":[526,4],"end":[526,14]},"visibility":"default","docs":"Requeue all threads onto the target queue.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3377:9231":{"id":"2:3377:9231","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:171","2:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:296:1583":{"id":"0:296:1583","crate_id":0,"name":"ParkResult","span":{"filename":"src/parking_lot.rs","begin":[471,0],"end":[480,1]},"visibility":"public","docs":"Result of a park operation.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:297:1816","0:300:1818","0:302:1820"],"impls":[]}},"2:3313:2401":{"id":"2:3313:2401","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:171","2:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3394:9527":{"id":"2:3394:9527","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:317:1825":{"id":"0:317:1825","crate_id":0,"name":"unparked_threads","span":{"filename":"src/parking_lot.rs","begin":[498,4],"end":[498,31]},"visibility":"public","docs":"The number of threads that were unparked.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:319:1830":{"id":"0:319:1830","crate_id":0,"name":"have_more_threads","span":{"filename":"src/parking_lot.rs","begin":[505,4],"end":[505,31]},"visibility":"public","docs":"Whether there are any threads remaining in the queue. This only returns\ntrue if a thread was unparked.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,48],"end":[64,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::UnparkResult","name":"UnparkResult","id":"0:316:1586","glob":false}},"2:13437:2281":{"id":"2:13437:2281","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15856:2201","str::matches":"1:15862:2206","self::pattern":"2:12997:9540","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49524:9852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:1580":{"id":"0:108:1580","crate_id":0,"name":"unpark_one","span":{"filename":"src/parking_lot.rs","begin":[728,0],"end":[791,1]},"visibility":"public","docs":"Unparks one thread from the queue associated with the given key.\n\nThe `callback` function is called while the queue is locked and before the\ntarget thread is woken up. The `UnparkResult` argument to the function\nindicates whether a thread was found in the queue and whether this was the\nlast thread in the queue. This value is also returned by `unpark_one`.\n\nThe `callback` function should return an `UnparkToken` value which will be\npassed to the thread that is unparked. If no thread is unparked then the\nreturned value is ignored.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.\n\nThe `callback` function is called while the queue is locked and must not\npanic or call into any function in `parking_lot`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"usize"}],["callback",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl FnOnce(UnparkResult) -> UnparkToken","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:10493:142":{"id":"2:10493:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10494:703","2:10496:53194"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3459:116":{"id":"2:3459:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:210","2:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:363:1854":{"id":"0:363:1854","crate_id":0,"name":"Stop","span":{"filename":"src/parking_lot.rs","begin":[545,4],"end":[545,8]},"visibility":"default","docs":"Don't unpark the thread and stop scanning the list of parked threads.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,0],"end":[67,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::spinwait::SpinWait","name":"SpinWait","id":"0:406:1590","glob":false}},"2:8367:151":{"id":"2:8367:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:2715","2:8369:2377","2:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5738:9172":{"id":"1:5738:9172","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5739:8892","1:5740:12869"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:55137","1:2579:1968","1:2580:55138","1:2581:55139","1:2582:55140"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3472:2328":{"id":"2:3472:2328","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6962:9070":{"id":"1:6962:9070","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6963:53170"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13484:59249":{"id":"2:13484:59249","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15856:2201"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49619:9858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/thread_parker/mod.rs","begin":[85,34],"end":[85,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::imp::ThreadParker","name":"ThreadParker","id":"0:433:1692","glob":false}},"2:13389:36913":{"id":"2:13389:36913","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15862:2206"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49603:9856","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3406:9533":{"id":"2:3406:9533","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[61,0],"end":[61,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::deadlock","name":"deadlock","id":"0:119:1576","glob":false}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,73],"end":[62,87]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::unpark_requeue","name":"unpark_requeue","id":"0:112:1581","glob":false}},"0:345:1847":{"id":"0:345:1847","crate_id":0,"name":"RequeueOne","span":{"filename":"src/parking_lot.rs","begin":[532,4],"end":[532,14]},"visibility":"default","docs":"Requeue one thread and leave the rest parked on the original queue.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,48],"end":[66,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::DEFAULT_UNPARK_TOKEN","name":"DEFAULT_UNPARK_TOKEN","id":"0:101:1589","glob":false}},"1:7798:9297":{"id":"1:7798:9297","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7799:53317"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3250:106":{"id":"2:3250:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:320:1834":{"id":"0:320:1834","crate_id":0,"name":"be_fair","span":{"filename":"src/parking_lot.rs","begin":[510,4],"end":[510,21]},"visibility":"public","docs":"This is set to true on average once every 0.5ms for any given key. It\nshould be used to switch to a fair unlocking mechanism for a particular\nunlock.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"2:3355:9513":{"id":"2:3355:9513","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:337:1839":{"id":"0:337:1839","crate_id":0,"name":"Abort","span":{"filename":"src/parking_lot.rs","begin":[520,4],"end":[520,9]},"visibility":"default","docs":"Abort the operation without doing anything.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10270:2862":{"id":"2:10270:2862","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13483:52921":{"id":"2:13483:52921","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13402:2746":{"id":"2:13402:2746","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47356:166","prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4704:9105":{"id":"1:4704:9105","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4705:57077","1:4706:3231","1:4707:57078","1:4708:57079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13366:59228":{"id":"2:13366:59228","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15862:2206"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4686:2854":{"id":"1:4686:2854","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4687:2284","1:4688:57280","1:4690:57281","1:4691:10278","1:4692:57282","1:4693:57283","1:4694:53732","1:4703:2735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13410:55314":{"id":"2:13410:55314","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15862:2206","self::pattern":"2:12997:9540","`DoubleEndedIterator`":"2:8411:120","str::split_whitespace":"1:15862:2206","prim@char":"1:15856:2201"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49320:9130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3742:2327":{"id":"2:3742:2327","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,46],"end":[62,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::unpark_filter","name":"unpark_filter","id":"0:115:1579","glob":false}},"2:3398:9529":{"id":"2:3398:9529","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13456:59243":{"id":"2:13456:59243","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1577":{"id":"0:103:1577","crate_id":0,"name":"park","span":{"filename":"src/parking_lot.rs","begin":[591,0],"end":[706,1]},"visibility":"public","docs":"Parks the current thread in the queue associated with the given key.\n\nThe `validate` function is called while the queue is locked and can abort\nthe operation by returning false. If `validate` returns true then the\ncurrent thread is appended to the queue and the queue is unlocked.\n\nThe `before_sleep` function is called after the queue is unlocked but before\nthe thread is put to sleep. The thread will then sleep until it is unparked\nor the given timeout is reached.\n\nThe `timed_out` function is also called while the queue is locked, but only\nif the timeout was reached. It is passed the key of the queue it was in when\nit timed out, which may be different from the original key if\n`unpark_requeue` was called. It is also passed a bool which indicates\nwhether it was the last thread in the queue.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.\n\nThe `validate` and `timed_out` functions are called while the queue is\nlocked and must not panic or call into any function in `parking_lot`.\n\nThe `before_sleep` function is called outside the queue lock and is allowed\nto call `unpark_one`, `unpark_all`, `unpark_requeue` or `unpark_filter`, but\nit is not allowed to call `park` or panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"usize"}],["validate",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["before_sleep",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["timed_out",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"bool"}],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["park_token",{"kind":"resolved_path","inner":{"name":"ParkToken","id":"0:391:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["timeout",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Instant","id":"1:12189:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"ParkResult","id":"0:296:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl FnOnce() -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl FnOnce()","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl FnOnce(usize, bool)","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"bool"}],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"20:377:2378":{"id":"20:377:2378","crate_id":20,"name":"Array","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["20:378:2715","20:379:1283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3411:9536":{"id":"2:3411:9536","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/thread_parker/mod.rs","begin":[85,20],"end":[85,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::imp::thread_yield","name":"thread_yield","id":"0:451:2107","glob":false}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,28],"end":[66,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::DEFAULT_PARK_TOKEN","name":"DEFAULT_PARK_TOKEN","id":"0:102:1588","glob":false}},"2:3149:217":{"id":"2:3149:217","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3151:127","2:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22961:20962":{"id":"2:22961:20962","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22962:12384","2:22963:57631","2:22964:57632"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22954:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3526:9727":{"id":"2:3526:9727","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:226","2:3529:196","2:3530:58269"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6793:9069":{"id":"1:6793:9069","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6794:13220"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14183:9266":{"id":"2:14183:9266","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14184:55205","2:14185:55206","2:14186:2374","2:14187:55207","2:14188:55208","2:14189:55209","2:14190:2735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13377:55286":{"id":"2:13377:55286","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13425:55319":{"id":"2:13425:55319","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15856:2201","str::rsplitn":"1:15862:2206","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49424:9818","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406:1590":{"id":"0:406:1590","crate_id":0,"name":"SpinWait","span":{"filename":"src/spinwait.rs","begin":[22,0],"end":[24,1]},"visibility":"public","docs":"A counter used to perform exponential backoff in spin loops.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:6406:212":{"id":"5:6406:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6407:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4018:9200":{"id":"2:4018:9200","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4019:55140"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3:1571":{"id":"0:3:1571","crate_id":0,"name":"parking_lot","span":{"filename":"src/parking_lot.rs","begin":[7,0],"end":[1692,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:119:1576","0:296:1583","0:316:1586","0:336:1585","0:358:1582","0:376:1587","0:391:1584","0:101:1589","0:102:1588","0:103:1577","0:108:1580","0:110:1578","0:112:1581","0:115:1579"],"is_stripped":true}},"5:6078":{"id":"5:6078","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5898:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6079:59885","5:6080:2778","5:6083:59886","5:6086:59887","5:6098:59888","5:6099:59889","5:6100:2384","5:6101:52917","5:6102:52918"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8436:2554":{"id":"2:8436:2554","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8437:780","2:8438:2079"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:318:1827":{"id":"0:318:1827","crate_id":0,"name":"requeued_threads","span":{"filename":"src/parking_lot.rs","begin":[501,4],"end":[501,31]},"visibility":"public","docs":"The number of threads that were requeued.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:136:1573":{"id":"0:136:1573","crate_id":0,"name":"thread_parker","span":{"filename":"src/thread_parker/mod.rs","begin":[1,0],"end":[85,62]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:155","0:158","0:161"],"is_stripped":true}},"2:13457:59244":{"id":"2:13457:59244","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12997:9540","prim@char":"1:15856:2201"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13027:9544","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13466:55326":{"id":"2:13466:55326","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13396:55324":{"id":"2:13396:55324","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:9540","prim@char":"1:15856:2201"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3323:9495":{"id":"2:3323:9495","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:171","2:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/thread_parker/mod.rs","begin":[85,48],"end":[85,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::imp::UnparkHandle","name":"UnparkHandle","id":"0:447:2120","glob":false}},"2:3402:9531":{"id":"2:3402:9531","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13387:9218":{"id":"2:13387:9218","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49306:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6101:52917":{"id":"5:6101:52917","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15862:2206"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10262:119":{"id":"2:10262:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13393:55323":{"id":"2:13393:55323","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3075:9609":{"id":"2:3075:9609","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3074:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3245:2552":{"id":"2:3245:2552","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13391:59231":{"id":"2:13391:59231","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49584:9854","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5832:10025":{"id":"5:5832:10025","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:2064"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4711:9125":{"id":"1:4711:9125","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4712:57398","1:4713:57399","1:4714:57400","1:4716:9124","1:4717:57401","1:4719:55314","1:4720:10353"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4629:9119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13422:59233":{"id":"2:13422:59233","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15862:2206","str::split_terminator":"1:15862:2206","prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49388:9846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1079:9189":{"id":"1:1079:9189","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:2761","1:1081:10012","1:1082:52917","1:1083:52918","1:1084:52919","1:1085:52920","1:1086:52921"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6079:59885":{"id":"5:6079:59885","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1717","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:10029","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1717","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:10029","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:299:1518":{"id":"0:299:1518","crate_id":0,"name":"0","span":{"filename":"src/parking_lot.rs","begin":[473,13],"end":[473,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3343:2402":{"id":"2:3343:2402","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1593":{"id":"0:0:1593","crate_id":0,"name":"parking_lot_core","span":{"filename":"src/lib.rs","begin":[8,0],"end":[67,33]},"visibility":"public","docs":"This library exposes a low-level API for creating your own efficient\nsynchronization primitives.\n\n# The parking lot\n\nTo keep synchronization primitives small, all thread queuing and suspending\nfunctionality is offloaded to the *parking lot*. The idea behind this is based\non the Webkit [`WTF::ParkingLot`](https://webkit.org/blog/6161/locking-in-webkit/)\nclass, which essentially consists of a hash table mapping of lock addresses\nto queues of parked (sleeping) threads. The Webkit parking lot was itself\ninspired by Linux [futexes](http://man7.org/linux/man-pages/man2/futex.2.html),\nbut it is more powerful since it allows invoking callbacks while holding a\nqueue lock.\n\nThere are two main operations that can be performed on the parking lot:\n\n - *Parking* refers to suspending the thread while simultaneously enqueuing it\non a queue keyed by some address.\n- *Unparking* refers to dequeuing a thread from a queue keyed by some address\nand resuming it.\n\nSee the documentation of the individual functions for more details.\n\n# Building custom synchronization primitives\n\nBuilding custom synchronization primitives is very simple since the parking\nlot takes care of all the hard parts for you. A simple example for a\ncustom primitive would be to integrate a `Mutex` inside another data type.\nSince a mutex only requires 2 bits, it can share space with other data.\nFor example, one could create an `ArcMutex` type that combines the atomic\nreference count and the two mutex bits in the same atomic word.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:240","0:244","0:247","0:250","0:253","0:256","0:260","0:263","0:266","0:269","0:272","0:275","0:279","0:282","0:285"],"is_stripped":false}},"2:10274:2863":{"id":"2:10274:2863","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6862:9071":{"id":"1:6862:9071","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6863:57226"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,62],"end":[64,73]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::UnparkToken","name":"UnparkToken","id":"0:376:1587","glob":false}},"2:3351:9511":{"id":"2:3351:9511","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6866:9074":{"id":"1:6866:9074","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6867:53689"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3146:135":{"id":"2:3146:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:336:1585":{"id":"0:336:1585","crate_id":0,"name":"RequeueOp","span":{"filename":"src/parking_lot.rs","begin":[518,0],"end":[533,1]},"visibility":"public","docs":"Operation that `unpark_requeue` should perform.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:337:1839","0:339:1841","0:341:1843","0:343:1845","0:345:1847"],"impls":[]}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2761","5:785:2762","5:786:2763"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121:1962":{"id":"0:121:1962","crate_id":0,"name":"release_resource","span":{"filename":"src/parking_lot.rs","begin":[1120,4],"end":[1123,5]},"visibility":"public","docs":"Release a resource identified by key in the deadlock detector.\nNoop if deadlock_detection feature isn't enabled.\n\n# Panics\n\nPanics if the resource was already released or wasn't acquired in this thread.\n\n# Safety\n\nCall before the resource is released","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_key",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"5:6098:59888":{"id":"5:6098:59888","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13381:9212":{"id":"2:13381:9212","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3544:9257","`str`":"1:15862:2206","str::slice_mut_unchecked":"1:15862:2206"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13419:59232":{"id":"2:13419:59232","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15862:2206","self::pattern":"2:12997:9540","prim@char":"1:15856:2201","`DoubleEndedIterator`":"2:8411:120","str::rsplit_terminator":"1:15862:2206"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49370:9845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9340:9180":{"id":"1:9340:9180","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9341:53294","1:9342:53295","1:9343:53296","1:9344:53297","1:9345:9886","1:9346:43881","1:9347:53293"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5650:9099":{"id":"1:5650:9099","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5651:57592","1:5652:10098"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:7891:9603":{"id":"2:7891:9603","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7892:58724","2:7893:58725","2:7894:58722","2:7895:58720","2:7896:58726","2:7897:58723","2:7898:58721"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13370:59229":{"id":"2:13370:59229","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13482:52920":{"id":"2:13482:52920","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3544:9257":{"id":"2:3544:9257","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3546:171","2:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2840:2383":{"id":"2:2840:2383","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2842:52829"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4629:9119":{"id":"1:4629:9119","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4630:2779","1:4631:53528","1:4633:53529","1:4634:53530","1:4635:9120","1:4636:53531","1:4637:53003","1:4639:53532","1:4640:2735","1:4641:9218","1:4642:2722","1:4644:1985"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:119:1576":{"id":"0:119:1576","crate_id":0,"name":"deadlock","span":{"filename":"src/parking_lot.rs","begin":[1090,0],"end":[1090,16]},"visibility":"public","docs":"\\[Experimental\\] Deadlock detection\n\nEnabled via the `deadlock_detection` feature flag.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:120:1956","0:121:1962"],"is_stripped":false}},"2:3240:200":{"id":"2:3240:200","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3140:74":{"id":"2:3140:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142:2704"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5800:9177":{"id":"1:5800:9177","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5801:8892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:110:1578":{"id":"0:110:1578","crate_id":0,"name":"unpark_all","span":{"filename":"src/parking_lot.rs","begin":[805,0],"end":[850,1]},"visibility":"public","docs":"Unparks all threads in the queue associated with the given key.\n\nThe given `UnparkToken` is passed to all unparked threads.\n\nThis function returns the number of threads that were unparked.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"usize"}],["unpark_token",{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:3696:213":{"id":"2:3696:213","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3697:171","2:3698:9489","2:3699:674","2:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:391:1584":{"id":"0:391:1584","crate_id":0,"name":"ParkToken","span":{"filename":"src/parking_lot.rs","begin":[554,0],"end":[554,32]},"visibility":"public","docs":"A value associated with a parked thread which can be used by `unpark_filter`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:393:1518"],"impls":[]}},"2:13455:59242":{"id":"2:13455:59242","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13379:55287":{"id":"2:13379:55287","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10205:2854":{"id":"2:10205:2854","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10206:1509","2:10207:58555","2:10209:53732"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2897:124":{"id":"2:2897:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6560:9187":{"id":"1:6560:9187","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6561:53267","1:6562:53268"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3329:9502":{"id":"2:3329:9502","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:171","2:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:102:1588":{"id":"0:102:1588","crate_id":0,"name":"DEFAULT_PARK_TOKEN","span":{"filename":"src/parking_lot.rs","begin":[560,0],"end":[560,55]},"visibility":"public","docs":"A default park token to use.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"ParkToken","id":"0:391:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"5:6099:59889":{"id":"5:6099:59889","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:1717","`String`":"5:8354:205"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1717","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:10029","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5656:9097":{"id":"1:5656:9097","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5657:10816","1:5658:57570"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:302:1820":{"id":"0:302:1820","crate_id":0,"name":"TimedOut","span":{"filename":"src/parking_lot.rs","begin":[479,4],"end":[479,12]},"visibility":"default","docs":"The timeout expired.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13443:59237":{"id":"2:13443:59237","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12997:9540","prim@char":"1:15856:2201","`DoubleEndedIterator`":"2:8411:120","str::rmatch_indices":"1:15862:2206"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49470:9849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23006:9627":{"id":"2:23006:9627","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23655:9622","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22997:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10266:2860":{"id":"2:10266:2860","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13388:36923":{"id":"2:13388:36923","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15862:2206"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49594:9855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13480:10012":{"id":"2:13480:10012","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13369:57570":{"id":"2:13369:57570","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12468:9969"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6462:9101":{"id":"1:6462:9101","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6463:1776","1:6464:3396","1:6465:53114","1:6466:53115","1:6467:53116","1:6468:1774"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3360:9516":{"id":"2:3360:9516","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3361:171","2:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5722:9171":{"id":"1:5722:9171","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5723:57181","1:5724:57183","1:5725:57182","1:5726:57184"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:358:1582":{"id":"0:358:1582","crate_id":0,"name":"FilterOp","span":{"filename":"src/parking_lot.rs","begin":[537,0],"end":[546,1]},"visibility":"public","docs":"Operation that `unpark_filter` should perform for each thread.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:359:1850","0:361:1852","0:363:1854"],"impls":[]}},"2:13478:9770":{"id":"2:13478:9770","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12936:9303","FromStr::Err":"2:12936:9303"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:9303","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:9303","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:393:2381":{"id":"20:393:2381","crate_id":20,"name":"ToSmallVec","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:395:60338"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Array","id":"20:377:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8326:9697":{"id":"2:8326:9697","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8328:2752"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,4],"end":[64,12]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::FilterOp","name":"FilterOp","id":"0:358:1582","glob":false}},"2:13481:52919":{"id":"2:13481:52919","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3218:115":{"id":"2:3218:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6100:2384":{"id":"5:6100:2384","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3372:9230":{"id":"2:3372:9230","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:171","2:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3684:9928":{"id":"2:3684:9928","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:2387","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10538:9228":{"id":"2:10538:9228","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10539:146","2:10540:38129","2:10541:52831"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13399:55325":{"id":"2:13399:55325","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:9540","prim@char":"1:15856:2201"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13431:59234":{"id":"2:13431:59234","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13725:150":{"id":"2:13725:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13726:171","2:13727:150","2:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13487:59250":{"id":"2:13487:59250","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15856:2201"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49637:9859","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13434:59235":{"id":"2:13434:59235","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13373:1787":{"id":"2:13373:1787","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13416:55317":{"id":"2:13416:55317","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15862:2206","`DoubleEndedIterator`":"2:8411:120","prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49338:9815","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5730:9170":{"id":"1:5730:9170","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5731:8892","1:5732:53009","1:5733:53010"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13428:55321":{"id":"2:13428:55321","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12997:9540","prim@char":"1:15856:2201","str::splitn":"1:15862:2206"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49442:9819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3318:9498":{"id":"2:3318:9498","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:171","2:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3548:9593":{"id":"2:3548:9593","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3544:9257","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13372:10888":{"id":"2:13372:10888","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15873:2215"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6083:59886":{"id":"5:6083:59886","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13027:9544":{"id":"2:13027:9544","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3252:209":{"id":"2:3252:209","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10272:179":{"id":"2:10272:179","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10264:2859":{"id":"2:10264:2859","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3701:137":{"id":"2:3701:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9223:2493":{"id":"2:9223:2493","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,26],"end":[64,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::ParkToken","name":"ParkToken","id":"0:391:1584","glob":false}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,34],"end":[62,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::unpark_all","name":"unpark_all","id":"0:110:1578","glob":false}},"5:6080:2778":{"id":"5:6080:2778","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,37],"end":[64,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::RequeueOp","name":"RequeueOp","id":"0:336:1585","glob":false}},"2:3388:9524":{"id":"2:3388:9524","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:171","2:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13472:59247":{"id":"2:13472:59247","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15856:2201","self::pattern":"2:12997:9540"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3143:149":{"id":"2:3143:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3145:2705"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3248:207":{"id":"2:3248:207","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13364:59227":{"id":"2:13364:59227","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13386:9569":{"id":"2:13386:9569","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15856:2201"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49296:9841","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3492:132":{"id":"2:3492:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3494:171","2:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13451:59240":{"id":"2:13451:59240","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13360":{"id":"2:13360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13361:780","2:13362:2079","2:13363:59226","2:13364:59227","2:13366:59228","2:13369:57570","2:13370:59229","2:13371:293","2:13372:10888","2:13373:1787","2:13375:10879","2:13377:55286","2:13379:55287","2:13381:9212","2:13382:59230","2:13383:55306","2:13384:55307","2:13385:9876","2:13386:9569","2:13387:9218","2:13388:36923","2:13389:36913","2:13390:10353","2:13391:59231","2:13392:36908","2:13393:55323","2:13396:55324","2:13399:55325","2:13402:2746","2:13406:2711","2:13410:55314","2:13413:36780","2:13416:55317","2:13419:59232","2:13422:59233","2:13425:55319","2:13428:55321","2:13431:59234","2:13434:59235","2:13437:2281","2:13440:59236","2:13443:59237","2:13446:59238","2:13449:59239","2:13451:59240","2:13453:59241","2:13455:59242","2:13456:59243","2:13457:59244","2:13460:59245","2:13463:19544","2:13466:55326","2:13469:59246","2:13472:59247","2:13475:59248","2:13478:9770","2:13480:10012","2:13481:52919","2:13482:52920","2:13483:52921","2:13484:59249","2:13486:9191","2:13487:59250"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13446:59238":{"id":"2:13446:59238","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15862:2206","self::pattern":"2:12997:9540","prim@char":"1:15856:2201","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49488:9850","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:9543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10268:2861":{"id":"2:10268:2861","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:297:1816":{"id":"0:297:1816","crate_id":0,"name":"Unparked","span":{"filename":"src/parking_lot.rs","begin":[473,4],"end":[473,25]},"visibility":"default","docs":"We were unparked by another thread with the given token.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:115:1579":{"id":"0:115:1579","crate_id":0,"name":"unpark_filter","span":{"filename":"src/parking_lot.rs","begin":[1012,0],"end":[1085,1]},"visibility":"public","docs":"Unparks a number of threads from the front of the queue associated with\n`key` depending on the results of a filter function which inspects the\n`ParkToken` associated with each thread.\n\nThe `filter` function is called for each thread in the queue or until\n`FilterOp::Stop` is returned. This function is passed the `ParkToken`\nassociated with a particular thread, which is unparked if `FilterOp::Unpark`\nis returned.\n\nThe `callback` function is also called while both queues are locked. It is\npassed an `UnparkResult` indicating the number of threads that were unparked\nand whether there are still parked threads in the queue. This `UnparkResult`\nvalue is also returned by `unpark_filter`.\n\nThe `callback` function should return an `UnparkToken` value which will be\npassed to all threads that are unparked. If no thread is unparked then the\nreturned value is ignored.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.\n\nThe `filter` and `callback` functions are called while the queue is locked\nand must not panic or call into any function in `parking_lot`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"usize"}],["filter",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"ParkToken","id":"0:391:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"FilterOp","id":"0:358:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["callback",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(ParkToken) -> FilterOp","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"ParkToken","id":"0:391:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"FilterOp","id":"0:358:1582","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl FnOnce(UnparkResult) -> UnparkToken","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1587","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:3483:1764":{"id":"2:3483:1764","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14109:141":{"id":"2:14109:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14110:266","2:14111:507","2:14112:269","2:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2862:104":{"id":"2:2862:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:397","2:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8330:9696":{"id":"2:8330:9696","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8332:2753"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,61],"end":[62,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::unpark_one","name":"unpark_one","id":"0:108:1580","glob":false}},"2:3137:75":{"id":"2:3137:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13460:59245":{"id":"2:13460:59245","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12997:9540","prim@char":"1:15856:2201"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:9539","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3281:2553":{"id":"2:3281:2553","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23655:9622":{"id":"2:23655:9622","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23656:9626"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23651:9077","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3335:9505":{"id":"2:3335:9505","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:171","2:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4989:9082":{"id":"1:4989:9082","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4990:2840","1:4991:53720"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:378:1518":{"id":"0:378:1518","crate_id":0,"name":"0","span":{"filename":"src/parking_lot.rs","begin":[550,23],"end":[550,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}}},"paths":{"22:1728:4433":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:4711:9125":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:542:10422":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:3331:9223":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11277:11471":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:15213:9400":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12552:11669":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10061:13133":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"22:1564:4417":{"crate_id":22,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8693:9423":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:4734:12135":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:14152:9147":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:1533:4412":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10028:13130":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5347:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"22:592:3532":{"crate_id":22,"path":["libc","unix","linger"],"kind":"struct"},"21:4:1591":{"crate_id":21,"path":["cfg_if","cfg_if"],"kind":"macro"},"16:2754:10411":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:519:3523":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13819:12054":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:3377:9231":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:1091:11073":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:51303:9672":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"22:556:3527":{"crate_id":22,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4377:6560":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:3287:10666":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:2170:9221":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13172:11869":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:8843:2385":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:3252:209":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"16:6644:10545":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:4638:11078":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"22:571:3529":{"crate_id":22,"path":["libc","unix","iovec"],"kind":"struct"},"1:13698:9300":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11588:11490":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:5984:9466":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"20:213:11066":{"crate_id":20,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"2:47577:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:6683:10054":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"14:47:13180":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:56003:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10071:10832":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:46653:9707":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12095:11579":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"12:877:9221":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"22:6020:4376":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10468:1713":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:24683:9904":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4360:9386":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:14801:11129":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6949:10700":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:3483:9221":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"22:6060:4352":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"20:0:1592":{"crate_id":20,"path":["smallvec"],"kind":"module"},"22:0:785":{"crate_id":22,"path":["libc"],"kind":"module"},"2:23984:9773":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:69:10077":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:299:13118":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:5360:10374":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:4210:2375":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:3240:200":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:12209:2397":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"12:2005:2840":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:49628:9192":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:4:966":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:22961:20962":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"18:620:12759":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10864:11455":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"22:609:3535":{"crate_id":22,"path":["libc","unix","tms"],"kind":"struct"},"17:10211:13136":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11347:9413":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9971:60316":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:45892:9201":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12712:11697":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"22:4509:6576":{"crate_id":22,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5987:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:32378:58549":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:15881:2223":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:5783:11073":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4043:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:9624:57530":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"22:4219:6543":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9280:11406":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:46834:12844":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:7935:53282":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"20:147:2376":{"crate_id":20,"path":["smallvec","SmallVecData"],"kind":"enum"},"17:13609:11982":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:88:3124":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11767:11517":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:14686:9296":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:55897:9618":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:10215:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:7252:11073":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2462:13209":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:32212:2386":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:50934:9670":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10635:15728":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:3091:10718":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:2460:13208":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:11099:9126":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:49290:9840":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:47356:166":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:1689:10133":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"22:5233:7148":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6470:2375":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:15854:2199":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:49296:9841":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:10563:2832":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:1156:13200":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"22:5945:4348":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:48496:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:48377:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:49442:9819":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:578:3529":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:1505:9243":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9133:46284":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3333:9368":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:10793:9360":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"22:4156:6538":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4331:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:51864:9673":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:0:2183":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:15856:2201":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:14466:9178":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:681:11474":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"12:112:60308":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:13499:53279":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"22:1650:4424":{"crate_id":22,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:15874:2216":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"14:11:13180":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:10204:195":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:11231:10783":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"22:4317:6553":{"crate_id":22,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11001:13163":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10623:13149":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3192:9361":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:3336:10032":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11931:9292":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11988:12862":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:1700:4428":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5561:10387":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:49338:9815":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"22:6915:8147":{"crate_id":22,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"22:4065:6529":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12431:11650":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7666:9290":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13348:11914":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:10837:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:49752:9551":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"9:27:10223":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:12098:9280":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:23913:9777":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8135:2818":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:22537:2694":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2733:10412":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"22:4137:6537":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:1760:4435":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11502:9315":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"18:829:10847":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:32218:9018":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:6935:8149":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:15870:2212":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:53199:9669":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:14019:11128":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"22:4195:6541":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6221:7598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7823:10497":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7843:10564":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:6440:9069":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:9858:11122":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:5029:12144":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6252:10535":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"22:5213:7168":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6923:8147":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:3370:10033":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:2195:11075":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"22:1576:4418":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:8116:2375":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:46841:9264":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:37512:2694":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"9:776:10221":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:9476:11412":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:51005:9638":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:46227:9859":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"22:5420:7184":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11118:46287":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:9731:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12182:11594":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:3945:6513":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:3392:10672":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10798:9178":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:9942:9799":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:5152:1699":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:3967:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:49542:9853":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:52230:9645":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:6085:9410":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:46173:9758":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9332:10750":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:2274:2793":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"14:194:44626":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11355:9402":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:4995:12143":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"22:6636:7960":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12155:11590":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12040:11568":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:47955:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"13:120:44598":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"22:5274:7172":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"22:5514:7216":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:53376:12645":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"9:603:13268":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:3965:11073":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"22:4369:6560":{"crate_id":22,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:49738:9548":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6964:2490":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4145:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:15873:2215":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"22:4462:6571":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6021:10654":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:46552:9694":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6910:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:53361:12644":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2366:589":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4060:6527":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:9551:10780":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2163:2377":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:50086:2404":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"22:4515:6577":{"crate_id":22,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:52261:9648":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"22:6231:7599":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:644:10856":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:11165:9089":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:11304:46288":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:5736:10395":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1736:4433":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:0:2178":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:9659:60325":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"19:117:11318":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:1194:15732":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:10788:13150":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:3398:9529":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"12:1159:10304":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:24615:9903":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:4041:195":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:7633:2723":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"22:3884:6510":{"crate_id":22,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:14492:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:4932:1698":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:9464:57272":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13429:11930":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:8565:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:136:52572":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12247:11602":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:13222:13195":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:3075:9609":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2862:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:9943:60319":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"22:4058:6528":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:3039:59043":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2840:2383":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:0:2181":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:790:10843":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12917:11717":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:4955:12142":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:24751:9906":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:605:3533":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10845:9380":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:11402:9821":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:632:3537":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:8929:46279":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:45645:2843":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:13873:9293":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"22:5159:7163":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:8326:9697":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7766:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4395:9147":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"22:6043:4349":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:3343:2402":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:4704:12134":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:5955:9462":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:14897:9295":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:1655:9251":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:5971:9465":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9142:9341":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6366:10323":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:4263:9156":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"18:849:10848":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:51759:12591":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13163:11868":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:11109:9127":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:3394:9527":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:24581:9902":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:12662:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:5828:10023":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6718:10692":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3318:9498":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:7719:9684":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:1486:9251":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:3526:9727":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4095:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:13073:9547":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"12:1118:9249":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3347:9509":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13402:11926":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:5870:11082":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:49198:9829":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4183:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1563:4416":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6644:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:13334:9414":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:49370:9845":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"12:761:2841":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:660:10857":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:10424:11123":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:8284:10095":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:12114:9281":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:46850:12845":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:48703:12850":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:46288:9992":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10236:10733":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10258:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:8154:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:5800:9177":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"22:617:3536":{"crate_id":22,"path":["libc","unix","servent"],"kind":"struct"},"22:6243:2630":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","c_long"],"kind":"typedef"},"1:8911:9264":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:3459:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10435:13138":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:3429:10414":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:2751:9194":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:47913:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12741:11700":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8491:9277":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:6614:3479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"22:4038:6525":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:14109:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:46295:9993":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:14183:9266":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12195:11595":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:2512:10791":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13520:11960":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:47871:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"22:6844:6699":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:47661:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7804:10495":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:0:2182":{"crate_id":17,"path":["object"],"kind":"module"},"6:1584:4418":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"22:4025:6523":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:3365:10410":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:13906:58591":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:46145:9192":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"22:1555:4416":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"22:3964:6361":{"crate_id":22,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"22:5339:7175":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:49470:9849":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2837:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:10584:2812":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"22:1692:4428":{"crate_id":22,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12795:11715":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:12174:9433":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22603:58524":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:51236:9628":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7342:10519":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9769:60323":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"22:6891:6706":{"crate_id":22,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"22:4207:6542":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:1639:9239":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"22:3997:6520":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"12:1235:10307":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"22:5392:7180":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"7:85:44258":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:3391:9225":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:2213:10035":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"22:1532:4413":{"crate_id":22,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:45783:188":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:7652:9289":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13933:12088":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"22:4387:6562":{"crate_id":22,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10827:10810":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9177:13212":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:5386:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"22:5979:7586":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4101:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:994:10126":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4262:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:3018:10659":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:46160:9757":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5282:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:15877:2219":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4439:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:8070:9153":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"22:6862:6702":{"crate_id":22,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:24547:2824":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:47745:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"22:562:3528":{"crate_id":22,"path":["libc","unix","hostent"],"kind":"struct"},"1:9715:9394":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:9933:13128":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:49817:9553":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11993:11562":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"14:250:12337":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:12059:2377":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5312:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6744:10694":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:10266:10727":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7368:2377":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:2437:13207":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"22:5520:6422":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:4790:12137":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:49906:9557":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"22:63:2632":{"crate_id":22,"path":["libc","unix","c_int"],"kind":"typedef"},"1:8391:9315":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:46563:9700":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11572:11489":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2889:10675":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:161:3191":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"14:189:13180":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:11319:9816":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12756:11704":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10611:13148":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:46591:9703":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"3:0:419":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:1528:9246":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:3329:9502":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5469:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10673:46470":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:3767:2841":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:23891:12474":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:46612:1852":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:14155:9149":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11281:9402":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:7106:11087":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:12385:11640":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11980:9296":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"3:300:195":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13780:12046":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"22:6147:7593":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:49584:9854":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"12:1651:10316":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12480:11657":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"14:244:12808":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:5375:9986":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:9245:10728":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:24093:12825":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:1463:9239":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6620:10687":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13062:11828":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:3172:10661":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4281:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4517:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:9223:2493":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"22:4087:6531":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"22:4273:6548":{"crate_id":22,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5927:10405":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:46274:9858":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:5078:2320":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:23556:9182":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13356:11917":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:14:2284":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:11904:9835":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:24047:43598":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12373:11638":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:4018:9200":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:4694:11078":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:4989:9082":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"22:512:3523":{"crate_id":22,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12537:11665":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:9344:9539":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11525:9316":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:49612:9857":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4647:9121":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:4641:12132":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5197:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5522:7216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:22812:9183":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7073:10550":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:14884:9294":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:3281:2553":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:3966:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:8377:10018":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:23946:12476":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:12789:9812":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:14910:2397":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:5832:10025":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:3957:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"22:1752:4435":{"crate_id":22,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:24025:43606":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"12:2018:9221":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:9296:11407":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"22:1622:4423":{"crate_id":22,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10502:12764":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11122:9130":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:8092:10029":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6200:7596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:1472:9249":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:46151:12831":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13282:11898":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:8902:46278":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"18:885:10851":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:24100:9962":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:3696:213":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:3492:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:49149:9826":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:49424:9818":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5945:3441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:591:3531":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:50982:9650":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"9:0:2175":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10353:10794":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11835:11537":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4506:12129":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"12:2303:12383":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9600:60320":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"22:4125:6536":{"crate_id":22,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:9768:11121":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:11616:11494":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:15857:2202":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11406:11476":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5159:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:24513:9901":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9264:11405":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:47466:2680":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:45806:187":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"22:662:3566":{"crate_id":22,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:10449:11125":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:6790:9067":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3382:9521":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10160:11418":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:2548:10141":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:11406:9072":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6864:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13760:12040":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7295:10503":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6491:10540":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10571:13145":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:49844:9554":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:56029:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15822:13276":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:46364:9935":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10936:9335":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:15859:2203":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:15867:2209":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"20:330:2377":{"crate_id":20,"path":["smallvec","IntoIter"],"kind":"struct"},"2:3402:9531":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:8124:10128":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:49159:9827":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:10264:2859":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11915:11542":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:1592:2840":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12783:11708":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13041:11820":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11947:11552":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:5547:8148":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12208:11597":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:24411:9899":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:5788:9175":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:3549:12117":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12307:11613":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12671:11692":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10656:9233":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:10912:13153":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4040:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:14233:2001":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12262:11605":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:1646:9250":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13240:11884":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10458:11371":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"22:5937:3441":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"22:598:3533":{"crate_id":22,"path":["libc","unix","sigval"],"kind":"struct"},"17:13842:12067":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:6667:10042":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11358:10752":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:10861:9140":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:2169:567":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11458:11480":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:14022:9880":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:7835:11093":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:14441:9078":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:8189:2377":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:51092:9663":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6126:10530":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6518:10541":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10543:11459":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:15876:2218":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:47543:2377":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:15073:9208":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9719:13124":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"22:5304:7174":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:2897:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:22550:58430":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:15092:9215":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10140:10763":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:5006:2314":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:48126:2859":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:3035:12470":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:6597:58642":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:4237:11073":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:51404:9667":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:294:13117":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:49723:9545":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:9368:11409":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13978:12094":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4325:6553":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10844:10763":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"22:6213:7598":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1658:4424":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:50297:9198":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:13835:9291":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10656:11423":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:9440:11411":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:51111:12582":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:6682:10499":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10403:10762":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:10266:2860":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46502:9689":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11499:11485":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"12:1180:10305":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:8432:9221":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"9:996:10240":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5292:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:51579:9629":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"22:6092:7590":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"22:4379:6561":{"crate_id":22,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:55990:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13810:12052":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:53453:12648":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13986:12097":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11640:11498":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:47787:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:8413:10101":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:10788:9185":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:49603:9856":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10205:2854":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4364:6558":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:1522:4410":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:6698:8822":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:15058:9207":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:13022:9543":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10149:13127":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:50052:9871":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13772:12043":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:1419:2840":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46534:9691":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:46189:9760":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:52021:9668":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:5472:10382":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:1511:9244":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:51255:12584":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5400:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11380:9068":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:543:3526":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"22:4112:6534":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"22:5406:7182":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5792:9176":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:22997:9077":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"22:6873:6703":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4215:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:13851:53278":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:13946:9292":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:510:13119":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:12444:10005":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7378:10490":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:50064:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:3506:10667":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13306:11900":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"22:6606:3479":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:8330:9696":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5960:10407":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10814:10809":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11186:12767":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5330:11406":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"22:5412:7183":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:3339:2400":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:22605:58520":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:607:13120":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:47703:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13554:11968":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:4750:9486":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12568:11670":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:24479:2823":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13637:11990":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13221:11883":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:4719:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:13760:58640":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:10897:203":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:12004:11101":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:6866:9074":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11292:9404":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:616:3535":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:10694:10144":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:0:1310":{"crate_id":1,"path":["std"],"kind":"module"},"22:4333:6555":{"crate_id":22,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5563:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6636:10502":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"9:41:10224":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:3264:10665":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6424:10539":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"22:4309:6552":{"crate_id":22,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:47389:2715":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"12:784:9241":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:46347:9934":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"22:4285:6549":{"crate_id":22,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:8101:2377":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:1153:13198":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"22:1546:4415":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:1908:4573":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:4695:9676":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11100:10785":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13898:12075":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:51453:9652":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:46663:9698":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5185:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3713:9492":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6852:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:610:10854":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:51350:9660":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:53050:9666":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11162:9085":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:53160:9649":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13318:11903":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:4614:12131":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"12:469:60305":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:10853:9138":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11950:9294":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:694:10859":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10489:10764":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4272:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12725:11698":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10477:10761":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:4686:2854":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:8249:9255":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12442:11652":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:4083:6530":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"22:4052:6527":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:7632:9288":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:3483:1764":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6152:10485":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:12997:9540":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:3621:11103":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"22:4093:6532":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:11208:9813":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10304:10746":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:45673:9728":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"22:4356:6558":{"crate_id":22,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:49239:9833":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10938:13158":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"10:0:2176":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:8850:9602":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:1195:59082":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:15880:2222":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"12:160:1718":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"22:5428:11312":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11384:3308":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9404:11410":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:3877:9140":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:6462:9101":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:49524:9852":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"12:1253:9251":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:24007:12481":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:3488:10668":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"18:636:11322":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3248:207":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1613:2377":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:8292:2818":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:11360:9818":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:1658:9241":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:23999:12480":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11539:11487":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:48410:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:11341:9464":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:10805:9179":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:15872:2214":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:3868:6508":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13394:11924":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:14987:9301":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"12:976:9247":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:8449:10078":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:1547:4414":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10666:9252":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:6176:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"15:0:2180":{"crate_id":15,"path":["addr2line"],"kind":"module"},"22:4431:6568":{"crate_id":22,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:13801:177":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:5371:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:50202:191":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:47552:168":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"9:469:13258":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"12:1667:10317":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:51554:9647":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:10276:2864":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:46492:9688":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10279:10743":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:32226:58548":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:53414:12647":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:8954:10757":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:6688:9173":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"22:6177:7595":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:47527:2840":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:5231:12145":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:3357:9224":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45913:9606":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:3411:9536":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5421:10377":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:584:3530":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:3258:2325":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11932:11548":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"12:968:9246":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"22:4323:6554":{"crate_id":22,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:7856:10565":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7894:10522":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4431:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:48392:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:15350:10334":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:5778:9174":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13370:11919":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:53338:12643":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:7930:2817":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"6:157:3190":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:11794:11526":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11678:11502":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:46520:12840":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5790:10400":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4306:6551":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:4350:12124":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13154:11864":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13942:12090":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:3145:10670":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3372:9230":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:3137:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:8266:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"9:749:10177":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"18:754:60329":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"22:4075:6530":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7406:10489":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:15838:53136":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:23008:9626":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:14516:9122":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"22:4402:6564":{"crate_id":22,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10516:10765":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13477:11945":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12632:11689":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:5314:11405":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:3367:9229":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:1450:9238":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11015:13164":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:4033:9199":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:6391:10538":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:15866:2208":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:6858:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7258:13211":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"22:3958:6516":{"crate_id":22,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:45762:185":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10574:55268":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:3190:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4494:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:5123:2321":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:48903:10010":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6208:10533":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:4417:12126":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"22:1594:4420":{"crate_id":22,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"22:5122:7120":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1235:10136":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:10493:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6893:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13192:11875":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:48907:10009":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:6401:9692":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:45721:186":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11361:9418":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"22:1539:4414":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4052:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7185:10554":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:704:11322":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:1522:9245":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3772:12119":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3707:9489":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:3365:9222":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:8436:2554":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:4823:12138":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:49229:9832":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:13725:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"22:530:3525":{"crate_id":22,"path":["libc","unix","rlimit"],"kind":"struct"},"1:12130:9282":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7042:10704":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"22:5202:7167":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:45885:9494":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:2166:2375":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13119:11863":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5420:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:1441:9248":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:49211:9830":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7392:10491":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5501:9408":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:820:10846":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:50256:9878":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:3946:9221":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:14456:12863":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"22:6927:8149":{"crate_id":22,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11612:9321":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:1744:4434":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1572:4417":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11189:9090":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:7795:3246":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:10887:11456":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:9809:60321":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:51627:9633":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13564:11971":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5269:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11135:9083":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:24649:9298":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:47457:2491":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:22582:58522":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10363:11474":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11822:11536":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11585:9318":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13497:11952":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:897:2830":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"22:4032:6524":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:599:3532":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:46868:12566":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9961:13129":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:49700:9541":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:866:10850":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:22802:9077":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10377:10792":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:5722:9171":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3268:2689":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:8365:10017":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:569:3528":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:49278:9730":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:774:11322":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:46451:9126":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:12085:9279":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46511:9690":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:152:52573":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7289:13211":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:3743:10806":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10931:9334":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12327:11614":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:3249:206":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:53266:12637":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5744:9173":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13963:12093":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:3604:11338":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"9:1075:10242":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"22:5555:7218":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11267:12861":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:12715:9847":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"22:577:3530":{"crate_id":22,"path":["libc","unix","pollfd"],"kind":"struct"},"2:52797:9642":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:399:2371":{"crate_id":20,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"6:6028:4376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:15606:11132":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12179:9342":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:1602:2841":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:1136:1969":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:1602:4420":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:6731:10693":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7514:10506":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4164:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10041:13131":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:4629:9119":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:1554:4415":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:8354:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:46622:9705":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"22:4441:6569":{"crate_id":22,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:10448:10735":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:3889:10102":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:2257:10138":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4358:6557":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7549:10494":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:11101:2841":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:12184:9343":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:9034:46281":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:3972:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5672:10391":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"12:2013:2375":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:53257:12636":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9065:46282":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7738:10562":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3544:9257":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5221:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:51174:9639":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6691:10546":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:3033:2761":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:32177:9017":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:12154:9427":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:11049:9153":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:10272:179":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"22:5183:7165":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:15875:2217":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"22:1709:4430":{"crate_id":22,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:8316:10096":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:13598:11978":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:3146:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12467:11655":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:51602:9632":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7928:9606":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12221:11598":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7761:10563":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12507:11660":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"22:584:3531":{"crate_id":22,"path":["libc","unix","winsize"],"kind":"struct"},"22:4298:6551":{"crate_id":22,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:48119:2860":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10052:13132":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12073:11578":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:2401:13206":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"18:720:11324":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:56016:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2399:13205":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:4602:9111":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"22:5220:7169":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:15878:2220":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"12:2331:9217":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7870:10492":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:10690:13215":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3611:9137":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:4410:6564":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:51143:9651":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"12:892:10296":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:15326:12725":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10117:10828":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12043:2840":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:15863:2207":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3360:9516":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:6949:10030":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:53323:12642":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"21:0:1591":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"1:12669:9360":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:525:3524":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4397:9148":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:6700:8824":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:11604:11491":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:624:3536":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"22:4339:6556":{"crate_id":22,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:7628:10082":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2793:9195":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:10538:9228":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3315:2764":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3245:2552":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:50220:180":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"22:3937:6513":{"crate_id":22,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:49619:9858":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:10262:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4347:6556":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6101:10481":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"22:5990:7587":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12946:11737":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:1476:2375":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:2305:10154":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:51943:9661":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:7606:2379":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:6560:9187":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7453:10486":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"22:1900:4573":{"crate_id":22,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6124:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:7444:175":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:5130:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5548:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"22:6804:8121":{"crate_id":22,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7024:10703":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7467:10487":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:2484:46370":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11195:9338":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:8849:10779":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11199:11470":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:5884:11085":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"9:927:44354":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13746:12034":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:50060:9866":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4227:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4357:9385":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"20:380:2379":{"crate_id":20,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"22:6206:7597":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:3308:1705":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:23655:9622":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:5753:10398":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11159:11469":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:903:2831":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12065:9278":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:8484:1982":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:49112:9822":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:3320:10719":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9729:60318":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10635:11421":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:5656:9097":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10095:10826":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"12:181:10311":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:2816:10674":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:1486:9221":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:3355:9513":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"22:5363:7177":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:47483:195":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:3725:9493":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"22:4104:6533":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:7680:9291":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"22:4363:6559":{"crate_id":22,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:1011:2840":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:10255:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:46235:9989":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:52987:9646":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5167:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:24377:9898":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:2159:2840":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5428:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2060:9111":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13884:12073":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:55977:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5459:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"22:3897:6511":{"crate_id":22,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"22:6879:6704":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:1534:9247":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:4890:12140":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5359:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"22:4493:6574":{"crate_id":22,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"12:1144:9250":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"15:230:10325":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1492:9240":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"22:4044:6526":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6812:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11378:10751":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6238:10488":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:15855:2200":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:3939:12121":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:22584:58525":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4112:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:1442:2377":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3218:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:712:2694":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12598:11676":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:12468:9969":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:7119:10419":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:45920:9607":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"18:766:11332":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:6793:9069":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:49220:9831":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:51069:9659":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"22:5378:7179":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:823:11122":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:8143:2311":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4501:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4470:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:5650:9099":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:7810:11087":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6072:10504":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:23971:9772":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"22:625:3537":{"crate_id":22,"path":["libc","unix","protoent"],"kind":"struct"},"1:9636:57526":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:4386:12125":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"8:0:1591":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11726:11507":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:48664:12849":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:57291:12655":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"18:782:11322":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5528:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:8383:2818":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"20:377:2378":{"crate_id":20,"path":["smallvec","Array"],"kind":"trait"},"1:10819:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:10224:13137":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4695:53731":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11159:9084":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:5861:9457":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:48383:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:6702:8826":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:49637:9859":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"22:4350:6557":{"crate_id":22,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"22:5997:3308":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:3684:9928":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:11281:9815":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:48133:2861":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"22:4417:6566":{"crate_id":22,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:6406:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:1838:11073":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:3486:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:10673:16737":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:8846:2842":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:610:3534":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:10650:15730":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:45829:189":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:2866:10656":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:6474:9693":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12610:11678":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:9591:11118":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"22:536:3526":{"crate_id":22,"path":["libc","unix","rusage"],"kind":"struct"},"2:3149:217":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11981:11561":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:5175:2323":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6591:10544":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10950:13159":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:1456:2092":{"crate_id":2,"path":["core","hint","spin_loop"],"kind":"function"},"2:38669:9196":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13799:12051":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"22:4486:6573":{"crate_id":22,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12051:11569":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:2492:2796":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:3997:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:3406:9533":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11779:11520":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:5975:10527":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"22:6885:6705":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:650:10853":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9839:10763":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5295:44703":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:9088:46283":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11970:11558":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:14817:11130":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"22:1736:4434":{"crate_id":22,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"12:2323:12386":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6014:10529":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:1200:10306":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:169:52574":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9799:13126":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:50888:12580":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12118:11585":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:12229:2398":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:14479:12870":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:5410:9111":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46464:9685":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:5963:9463":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:0:477":{"crate_id":2,"path":["core"],"kind":"module"},"2:23006:9627":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:45972:9789":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4046:6525":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:3118:10671":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:11077:2840":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10128:10829":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11653:11500":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11244:52995":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"12:747:2840":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:6881:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:52908:9662":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:4436:9150":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:15862:2206":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:3317:9364":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:3241:10664":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:1215:10135":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3472:2328":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"22:4119:6535":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:11246:9814":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"22:1614:4422":{"crate_id":22,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:1045:2820":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:6759:9111":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"22:4233:6544":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:5933:9460":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:9886:13127":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:57312:12656":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:3779:9515":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:6202:9416":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"12:853:9239":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"12:925:9240":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4073:6529":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:53286:12639":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"22:5970:7585":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:47619:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3388:9524":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4387:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:1021:2818":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:1236:13121":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"12:1688:10318":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:699:2450":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:37488:168":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"22:3910:6512":{"crate_id":22,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5996:10528":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4448:12127":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:50957:9658":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:13480:13207":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"14:56:11481":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"12:2309:12384":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8976:9263":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:9763:11120":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:6032:10418":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7174:10553":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:1762:11071":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"14:231:10020":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:49185:9828":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5969:3399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9849:60324":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"22:4393:6563":{"crate_id":22,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:8146:2377":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3742:2327":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:14012:9487":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:12189:1702":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:7207:2375":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12028:11566":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2934:170":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11433:19145":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:5379:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7420:10507":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:13180:11870":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13488:11949":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4459:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13574:11974":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2187:9224":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:5433:10378":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"22:504:3522":{"crate_id":22,"path":["libc","unix","group"],"kind":"struct"},"2:45852:9927":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:9186:10755":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13205:11880":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:5568:9613":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:837:9542":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"12:774:2377":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:48681:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"22:3982:6518":{"crate_id":22,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13685:12027":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:13007:9539":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"22:1715:4431":{"crate_id":22,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:5766:10399":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"9:900:12438":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:52104:9653":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:2772:10140":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6605:10500":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:47406:2841":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:10888:9077":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12456:11654":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:1676:4426":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:1637:9249":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"9:686:10173":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:12678:9844":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:2176:9015":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:11129:9131":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:1432:2841":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8649:9422":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"22:154:3191":{"crate_id":22,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:9224:2492":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:48140:2862":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6899:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"22:1657:4425":{"crate_id":22,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:5374:9400":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:3153:216":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6239:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4922:12141":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:786:11122":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:10962:13160":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:3034:59042":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:50056:9865":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:3834:11073":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:14669:13215":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:4888:2331":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:9631:11119":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"14:216:44632":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:1942:2152":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:49320:9130":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13620:11983":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:46258:9990":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:6464:10498":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:50032:9867":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1630:4423":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:7205:10556":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:1622:4422":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5414:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"9:722:10176":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:3351:9511":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13627:11985":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:5384:10375":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6577:10543":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:396:10309":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4473:9145":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"13:0:2173":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:10607:2001":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:51197:9643":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4300:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:50028:9864":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:7250:10560":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:52296:9630":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:50212:12579":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:563:3527":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5228:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"9:963:10239":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:8299:9934":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:48359:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:7978:11105":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:3990:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4293:6549":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4475:9146":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:2773:10681":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:3064:10717":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:8376:2555":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11328:11705":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"14:0:2179":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"22:150:3190":{"crate_id":22,"path":["libc","unix","FILE"],"kind":"enum"},"6:4419:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9759:13125":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:3313:2401":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13733:12028":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:2325:10137":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:48711:12851":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10253:10724":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5522:10385":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:13710:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"22:5151:7162":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"22:4451:6570":{"crate_id":22,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6887:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:7510:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:14929:11133":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:10274:2863":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10001:46332":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6807:10548":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:811:10845":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:2314:10793":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:2753:568":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2251:2794":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:15042:9206":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"22:5351:7176":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11696:11503":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"22:603:3534":{"crate_id":22,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10801:13152":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:46412:11095":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8842:13212":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:5001:2313":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:14823:11131":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12521:11663":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:53312:12641":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:5210:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:15869:2211":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"22:5261:7170":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5273:10416":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4005:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:8348:12471":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:50279:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:8127:57782":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"22:6628:7959":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:45927:2320":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:9162:10782":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4401:6563":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:50909:12581":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:11965:9295":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:1617:4421":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2937:169":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:3951:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:47423:2490":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"22:1514:4410":{"crate_id":22,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:11595:2840":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13547:11967":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:12754:9851":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"22:3949:6515":{"crate_id":22,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11192:9091":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:47997:2336":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:4637:9111":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"22:5177:7164":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13865:12068":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"12:937:9244":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12699:11696":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7884:10493":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13788:12047":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:4594:11076":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:50099:9945":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"12:930:9243":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:13027:9544":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:15861:2205":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:49881:9555":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:49488:9850":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13296:11899":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:14673:9100":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:2381:2329":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:8162:10016":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5274:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:8330:10097":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10331:10763":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:48672:9485":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:9937:9798":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:32278:58550":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"16:6768:10696":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"22:4015:6522":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:15086:9214":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:801:10844":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13386:11922":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:2843:10655":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"9:157:10191":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"22:4005:6521":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:8367:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"22:4185:6540":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:4852:12139":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4255:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:6647:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11434:11479":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:13227:43844":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"20:168:1700":{"crate_id":20,"path":["smallvec","SmallVec"],"kind":"struct"},"6:5953:4348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11714:11504":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:10589:2816":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:47414:2377":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:1079:9189":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:49769:9552":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13331:11909":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11738:11508":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4395:6562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1527:4411":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6636:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:3195:10662":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6091:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2892:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9066:9346":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46482:9687":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4341:6555":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:56042:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:13836:13196":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:24445:9900":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:51216:12583":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:15827:15733":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11082:10756":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"18:744:60328":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10200:13135":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:56055:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24063:43607":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"9:1020:10241":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11045:46286":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5707:10392":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:14509:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:7146:10551":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:2912:10657":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4066:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11287:9403":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:10374:13222":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:7477:10508":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:9726:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:46643:9127":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:511:3522":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:6864:9073":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:432:1717":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:1708:4429":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:49895:9556":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2175:9222":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:5068:2319":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:3699:9139":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:46543:9699":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"12:429:10308":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"20:107:2375":{"crate_id":20,"path":["smallvec","Drain"],"kind":"struct"},"6:4425:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"22:1609:4421":{"crate_id":22,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13377:11921":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:7335:176":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4570:9154":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5436:11312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"12:949:9245":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11116:9128":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:4157:10813":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2192:9225":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:46600:9704":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"9:1056:10234":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:5505:10384":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:46442:9683":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:14000:12100":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:6068:4352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12771:11705":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:23651:9077":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:3714:12118":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:4510:10112":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:22865:9626":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3331:9367":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:51679:12589":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13098:11858":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"22:518:3524":{"crate_id":22,"path":["libc","unix","timeval"],"kind":"struct"},"17:12343:11619":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:47475:178":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10420:10789":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:49121:9823":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"22:6116:7592":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:9689:60317":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"12:1100:9248":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:3918:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:4535:12130":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8030:2818":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:51381:9664":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:4707:9677":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2928:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:8363:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:38732:2690":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:10562:9077":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"22:5461:7186":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:4008:13122":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:51783:12592":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:667:10858":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3754:2840":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46252:9192":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:11388:9820":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"22:6168:7594":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:5456:10379":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:3862:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:1690:4427":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12142:11587":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:6870:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2945:10680":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11337:10753":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10584:10812":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:729:60327":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6780:10547":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46572:9701":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4363:9387":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:15335:55273":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"12:840:9238":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:896:10852":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:3522:9136":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:6166:10531":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1648:9240":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:1669:9242":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2181:9223":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10926:13157":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:3978:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:22806:9181":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46422:13197":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:9574:10758":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13532:11963":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:12010:12721":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"5:5531:10042":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9210:46285":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"22:3943:6514":{"crate_id":22,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:51531:9644":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:53113:9631":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:47398:2840":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:24717:9905":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:23749:9894":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5255:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:49388:9846":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"22:4411:6565":{"crate_id":22,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6999:10549":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6106:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:10503:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7158:10552":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:8183:2377":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:6856:9695":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:6862:9071":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:1311:10833":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"22:4470:6572":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:1934:9221":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:51990:9665":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:4230:12122":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:7735:9293":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:49263:9936":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:10941:9141":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:12051:9276":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1596:4419":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"22:6850:6700":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:0:2177":{"crate_id":11,"path":["adler"],"kind":"module"},"16:7571:10482":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:49130:9824":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:4852:2330":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10317:10749":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:463:60304":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"12:866:2375":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:14461:12865":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:50040:9868":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"22:6077:7588":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:547:10396":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46581:9702":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"22:1668:4426":{"crate_id":22,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:11147:12766":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:3548:9593":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4193:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:2265:9610":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11601:9320":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:46314:9762":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50309:9197":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7279:10705":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"22:6902:6707":{"crate_id":22,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4241:6544":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"15:269:10330":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:8236:9217":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4371:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:3198:9120":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:3645:9132":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:5855:10402":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"13:232:12382":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8928:9441":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:2598:13210":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"17:12659:11691":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:9222:2494":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12408:11649":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:23930:12822":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7333:10505":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12685:11693":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:32037:9957":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10179:11420":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:22954:9077":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11336:9461":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"22:524:2641":{"crate_id":22,"path":["libc","unix","timespec"],"kind":"struct"},"6:1717:4430":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:51727:12590":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:2991:10669":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:53297:12640":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:45737:184":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:24115:9920":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:4671:12133":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:12003:52999":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"16:7786:10496":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:23820:9895":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"7:38:44251":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"0:0:1593":{"crate_id":0,"path":["parking_lot_core"],"kind":"module"},"2:3701:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1457:9250":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13582:11975":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:49061:9817":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6155:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9649:13123":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4317:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:7798:9297":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11026:13165":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4120:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13272:11897":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8806:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"22:4292:6550":{"crate_id":22,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1729:4432":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:3905:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9340:9180":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:5738:9172":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"22:5399:7181":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"12:2025:9222":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10081:10743":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6219:10534":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:48422:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11065:9122":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13924:12084":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"22:5284:7173":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"22:4254:6546":{"crate_id":22,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4478:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:8411:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10599:13147":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"20:393:2381":{"crate_id":20,"path":["smallvec","ToSmallVec"],"kind":"trait"},"2:3143:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:5132:2322":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:6413:10322":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:11451:9305":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6357:10537":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"22:5961:3399":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5407:10376":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:3892:6510":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:47535:2841":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:52183:9641":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:6940:9075":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"22:5540:7217":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5595:10389":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:46334:9933":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:1501:9242":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7264:10501":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10988:13162":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:52447:9654":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"22:3989:6519":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13453:11938":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:3250:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:49594:9855":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13506:11953":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4133:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:6322:9417":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11847:11540":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11937:171":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:5815:10401":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:7891:9603":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:10270:2862":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"12:354:12810":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:3246:2326":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:3522:11334":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:923:10125":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:50048:9870":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:3335:9505":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"22:5247:7149":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12234:11600":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:3615:2387":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"22:1682:4427":{"crate_id":22,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9730:9395":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:7216:10557":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"22:4247:6545":{"crate_id":22,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"22:3970:6517":{"crate_id":22,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10529:12765":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7618:9287":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:11126:9130":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:3218:10663":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:50036:9869":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:5377:9401":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:11169:9812":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:670:3566":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:15361:10334":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:1497:9241":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:14526:53192":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2201:1037":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:5580:10388":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46281:9991":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7303:10561":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"22:1519:4411":{"crate_id":22,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:11992:53137":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:4033:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:610:1370":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:13054:11826":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"22:6192:7596":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:1630:9238":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5978:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:49306:9128":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12275:11606":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8642:9420":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"22:5266:7171":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13258:11892":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11519:11486":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:12169:9349":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13465:11944":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6087:10483":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:11224:12705":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:8741:9431":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:374:10094":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:13571:9304":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"22:3873:6509":{"crate_id":22,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"15:248:10326":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11254:10781":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:9829:628":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"2:10268:2861":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:6252:2379":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:857:10849":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:52654:9674":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:2794:10413":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:4997:2312":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11482:11481":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:5488:10383":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"22:81:3124":{"crate_id":22,"path":["libc","unix","DIR"],"kind":"enum"},"12:377:10310":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12582:11672":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4013:6521":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:4301:2841":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12168:11427":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:25121:9747":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11555:11488":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:10543:9484":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:3338:10409":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4449:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"9:692:10175":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:12332:13208":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:3323:9495":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:3074:9077":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"22:1525:4412":{"crate_id":22,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:739:13115":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46473:9686":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"12:2032:9223":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9005:46280":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"12:812:9242":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:49574:9131":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5717:10394":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5191:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:46632:9706":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:15871:2213":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:22565:58430":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:15191:9093":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:3489:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:48693:9315":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9528:9128":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:8107:10127":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11628:11495":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:9063:9428":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:2045:9225":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:3043:59045":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:3343:9373":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6569:10689":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6214:7597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"22:5189:7166":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5346:10484":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:5730:9170":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:2039:9224":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:7821:9725":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:27932:9722":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13540:11966":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:10699:9126":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"17:13590:11977":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3195:2779":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4511:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10558:13142":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:4704:9105":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11665:11501":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:53238:9634":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1540:4413":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11542:9317":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"22:3860:6508":{"crate_id":22,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6110:10524":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:15251:9401":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4523:6577":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:48656:9256":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:5594:766":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12494:11659":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4762:12136":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11056:9155":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"22:3854:6507":{"crate_id":22,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10407:10790":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7236:10559":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4345:2377":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:47829:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:3800:12120":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"22:5371:7178":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6100:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:11871:9834":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:53277:12638":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11962:11556":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:15868:2210":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:10410:13194":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:2938:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:49139:9825":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:14949:1702":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:12671:11127":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"22:6856:6701":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:7120:19144":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"11:54:10294":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:15272:9408":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"22:4175:6539":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:8132:58915":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:5241:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:11374:9819":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"22:4423:6567":{"crate_id":22,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1723:4431":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:48480:2858":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:2009:2377":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:14158:9145":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13446:11937":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"22:4264:6547":{"crate_id":22,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6085:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:15879:2221":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12010:11565":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"9:234:10199":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:51038:9671":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10106:10827":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12982:11768":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:46329:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:46204:9994":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:12738:9848":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:13016:9542":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:531:2641":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:6005:3308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4127:6535":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:14979:12871":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6269:10536":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4434:9149":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:1623:9248":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6051:4349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:1665:4425":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46214:9995":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:6554:10542":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:8477:192":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12287:11607":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3140:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"9:809:9315":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"12:2315:60303":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:6185:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:4304:12123":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"22:4503:6575":{"crate_id":22,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3995:9337":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"22:1588:4419":{"crate_id":22,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:3324:2840":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8196:11105":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"22:1700:4429":{"crate_id":22,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4023:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:50044:9872":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:53391:12646":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:2968:10658":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"22:6098:7591":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4203:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:5632:10390":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:14073:191":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"22:5451:7185":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"22:6083:7589":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:12936:9303":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:9896:60322":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:5407:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11077:9123":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:49916:9558":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11329:9083":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:3041:10660":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6962:9070":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13912:12082":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46859:9154":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10975:13161":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6176:10532":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:24128:9919":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:48444:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:2543:10760":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:51500:9640":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5998:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46879:12847":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:49929:12908":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"16:7226:10558":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:50265:9879":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:4438:2840":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11809:11532":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:537:3525":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1161:15731":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:7195:10555":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:46:12388":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:6136:10525":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:15860:2204":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12645:11690":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11750:11509":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:0:2174":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"22:1721:4432":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:3881:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:7439:11073":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4477:12128":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"}},"external_crates":{"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"smallvec","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"22":{"name":"libc","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}