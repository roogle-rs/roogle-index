{"root":"0:0:1614","crate_version":"0.9.3","includes_private":false,"index":{"0:112:1602":{"id":"0:112:1602","crate_id":0,"name":"unpark_requeue","span":{"filename":"src/parking_lot.rs","begin":[880,0],"end":[983,1]},"visibility":"public","docs":"Removes all threads from the queue associated with `key_from`, optionally\nunparks the first one and requeues the rest onto the queue associated with\n`key_to`.\n\nThe `validate` function is called while both queues are locked. Its return\nvalue will determine which operation is performed, or whether the operation\nshould be aborted. See `RequeueOp` for details about the different possible\nreturn values.\n\nThe `callback` function is also called while both queues are locked. It is\npassed the `RequeueOp` returned by `validate` and an `UnparkResult`\nindicating whether a thread was unparked and whether there are threads still\nparked in the new queue. This `UnparkResult` value is also returned by\n`unpark_requeue`.\n\nThe `callback` function should return an `UnparkToken` value which will be\npassed to the thread that is unparked. If no thread is unparked then the\nreturned value is ignored.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.\n\nThe `validate` and `callback` functions are called while the queue is locked\nand must not panic or call into any function in `parking_lot`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key_from",{"kind":"primitive","inner":"usize"}],["key_to",{"kind":"primitive","inner":"usize"}],["validate",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"RequeueOp","id":"0:336:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["callback",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"RequeueOp","id":"0:336:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl FnOnce() -> RequeueOp","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"RequeueOp","id":"0:336:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl FnOnce(RequeueOp, UnparkResult) -> UnparkToken","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"RequeueOp","id":"0:336:1606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:10510:142":{"id":"2:10510:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10511:715","2:10513:14028"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:120:1977":{"id":"0:120:1977","crate_id":0,"name":"acquire_resource","span":{"filename":"src/parking_lot.rs","begin":[1104,4],"end":[1107,5]},"visibility":"public","docs":"Acquire a resource identified by key in the deadlock detector\nNoop if deadlock_detection feature isn't enabled.\n\n# Safety\n\nCall after the resource is acquired","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_key",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"1:6821:9123":{"id":"1:6821:9123","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6822:54137","1:6823:54138"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10520:146":{"id":"2:10520:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10521:652","2:10522:2305","2:10523:55834","2:10524:55835","2:10525:55836","2:10526:55837","2:10527:55838","2:10528:55839","2:10529:55840","2:10530:55841","2:10531:55842","2:10532:55843","2:10533:55844","2:10534:55845","2:10535:55846","2:10536:1530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13382:793":{"id":"2:13382:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13502:54083":{"id":"2:13502:54083","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13446:54721":{"id":"2:13446:54721","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15939:2222","str::rsplitn":"1:15945:2227","self::pattern":"2:13018:9559"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49511:9846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14130:141":{"id":"2:14130:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14131:277","2:14132:518","2:14133:280","2:14134:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:378:1539":{"id":"0:378:1539","crate_id":0,"name":"0","span":{"filename":"src/parking_lot.rs","begin":[550,23],"end":[550,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:296:1604":{"id":"0:296:1604","crate_id":0,"name":"ParkResult","span":{"filename":"src/parking_lot.rs","begin":[471,0],"end":[480,1]},"visibility":"public","docs":"Result of a park operation.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:297:1837","0:300:1839","0:302:1841"],"impls":[]}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,48],"end":[66,68]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::DEFAULT_UNPARK_TOKEN","name":"DEFAULT_UNPARK_TOKEN","id":"0:101:1610","glob":false}},"2:3150:75":{"id":"2:3150:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9239:2515":{"id":"2:9239:2515","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:336:1606":{"id":"0:336:1606","crate_id":0,"name":"RequeueOp","span":{"filename":"src/parking_lot.rs","begin":[518,0],"end":[533,1]},"visibility":"public","docs":"Operation that `unpark_requeue` should perform.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:337:1860","0:339:1862","0:341:1864","0:343:1866","0:345:1868"],"impls":[]}},"2:13406:9904":{"id":"2:13406:9904","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49377:9868","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13503:54084":{"id":"2:13503:54084","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3326:2422":{"id":"2:3326:2422","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3328:181","2:3329:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[66,28],"end":[66,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::DEFAULT_PARK_TOKEN","name":"DEFAULT_PARK_TOKEN","id":"0:102:1609","glob":false}},"2:13487:54726":{"id":"2:13487:54726","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:60683":{"id":"5:6103:60683","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300:1839":{"id":"0:300:1839","crate_id":0,"name":"Invalid","span":{"filename":"src/parking_lot.rs","begin":[476,4],"end":[476,11]},"visibility":"default","docs":"The validation callback returned false.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:391:1605":{"id":"0:391:1605","crate_id":0,"name":"ParkToken","span":{"filename":"src/parking_lot.rs","begin":[554,0],"end":[554,32]},"visibility":"public","docs":"A value associated with a parked thread which can be used by `unpark_filter`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:393:1539"],"impls":[]}},"2:9240:2514":{"id":"2:9240:2514","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:60680":{"id":"5:6084:60680","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1738","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:10042","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1738","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:10042","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:377:2399":{"id":"20:377:2399","crate_id":20,"name":"Array","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["20:378:2736","20:379:1302"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3796:9509":{"id":"2:3796:9509","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2910:124":{"id":"2:2910:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3321:1726":{"id":"2:3321:1726","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:181","2:3324:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6493:9218":{"id":"1:6493:9218","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6494:1797","1:6495:3417","1:6496:57177","1:6497:57178","1:6498:57179","1:6499:1795"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:393:2402":{"id":"20:393:2402","crate_id":20,"name":"ToSmallVec","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:395:61257"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Array","id":"20:377:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13481:60051":{"id":"2:13481:60051","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13423:2767":{"id":"2:13423:2767","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47440:176","prim@char":"1:15939:2222","self::pattern":"2:13018:9559"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13387:60034":{"id":"2:13387:60034","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15945:2227"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3156:149":{"id":"2:3156:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:2726"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13414:54725":{"id":"2:13414:54725","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:2349":{"id":"2:3489:2349","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3490:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3476:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8582:157":{"id":"2:8582:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8583:2736","2:8584:922","2:8585:2737","2:8588:2738","2:8589:495","2:8591:2739","2:8594:2740","2:8595:2741","2:8596:2742","2:8597:2743","2:8599:2744","2:8601:2745","2:8602:2746","2:8604:841","2:8607:2052","2:8614:1967","2:8616:2747","2:8619:2034","2:8620:2748","2:8621:2749","2:8623:2750","2:8625:2751","2:8628:1306","2:8629:2006","2:8630:1911","2:8634:2752","2:8637:2753","2:8638:2754","2:8639:2755","2:8641:2756","2:8642:2030","2:8644:2757","2:8647:2758","2:8649:2759","2:8659:2760","2:8674:2761","2:8676:2762","2:8680:2763","2:8689:2764","2:8692:2765","2:8694:2766","2:8697:276","2:8704:294","2:8711:2767","2:8718:2768","2:8727:2769","2:8737:1014","2:8744:2010","2:8751:2718","2:8752:2716","2:8753:2720","2:8765:2719","2:8772:2035","2:8784:2717","2:8791:2770","2:8792:2771","2:8797:2772","2:8800:2036","2:8803:2028","2:8804:2773","2:8806:2774","2:8808:415","2:8811:2775","2:8814:997","2:8817:2776","2:8820:604","2:8823:2777","2:8826:907","2:8828:826","2:8830:792","2:8832:713","2:8834:696","2:8836:2778","2:8837:2779","2:8845:2780"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13407:9588":{"id":"2:13407:9588","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49383:9869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5831:9088":{"id":"1:5831:9088","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5832:8913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5687:9135":{"id":"1:5687:9135","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5688:10785","1:5689:54145"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6591:9137":{"id":"1:6591:9137","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6592:57220","1:6593:57221"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13048:9563":{"id":"2:13048:9563","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13412:60037":{"id":"2:13412:60037","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49671:9882","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:60684":{"id":"5:6104:60684","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:1738"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1738","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:10042","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1614":{"id":"0:0:1614","crate_id":0,"name":"parking_lot_core","span":{"filename":"src/lib.rs","begin":[8,0],"end":[67,33]},"visibility":"public","docs":"This library exposes a low-level API for creating your own efficient\nsynchronization primitives.\n\n# The parking lot\n\nTo keep synchronization primitives small, all thread queuing and suspending\nfunctionality is offloaded to the *parking lot*. The idea behind this is based\non the Webkit [`WTF::ParkingLot`](https://webkit.org/blog/6161/locking-in-webkit/)\nclass, which essentially consists of a hash table mapping of lock addresses\nto queues of parked (sleeping) threads. The Webkit parking lot was itself\ninspired by Linux [futexes](http://man7.org/linux/man-pages/man2/futex.2.html),\nbut it is more powerful since it allows invoking callbacks while holding a\nqueue lock.\n\nThere are two main operations that can be performed on the parking lot:\n\n - *Parking* refers to suspending the thread while simultaneously enqueuing it\non a queue keyed by some address.\n- *Unparking* refers to dequeuing a thread from a queue keyed by some address\nand resuming it.\n\nSee the documentation of the individual functions for more details.\n\n# Building custom synchronization primitives\n\nBuilding custom synchronization primitives is very simple since the parking\nlot takes care of all the hard parts for you. A simple example for a\ncustom primitive would be to integrate a `Mutex` inside another data type.\nSince a mutex only requires 2 bits, it can share space with other data.\nFor example, one could create an `ArcMutex` type that combines the atomic\nreference count and the two mutex bits in the same atomic word.","links":{},"attrs":["#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:240","0:244","0:247","0:250","0:253","0:256","0:260","0:263","0:266","0:269","0:272","0:275","0:279","0:282","0:285"],"is_stripped":false}},"1:5020:9104":{"id":"1:5020:9104","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5021:2861","1:5022:57902"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8453:2575":{"id":"2:8453:2575","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8454:793","2:8455:2100"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8343:9552":{"id":"2:8343:9552","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8345:2773"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3373:9513":{"id":"2:3373:9513","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:181","2:3375:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3424:9533":{"id":"2:3424:9533","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3426:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,62],"end":[64,73]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::UnparkToken","name":"UnparkToken","id":"0:376:1608","glob":false}},"0:297:1837":{"id":"0:297:1837","crate_id":0,"name":"Unparked","span":{"filename":"src/parking_lot.rs","begin":[473,4],"end":[473,25]},"visibility":"default","docs":"We were unparked by another thread with the given token.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:8863:2863":{"id":"2:8863:2863","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13504:54085":{"id":"2:13504:54085","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13493:60053":{"id":"2:13493:60053","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10272:109":{"id":"2:10272:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13392:304":{"id":"2:13392:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15956:2236","str::as_mut_ptr":"1:15945:2227"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13461:60042":{"id":"2:13461:60042","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8428:120","prim@char":"1:15939:2222","str::matches":"1:15945:2227","self::pattern":"2:13018:9559"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49629:9881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10285:2882":{"id":"2:10285:2882","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10286:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10291:2884":{"id":"2:10291:2884","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12465:10020":{"id":"2:12465:10020","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12466:2736","2:12467:58595"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23432:22038":{"id":"2:23432:22038","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23433:58732","2:23434:58733","2:23435:58734"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23427:9606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13413:13999":{"id":"2:13413:13999","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49699:9885","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1609":{"id":"0:102:1609","crate_id":0,"name":"DEFAULT_PARK_TOKEN","span":{"filename":"src/parking_lot.rs","begin":[560,0],"end":[560,55]},"visibility":"public","docs":"A default park token to use.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"ParkToken","id":"0:391:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"2:3263:106":{"id":"2:3263:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13505:60055":{"id":"2:13505:60055","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15939:2222"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49706:9886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[61,0],"end":[61,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::deadlock","name":"deadlock","id":"0:119:1597","glob":false}},"2:13470:60045":{"id":"2:13470:60045","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,37],"end":[64,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::RequeueOp","name":"RequeueOp","id":"0:336:1606","glob":false}},"2:10289:189":{"id":"2:10289:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10290:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13385:60033":{"id":"2:13385:60033","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,48],"end":[64,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::UnparkResult","name":"UnparkResult","id":"0:316:1607","glob":false}},"2:3088:9611":{"id":"2:3088:9611","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3087:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4742:9170":{"id":"1:4742:9170","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4743:53933","1:4744:53934","1:4745:53936","1:4747:9169","1:4748:53935","1:4750:53937","1:4751:10369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4660:9102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:363:1875":{"id":"0:363:1875","crate_id":0,"name":"Stop","span":{"filename":"src/parking_lot.rs","begin":[545,4],"end":[545,8]},"visibility":"default","docs":"Don't unpark the thread and stop scanning the list of parked threads.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:4717:2875":{"id":"1:4717:2875","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4718:2305","1:4719:58445","1:4721:58446","1:4722:10294","1:4723:58447","1:4724:13698","1:4725:54255","1:4734:2756"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3262:217":{"id":"2:3262:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3506:131":{"id":"2:3506:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3565:9639":{"id":"2:3565:9639","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3567:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3561:9263","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,28],"end":[62,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::park","name":"park","id":"0:103:1598","glob":false}},"2:13449:54723":{"id":"2:13449:54723","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15939:2222","self::pattern":"2:13018:9559","str::splitn":"1:15945:2227"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49529:9847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1610":{"id":"0:101:1610","crate_id":0,"name":"DEFAULT_UNPARK_TOKEN","span":{"filename":"src/parking_lot.rs","begin":[557,0],"end":[557,61]},"visibility":"public","docs":"A default unpark token to use.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"expr":"_","value":null,"is_literal":false}},"2:10293:2885":{"id":"2:10293:2885","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10294:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5819:9094":{"id":"1:5819:9094","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:57346"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3380:9233":{"id":"2:3380:9233","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:181","2:3383:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3503:130":{"id":"2:3503:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3506:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23099:9702":{"id":"2:23099:9702","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23736:9550","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23090:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3411:9526":{"id":"2:3411:9526","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13490:60052":{"id":"2:13490:60052","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406:1611":{"id":"0:406:1611","crate_id":0,"name":"SpinWait","span":{"filename":"src/spinwait.rs","begin":[22,0],"end":[24,1]},"visibility":"public","docs":"A counter used to perform exponential backoff in spin loops.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:4767:9510":{"id":"2:4767:9510","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4768:2736","2:4769:59087","2:4770:2738"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3159:135":{"id":"2:3159:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5769:9091":{"id":"1:5769:9091","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5770:8913","1:5771:12892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8393:2576":{"id":"2:8393:2576","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8395:2733","2:8397:2734","2:8398:2735"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13028:9558":{"id":"2:13028:9558","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13030:9561","2:13031:59477","2:13032:59478","2:13033:59479","2:13034:59481","2:13035:59480","2:13036:59482"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:343:1866":{"id":"0:343:1866","crate_id":0,"name":"UnparkOne","span":{"filename":"src/parking_lot.rs","begin":[529,4],"end":[529,13]},"visibility":"default","docs":"Unpark one thread and leave the rest parked. No requeuing is done.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:108:1601":{"id":"0:108:1601","crate_id":0,"name":"unpark_one","span":{"filename":"src/parking_lot.rs","begin":[728,0],"end":[791,1]},"visibility":"public","docs":"Unparks one thread from the queue associated with the given key.\n\nThe `callback` function is called while the queue is locked and before the\ntarget thread is woken up. The `UnparkResult` argument to the function\nindicates whether a thread was found in the queue and whether this was the\nlast thread in the queue. This value is also returned by `unpark_one`.\n\nThe `callback` function should return an `UnparkToken` value which will be\npassed to the thread that is unparked. If no thread is unparked then the\nreturned value is ignored.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.\n\nThe `callback` function is called while the queue is locked and must not\npanic or call into any function in `parking_lot`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"usize"}],["callback",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl FnOnce(UnparkResult) -> UnparkToken","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:3356:2423":{"id":"2:3356:2423","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3358:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:60682":{"id":"5:6091:60682","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13394:1808":{"id":"2:13394:1808","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:2292"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2951:184":{"id":"2:2951:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2953:997","2:2954:826","2:2955:792","2:2956:713","2:2957:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3415:9528":{"id":"2:3415:9528","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22902:9216":{"id":"2:22902:9216","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22892:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:158":{"id":"0:158","crate_id":0,"name":null,"span":{"filename":"src/thread_parker/mod.rs","begin":[85,34],"end":[85,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::imp::ThreadParker","name":"ThreadParker","id":"0:433:1713","glob":false}},"0:3:1592":{"id":"0:3:1592","crate_id":0,"name":"parking_lot","span":{"filename":"src/parking_lot.rs","begin":[7,0],"end":[1692,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:119:1597","0:296:1604","0:316:1607","0:336:1606","0:358:1603","0:376:1608","0:391:1605","0:101:1610","0:102:1609","0:103:1598","0:108:1601","0:110:1599","0:112:1602","0:115:1600"],"is_stripped":true}},"2:13043:9562":{"id":"2:13043:9562","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13045:2727","2:13046:58958","2:13047:58959"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13037:9561","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13440:60038":{"id":"2:13440:60038","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:15945:2227","self::pattern":"2:13018:9559","prim@char":"1:15939:2222","str::split":"1:15945:2227","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49457:9873","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13731:138":{"id":"2:13731:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13732:181","2:13733:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3419:9530":{"id":"2:3419:9530","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3500:1785":{"id":"2:3500:1785","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3501:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5681:9133":{"id":"1:5681:9133","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5682:54115","1:5683:10140"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3561:9263":{"id":"2:3561:9263","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3563:181","2:3564:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:316:1607":{"id":"0:316:1607","crate_id":0,"name":"UnparkResult","span":{"filename":"src/parking_lot.rs","begin":[496,0],"end":[514,1]},"visibility":"public","docs":"Result of an unpark operation.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":["0:317:1846","0:318:1848","0:319:1851","0:320:1855"],"impls":[]}},"2:8860:2406":{"id":"2:8860:2406","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,14],"end":[64,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::ParkResult","name":"ParkResult","id":"0:296:1604","glob":false}},"2:13431:53937":{"id":"2:13431:53937","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13018:9559","`DoubleEndedIterator`":"2:8428:120","str::rsplit":"1:15945:2227","str::split_whitespace":"1:15945:2227","prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49407:9174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:54082":{"id":"5:6107:54082","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15945:2227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13478:60050":{"id":"2:13478:60050","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13048:9563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:14254":{"id":"2:13410:14254","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15945:2227"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49690:9884","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3476:116":{"id":"2:3476:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:221","2:3478:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10283:2881":{"id":"2:10283:2881","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10284:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:337:1860":{"id":"0:337:1860","crate_id":0,"name":"Abort","span":{"filename":"src/parking_lot.rs","begin":[520,4],"end":[520,9]},"visibility":"default","docs":"Abort the operation without doing anything.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:318:1848":{"id":"0:318:1848","crate_id":0,"name":"requeued_threads","span":{"filename":"src/parking_lot.rs","begin":[501,4],"end":[501,31]},"visibility":"public","docs":"The number of threads that were requeued.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"1:5761:9090":{"id":"1:5761:9090","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5762:8913","1:5763:54282","1:5764:54283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121:1983":{"id":"0:121:1983","crate_id":0,"name":"release_resource","span":{"filename":"src/parking_lot.rs","begin":[1120,4],"end":[1123,5]},"visibility":"public","docs":"Release a resource identified by key in the deadlock detector.\nNoop if deadlock_detection feature isn't enabled.\n\n# Panics\n\nPanics if the resource was already released or wasn't acquired in this thread.\n\n# Safety\n\nCall before the resource is released","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_key",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:23427:9606":{"id":"2:23427:9606","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23428:1268","2:23429:1267","2:23430:1265","2:23431:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22839:9609","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13455:60041":{"id":"2:13455:60041","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3390:9235":{"id":"2:3390:9235","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3392:181","2:3393:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3984:68":{"id":"2:3984:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3985:1426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:57918","1:2579:1989","1:2580:57917","1:2581:57919","1:2582:55932"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13472:60046":{"id":"2:13472:60046","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:1597":{"id":"0:119:1597","crate_id":0,"name":"deadlock","span":{"filename":"src/parking_lot.rs","begin":[1090,0],"end":[1090,16]},"visibility":"public","docs":"\\[Experimental\\] Deadlock detection\n\nEnabled via the `deadlock_detection` feature flag.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:120:1977","0:121:1983"],"is_stripped":false}},"2:10287:2883":{"id":"2:10287:2883","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10288:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13507:9121":{"id":"2:13507:9121","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15939:2222"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49715:9122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8380:136":{"id":"2:8380:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3258:2573":{"id":"2:3258:2573","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:376:1608":{"id":"0:376:1608","crate_id":0,"name":"UnparkToken","span":{"filename":"src/parking_lot.rs","begin":[550,0],"end":[550,34]},"visibility":"public","docs":"A value which is passed from an unparker to a parked thread.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:378:1539"],"impls":[]}},"1:4735:9151":{"id":"1:4735:9151","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4736:58196","1:4737:3252","1:4738:58197","1:4739:58198"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13476:60048":{"id":"2:13476:60048","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2850:2404":{"id":"2:2850:2404","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:53929"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3162:228":{"id":"2:3162:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164:127","2:3165:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:60680","5:6085:2799","5:6088:60681","5:6091:60682","5:6103:60683","5:6104:60684","5:6105:2405","5:6106:54081","5:6107:54082"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12957:9273":{"id":"2:12957:9273","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12958:126","2:12959:54066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7908:9540":{"id":"2:7908:9540","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7909:59513","2:7910:59514","2:7911:59511","2:7912:59509","2:7913:59515","2:7914:59512","2:7915:59510"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6471:9125":{"id":"1:6471:9125","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6472:8517","1:6473:8518","1:6474:13244","1:6475:57993","1:6477:57997","1:6479:57994","1:6480:57995","1:6482:57996"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3166:227":{"id":"2:3166:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:127","2:3169:1413"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1079:9119":{"id":"1:1079:9119","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:2782","1:1081:10027","1:1082:54081","1:1083:54082","1:1084:54083","1:1085:54084","1:1086:54085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3331:9615":{"id":"2:3331:9615","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:181","2:3334:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13501:10027":{"id":"2:13501:10027","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5833:10036":{"id":"5:5833:10036","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13398:54688":{"id":"2:13398:54688","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2905:183":{"id":"2:2905:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2907:604","2:2908:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:22713:9608":{"id":"2:22713:9608","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22714:9605","2:22715:58980","2:22716:59410","2:22717:59411","2:22718:59412","2:22719:6298","2:22720:59413","2:22721:59414","2:22722:59415","2:22723:59416","2:22724:59417","2:22725:59418","2:22726:59419","2:22727:59420","2:22728:14050","2:22729:59421","2:22730:59020","2:22731:13389","2:22732:58733","2:22733:58732","2:22734:58734","2:22735:58981","2:22736:58982","2:22737:58983","2:22738:58984"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13467:60044":{"id":"2:13467:60044","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15939:2222","str::match_indices":"1:15945:2227","`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:9559"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49575:9878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3261:218":{"id":"2:3261:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:103:1598":{"id":"0:103:1598","crate_id":0,"name":"park","span":{"filename":"src/parking_lot.rs","begin":[591,0],"end":[706,1]},"visibility":"public","docs":"Parks the current thread in the queue associated with the given key.\n\nThe `validate` function is called while the queue is locked and can abort\nthe operation by returning false. If `validate` returns true then the\ncurrent thread is appended to the queue and the queue is unlocked.\n\nThe `before_sleep` function is called after the queue is unlocked but before\nthe thread is put to sleep. The thread will then sleep until it is unparked\nor the given timeout is reached.\n\nThe `timed_out` function is also called while the queue is locked, but only\nif the timeout was reached. It is passed the key of the queue it was in when\nit timed out, which may be different from the original key if\n`unpark_requeue` was called. It is also passed a bool which indicates\nwhether it was the last thread in the queue.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.\n\nThe `validate` and `timed_out` functions are called while the queue is\nlocked and must not panic or call into any function in `parking_lot`.\n\nThe `before_sleep` function is called outside the queue lock and is allowed\nto call `unpark_one`, `unpark_all`, `unpark_requeue` or `unpark_filter`, but\nit is not allowed to call `park` or panic.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"usize"}],["validate",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["before_sleep",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["timed_out",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"bool"}],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["park_token",{"kind":"resolved_path","inner":{"name":"ParkToken","id":"0:391:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],["timeout",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Instant","id":"1:12220:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"ParkResult","id":"0:296:1604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl FnOnce() -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl FnOnce()","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl FnOnce(usize, bool)","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"bool"}],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:3401:9521":{"id":"2:3401:9521","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6105:2405":{"id":"5:6105:2405","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:60681":{"id":"5:6088:60681","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13452:60040":{"id":"2:13452:60040","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13477:60049":{"id":"2:13477:60049","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[67,0],"end":[67,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::spinwait::SpinWait","name":"SpinWait","id":"0:406:1611","glob":false}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,34],"end":[62,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::unpark_all","name":"unpark_all","id":"0:110:1599","glob":false}},"2:13405:54710":{"id":"2:13405:54710","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15945:2227"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13383:2100":{"id":"2:13383:2100","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10281:2880":{"id":"2:10281:2880","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10282:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8347:9554":{"id":"2:8347:9554","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8349:2774"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3360:9612":{"id":"2:3360:9612","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3362:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13496:60054":{"id":"2:13496:60054","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23051:22019":{"id":"2:23051:22019","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:12407","2:23053:58900","2:23054:58901"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23044:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6106:54081":{"id":"5:6106:54081","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15945:2227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,26],"end":[64,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::ParkToken","name":"ParkToken","id":"0:391:1605","glob":false}},"2:13464:60043":{"id":"2:13464:60043","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222","str::rmatch_indices":"1:15945:2227","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49557:9877","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13384:14048":{"id":"2:13384:14048","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4035:9147":{"id":"2:4035:9147","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4036:55932"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13417:54406":{"id":"2:13417:54406","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3713:224":{"id":"2:3713:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3714:181","2:3715:9503","2:3716:686","2:3717:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3718:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3368:9630":{"id":"2:3368:9630","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5809:9093":{"id":"1:5809:9093","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5810:54119","1:5811:54120","1:5812:54121","1:5813:54122"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10279:119":{"id":"2:10279:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10280:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:136:1594":{"id":"0:136:1594","crate_id":0,"name":"thread_parker","span":{"filename":"src/thread_parker/mod.rs","begin":[1,0],"end":[85,62]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:155","0:158","0:161"],"is_stripped":true}},"2:3385:9234":{"id":"2:3385:9234","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3387:181","2:3388:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13427:2732":{"id":"2:13427:2732","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13018:9559","`None`":"2:47440:176","prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:299:1539":{"id":"0:299:1539","crate_id":0,"name":"0","span":{"filename":"src/parking_lot.rs","begin":[473,13],"end":[473,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:13400:54689":{"id":"2:13400:54689","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13484:13654":{"id":"2:13484:13654","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15939:2222","self::pattern":"2:13018:9559"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3701:9943":{"id":"2:3701:9943","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3632:2408","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5823:9095":{"id":"1:5823:9095","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5824:57212"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13396:10895":{"id":"2:13396:10895","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3352:2421":{"id":"2:3352:2421","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13037:9561":{"id":"2:13037:9561","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13039:9581","2:13040:922","2:13041:59834","2:13042:59835"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4660:9102":{"id":"1:4660:9102","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4661:2800","1:4662:57724","1:4664:57725","1:4665:57726","1:4666:9165","1:4667:13613","1:4668:13612","1:4670:57727","1:4671:2756","1:4672:9350","1:4673:2743","1:4675:2006"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22839:9609":{"id":"2:22839:9609","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22840:9605","2:22841:1245","2:22842:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:320:1855":{"id":"0:320:1855","crate_id":0,"name":"be_fair","span":{"filename":"src/parking_lot.rs","begin":[510,4],"end":[510,21]},"visibility":"public","docs":"This is set to true on average once every 0.5ms for any given key. It\nshould be used to switch to a fair unlocking mechanism for a particular\nunlock.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"2:22766:9601":{"id":"2:22766:9601","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22767:9605","2:22768:58980","2:22769:1225","2:22770:1226","2:22771:6298","2:22772:59017","2:22773:14213","2:22774:59018","2:22775:59019","2:22776:59020","2:22777:58981","2:22778:58982","2:22779:58983","2:22780:58984","2:22781:58985","2:22782:58986","2:22783:58987"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:123:1593":{"id":"0:123:1593","crate_id":0,"name":"spinwait","span":{"filename":"src/spinwait.rs","begin":[8,0],"end":[74,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:406:1611"],"is_stripped":true}},"1:9371:9213":{"id":"1:9371:9213","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9372:57321","1:9373:57322","1:9374:57323","1:9375:57324","1:9376:57325","1:9377:44695","1:9378:57320"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:115:1600":{"id":"0:115:1600","crate_id":0,"name":"unpark_filter","span":{"filename":"src/parking_lot.rs","begin":[1012,0],"end":[1085,1]},"visibility":"public","docs":"Unparks a number of threads from the front of the queue associated with\n`key` depending on the results of a filter function which inspects the\n`ParkToken` associated with each thread.\n\nThe `filter` function is called for each thread in the queue or until\n`FilterOp::Stop` is returned. This function is passed the `ParkToken`\nassociated with a particular thread, which is unparked if `FilterOp::Unpark`\nis returned.\n\nThe `callback` function is also called while both queues are locked. It is\npassed an `UnparkResult` indicating the number of threads that were unparked\nand whether there are still parked threads in the queue. This `UnparkResult`\nvalue is also returned by `unpark_filter`.\n\nThe `callback` function should return an `UnparkToken` value which will be\npassed to all threads that are unparked. If no thread is unparked then the\nreturned value is ignored.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.\n\nThe `filter` and `callback` functions are called while the queue is locked\nand must not panic or call into any function in `parking_lot`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"usize"}],["filter",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3506:131","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"ParkToken","id":"0:391:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"FilterOp","id":"0:358:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}],["callback",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}]],"output":{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(ParkToken) -> FilterOp","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3506:131","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"ParkToken","id":"0:391:1605","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"FilterOp","id":"0:358:1603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl FnOnce(UnparkResult) -> UnparkToken","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"UnparkResult","id":"0:316:1607","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}],"output":{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"2:13411:10369":{"id":"2:13411:10369","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49661:9175","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,46],"end":[62,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::unpark_filter","name":"unpark_filter","id":"0:115:1600","glob":false}},"2:3395:9518":{"id":"2:3395:9518","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13474:60047":{"id":"2:13474:60047","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,61],"end":[62,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::unpark_one","name":"unpark_one","id":"0:108:1601","glob":false}},"2:22802:9755":{"id":"2:22802:9755","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22803:58980","2:22804:1225","2:22805:1226","2:22806:58981","2:22807:58982","2:22808:58983","2:22809:58984","2:22810:58985","2:22811:58986","2:22812:58987"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5775:9092":{"id":"1:5775:9092","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:8541","1:5777:57346","1:5778:8913","1:5779:57347","1:5780:8517","1:5781:8518","1:5782:57348","1:5783:1302","1:5784:57349","1:5785:57350","1:5786:57351","1:5787:57352","1:5788:57353","1:5789:57354","1:5790:57355","1:5791:57356"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14204:9334":{"id":"2:14204:9334","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14205:54155","2:14206:54156","2:14207:2395","2:14208:54157","2:14209:54158","2:14210:54159","2:14211:2756"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:302:1841":{"id":"0:302:1841","crate_id":0,"name":"TimedOut","span":{"filename":"src/parking_lot.rs","begin":[479,4],"end":[479,12]},"visibility":"default","docs":"The timeout expired.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3632:2408":{"id":"2:3632:2408","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:59817","2:3635:59818","2:3636:54725"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6085:2799":{"id":"5:6085:2799","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:393:1539":{"id":"0:393:1539","crate_id":0,"name":"0","span":{"filename":"src/parking_lot.rs","begin":[554,21],"end":[554,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:317:1846":{"id":"0:317:1846","crate_id":0,"name":"unparked_threads","span":{"filename":"src/parking_lot.rs","begin":[498,4],"end":[498,31]},"visibility":"public","docs":"The number of threads that were unparked.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:345:1868":{"id":"0:345:1868","crate_id":0,"name":"RequeueOne","span":{"filename":"src/parking_lot.rs","begin":[532,4],"end":[532,14]},"visibility":"default","docs":"Requeue one thread and leave the rest parked on the original queue.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8428:120":{"id":"2:8428:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8429:2727","2:8430:2728","2:8431:2729","2:8432:2730","2:8436:2731","2:8439:2732"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:341:1864":{"id":"0:341:1864","crate_id":0,"name":"RequeueAll","span":{"filename":"src/parking_lot.rs","begin":[526,4],"end":[526,14]},"visibility":"default","docs":"Requeue all threads onto the target queue.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13409:14256":{"id":"2:13409:14256","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15945:2227"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49681:9883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8867:9538":{"id":"2:8867:9538","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7908:9540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10222:2875":{"id":"2:10222:2875","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10223:1530","2:10224:54256","2:10226:54255"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23736:9550":{"id":"2:23736:9550","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23737:9605"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23732:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3342:9620":{"id":"2:3342:9620","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[64,4],"end":[64,12]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::FilterOp","name":"FilterOp","id":"0:358:1603","glob":false}},"2:13404:54709":{"id":"2:13404:54709","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15945:2227"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8384:151":{"id":"2:8384:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8385:2736","2:8386:2398","2:8387:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13408:9350":{"id":"2:13408:9350","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49393:9172","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6893:9099":{"id":"1:6893:9099","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6894:58328"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3509:132":{"id":"2:3509:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:181","2:3512:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3407:9524":{"id":"2:3407:9524","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3409:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6719:9092":{"id":"1:6719:9092","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6720:57227","1:6721:8833","1:6722:8834","1:6723:8836","1:6724:8835","1:6725:8837","1:6726:8838","1:6727:8840","1:6728:8494","1:6729:8843","1:6730:8844","1:6731:8845","1:6732:8846","1:6733:8847","1:6734:8848","1:6735:8841","1:6736:8842"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13746:150":{"id":"2:13746:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13747:181","2:13748:150","2:13749:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13402:9345":{"id":"2:13402:9345","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3561:9263","str::slice_mut_unchecked":"1:15945:2227","`str`":"1:15945:2227"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:339:1862":{"id":"0:339:1862","crate_id":0,"name":"UnparkOneRequeueRest","span":{"filename":"src/parking_lot.rs","begin":[523,4],"end":[523,24]},"visibility":"default","docs":"Unpark one thread and requeue the rest onto the target queue.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13391:60035":{"id":"2:13391:60035","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3364:9628":{"id":"2:3364:9628","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3366:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13390:54145":{"id":"2:13390:54145","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12489:9984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6824:9125":{"id":"1:6824:9125","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6825:13245"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13443:60039":{"id":"2:13443:60039","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13018:9559","str::split":"1:15945:2227","str::split_terminator":"1:15945:2227","prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49475:9874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10914:214":{"id":"2:10914:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10916:181","2:10917:1808","2:10918:10895","2:10919:54688","2:10920:54689","2:10921:753","2:10922:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10905:9101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3253:211":{"id":"2:3253:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3718:137":{"id":"2:3718:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3720:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13434:14255":{"id":"2:13434:14255","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15939:2222","self::pattern":"2:13018:9559"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12810:9840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361:1873":{"id":"0:361:1873","crate_id":0,"name":"Skip","span":{"filename":"src/parking_lot.rs","begin":[542,4],"end":[542,8]},"visibility":"default","docs":"Don't unpark the thread and continue scanning the list of parked threads.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13403:60036":{"id":"2:13403:60036","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15945:2227","crate::ops::IndexMut":"2:3565:9639","str::slice_unchecked":"1:15945:2227"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3348:9623":{"id":"2:3348:9623","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3759:2348":{"id":"2:3759:2348","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3294:2574":{"id":"2:3294:2574","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6895:9127":{"id":"1:6895:9127","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6896:57127"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2782","5:785:2783","5:786:2784"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:359:1871":{"id":"0:359:1871","crate_id":0,"name":"Unpark","span":{"filename":"src/parking_lot.rs","begin":[539,4],"end":[539,10]},"visibility":"default","docs":"Unpark the thread and continue scanning the list of parked threads.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6993:9098":{"id":"1:6993:9098","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6994:57196"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[62,73],"end":[62,87]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::parking_lot::unpark_requeue","name":"unpark_requeue","id":"0:112:1602","glob":false}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/thread_parker/mod.rs","begin":[85,20],"end":[85,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::imp::thread_yield","name":"thread_yield","id":"0:451:2128","glob":false}},"2:10555:9232":{"id":"2:10555:9232","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10556:146","2:10557:13750","2:10558:58165"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:358:1603":{"id":"0:358:1603","crate_id":0,"name":"FilterOp","span":{"filename":"src/parking_lot.rs","begin":[537,0],"end":[546,1]},"visibility":"public","docs":"Operation that `unpark_filter` should perform for each thread.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:359:1871","0:361:1873","0:363:1875"],"impls":[]}},"2:3543:9536":{"id":"2:3543:9536","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:237","2:3546:206","2:3547:58665"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/thread_parker/mod.rs","begin":[85,48],"end":[85,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::imp::UnparkHandle","name":"UnparkHandle","id":"0:447:2141","glob":false}},"2:13393:10904":{"id":"2:13393:10904","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15956:2236"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319:1851":{"id":"0:319:1851","crate_id":0,"name":"have_more_threads","span":{"filename":"src/parking_lot.rs","begin":[505,4],"end":[505,31]},"visibility":"public","docs":"Whether there are any threads remaining in the queue. This only returns\ntrue if a thread was unparked.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"bool"}},"2:13458:2302":{"id":"2:13458:2302","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15939:2222","self::pattern":"2:13018:9559","str::matches":"1:15945:2227","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49611:9880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13508:60056":{"id":"2:13508:60056","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15939:2222"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49724:9887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13381":{"id":"2:13381","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12478:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13382:793","2:13383:2100","2:13384:14048","2:13385:60033","2:13387:60034","2:13390:54145","2:13391:60035","2:13392:304","2:13393:10904","2:13394:1808","2:13396:10895","2:13398:54688","2:13400:54689","2:13402:9345","2:13403:60036","2:13404:54709","2:13405:54710","2:13406:9904","2:13407:9588","2:13408:9350","2:13409:14256","2:13410:14254","2:13411:10369","2:13412:60037","2:13413:13999","2:13414:54725","2:13417:54406","2:13420:54408","2:13423:2767","2:13427:2732","2:13431:53937","2:13434:14255","2:13437:54719","2:13440:60038","2:13443:60039","2:13446:54721","2:13449:54723","2:13452:60040","2:13455:60041","2:13458:2302","2:13461:60042","2:13464:60043","2:13467:60044","2:13470:60045","2:13472:60046","2:13474:60047","2:13476:60048","2:13477:60049","2:13478:60050","2:13481:60051","2:13484:13654","2:13487:54726","2:13490:60052","2:13493:60053","2:13496:60054","2:13499:9785","2:13501:10027","2:13502:54083","2:13503:54084","2:13504:54085","2:13505:60055","2:13507:9121","2:13508:60056"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3153:74":{"id":"2:3153:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:2725"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5753:9089":{"id":"1:5753:9089","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5754:58277","1:5755:58279","1:5756:58278","1:5757:58280"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13499:9785":{"id":"2:13499:9785","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12957:9273","FromStr::Err":"2:12957:9273"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:9273","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:9273","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7829:9285":{"id":"1:7829:9285","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7830:57342"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:54408":{"id":"2:13420:54408","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13018:9559","prim@char":"1:15939:2222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:54719":{"id":"2:13437:54719","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:9559","prim@char":"1:15939:2222","str::split":"1:15945:2227"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49425:9843","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:9558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1599":{"id":"0:110:1599","crate_id":0,"name":"unpark_all","span":{"filename":"src/parking_lot.rs","begin":[805,0],"end":[850,1]},"visibility":"public","docs":"Unparks all threads in the queue associated with the given key.\n\nThe given `UnparkToken` is passed to all unparked threads.\n\nThis function returns the number of threads that were unparked.\n\n# Safety\n\nYou should only call this function with an address that you control, since\nyou could otherwise interfere with the operation of other synchronization\nprimitives.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["key",{"kind":"primitive","inner":"usize"}],["unpark_token",{"kind":"resolved_path","inner":{"name":"UnparkToken","id":"0:376:1608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"}}},"5:5837:10038":{"id":"5:5837:10038","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:2085"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2941:177":{"id":"2:2941:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2942:415","2:2943:2718","2:2944:2716","2:2945:2724"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3336:9617":{"id":"2:3336:9617","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3265:220":{"id":"2:3265:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3724:9503":{"id":"2:3724:9503","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3726:56586"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6897:9128":{"id":"1:6897:9128","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6898:57880"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"22:5406:7203":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:14566:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:4008:13147":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:4699:11101":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12442:11675":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:24631:2845":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"7:85:45057":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:14130:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:7736:9668":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:13028:9558":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3642:9181":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"20:0:1613":{"crate_id":20,"path":["smallvec"],"kind":"module"},"17:10061:13158":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:4362:2398":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:2163:2398":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13054:11849":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4145:6558":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7236:10576":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"22:6213:7619":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"22:1709:4451":{"crate_id":22,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:11318:9423":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:10222:2875":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"12:2040:2396":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12051:11592":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:47787:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:11323:9424":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:9368:11432":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:8860:2406":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"22:3970:6538":{"crate_id":22,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"9:27:10239":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:4227:6564":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:55912:9546":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:4506:12152":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"22:5945:4369":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:24068:9788":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"22:5284:7194":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1617:4442":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"22:4339:6577":{"crate_id":22,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11970:11581":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12946:11760":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:2733:10428":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3342:9620":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:56270:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"22:4038:6546":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:6032:10434":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:7212:2396":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"22:4309:6573":{"crate_id":22,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:9959:9827":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:50147:9894":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"22:662:3587":{"crate_id":22,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:8380:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6366:10339":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"14:244:12831":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12741:11723":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:51814:12613":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:46557:9670":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"22:1532:4434":{"crate_id":22,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12247:11625":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"1:12200:9331":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"22:5399:7202":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"22:5363:7198":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:10593:9101":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:3326:2422":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"22:81:3145":{"crate_id":22,"path":["libc","unix","DIR"],"kind":"enum"},"6:4470:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"22:1622:4444":{"crate_id":22,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11304:47385":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:10975:13186":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"22:5412:7204":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:14183:9191":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:3380:9233":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6085:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:624:3557":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"14:231:10032":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:3796:9509":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:5536:10105":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:48580:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6051:4370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:2399:13230":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"22:617:3557":{"crate_id":22,"path":["libc","unix","servent"],"kind":"struct"},"1:15905:13301":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1441:9254":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:7303:10578":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:51766:12612":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13386:11945":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:2310:10170":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:12210:9324":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:45846:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"22:5122:7141":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:49383:9869":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:46952:12589":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9005:47377":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46288:10009":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:5023:2335":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12568:11693":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:3549:12140":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:11225:9841":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:4477:12151":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:50352:9907":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:46684:9686":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5563:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:4426:9191":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:48461:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"22:603:3555":{"crate_id":22,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5386:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5292:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:6821:9123":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:37572:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:49377:9868":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:7158:10569":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:3676:9176":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3506:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"9:686:10189":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"11:54:10310":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:5407:10392":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12702:11150":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:10520:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:10510:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"22:3910:6533":{"crate_id":22,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:5532:9428":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10864:11478":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:45805:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:49575:9878":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:15963:2243":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"12:1203:10321":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:3730:9506":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:8115:2398":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"20:380:2400":{"crate_id":20,"path":["smallvec","SetLenOnDrop"],"kind":"struct"},"17:10071:10848":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8166:2840":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:7966:54148":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:47661:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:6895:9127":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10236:10759":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2941:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:53137:9741":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:6116:9430":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6491:10557":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:6858:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11118:47384":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"22:6915:8168":{"crate_id":22,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11779:11543":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11947:11575":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"22:5213:7189":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:3375:10088":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"22:3884:6531":{"crate_id":22,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13685:12050":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2401:13231":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:10283:2881":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:8160:2332":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:4995:12166":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2276:2815":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:7826:3267":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:4386:12148":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:50127:9896":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:4734:12158":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"9:157:10207":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:14748:9136":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:5255:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11996:9283":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"22:4356:6579":{"crate_id":22,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:699:2471":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:49629:9881":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"9:603:13293":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6464:10516":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:23732:9101":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:10884:9182":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:2843:10671":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12982:11791":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:51069:9725":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"22:5304:7195":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:2330:10153":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:8929:47376":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1653:9246":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1161:16880":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5241:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:50299:12602":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:3990:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:3759:2861":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:52995:9737":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:645:10872":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:886:10867":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:11437:9126":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:15952:2232":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:4157:10804":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:1472:9255":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:5295:45800":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:8942:9270":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"20:377:2399":{"crate_id":20,"path":["smallvec","Array"],"kind":"trait"},"18:812:10861":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:11186:9840":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"22:1546:4436":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:15957:2237":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11968:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:15962:2242":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7420:10524":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:3356:2423":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"22:1519:4432":{"crate_id":22,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:8582:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:52270:9716":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10279:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:13296:11922":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11572:11512":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:51092:9713":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:3262:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10635:11444":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:8160:2398":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"12:2419:9231":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6636:10520":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:3348:9623":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5505:10400":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:14186:9193":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5414:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13963:12116":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:51491:9742":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7649:9275":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"22:4451:6591":{"crate_id":22,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6691:10563":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:858:10865":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4133:6557":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:15156:9341":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:4504:9189":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12598:11699":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:48467:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:49245:9855":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:2187:9227":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6887:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:3972:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13370:11942":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5330:11429":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:13365:9434":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:2166:2396":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8508:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5359:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7856:10582":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:10615:2834":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12155:11613":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:22815:9101":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:6493:9218":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:5687:9135":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4371:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"22:6902:6728":{"crate_id":22,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4459:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:3714:12141":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:50366:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"12:2032:2861":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:47871:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:51390:9747":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"22:4298:6572":{"crate_id":22,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:605:3554":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:5986:9482":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:15964:2244":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11130:9140":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"22:3860:6529":{"crate_id":22,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:7766:9281":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:5029:12167":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:50119:9895":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:1476:2396":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:9649:13148":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13172:11892":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:6233:9436":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:867:10866":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:713:2715":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8673:9440":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:45936:9942":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:46656:9683":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"20:107:2396":{"crate_id":20,"path":["smallvec","Drain"],"kind":"struct"},"2:49425:9843":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:9622:11141":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"22:5266:7192":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:56296:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5815:10417":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"22:6927:8170":{"crate_id":22,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10052:13157":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:46431:9949":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7549:10512":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"12:2066:9227":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:47482:2861":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"22:4175:6560":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"22:3989:6540":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:5392:10001":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:13205:11903":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8227:11128":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:578:3550":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:3264:10681":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10529:12788":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:2314:10825":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11794:11549":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6424:10556":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11001:13188":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5400:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"22:5961:3420":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:2553:10157":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1486:9257":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"22:5351:7197":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"22:5514:7237":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:0:2203":{"crate_id":17,"path":["object"],"kind":"module"},"2:2850:2404":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:24083:12503":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:1311:10849":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:53344:12659":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13810:12075":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"22:5990:7608":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:755:61248":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:5889:11108":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"22:4247:6566":{"crate_id":22,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:48494:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4272:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:5149:2343":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:12129:9367":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1623:9254":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:1528:9252":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10095:10842":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:46342:10005":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:3360:9612":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:12736:9875":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:46235:12854":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:1658:4445":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:3364:9628":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:5360:10390":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:5987:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:661:10873":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"22:4219:6564":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:830:10863":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:821:10862":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4388:9405":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4095:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:7824:11110":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:4735:9151":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11434:11502":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:22802:9755":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:51198:12605":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:4242:11096":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:49904:9572":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:9849:61241":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:13729:9287":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"22:1514:4431":{"crate_id":22,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5167:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8515:2003":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:53364:12661":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10972:9185":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"22:625:3558":{"crate_id":22,"path":["libc","unix","protoent"],"kind":"struct"},"17:11337:10750":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11458:11503":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:8144:59885":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13497:11975":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:46257:9812":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:49393:9172":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10477:10762":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"22:6231:7620":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4425:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6812:8142":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:8176:10046":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"22:4058:6549":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:24665:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:3287:10682":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:637:11345":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"22:4075:6551":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"22:6850:6721":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:607:13145":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4419:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7295:10521":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46398:9816":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:3018:10675":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7378:10508":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"22:5371:7199":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:10285:2882":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:10638:2022":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8680:9442":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:5775:9092":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4215:6563":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:24495:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"22:1900:4594":{"crate_id":22,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11358:10749":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7453:10504":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:50131:9900":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:6824:9125":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"22:4207:6563":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:24767:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7738:10579":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"22:1752:4456":{"crate_id":22,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:3091:10734":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9799:11144":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:23044:9101":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:1497:9247":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:3984:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:52191:9728":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:48443:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2192:9228":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"9:722:10192":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:11166:9105":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:11628:11518":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:51303:12606":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:12161:9369":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:8428:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:8146:61103":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4317:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:584:3551":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:11921:9863":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"9:900:12461":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:4736:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:49475:9874":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:69:10066":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12537:11688":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:721:11347":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"22:6116:7613":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:53247:9724":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:10272:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7650:2744":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12480:11680":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4066:6549":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:2159:2861":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10788:13175":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10028:13155":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4306:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"12:466:61225":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13912:12105":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:5595:10405":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:15950:2230":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10584:10803":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:22839:9609":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:775:11345":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"12:353:12833":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:22543:59745":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:2866:10672":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:8197:2398":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:4443:2861":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:6764:9157":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:4350:12147":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6807:10565":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:38816:2711":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:5018:2334":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:15945:2227":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:6731:8845":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:50016:12931":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"0:0:1614":{"crate_id":0,"path":["parking_lot_core"],"kind":"module"},"6:4494:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:940:9250":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5191:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:9729:61236":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:15910:16882":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8323:2840":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:9476:11435":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:2462:13234":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13898:12098":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:6015:9486":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:46737:9689":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"22:1657:4446":{"crate_id":22,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:53286:9744":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:23090:9101":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"22:609:3556":{"crate_id":22,"path":["libc","unix","tms"],"kind":"struct"},"6:537:3546":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10868:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:51342:12607":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"22:4273:6569":{"crate_id":22,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10179:11443":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"22:3958:6537":{"crate_id":22,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:52348:9723":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"22:5979:7607":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:15959:2239":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7843:10581":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:4823:12161":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"14:216:45729":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:50384:9145":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11231:10813":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3341:10087":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"22:6060:4373":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:24563:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:4506:9190":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:51666:9704":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:22955:9605":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:12465:10020":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:11153:9174":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11220:9112":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:7257:11096":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:2991:10685":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"13:0:2194":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10081:10738":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:22545:59748":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"9:234:10215":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:6214:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:13602:9274":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:294:13142":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:1432:2862":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:3320:10735":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:46665:9684":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10666:16877":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:3166:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:3424:9533":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:1522:9251":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:11419:9849":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"12:2269:9255":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4112:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5231:12168":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:2484:47467":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10611:13173":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"9:1075:10258":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:7663:9276":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:10405:13247":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:49271:9856":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13465:11967":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"22:4515:6598":{"crate_id":22,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:5095:2341":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:1505:9249":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:542:10438":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2381:2350":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:3333:9388":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13924:12107":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11555:11511":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:11405:9848":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"22:5339:7196":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"22:584:3552":{"crate_id":22,"path":["libc","unix","winsize"],"kind":"struct"},"17:1236:13146":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:4306:2862":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8724:9443":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:49810:9564":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:8453:2575":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11196:9111":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:4203:6562":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10041:13156":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7894:10539":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:9173:9323":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"22:1525:4433":{"crate_id":22,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4331:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11482:11504":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12671:11715":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:8009:11128":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:10128:10845":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"22:4233:6565":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"22:4093:6553":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10721:13240":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:5228:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4183:6560":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12507:11683":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:49715:9122":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"22:5220:7190":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:2437:13232":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:15012:11156":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:3259:2347":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:8849:10809":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:5585:9761":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:11255:12728":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:12456:11677":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:3150:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:2543:10760":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:52383:9705":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:6718:10708":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13306:11923":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"12:895:10318":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:4511:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:5408:9421":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6518:10558":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"12:2036:2398":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12659:11714":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"22:3997:6541":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6999:10566":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5221:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5159:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:11094:2861":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"22:1576:4439":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:12021:11124":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:4364:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:3197:2800":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"22:4264:6568":{"crate_id":22,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:330:2398":{"crate_id":20,"path":["smallvec","IntoIter"],"kind":"struct"},"5:1011:2861":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:11118:2862":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:1646:9256":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"22:1555:4437":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"22:6168:7615":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:23997:9792":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10725:10160":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:2175:9225":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5420:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4005:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:3370:9225":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9296:11430":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12040:11591":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:53410:12665":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:57644:12679":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"22:4462:6592":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3407:9524":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:903:2852":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:1736:4454":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:5014:2333":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1665:4446":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:47703:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5282:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"12:843:9244":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:5978:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:45997:9648":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:51156:9734":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:9933:13153":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"9:1020:10257":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5969:3420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"12:2052:9225":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:10427:13219":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:6100:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:49145:9845":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:569:3549":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:10962:9318":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"9:469:13283":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"22:3897:6532":{"crate_id":22,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3724:9503":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:3839:11096":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11159:11492":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"22:4369:6581":{"crate_id":22,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11678:11525":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:53463:12668":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:49690:9884":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12208:11620":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:53501:12670":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:23736:9550":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:8313:9949":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:0:1329":{"crate_id":1,"path":["std"],"kind":"module"},"17:11726:11530":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:12775:9879":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9440:11434":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"12:432:10323":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:1463:9245":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:4428:9192":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:46:12411":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:4391:9406":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13772:12066":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13884:12096":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"22:4015:6543":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:8902:47375":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3317:2785":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3153:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:9659:61242":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:46618:9675":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:10967:9319":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:3263:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"22:4393:6584":{"crate_id":22,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:50003:9577":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11378:9433":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10571:13170":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:5273:10432":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10850:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"22:1736:4455":{"crate_id":22,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:11298:9843":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:3951:9224":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:4074:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"22:6885:6726":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:3488:10684":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:1676:4447":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:10160:11441":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6870:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:46413:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:994:10095":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:46298:10010":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13532:11986":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13506:11976":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:47559:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:1091:11096":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4241:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:6591:10561":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8522:9364":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:767:11355":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"9:749:10193":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:1584:4439":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:15951:2231":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13429:11953":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11588:11513":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:53200:9706":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:3145:10686":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"22:6092:7611":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:11392:9438":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:9846:640":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"1:2751:9141":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:4949:1719":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:12783:11731":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:11377:9846":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"22:592:3553":{"crate_id":22,"path":["libc","unix","linger"],"kind":"struct"},"1:13882:54154":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:432:1738":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"22:4025:6544":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9371:9213":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8414:2840":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:3087:9101":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"22:577:3551":{"crate_id":22,"path":["libc","unix","pollfd"],"kind":"struct"},"2:24199:9935":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13520:11983":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:5405:9420":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6569:10705":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6731:10709":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10844:10765":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:10697:9258":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:46963:12870":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12582:11695":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:51021:9745":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:3772:2862":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:48748:12872":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5736:10411":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1717:4451":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12220:1723":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:15689:11155":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"22:63:2653":{"crate_id":22,"path":["libc","unix","c_int"],"kind":"typedef"},"22:4323:6575":{"crate_id":22,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6391:10555":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"22:5261:7191":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:9240:2514":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:23427:9606":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"22:1715:4452":{"crate_id":22,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:10275:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:49234:9854":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"9:0:2196":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7453:11096":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:7379:2398":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:46535:9140":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6124:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:6257:2400":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12795:11738":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"22:598:3554":{"crate_id":22,"path":["libc","unix","sigval"],"kind":"struct"},"17:10200:13160":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:5769:9091":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7392:10509":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"12:787:9247":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12118:11608":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11962:11579":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13041:11843":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:46336:9122":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:5975:10544":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:5833:10036":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:10291:2884":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"22:5937:3462":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:3800:12143":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"22:4119:6556":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46696:1873":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:9065:47379":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:3200:9165":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:45913:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11147:12789":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:8391:10030":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:3335:9389":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:10448:10763":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"22:4254:6567":{"crate_id":22,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10317:10744":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11015:13189":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:519:3544":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:8263:9261":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:1045:2842":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:6471:9125":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2460:13233":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:46706:9687":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:50151:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4467:9194":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:3561:9263":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:48991:10024":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"22:1668:4447":{"crate_id":22,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12756:11727":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"12:1682:10333":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"20:147:2397":{"crate_id":20,"path":["smallvec","SmallVecData"],"kind":"enum"},"6:5407:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:1708:4450":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:7804:10513":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6644:10562":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:525:3545":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10304:10741":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:49316:9860":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:10687:9237":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"12:472:61226":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5210:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5522:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:47636:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4523:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2912:10673":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"22:4333:6576":{"crate_id":22,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13377:11944":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:7908:9540":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3476:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"22:3854:6528":{"crate_id":22,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:15944:2226":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"9:692:10191":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:10914:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5488:10399":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:5707:10408":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"12:1784:11094":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:5681:9133":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:2754:10427":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:45821:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:740:13140":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:49511:9846":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:3543:9536":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5855:10418":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4304:12146":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12010:11588":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:8384:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"14:189:13205":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:3195:10678":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11045:47383":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5528:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"8:0:1612":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13799:12074":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:32261:9038":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13098:11881":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"7:38:45050":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"22:6879:6725":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11411:9124":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13356:11940":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4431:6588":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11275:54078":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:10289:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:15409:12748":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:14898:11154":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:10704:17867":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:14498:9131":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:6491:9677":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:28016:9557":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"22:3949:6536":{"crate_id":22,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5197:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:7195:10572":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13488:11972":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:3172:10677":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4101:6553":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3488:9224":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:1563:4437":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:5085:2340":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:46372:10007":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5994:9483":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:3743:10797":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10543:11482":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:22526:59707":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:3064:10733":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"12:1121:9255":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:24733:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:48564:2879":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:1153:13223":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:45867:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:3392:10688":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:11328:11728":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:24699:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:1457:9256":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:12185:9447":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11616:11517":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:47913:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:49205:9851":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:4601:9198":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:53478:12669":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"22:6147:7614":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:15433:10350":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:15125:9339":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11932:11571":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11556:9300":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:5564:8169":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"22:1614:4443":{"crate_id":22,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13746:12057":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:24184:9977":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:24461:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6413:10338":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13819:12077":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:8138:10097":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"9:927:45153":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:3159:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:5421:10393":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:38753:9143":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:4724:9598":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"19:117:11341":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"12:2045:9224":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:3040:12493":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:7289:13236":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6964:2511":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13348:11937":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10106:10843":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:15169:9347":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"22:5274:7193":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10819:9223":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"22:4379:6582":{"crate_id":22,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11026:13190":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1235:10152":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"22:5520:6443":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:9210:47382":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6106:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:6475:2396":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"22:4503:6596":{"crate_id":22,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12287:11630":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:14744:13240":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:9186:10754":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6221:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9809:61243":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:56309:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:9743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:7342:10536":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10407:10820":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:3338:10425":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:1944:2173":{"crate_id":2,"path":["core","mem"],"kind":"module"},"12:2253:9254":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:49661:9175":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:1419:2861":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6087:10501":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:3939:12144":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:0:2202":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9088:47380":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:4905:2352":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:14204:9334":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7870:10510":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:823:11145":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:47611:2861":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7151:20227":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10468:1734":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:24014:12845":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:1630:4444":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9361:9558":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:3966:6537":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:7642:10071":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"22:5997:3329":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:1939:9224":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:4410:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:15062:12894":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:3041:10676":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:6688:10115":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"10:0:2197":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4671:12156":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:24055:9787":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4387:6582":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"22:4112:6555":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13240:11907":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6238:10506":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6002:9485":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7571:10500":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:802:10860":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:10293:2885":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:6935:8170":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:10455:11146":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4401:6584":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:46365:10006":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"22:3937:6534":{"crate_id":22,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:0:2204":{"crate_id":18,"path":["memchr"],"kind":"module"},"22:4417:6587":{"crate_id":22,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:49681:9883":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:3048:59914":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:1843:11096":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:48210:2880":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4255:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4281:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:8344:10139":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:5875:11105":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:48756:9645":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:4417:12149":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:7849:11116":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:5823:9095":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:7541:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:49350:9951":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:13746:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"12:1147:9256":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:3565:9639":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"22:4350:6578":{"crate_id":22,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13865:12091":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"22:504:3543":{"crate_id":22,"path":["libc","unix","group"],"kind":"struct"},"2:4712:9597":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"13:120:45695":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"22:4411:6586":{"crate_id":22,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12028:11589":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:14050:11151":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:10232:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"22:6020:4397":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:48203:2881":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"22:562:3549":{"crate_id":22,"path":["libc","unix","hostent"],"kind":"struct"},"5:8130:2396":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:48787:12873":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:51179:9738":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:24801:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:50996:12604":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3419:9530":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"22:518:3545":{"crate_id":22,"path":["libc","unix","timeval"],"kind":"struct"},"1:12205:9453":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:12957:9273":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:621:12782":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:11981:9282":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12373:11661":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4517:6597":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:48777:9299":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:2170:9224":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:49839:9570":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1635:9244":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:22566:59743":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:48039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:8121:10096":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11665:11524":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"22:5151:7183":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10353:10826":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9719:13149":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1540:4434":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:4704:12157":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:10876:9401":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:48217:2882":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:32362:58741":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"22:1721:4453":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"22:6206:7618":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:6733:8847":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:136:53669":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:0:1612":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"1:4660:9102":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:5753:10414":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9280:11429":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:45969:9508":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:4890:12163":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7333:10522":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:12082:9363":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6780:10564":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7174:10570":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"22:4317:6574":{"crate_id":22,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11653:11523":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"22:6844:6720":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"22:6177:7616":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:5788:11096":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:15921:54080":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:47997:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12725:11721":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10605:57340":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:15070:9288":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:4790:12160":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:45890:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:9264:11428":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10140:10765":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:3882:9184":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11367:9481":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:51261:9714":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10279:10738":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5312:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5379:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:24109:44430":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10892:9184":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:47829:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:1486:9224":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:47498:2398":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"15:248:10342":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:1723:4452":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:5809:9093":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11160:9175":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"22:1564:4438":{"crate_id":22,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5819:9094":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:46675:9685":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:11360:9105":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4026:9321":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12712:11720":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9655:57894":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:37596:2715":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12262:11628":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:48528:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:22902:9216":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10962:13185":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"22:150:3211":{"crate_id":22,"path":["libc","unix","FILE"],"kind":"enum"},"6:5347:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13627:12008":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6899:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"12:2059:9226":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9689:61245":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:14518:12888":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13637:12013":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:5766:10415":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:24030:12499":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11378:10748":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:3162:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11406:11499":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"12:1703:10334":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3321:1726":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12275:11629":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:1456:2113":{"crate_id":2,"path":["core","hint","spin_loop"],"kind":"function"},"1:3194:9382":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"12:777:2398":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:9761:9415":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2253:2816":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11464:20228":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:22564:59747":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7683:9277":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:11962:9280":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:53353:12660":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10266:10822":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:299:13143":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"22:4032:6545":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:9241:2513":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:2280:9256":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11640:11521":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:49982:9575":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:8362:12494":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:10912:13178":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:1744:4455":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46319:10004":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:3331:9615":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11147:9172":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:5753:9089":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12385:11663":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11108:9168":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:7711:9279":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:610:1389":{"crate_id":1,"path":["std","thread"],"kind":"module"},"16:7786:10514":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:15943:2225":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:46379:10008":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:52030:9736":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6744:10710":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7073:10567":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:923:10094":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:8379:10029":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:5314:11428":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:53384:12663":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:4515:10127":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"22:5420:7205":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:651:10869":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7823:10515":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11499:11508":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"12:2392:12406":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6028:4397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13282:11921":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7264:10519":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:45757:9537":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:10331:10765":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:51689:9707":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"20:393:2402":{"crate_id":20,"path":["smallvec","ToSmallVec"],"kind":"trait"},"16:6682:10517":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:53540:12671":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12343:11642":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:4767:9510":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:1501:9248":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:3759:2348":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:14876:11152":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:2262:10154":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"12:750:2861":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:3951:6535":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8959:9461":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:14513:12886":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:3503:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:46229:9122":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:12240:2418":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:3730:9183":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:23626:9215":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"22:3982:6539":{"crate_id":22,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"12:183:10326":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:1666:10332":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:3395:9518":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"22:4441:6590":{"crate_id":22,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"15:230:10341":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11643:9305":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12610:11701":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2178:9036":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:5192:2344":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10620:2838":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:51468:9739":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10211:13161":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:13857:13221":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2793:9142":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"12:0:2199":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:6014:10546":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:4262:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:48081:2357":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"22:5451:7206":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:22498:2715":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10599:13172":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:51044:9733":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:5433:10394":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:49284:9857":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:12215:9325":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:3701:9943":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"22:6077:7609":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13547:11990":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"22:4387:6583":{"crate_id":22,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:52108:9743":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13119:11886":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6185:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4193:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:8330:10138":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:51540:9727":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13446:11960":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"22:0:798":{"crate_id":22,"path":["libc"],"kind":"module"},"1:4465:9193":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11193:9107":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:10926:13182":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:1663:9247":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:3319:9385":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:6971:9129":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"22:6873:6724":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:3604:11361":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:3345:9394":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:6719:9092":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10829:9096":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:3772:12142":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:24177:12848":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13272:11920":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:46273:9814":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:32310:58744":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"6:3945:6534":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11847:11563":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:4922:12164":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9245:10745":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:1527:4432":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"22:1682:4448":{"crate_id":22,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:49196:9850":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:22511:59707":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:5384:10391":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:9769:61239":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7042:10720":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6072:10487":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:10221:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:4120:6555":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:15939:2222":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"14:56:11504":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"22:4285:6570":{"crate_id":22,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:49787:9560":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3632:2408":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:1637:9255":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13318:11926":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11082:10755":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:2968:10674":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9759:13150":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:3218:10679":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13477:11968":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:11096:9167":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:6893:9099":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11573:9301":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:5522:10401":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13394:11947":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:15954:2234":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:7761:10580":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9971:61237":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"22:4044:6547":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6910:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:15958:2238":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:9667:57892":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:4230:12145":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11714:11527":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:791:10859":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:23101:9605":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12195:11618":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46311:9887":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:7111:11110":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:11386:9422":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:46566:9671":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:5456:10395":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"22:5461:7207":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:6418:9676":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4726:54254":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:599:3553":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4083:6551":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"22:4125:6557":{"crate_id":22,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12917:11740":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:3905:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"22:6606:3500":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12771:11728":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:50173:2425":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:47541:2512":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:4641:12155":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:47473:2736":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:49529:9847":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46056:9770":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:2816:10690":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:3500:1785":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12234:11623":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12685:11716":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:730:61249":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:1079:9119":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:511:3543":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:1195:60759":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6993:9098":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9889:11145":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:7838:9753":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12467:11678":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1622:4443":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:15032:1723":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9896:61238":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12699:11719":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6239:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6176:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:12699:9872":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:1215:10151":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"22:4402:6585":{"crate_id":22,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12116:9366":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:47627:2398":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13540:11989":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:8463:10067":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:681:11497":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"12:162:1739":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:2910:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:670:3587":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:616:3556":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6021:10670":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11226:9242":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:2951:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9839:10765":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6269:10553":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:15940:2223":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:5831:9088":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:46647:9682":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13986:12120":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"9:963:10255":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8061:2840":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"6:4325:6574":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:12260:2419":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:46358:9886":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7119:10435":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:11372:9484":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:11223:9113":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:11993:11585":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:53425:12666":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:3892:6531":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46627:9681":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:8343:9552":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"9:41:10240":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:51125:9746":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:48795:12874":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:3978:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:15961:2241":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13453:11961":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:3241:10680":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:13511:13232":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:47619:2862":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10480:11148":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:46418:9948":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:13018:9559":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:23432:22038":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:4599:11099":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:47440:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4358:6578":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"12:952:9251":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:10281:2880":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:3044:59911":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:547:10412":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:6954:10034":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:15953:2233":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:13866:9279":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:15296:9420":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:51870:12615":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:2062:9157":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:46004:9649":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:15937:2220":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:1442:2398":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"22:6856:6722":{"crate_id":22,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:3329:2861":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:152:53670":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:9094:9448":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"22:1700:4450":{"crate_id":22,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:10394:11497":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:1760:4456":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"14:194:45723":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"12:1238:10322":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"22:5540:7238":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4394:9407":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12307:11636":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"7:0:1478":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:53325:9709":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"22:5970:7606":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:374:10086":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13780:12069":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"22:4363:6580":{"crate_id":22,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13062:11851":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11190:9106":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:4762:12159":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12073:11601":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:1607:2862":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4341:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:49557:9877":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:46011:2341":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:10681:16879":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"22:5202:7188":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"22:1588:4440":{"crate_id":22,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"13:232:12405":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:13927:58754":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:8863:2863":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:1694:10149":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5371:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:49825:9567":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12168:11450":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"18:668:10874":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13609:12005":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"22:5159:7184":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9794:11143":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:46548:9669":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:543:3547":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14000:12123":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13574:11997":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6219:10551":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:23833:9917":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4449:6590":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:49457:9873":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:563:3548":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"22:536:3547":{"crate_id":22,"path":["libc","unix","rusage"],"kind":"struct"},"2:3336:9617":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"22:5428:11335":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"22:6083:7610":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:850:10864":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6068:4373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6644:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10801:13177":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:6614:59116":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:8772:9451":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:12363:13233":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:4643:11101":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:48987:10025":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"22:6043:4370":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:6729:8843":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:11143:9174":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"22:5177:7185":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:1511:9250":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:10560:9644":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:13977:9280":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:2492:2818":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:213:11089":{"crate_id":20,"path":["smallvec","insert_many","DropOnPanic"],"kind":"struct"},"17:12221:11621":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11604:11514":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13192:11898":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:13094:9566":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5998:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:12074:2861":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7226:10575":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:8203:2398":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9886:13152":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:9748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10489:10766":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:50289:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:11391:9847":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:50396:9144":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:2200:11098":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13978:12117":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6605:10518":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:7697:9278":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:4448:12150":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:7829:9285":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:50307:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"4:0:2195":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"12:880:9224":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:7477:10525":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11981:11584":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:4654:9157":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"5:3362:9227":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7884:10511":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6136:10542":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12095:11602":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:3522:11357":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8873:13237":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:49306:9859":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:11263:9842":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:15946:2228":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3718:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:14583:58149":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12632:11712":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7024:10719":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6005:3329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:8954:10756":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:9495:54237":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:7250:10577":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:14761:9284":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:24091:12504":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:15274:9115":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:2598:13235":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:161:3212":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:15175:9348":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5469:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:32462:58743":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:5964:9480":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5927:10421":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:46727:9171":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11696:11526":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"12:933:9249":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:47550:2701":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:13043:9562":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13942:12113":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:13731:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3281:2710":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:4215:2396":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12494:11682":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13582:11998":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6893:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5945:3462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:1644:9245":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9600:61240":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:11822:11559":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13258:11915":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:3271:2346":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:51641:9722":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"12:2412:12409":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:610:3555":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7406:10507":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:897:10868":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4072:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"18:783:11345":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"22:4486:6594":{"crate_id":22,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:52077:9740":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:9097:9328":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12041:12744":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:5892:9477":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:12693:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:48224:2883":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:32121:9972":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:7366:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:1572:4438":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"22:4292:6571":{"crate_id":22,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:12489:9984":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:11336:9844":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:49931:9573":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:8393:2576":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11626:2861":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:51714:9708":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:5996:10545":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:5020:9104":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"9:776:10237":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:8422:9299":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:3506:10683":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10673:47567":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11809:11555":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10435:13163":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:3396:9228":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"22:4470:6593":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:51951:9748":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13788:12070":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10814:10800":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:3038:2782":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10403:10764":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4535:12153":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11767:11540":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:379:10325":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:15942:2224":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:5269:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4300:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7185:10571":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:50115:9892":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"9:996:10256":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"22:6891:6727":{"crate_id":22,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5185:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:50143:9893":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:1655:9257":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9528:9172":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:705:11345":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"22:3943:6535":{"crate_id":22,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4052:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:6873:9679":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:57623:12678":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:13733:12051":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13620:12006":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4040:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:5169:1720":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11080:9197":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:12142:11610":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"22:6862:6723":{"crate_id":22,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:9239:2515":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1729:4453":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13842:12090":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4478:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"22:530:3546":{"crate_id":22,"path":["libc","unix","rlimit"],"kind":"struct"},"1:786:11145":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:4050:9146":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:6208:10550":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7216:10574":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3294:2574":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:15334:9421":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:1597:2861":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:14573:9167":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10623:13174":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"22:4423:6588":{"crate_id":22,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"12:2398:12407":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11415:3329":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:13243:13220":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:13598:12001":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:12034:57983":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"16:6126:10547":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"22:6636:7981":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13163:11891":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:4035:9147":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:22766:9601":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"22:5183:7186":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:8087:9197":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"14:47:13205":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:49699:9885":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:46496:11118":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:5960:10423":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3509:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:47490:2862":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3742:9507":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4046:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11632:9304":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:2512:10821":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:1908:4594":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:51846:12614":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"22:1539:4435":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:14264:2022":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:14094:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:9208:13237":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:1547:4435":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:1492:9246":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4033:6544":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6768:10712":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2267:9640":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:8446:9224":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:9007:9269":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10420:10819":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5459:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:48740:9262":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:50123:9897":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:8298:10137":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:51230:9726":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4501:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:46934:12868":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:47507:2511":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"15:0:2201":{"crate_id":15,"path":["addr2line"],"kind":"module"},"22:3964:6382":{"crate_id":22,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:49407:9174":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4377:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13154:11887":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:3390:9235":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:50343:9906":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:15418:57341":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:12700:9381":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:4852:12162":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:11312:9422":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6554:10559":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:1533:4433":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6852:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5436:11335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10988:13187":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11835:11560":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:3881:6530":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:10730:9140":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"17:11738:11531":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:14043:9908":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:14523:9096":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:12408:11672":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:10594:2853":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:50186:9960":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"6:1554:4436":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"22:5392:7201":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:611:10870":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:3401:9521":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"12:1183:10320":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1674:9248":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"22:4104:6554":{"crate_id":22,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:13037:9561":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:9662:11142":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:6110:10541":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:2889:10691":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:88:3145":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:14189:9189":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"21:4:1612":{"crate_id":21,"path":["cfg_if","cfg_if"],"kind":"macro"},"2:49968:9574":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:3352:2421":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"22:4493:6595":{"crate_id":22,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:51437:9735":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4742:9170":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:11254:10811":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:897:2851":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:49297:9858":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10458:11394":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9034:47378":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13180:11893":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:1618:2398":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:23099:9702":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:24147:44431":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6636:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13564:11994":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6155:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4060:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11750:11532":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10149:13152":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5632:10406":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"22:5378:7200":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11100:10815":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12645:11713":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:12810:9840":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:6591:9137":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13590:12000":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:8106:10042":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5130:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7205:10573":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:3368:9630":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"22:571:3550":{"crate_id":22,"path":["libc","unix","iovec"],"kind":"struct"},"17:9551:10810":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6864:6722":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"22:1692:4449":{"crate_id":22,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"22:4431:6589":{"crate_id":22,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"22:6243:2651":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","c_long"],"kind":"typedef"},"12:979:9253":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:11140:9171":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11915:11565":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"12:114:61229":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9799:13151":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:56283:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46448:9950":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:46506:13222":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:14892:11153":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:49724:9887":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:4869:2351":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:8867:9538":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:24529:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:47745:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:15444:10350":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:5415:9157":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:14033:9511":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"22:1728:4454":{"crate_id":22,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:13248:44660":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:6614:3500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:49214:9852":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4439:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11199:11493":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"12:869:2396":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:5274:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10938:13183":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:15141:9340":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:4955:12165":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:46918:12867":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:1156:13225":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"22:5247:7170":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4073:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3555:9180":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:49856:9571":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:3258:2573":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:5472:10398":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:22713:9608":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:838:9561":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"22:556:3548":{"crate_id":22,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"22:1650:4445":{"crate_id":22,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46747:9680":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:3253:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:10824:9381":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"22:6804:8142":{"crate_id":22,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:49611:9880":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10117:10844":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"12:399:10324":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6200:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:52534:9729":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:22896:9214":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:3652:11126":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10253:10823":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:11087:9199":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:10905:9101":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"22:4052:6548":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:5580:10404":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:8250:9231":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:45976:9148":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:51323:9703":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"20:168:1721":{"crate_id":20,"path":["smallvec","SmallVec"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:12145:9368":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1596:4440":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:13781:59794":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:45729:2864":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:53448:12667":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:3429:10430":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:4614:12154":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:48765:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46943:9198":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11616:9302":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:2181:9226":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"22:4156:6559":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"22:5189:7187":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4164:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:1136:1990":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:6353:9437":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:32302:9039":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:6897:9128":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6176:10549":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:2794:10429":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:8347:9554":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"22:3873:6530":{"crate_id":22,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:13048:9563":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12182:11617":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:46586:9673":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:24835:9921":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"22:1594:4441":{"crate_id":22,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"22:6192:7617":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46595:9674":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"22:5233:7169":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:12023:54077":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:10287:2883":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:53399:12664":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:1522:4431":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:0:2198":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4127:6556":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:48506:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:6091:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5717:10410":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46526:9667":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6949:10716":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:46244:9811":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"22:1609:4442":{"crate_id":22,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"12:2072:9228":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5790:10416":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:12011:9284":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9943:61244":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11482:9289":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10558:13167":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:32296:2407":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"9:809:9299":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8444:10145":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:51618:9719":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:5761:9090":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:4633:9157":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:2218:10090":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"22:512:3544":{"crate_id":22,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:47955:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:3385:9234":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:3997:6540":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:2777:10156":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6252:10552":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:3039:59912":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:3261:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:3957:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:13904:9281":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:7320:13236":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"22:4087:6552":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4717:2875":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:11533:9299":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"22:5555:7239":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:3489:2349":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10887:11479":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5561:10403":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13760:12063":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:14536:12893":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:1700:4449":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:6672:10105":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6166:10548":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:46925:9270":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"22:6098:7612":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"12:1162:10319":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4395:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:13402:11949":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9404:11433":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10656:11446":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:49224:9853":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6101:10499":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5548:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"22:154:3212":{"crate_id":22,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:3918:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:695:10875":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46604:12863":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9332:10746":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:12090:2398":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:9954:9826":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7467:10505":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:3713:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5346:10502":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:46576:9672":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:169:53671":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1450:9244":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7146:10568":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"22:4137:6558":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9746:9414":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:7928:9648":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:4294:9200":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:7961:2839":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:510:13144":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:23904:9918":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:3415:9528":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12431:11673":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:49365:9764":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:49671:9882":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"20:399:2392":{"crate_id":20,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"12:1103:9254":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:3118:10687":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:49706:9886":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10516:10767":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4293:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:1256:9257":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:4678:9166":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10836:9097":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:3862:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6577:10560":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:12096:9365":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:22892:9101":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:13822:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:3088:9611":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:632:3558":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:15355:9428":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11298:12884":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:12552:11692":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:5837:10038":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:48476:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:1021:2840":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6357:10554":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13331:11932":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11519:11509":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6152:10503":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6923:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:3868:6529":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:15949:2229":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4347:6577":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7279:10721":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1602:4441":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3970:11096":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10001:47429":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"22:4005:6542":{"crate_id":22,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:15956:2236":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"12:2404:61224":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13933:12111":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9133:47381":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:15960:2240":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:13530:54153":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:24597:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:14985:58151":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:14:2305":{"crate_id":2,"path":["core","write"],"kind":"macro"},"18:745:61247":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46716:9688":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"12:928:9246":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:5672:10407":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"22:4509:6597":{"crate_id":22,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"12:815:9248":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"12:971:9252":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"14:0:2200":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:24212:9934":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:5140:2342":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11277:11494":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:53373:12662":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:10555:9232":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:5611:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6620:10703":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:2773:10697":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"15:269:10346":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:14972:9283":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:23975:12497":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:25205:9818":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:52317:9720":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:764:2862":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:1534:9253":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:1690:4448":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:49326:9861":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:51284:9718":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7475:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:14959:9282":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:52741:9749":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10950:13184":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:9961:13154":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4023:6543":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9162:10812":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:12019:12885":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:11186:12790":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:3365:10426":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:47567:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11539:11510":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:591:3552":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10502:12787":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10224:13162":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5953:4369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"22:4065:6550":{"crate_id":22,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:49993:9576":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"22:524:2662":{"crate_id":22,"path":["libc","unix","timespec"],"kind":"struct"},"22:4185:6561":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"22:4195:6562":{"crate_id":22,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3411:9526":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:157:3211":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:3265:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:3156:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6881:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:53074:9721":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:14549:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:10377:10824":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:51587:9715":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12327:11637":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9574:10757":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:2905:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5428:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8837:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10827:10801":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:3373:9513":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13221:11906":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:50135:9898":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:15955:2235":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:23638:59711":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:11888:9862":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:50975:12603":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:46636:9678":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"22:6628:7980":{"crate_id":22,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:1194:16881":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13554:11991":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:15938:2221":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:14993:2418":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:2945:10696":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:7620:2400":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:3336:9226":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"14:250:12360":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:531:2662":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:3894:10146":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:23051:22019":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:12759:9876":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:50139:9899":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"12:856:9245":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"9:1056:10250":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:24131:44422":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7514:10523":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"14:11:13205":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4013:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12521:11686":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:52884:9717":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"}},"external_crates":{"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"libc","html_root_url":null},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"smallvec","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}